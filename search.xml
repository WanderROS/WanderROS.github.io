<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Instances-0</title>
    <url>/2020/04/27/Algorithm-Instances-0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>算法一直都让人诟病，没办法，确实真的很难，但是也很有意思，这里的算法只能说是为了学习算法而算法，只是可能是一些笔试题的算法题，不一定有实用性，后面深入还是写解决实际问题的算法，这里主要是锻炼写算法的思维！基础知识决定了技术高度，想要快速做出点事情，前提条件就是基础能力过硬！<strong><em>推荐书籍：《程序员的算法趣题》· [日] 增井敏克著 绝云译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="回文数字"><a href="#回文数字" class="headerlink" title="回文数字"></a>回文数字</h2><ol>
<li><p>什么是回文数？不知道就去百度吧！</p>
</li>
<li><p><strong>问题：</strong>求用十进制、二进制、八进制表示都是回文数的所有数字中， 大于十进制数 10 的最小值；</p>
</li>
<li><p>思考：看到这些题目的时候，你是不是觉得很简单啊，但是有一个问题，就是你思考了吗？🤔的够了吗？然后就是你有没有考虑到一些优化的点，比如回文数字，高位不可能有0，那么这个数字肯定不是偶数，偶数直接就排除了，然后你的算法就可以优化很多！</p>
</li>
<li><p>作为实际开发，能用内部库就不要自己实现，主要就是逻辑上的实现，这样你写出的代码就不会重复造轮子！</p>
</li>
<li><p>代码（没注释，但是很容易看懂啊！）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reverseequs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isrevequals</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((num % <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String str10 = Integer.toString(num, <span class="number">10</span>);</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer(str10);</span><br><span class="line">            <span class="comment">//  System.out.println(str10+" "+sb.reverse());</span></span><br><span class="line">            <span class="keyword">if</span> (!str10.equals(sb.reverse().toString())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String str02 = Integer.toString(num, <span class="number">2</span>);</span><br><span class="line">                sb = <span class="keyword">new</span> StringBuffer(str02);</span><br><span class="line">                <span class="comment">// System.out.println(str02+" "+sb.reverse());</span></span><br><span class="line">                <span class="keyword">if</span> (!str02.equals(sb.reverse().toString())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String str08 = Integer.toString(num, <span class="number">8</span>);</span><br><span class="line">                    sb = <span class="keyword">new</span> StringBuffer(str08);</span><br><span class="line">                    <span class="comment">//    System.out.println(str08+" "+sb.reverse());</span></span><br><span class="line">                    <span class="keyword">if</span> (!str08.equals(sb.reverse().toString())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isrevequals(i)) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>各种语言的转换接口：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>语言</th>
<th>二进制数</th>
<th>八进制数</th>
<th>十六进制数</th>
</tr>
</thead>
<tbody><tr>
<td>Ruby</td>
<td>to_s(2)</td>
<td>to_s(8)</td>
<td>to_s(16)</td>
</tr>
<tr>
<td>PHP</td>
<td>decbin</td>
<td>decoct</td>
<td>dechex</td>
</tr>
<tr>
<td>Python</td>
<td>bin</td>
<td>oct</td>
<td>hex</td>
</tr>
<tr>
<td>JavaScript</td>
<td>toString(2)</td>
<td>toString(8)</td>
<td>toString(16)</td>
</tr>
<tr>
<td>Java</td>
<td>toBinaryString</td>
<td>toOctalString</td>
<td>toHexString</td>
</tr>
<tr>
<td>C#</td>
<td>Convert.ToString</td>
<td>Convert.ToString</td>
<td>Convert.ToString;ToString(“X”)</td>
</tr>
</tbody></table>
<ol start="7">
<li><strong>写代码的时候一定要注意你用的函数是否是正确的，否则可能思维是正确的，但是得不到正确的结果！</strong></li>
</ol>
<h2 id="数列的四则运算"><a href="#数列的四则运算" class="headerlink" title="数列的四则运算"></a>数列的四则运算</h2><ol>
<li><p>描述：在一个数字中插入加减乘除算数符号，计算得到的结果是原数字的逆序；</p>
</li>
<li><p>要求：求位于1000~9999中满足上述要求的数；</p>
</li>
<li><p>可以考虑内置的计算函数；</p>
</li>
<li><p>算法实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">seqcompose</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws ScriptException &#123;</span><br><span class="line">        computeGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> computeGet() throws ScriptException &#123;</span><br><span class="line">        ScriptEngineManager manager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">        ScriptEngine se = manager.getEngineByName(<span class="string">"js"</span>);</span><br><span class="line">        <span class="built_in">String</span>[] op = &#123;<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>, <span class="string">""</span>&#125;;</span><br><span class="line">        <span class="built_in">String</span> input;</span><br><span class="line">        <span class="built_in">String</span> output;</span><br><span class="line">        StringBuilder sb;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1000</span>; i &lt;= <span class="number">9999</span>; ++i) &#123;</span><br><span class="line"></span><br><span class="line">            output = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//转换成字符串处理</span></span><br><span class="line">            input = Integer.toString(i);</span><br><span class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; op.length; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; op.length; ++k) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (int l = <span class="number">0</span>; l &lt; op.length; ++l) &#123;</span><br><span class="line">                        output = input.charAt(<span class="number">0</span>) + op[j] + input.charAt(<span class="number">1</span>) + op[k] + input.charAt(<span class="number">2</span>) + op[l] + input.charAt(<span class="number">3</span>);</span><br><span class="line">                        <span class="comment">//System.out.println(output);</span></span><br><span class="line">                        <span class="keyword">if</span> (output.length() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                            sb = <span class="keyword">new</span> StringBuilder(input);</span><br><span class="line">                            <span class="comment">//System.out.println(input+" "+ sb.reverse().toString()+" "+output + " "+se.eval(output));</span></span><br><span class="line">                            <span class="keyword">if</span> (sb.reverse().toString().equals(se.eval(output).toString())) &#123;</span><br><span class="line">                                System.out.println(input);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>比较严重的问题：算法的执行性效率非常低！</strong></p>
</li>
<li><p>有没有什么优化的方法？？？</p>
</li>
</ol>
<h2 id="翻牌"><a href="#翻牌" class="headerlink" title="翻牌"></a>翻牌</h2><ol>
<li><p>描述：100张写着数字1~100的牌，并按顺序排列着，最开始所有人都是背面朝上放置，然后某个人从第2张牌开始，隔 1 张牌翻牌。然后第 2,4, 6, …, 100 张牌就会变成正面朝上，接下来的人从第3张牌开始，隔2张翻牌，然后第4个人从第4张开始，隔3张牌翻，以此类推；</p>
</li>
<li><p>要求：求当所有牌不再变动时，所有背面朝上的牌的数字；</p>
</li>
<li><p>注意：这里看了之后直接进行了编程，因为题目相对比较简单，但是出现了结果不对，因为隔着的理解问题，<strong>审题或者看需求进行编程非常重要！</strong></p>
</li>
<li><p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">wander</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">flipCards</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Flip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> Flip() &#123;</span><br><span class="line">        <span class="comment">// 初始化牌</span></span><br><span class="line">        boolean[] cards = <span class="keyword">new</span> boolean[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; cards.length; ++i) &#123;</span><br><span class="line">            cards[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt; cards.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            cards[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">3</span>; i &lt; cards.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int j = i; j &lt; cards.length; j += i) &#123;</span><br><span class="line">                cards[j] = !cards[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; cards.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cards[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="切分木棒"><a href="#切分木棒" class="headerlink" title="切分木棒"></a>切分木棒</h2><ol>
<li><p>描述：假设要把长度为 n 厘米的木棒切分为 1 厘米长的小段，但是 1 根木棒只能由 1 人切分，当木棒被切分为m=3 段后，可以同时由 3 个人分别切分木棒；</p>
</li>
<li><p>要求：求当 n ＝ 20，m ＝ 3 时的最少切分次数； 求当 n ＝ 100，m ＝ 5 时的最少切分次数；</p>
</li>
<li><p>思路就是尽可能多的用人，每个环节能用全部的人绝对不少用，逆向思维，反向黏贴木棒；</p>
</li>
<li><p>代码（JavaScript）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CutLogs</span>(<span class="params">LogLength,personNums</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(LogLength).fill(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">var</span> count_cut=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(arr.length&gt;<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">var</span> arr_stick=[];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;(i&lt;personNums) &amp;&amp;(arr.length&gt;<span class="number">1</span>);++i)</span><br><span class="line">       &#123;</span><br><span class="line">           arr_stick[i]=arr[<span class="number">0</span>]+arr[<span class="number">1</span>];</span><br><span class="line">           arr.shift();</span><br><span class="line">           arr.shift();</span><br><span class="line">       &#125;</span><br><span class="line">     <span class="comment">//  console.log('arr : ' + arr);</span></span><br><span class="line">       count_cut++;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr_stick.length;++i)</span><br><span class="line">       &#123;</span><br><span class="line">           arr.push(arr_stick[i]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count_cut;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num=CutLogs(<span class="number">100</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="兑换硬币"><a href="#兑换硬币" class="headerlink" title="兑换硬币"></a>兑换硬币</h2><ol>
<li><p>以安置在公交上的零钱兑换机为背景，这个机器可以用纸币兑换到 10 日元、50 日元、100 日元和 500 日元硬币的组合，且每种硬币的数量都足够多，兑换时，允许机器兑换出本次支付时用不到的硬币，并且只允许机器最多兑换出 15 枚硬币；</p>
</li>
<li><p>要求：求兑换 1000 日元纸币时会出现多少种组合？注意，不计硬币兑出的先后顺序；</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exchangeCoins</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exCoins</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] coins=&#123;<span class="number">500</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">15</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">15</span>;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">15</span>;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">15</span>;++l)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(coins[<span class="number">0</span>]*i+coins[<span class="number">1</span>]*j+coins[<span class="number">2</span>]*k+coins[<span class="number">3</span>]*l==<span class="number">1000</span>&amp;&amp;i+k+l+j&lt;=<span class="number">15</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        exCoins();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>没什么难度的代码，但是写出这种代码，个人觉得好恶心！</p>
</li>
</ol>
<h2 id="改版-考拉兹猜想"><a href="#改版-考拉兹猜想" class="headerlink" title="(改版)考拉兹猜想"></a>(改版)考拉兹猜想</h2><ol>
<li><p>考拉兹猜想：对自然数 n 循环执行如下操作</p>
<ul>
<li>n 是偶数时，用 n 除以 2</li>
<li>n 是奇数时，用 n 乘以 3 后加 1</li>
<li>如此循环操作的话， 无论初始值是什么数字， 最终都会得到 1（会进入1 → 4 → 2 → 1 这个循环）；</li>
</ul>
</li>
<li><p>修改需求，初始值假设为偶数，也用n 乘以 3 后加 1，但只是在第一次这样操作，后面的循环操作不变；</p>
</li>
<li><p>要求：求在小于 10000 的偶数中，像上述的 2 或者 4 这样“能回到初始值的数”有多少个？</p>
</li>
<li><p>分析：这个数如果进入1 → 4 → 2 → 1 这样的循环的话，那它肯定不符合要求，因此是判断一个数是不是考拉兹猜想修改版的结束条件，然后判断值有没有回到初始值，回到了则是考拉兹改版数；</p>
</li>
<li><p>代码（java）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaolaziGuess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Kaolazi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10000</span>;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=i*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(temp!=<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp=temp&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp=temp*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp==i)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Kaolazi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果：34</p>
</li>
</ol>
<h2 id="日期的二进制转换"><a href="#日期的二进制转换" class="headerlink" title="日期的二进制转换"></a>日期的二进制转换</h2><ol>
<li><p>把年月日表示为 YYYYMMDD 这样的 8 位整数， 然后把这个整数转换成二进制数并且逆序排列，再把得到的二进制数转换成十进制数，求与原日期一致的日期；</p>
</li>
<li><p>要求：求得的日期要在上一次东京奥运会（1964 年 10 月 10 日）到下一次东京奥运会（预定举办日期为 2020 年 7 月 24 日）之间；</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateBinary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DateReverseSame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String binaryDate,reverseBinary;</span><br><span class="line">        StringBuffer sb;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">64</span>, Calendar.OCTOBER,<span class="number">10</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        Date dateEnd = <span class="keyword">new</span> Date(<span class="number">120</span>,Calendar.JULY,<span class="number">24</span>);</span><br><span class="line">       <span class="comment">// date.setDate(date.getDate()+1);</span></span><br><span class="line">       <span class="comment">// date.setDate(date.getDate()+1);</span></span><br><span class="line">       <span class="comment">// date.setDate(date.getDate()+1);</span></span><br><span class="line"></span><br><span class="line">        Long num;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            num=Long.parseLong(simpleDateFormat.format(date),<span class="number">10</span>);</span><br><span class="line">           <span class="comment">// System.out.println(num);</span></span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">20200724</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            binaryDate=Long.toBinaryString(num);</span><br><span class="line">            sb=<span class="keyword">new</span> StringBuffer(binaryDate);</span><br><span class="line">            reverseBinary=sb.reverse().toString();</span><br><span class="line">           <span class="comment">// System.out.println(binaryDate);</span></span><br><span class="line">           <span class="comment">// System.out.println(Long.parseLong(reverseBinary,2));</span></span><br><span class="line">            <span class="keyword">if</span>(Long.parseLong(reverseBinary,<span class="number">2</span>)==num)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">            date.setDate(date.getDate()+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DateReverseSame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">19660713</span></span><br><span class="line"><span class="number">19660905</span></span><br><span class="line"><span class="number">19770217</span></span><br><span class="line"><span class="number">19950617</span></span><br><span class="line"><span class="number">20020505</span></span><br><span class="line"><span class="number">20130201</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：需要注意时间，这里直接使用了Java的时间库，里面的函数有抛弃，但是这样相对简单！</p>
</li>
</ol>
<h2 id="轮盘的最大值"><a href="#轮盘的最大值" class="headerlink" title="轮盘的最大值"></a>轮盘的最大值</h2><ol>
<li><p>流传较广的轮盘数字排布和设计有“欧式规则”和“美式规则”两种。下面我们要找出“连续 n 个数字的和”最大的位置；</p>
</li>
<li><p>欧式规则和美式规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] arrAmer=&#123;<span class="number">0</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">34</span>, <span class="number">6</span>,<span class="number">27</span>, <span class="number">13</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">24</span>,<span class="number">16</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">31</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">7</span>,<span class="number">28</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">26</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> [] arrEurp=&#123;<span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">00</span>, <span class="number">27</span>, <span class="number">10</span>,<span class="number">25</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">35</span>, <span class="number">14</span>, <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要求：当 2 ≤ n ≤ 36 时，求连续 n 个数之和最大的情况，并找出满足条件“欧式规则下的和小于等于美式规则下的和”的 n 的个数；</p>
</li>
<li><p>注意：轮盘是圆形的</p>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arrAmer=&#123;<span class="number">0</span>, <span class="number">32</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">34</span>, <span class="number">6</span>,<span class="number">27</span>, <span class="number">13</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">24</span>,<span class="number">16</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">31</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">7</span>,<span class="number">28</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">26</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> [] arrEurp=&#123;<span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">00</span>, <span class="number">27</span>, <span class="number">10</span>,<span class="number">25</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">35</span>, <span class="number">14</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> countEurMinAmer=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nSumAmer=<span class="number">0</span>,nSumEurp=<span class="number">0</span>,nSumAmerTemp=<span class="number">0</span>,nSumEurpTemp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">36</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            nSumAmer=<span class="number">0</span>;</span><br><span class="line">            nSumEurp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">36</span>;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                nSumAmerTemp=<span class="number">0</span>;</span><br><span class="line">                nSumEurpTemp=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(k+j&gt;=<span class="number">36</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nSumAmerTemp+=arrAmer[k+j-<span class="number">36</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        nSumAmerTemp += arrAmer[k + j];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nSumAmerTemp&gt;=nSumAmer) &#123;</span><br><span class="line">                    nSumAmer=nSumAmerTemp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;i;++l)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(l+j&gt;=<span class="number">36</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        nSumEurpTemp+=arrEurp[l+j-<span class="number">36</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        nSumEurpTemp += arrEurp[l + j];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nSumEurpTemp&gt;=nSumEurp) &#123;</span><br><span class="line">                    nSumEurp=nSumEurpTemp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nSumEurp&lt;=nSumAmer)</span><br><span class="line">            &#123;</span><br><span class="line">                countEurMinAmer++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(countEurMinAmer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：9</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>算法吸引的人是你通过算法解决某一个实际的问题，虽然这个问题可能不用计算机你也能完成，但是当使用计算机解决了，你就能够进行整体的迁移！形成了优秀的编程习惯还有良好的思维习惯！那么你的算法就可以逐步提升了！<strong>Keep Moving，Keep Learning！</strong></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Arduino Quick Start</title>
    <url>/2020/05/30/Arduino-Qucik-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Arduino 是世界上最成功（有些人可能对此持有异议）的开源硬件项目之一。Arduino 团队公开其设计之后，包括意大利、巴西、中国、荷兰、印度和美国在内的很多国家，都在生产基于这种设计的开发板！Arduino 面向的是艺术家和热衷于捣鼓东西的人，而不是那些对技术细节感兴趣以及痴迷于项目规划、技术规范与操作说明书的工程师，但是还有一款黑客级别的Teensy项目也是基于arduino项目的，这一点，让我特别关注arduino！<strong>推荐书籍：《Arduino 技术指南 》· [美] John M. Hughes 著 武传海 译</strong>   </p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><ol>
<li><p>Arduino 的诞生源于Massimo Banzi 与 David Cuartielles 等人想开发这样一种简单设备：  能够很容易地连接到其他各种设备上，应当很容易进行编程，并且价格也要便宜；</p>
</li>
<li><p>Arduino 每年都在不断推出新型开发板，新型 Arduino 开发板会采用更强大的处理器，拥有更大内存，还配有性能大幅增强的输入 / 输出（I/O）功能，但它们大部分都会采用相同的引脚排列，并且都与现有的扩展板（shield）以及各种扩展组件（比如传感器、继电器、驱动器）协同工作；</p>
</li>
<li><p>Arduino 的核心是处理器与预安装的 Bootloader；</p>
</li>
<li><p>Arduino 开发板不能使用微控制器提供的所有功能；</p>
</li>
<li><p>Arduino BootLoader 实现了一种特殊的协议，该协议让 BootLoader 识别出 Arduino IDE，并允许用户把程序数据从开发主机传送到目标开发板；</p>
</li>
<li><p>Mac上安装<a href="https://www.arduino.cc/en/Guide/MacOSX" target="_blank" rel="noopener">Arduino IDE</a>  </p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8613e510e7b52bc33bb318f9807636e3-34554" alt="Arduino 软件组织"></p>
</li>
<li><p>arduino程序结构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/265a801604e3c14fd1b8b5a0bda51207-159166" alt="arduino程序结构"></p>
</li>
</ol>
<h2 id="arduino库"><a href="#arduino库" class="headerlink" title="arduino库"></a>arduino库</h2><ol>
<li>Arduino IDE 自身带有一系列函数库，方便用户在程序中使用；</li>
<li>EEPROM 库用于支持对 AVR 内置 EEPROM 的读写操作，并可实现永久性存储；</li>
<li>Ethernet 库提供了与 Arduino Ethernet 扩展板进行交互的必需功能 ；</li>
<li>Firmata 库提供了使用类似 MIDI 的协议，使得在 Arduino 与主机应用之间进行串行通信成为可能；</li>
<li>GSM 库和 GSM 扩展板一起用于连接到 GSM/GPRS 网络；</li>
<li>LiquidCrystal库允许 Arduino 开发板控制液晶显示器（LCD）模块；</li>
<li>SD 库对读写 SD 闪存卡提供支持，包含全尺寸与微型 SD 类型；</li>
<li>Servo 库提供一系列函数，用于控制伺服电机，比如遥控飞机中的那些电机 ；          </li>
<li>SPI 库支持使用串行外围接口（SPI）总线，以便与兼容 SPI 的外围设备进行通信；</li>
<li>SoftwareSerial 库在 Arduino 的数字 I/O 引脚上实现了基于软件的串行通信 ；</li>
<li>Wi-Fi 库让 Arduino 拥有连接无线网络的能力； </li>
<li>针对 Arduino 开发板，有许多第三方库可以使用！   </li>
</ol>
<h2 id="其他还需要知道"><a href="#其他还需要知道" class="headerlink" title="其他还需要知道"></a>其他还需要知道</h2><ol>
<li>基础的电路知识</li>
<li>电子元器件的知识</li>
<li>传感器的知识</li>
<li>查找github相关库的能力</li>
<li>当然会的越多越好（废话）</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写这部分内容，主要是有本书，然后还有Teensy相关的内容后续会迁移到博客中，我不是转移到软件开发就结束了我的硬件生活！公司的硬件开发人员让我不想在公司开发硬件相关的东西，产品和兴趣点是不同的！</p>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
  </entry>
  <entry>
    <title>Bootstrap Quick Start</title>
    <url>/2020/05/26/Bootstrap-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Bootstrap 是前端开发中应用非常广泛的一个框架，最早是 Twitter 公司内部的一个工具 ， 开源之后迅速得到了各方的认可。Bootstrap为大多数标准的 UI 设计场景提供了用户友好、跨浏览器的解决方案。Bootstrap 把 HTML、CSS 和 JavaScript 组合起来， 为构建稳定的网站提供了基础设施， 也能提高开发效率。*<em>推荐书籍：《Bootstrap 实战》· [美]  David Cochran Ian Whitley 著 李松峰 译 《Bootstrap 用户手册》· [美]  Jake Spurlock 著 李松峰 译 *</em></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li>移动优先的响应式网格</li>
<li>基于 Web 字体的图标，适用于移动及高密度屏幕</li>
<li>不再支持 IE7，标记和样式更加简洁高效</li>
</ol>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><ol>
<li><p>下载地址：<a href="https://github.com/twbs/bootstrap/releases" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/releases</a></p>
</li>
<li><p>在开发期间，保持所有 Bootstrap 的插件都可用，这样就不会在测试的时候缺失而看不到效果。</p>
</li>
<li><p>CDN（Content Delivery Network，内容分发网络）可以为网站缓存静态资源，加速网页刷新。</p>
</li>
<li><p>HTML5 文档类型声明：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>meta 标签：</p>
<ul>
<li><p>用于指定字符集</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>告诉 IE 使用最新版的渲染引擎，或者如果安装了的话，使用谷歌的 Chrome Frame</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>预留给描述站点用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对移动浏览器的视口标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>样式表的链接，一个指向 normalize.css，另一个指向 main.css</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/normalize.css"</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加载 Modernizr 脚本的 script 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vendor/modernizr-2.6.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrappin<span class="symbol">&amp;#39;</span> Portfolio<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML实体&amp;#39来表示单引号</li>
</ul>
</li>
<li><p>ooter:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">role</span>=<span class="string">"contentinfo"</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>Copyright <span class="symbol">&amp;copy;</span> Company Name<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩图片花不了多少时间，但却能解决导致图片臃肿的最大问题，在速度就是生命的年代，既要考 虑用户体验，又得考虑 SEO 排名。可以通过实现响应式图片来进一步优化传送带图片！</p>
</li>
</ol>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ol>
<li><a href="https://roots.io/" target="_blank" rel="noopener">Roots</a> 主题从一开始就将自己定位为 Bootstrap 驱动的、各方面都力求体现最佳实践的一个基础主题；</li>
<li>Roots 主题把基本的布局元素从单个模板文件中给抽了出来；</li>
<li>免费的主题网站<a href="https://bootswatch.com/" target="_blank" rel="noopener">Bootswatch</a></li>
<li>Bootstrap默认的网格布局包含12列，940像素宽，不支持响应式布局，加载响应式 CSS 文件后， 网格布局会根据视口（viewport）宽度在 724 像素到 1170 像素之间伸缩；注意必须满足12列总和，可以设计布局3-6-3、4-8、3-5-4、2-8-2…..；</li>
<li>把重要的内容链接转换成突出显示的按钮很简单，为此要用到如下几个关键的类：<ul>
<li>btn 类用于把链接变成按钮的样式</li>
<li>btn-primary 类用于把按钮变成主品牌颜色</li>
<li>pull-right 类用于把链接浮动到右侧，使其占据更大的空间，从而更便于发现和点击</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/68eef3b92ea9b2cc7f99d0aaadb29418-149371" alt="彩色按钮"></li>
</ul>
</li>
</ol>
<h2 id="快速开发（SpringBoot）"><a href="#快速开发（SpringBoot）" class="headerlink" title="快速开发（SpringBoot）"></a>快速开发（SpringBoot）</h2><ol>
<li><p>在<a href="https://github.com/twbs/bootstrap/releases中下载bootstrap的dist版本的压缩包，将其中的css文件以及js文件拷贝到自己的项目中；" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/releases中下载bootstrap的dist版本的压缩包，将其中的css文件以及js文件拷贝到自己的项目中；</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/57a13d08dcc1d9818ed960b676c803c4-21331" alt="拷贝js以及css"></p>
</li>
<li><p>使用 Bootstrap 时，需要要包含它的 CSS 样式表和 JavaScript 文件（使用thymeleaf模板引擎）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/bootstrap/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除了 &lt;strong&gt; 和&lt;em&gt; ， Bootstrap 还提供了一些表示强调的类，这些类可以应用给 &lt;p&gt; 或 &lt;span&gt;:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"muted"</span>&gt;</span>This content is muted<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>This content carries a warning class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-error"</span>&gt;</span>This content carries an error class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>This content carries an info class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>This content carries a success class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This content has <span class="tag">&lt;<span class="name">em</span>&gt;</span>emphasis<span class="tag">&lt;/<span class="name">em</span>&gt;</span>, and can be <span class="tag">&lt;<span class="name">strong</span>&gt;</span>bold<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML 的 &lt;abbr&gt; 元素用于标记缩写词或首字母缩写,标记了缩写词之后， 浏览器、拼写检查器、翻译系统或搜索引擎都能据以得知文本的性质。Bootstrap 会在 &lt;abbr&gt; 元素下方添加一条浅色的虚线， 并在光标悬停时显示完整文本的内容:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Real Simple Syndication"</span>&gt;</span>RSS<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4cdf48a99198961fb97ce446bce1b598-55187" alt="abbr效果"></p>
</li>
<li><p>在页面中使用 &lt;address&gt; 元素可以让屏幕阅读器和搜索引擎找到地址或电话号码,可以标记电子邮件地址,必要时可以用&lt;br&gt; 标签来换行（例如把城市与街道分开）:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>WanderROS Media, Inc.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    1005  HWY North<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Sebastopol, China 95472<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Phone"</span>&gt;</span>P:<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:+88888888"</span>&gt;</span>(0556) 88888888<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>WanderROS<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:#"</span>&gt;</span>wanderros@wander.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/25fbd14d67606e93c336ea28142724c9-40246" alt="address效果"></p>
</li>
<li><p>要在页面中标记引用或名人名言的文本块， 使用 &lt;blockquote&gt; 标签，必要时可以添加 &lt;br&gt; 换行， 用 &lt;p&gt; 分段:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>That this is needed, desperately needed, is indicated by the</span><br><span class="line">        incredible uptake of Bootstrap. I use it in all the server software</span><br><span class="line">        I'm working on. And it shows through in the templating language I'm</span><br><span class="line">        developing, so everyone who uses it will ﬁnd it's "just there" and</span><br><span class="line">        works, any time you want to do a Bootstrap technique. Nothing to do,</span><br><span class="line">        no libraries to include. It's as if it were part of the hardware.</span><br><span class="line">        Same approach that Apple took with the Mac OS in 1984.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>Developer of RSS, <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Source Title"</span>&gt;</span>Dave Winer<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Bootstrap支持 HTML 提供的三种列表：有序列表、无序列表和定义列表,想去掉无序列表前面的圆点， 可以在相应的&lt;ul&gt;标签中添加class=”unstyled”;定义列表没有块级的 &lt;li&gt; 元素， 而是每个列表项都由 &lt;dt&gt; 和 &lt;dd&gt; 元素共同组成,要让词条和解释并排显示，只要给&lt;dl&gt;标签加上class=”dl-horizontal”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>LED<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A light-emitting diode (LED) is a semiconductor light source.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dl-horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Servo<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Servos are small, cheap, mass-produced actuators used for radio</span><br><span class="line">        control and small robotics.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d9fab8452421feb0033f8b03df7d7766-38141" alt="定义列表效果"></p>
</li>
<li><p>在 Bootstrap 中有两种方式显示代码， 一种是使用 &lt;code&gt; 标签， 另一种是使用 &lt;pre&gt; 标签，行内代码使用 &lt;code&gt; ，代码段使用 &lt;pre&gt; ：</p>
<ul>
<li>使用 &lt;pre&gt; 和 &lt;code&gt; 标签标记代码时，一定要把代码中的左尖括号和右尖括号替换成 &amp;lt; 和 &amp;gt;。</li>
</ul>
</li>
<li><p>Bootstrap支持的表格元素：</p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;table&gt;</td>
<td align="center">包装元素，用于显示表列式数据</td>
</tr>
<tr>
<td align="center">&lt;thead&gt;</td>
<td align="center">表头行的容器</td>
</tr>
<tr>
<td align="center">&lt;tbody&gt;</td>
<td align="center">表格行的容器</td>
</tr>
<tr>
<td align="center">&lt;tr&gt;</td>
<td align="center">单元格的容器</td>
</tr>
<tr>
<td align="center">&lt;td&gt;</td>
<td align="center">普通单元格</td>
</tr>
<tr>
<td align="center">&lt;th&gt;</td>
<td align="center">一行或一列（取决于作用范围和位置）中作为表头的单元格</td>
</tr>
<tr>
<td align="center">&lt;caption&gt;</td>
<td align="center">用于包装表格的说明或小结，对屏幕阅读器特别有用</td>
</tr>
</tbody></table>
<ul>
<li><p>表格行可选的类：</p>
<table>
<thead>
<tr>
<th>类</th>
<th>说明</th>
<th>背景颜色</th>
</tr>
</thead>
<tbody><tr>
<td>.success</td>
<td>表示成功或积极的情形</td>
<td>绿</td>
</tr>
<tr>
<td>.err</td>
<td>表示危险或消极的情形</td>
<td>红</td>
</tr>
<tr>
<td>.warning</td>
<td>表示警告</td>
<td>黄</td>
</tr>
<tr>
<td>.info</td>
<td>用于代替默认样式</td>
<td>蓝</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>Bootstrap 自带了基本的表单样式，不需要添加任何辅助类,使用&lt;form&gt;;</p>
<ul>
<li><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input-medium search-query"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input-small"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"input-small"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>支持搜索表单、行内表单、横向表单等；</p>
</li>
<li><p>Bootstrap 支持 HTML5 规范定义的所有原生输入类型：text 、 password 、 datetime 、 datetime-local 、 date 、 month 、 time 、 week 、 number 、 email 、 url 、 search 、 tel 和 color</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Text input"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>.form-actions可以进行一些表单动作的设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-actions"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>复选框和单选按钮:如果想让用户选择任意多项， 使用 &lt;checkbox&gt; ， 如果想让用户只选择一项，使用 &lt;radio&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    Option one is this and that - be sure to include why it's great.</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"optionsRadios"</span> <span class="attr">id</span>=<span class="string">"optionsRadios1"</span> <span class="attr">value</span>=<span class="string">"option1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    Option one is this and that - be sure to include why it's great.</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"optionsRadios"</span> <span class="attr">id</span>=<span class="string">"optionsRadios2"</span> <span class="attr">value</span>=<span class="string">"option2"</span>&gt;</span></span><br><span class="line">    Option two can be something else, and selecting it will deselect option one</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>选项列表适合让用户选择多项， 但默认只允许选择一项,建议只在用户对选项很熟悉的情况下使用 &lt;select&gt;,要让用户选择多项，使用 multiple=”multiple”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>前置组件和后置组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add-on"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"span2"</span> <span class="attr">id</span>=<span class="string">"prependedInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-append"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"span2"</span> <span class="attr">id</span>=<span class="string">"appendedInput"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add-on"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>图像支持圆形、方框、圆角形状：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-polaroid"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>图标（可能需要点什么，测试没出现效果）：</p>
<ul>
<li>使用图标，给&lt;i&gt;标签加以.icon-为前缀的类即可；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-edit icon-white"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你发现自己一遍一遍地在重复做一件事，不妨再努力一次做得更好一点!</p>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Command</title>
    <url>/2020/04/21/Docker-Command/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker想要学好的话，首先要学会使用它，Docker命令非常的多，这篇文章中主要介绍一些日常经常用到的命令，熟练使用Docker命令，然后能够部署Docker容器，最后在这个基础上深入Docker的核，从长远的角度来说，Docker技术会引导行业变革,产业升级!</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="run命令"><a href="#run命令" class="headerlink" title="run命令"></a>run命令</h2><ol>
<li>-a，–attach：把指定的数据流（如 STDOUT 之类）连接至终端；</li>
<li>-d，–detach：使容器在“分离”模式下运行，容器会在后台运行，而命令的返回值是容器的ID；</li>
<li>-i, –interactive：保持 stdin 打开，与-t同时使用，用作交互式会话容器；比如：docker run -it mysql /bin/bash</li>
<li>–restart：配置 Docker 在什么情况下尝试重新启动已退出的容器；</li>
<li>–rm：退出时自动删除容器，不能与 -d 选项同时使用；</li>
<li>-t, –tty：分配一个伪终端（pseudo-TTY）；</li>
<li>-e, –env：设置容器内的环境变量，–env-file 选项可以经文件传入环境变量；</li>
<li>-h, –hostname NAME：设置容器的unix主机名为 NAME；</li>
<li>–name NAME：把 NAME 设置为容器的名称；</li>
<li>-v, –volume：用来设置数据卷；</li>
<li>–volumes-from：挂载指定容器拥有的数据卷；</li>
<li>–expose：指定容器将会使用的端口或端口范围，只有与 -P 参数同时使用，以及在连接容器时，才有真正意义；</li>
<li>–link：建立一个与指定容器连接的内部网络接口；</li>
<li>-p, –publish：“发布”容器的端口，使主机能访问它；</li>
<li>-P, –publish-all：“发布”所有已指定为开放（exposed）的容器端口，使主机能访问它们，可通过 docker port 命令查看分配了哪个端口；</li>
<li><strong>–entrypoint：</strong>把参数指定为容器的入口（entrypoint），覆盖任何Dockerﬁle中的ENTRYPOINT指令；</li>
<li><strong>-u, –user：</strong>设置命令运行时所使用的用户，覆盖任何Dockerﬁle中的USER指令；</li>
<li><strong>-w, –workdir：</strong>将参数的路径设置为容器的工作目录。此选项会覆盖 Dockerﬁle 中的 WORKDIR 指令。</li>
</ol>
<h2 id="容器管理命令"><a href="#容器管理命令" class="headerlink" title="容器管理命令"></a>容器管理命令</h2><ol>
<li>docker attach [OPTIONS] CONTAINER：attach 命令允许用户查看容器内的主进程，或与它进行交互；</li>
<li>docker create ：从镜像创建容器，但不启动它；</li>
<li>docker cp：在容器和主机之间复制文件和目录；</li>
<li>docker exec：在容器中运行一个命令，可用于执行维护工作，或替代 SSH 用作登入容器；</li>
<li>docker kill：发送信号给容器中的主进程（PID 1）；</li>
<li>docker pause：暂停容器内的所有进程；</li>
<li>docker restart：重新启动一个或多个容器；</li>
<li>docker rm：删除一个或多个容器；</li>
<li>docker start：启动一个或多个已停止的容器；</li>
<li>docker stop：停止（但不删除）一个或多个容器；</li>
<li>docker unpause：重启先前被 docker pause 命令暂停的容器。</li>
</ol>
<h2 id="Docker信息命令"><a href="#Docker信息命令" class="headerlink" title="Docker信息命令"></a>Docker信息命令</h2><ol>
<li>docker info：打印Docker系统和主机的各种信息；</li>
<li>docker help：把一个子命令作为参数，打印有关该子命令的使用方法和帮助信息；</li>
<li>docker version：打印Docker客户端和服务器版本，以及编译时使用的Go版本。</li>
</ol>
<h2 id="Docker容器信息命令"><a href="#Docker容器信息命令" class="headerlink" title="Docker容器信息命令"></a>Docker容器信息命令</h2><ol>
<li>docker diff：对比容器所使用的镜像，显示容器的文件系统的变化；</li>
<li>docker events：打印守护进程的实时事件；</li>
<li>docker inspect：把容器或镜像作为参数，获取它们的详细信息；</li>
<li>docker logs：输出容器的“日志”；</li>
<li>docker port：把容器作为参数，列出它的端口映射信息；</li>
<li>docker ps：提供关于当前容器的高阶信息， 例如名称、ID 和状态；</li>
<li>docker top：把容器作为参数， 提供该容器内运行中进程的信息。</li>
</ol>
<h2 id="Docker镜像管理命令"><a href="#Docker镜像管理命令" class="headerlink" title="Docker镜像管理命令"></a>Docker镜像管理命令</h2><ol>
<li>docker build：从Dockerﬁle建立镜像；</li>
<li>docker commit：从指定的容器创建镜像；</li>
<li>docker export：将容器的文件系统中的内容以 tar 归档的格式导出，并输出到 STDOUT；</li>
<li>docker history：输出镜像中每个镜像层的信息；</li>
<li>docker images：列出所有本地镜像，包括库名称、标签名称以及镜像大小等信息；</li>
<li>docker import：从一个含有文件系统的归档文件创建镜像，归档可以由 docker export 产生；</li>
<li>docker load：加载仓库， 仓库以 tar 归档的形式从 STDIN 读入；</li>
<li>docker rmi：删除指定的一个或多个镜像；</li>
<li>docker save：把指定的镜像或仓库储存到 tar 归档， 并输出到 STDOUT ；</li>
<li>docker tag：将镜像与一个仓库和标签名称关联。</li>
</ol>
<h2 id="Docker仓库命令"><a href="#Docker仓库命令" class="headerlink" title="Docker仓库命令"></a>Docker仓库命令</h2><ol>
<li>docker login：在指定的寄存服务器进行注册或登录；</li>
<li>docker logout：从Docker寄存服务器注销；</li>
<li>docker pull：从寄存服务器下载指定的镜像；</li>
<li>docker push：将镜像或仓库推送到寄存服务器；</li>
<li>docker search：列出 Docker Hub 上匹配搜索词的公共仓库。</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分是常用的Docker命令,可以进行速查,加深一下印象吧!</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Clean Code</title>
    <url>/2020/04/22/Clean-Code/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为什么要整洁的代码呢？首先是个程序员，其次想成为更好的程序员。写代码从来不是问题，但是写出来优质的代码来说就相对来说难很多！清理代码 永远不能等有朝一日再回头清理，因为稍后等于永远不—Later equals never！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h2><ol>
<li>给变量、函数、参数、类和封包命名需要符合一定的规范；</li>
<li>必须避免留下掩藏代码本意的错误线索，避免使用与本意相悖的词；</li>
<li>堤防使用不同之处较小的名称；</li>
<li>不应当让其他程序员在脑中翻译成他们熟知的名称，而在你这并不是这个意思；</li>
<li>添加有意义的语境的名称；</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol>
<li>函数应该做一件事，做好这件事，而且只做这一件事；</li>
<li>命名方式要保持一致，使用与模块名一脉相承的短语、名词和动词给函数命名；</li>
<li>最理想的参数数量是零个，其次是一个参数，再者是二个，尽量避免三个以上的参数；</li>
</ol>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol>
<li>如果注释不能说明问题，那么还不如不注释；</li>
<li>写注释也不能美化写的糟糕的代码；</li>
<li>有理由用//TODO形式在源代码中放置要做的工作列表；</li>
</ol>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ol>
<li>代码格式很重要，必须严肃对待；</li>
<li>变量声明应尽可能靠近其使用位置；</li>
<li>实体变量应该在类的顶部声明；</li>
<li>概念相关的代码应该放到一起；</li>
<li>一组开发者应当认同一种格式风格，每个成员都应该那种风格；</li>
</ol>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol>
<li>错误处理是编程时必须要做的事情之一，输入可能出现异常，设备可能失效；</li>
<li>多使用try-catch-finnally语句；</li>
<li>别返回null值；</li>
</ol>
<h2 id="边界处理"><a href="#边界处理" class="headerlink" title="边界处理"></a>边界处理</h2><ol>
<li>边界上会发生有趣的事情，边界上的代码需要清晰的分割和定义了期望的测试；</li>
</ol>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ol>
<li>在编写不能通过的单元测试前，不可编写生产代码；</li>
<li>只可编写刚好无法通过的单元测试，不能编译也算不通过；</li>
<li>只可编写刚好足以通过当前失败测试的生产代码；</li>
<li>测试代码和生产代码一样重要；</li>
<li>整洁测试的三要素：可读性，可读性还是可读性；</li>
<li>JUnit中每个测试函数都应该有且只有一个断言语句；</li>
<li>FIRST: 快速、独立、可重复、自足验证、及时；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写出比较合乎规范的代码才是好的代码，养成良好的习惯非常重要，成为一个良好的程序员吧，Keeping Moving！</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Data Persistence</title>
    <url>/2020/05/05/Docker-Data-Persistence/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker的理念是将应用和运行的环境打包形成容器运行，数据可以伴随着容器的存在而保持，但是希望对产生的数据进行持久化，于是数据卷这种概念以及技术产生了：</p>
<ul>
<li>容器之间希望有可能共享数据</li>
<li>Docker容器产生的数据，如果不能通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了</li>
<li>为了能够保存数据，在docker中需要使用数据卷和数据卷容器</li>
</ul>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol>
<li><p>数据卷：在宿主中可以在容器之间进行共享和重用的一系列和文件和文件夹；</p>
</li>
<li><p>数据卷容器：容器挂载数据卷后，其它容器通过挂载这个父容器实现数据共享，挂载数据卷的容器，称之为数据卷容器；</p>
</li>
<li><p>Docker镜像是有多层只读文件叠加而成，当运行起一个容器的时候，Docker会在制只读层上创建一个读写层</p>
</li>
<li><p>Docker命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an im from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值age from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container's filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out</span><br></pre></td></tr></table></figure>
</li>
<li><p>Docker命令图谱：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7691a074c5b1bd703754bd9631dffe75-214744" alt="Docker命令"></p>
</li>
</ol>
<h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><ol>
<li><p>Docker的数据卷和数据卷容器的作用：</p>
<ul>
<li>容器的持久化</li>
<li>容器间继承和共享数据</li>
<li>对数据卷的更新不会影响镜像，解耦了应用和数据</li>
<li>对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作</li>
<li>卷会一直存在，直到没有容器使用，可以安全地卸载它</li>
</ul>
</li>
<li><p>Docker分层结构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c2d65c984cb0cc26897a87dde20af85f-47885" alt="Docker容器结构"></p>
</li>
<li><p>使用命令使用数据卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不带权限的挂载</span></span><br><span class="line">docker run -it -v 宿主机目录的绝对路径:容器内目录的绝对路径 镜像名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 带权限的挂载</span></span><br><span class="line">docker run -it -v 宿主机目录绝对路径:容器内目录绝对路径:ro 镜像名或镜像id</span><br><span class="line"><span class="meta">#</span><span class="bash"> ro：表示<span class="built_in">read</span> only，表示只读，即容器内的那个数据卷的目录只可以查看文件、目录等</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用inspect来看是否挂载成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id或容器名</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dockerfile添加数据卷（不支持指定宿主机挂载位置）：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用VOLUME指令来给镜像添加一个或多个容器卷</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer1"</span>,<span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"finished,--------success1"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile文件的名称 -t 镜像的名称 路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：如果Docker在挂载主机目录时，出现cannot open directory:Permission denied问题，只需要增加–privileged=true参数即可；</p>
</li>
<li><p>启动第2个容器并继承数据卷容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name="容器的名称" --volumes-from="父容器的名称或父容器的id" 镜像id或镜像名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止！</p>
</li>
<li><p>管理容器卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create 容器卷名称 // 创建一个自定义容器卷</span><br><span class="line">docker volume ls // 查看所有容器卷</span><br><span class="line">docker volume inspect 容器卷名称 // 查看指定容器卷详情信息</span><br><span class="line">docker volume rm 容器卷名称 // 删除自定义数据卷</span><br><span class="line">docker run -d -it --name=容器卷名称 -p 8800:80 -v edc-nginx-vol:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份容器卷：创建一个新容器，挂载数据卷容器，同时挂载一个本地目录，然后把远程数据卷容器的数据卷通过备份命令备份到映射的本地目录里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例：</span></span><br><span class="line">docker run --rm --volumes-from DATA -v $(pwd):/backup busybox tar cvf /backup/backup.tar /data</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h2><ol>
<li><p>使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker docker run -it  -v /Users/wander/test/docker:/data ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据卷容器：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7bfdf6c01b9f46417cb806a4684b1f30-41487" alt="数据卷容器"></p>
</li>
<li><p>宿主机修改内容，容器中查看：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b21ab0e3ef8707cfd9cdba3c4c68109e-45203" alt="容器查看"></p>
</li>
<li><p>容器修改，宿主机查看：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2fbeb82eb0dee81afabc9c375ac7ed74-26620" alt="容器删除"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/923a6b7a70109006315033e04a5b737e-23093" alt="宿主机查看"></p>
</li>
<li><p>查看容器信息：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b9dae6e05eb70878852c7aaa857ea9d0-56419" alt="查看容器信息"></p>
</li>
</ol>
<h2 id="启动第二个容器挂载数据卷容器"><a href="#启动第二个容器挂载数据卷容器" class="headerlink" title="启动第二个容器挂载数据卷容器"></a>启动第二个容器挂载数据卷容器</h2><ol>
<li><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker docker run -it --volumes-from 6b853b51efa0 ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/10dd6c6b12e6f37c79195c0ee7a4663c-48301" alt="挂载效果"></p>
</li>
</ol>
<h2 id="容器卷"><a href="#容器卷" class="headerlink" title="容器卷"></a>容器卷</h2><ol>
<li><p>查看容器卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/269e78dde7e66a49cf773f39e1183cc1-50651" alt="容器卷效果"></p>
</li>
<li><p>查看一个指定容器卷信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect test</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器卷信息：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5935be04d1c33bfafb1441e2f2381941-57295" alt="容器卷信息"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker ELK Platform</title>
    <url>/2020/04/27/Docker-ELK-Platform/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ELK是Elasticsearch、Logstash、Kibana的首字母缩写，代表的是一套开源的分布式日志管理方案，一种比较优秀的日志分析平台！</p>
<p>各自的功能：</p>
<ul>
<li>Elasticsearch：负责日志存储、检索和分析</li>
<li>LogStash：负责日志的收集、处理</li>
<li>Kibana：负责日志的可视化</li>
</ul>
<p>这部分的记录主要涉及到公司项目里的日志分析没法部署到自己的iMac上，而且没有多少文件进行记录，因为费了点时间，还是记录下在iMac上Docker化的部署过程！为了学习这部分功能，还部署了一个nginx服务器！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><ol>
<li>想要Docker化，首先得安装Docker，安装部分在其他文章中有记录！</li>
<li><strong>一定要用阿里的加速镜像，否则pull镜像真的好慢！</strong></li>
</ol>
<h2 id="下载相关的镜像"><a href="#下载相关的镜像" class="headerlink" title="下载相关的镜像"></a>下载相关的镜像</h2><ol>
<li><strong>没什么好说的，不要使用latest标签pull镜像！</strong></li>
<li>使用<a href="https://hub.docker.com/搜索镜像的版本，在我部署ELK的时候都是7.6.2版本；" target="_blank" rel="noopener">https://hub.docker.com/搜索镜像的版本，在我部署ELK的时候都是7.6.2版本；</a></li>
<li>使用命令下载四个镜像：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载elk官方基础镜像</span></span><br><span class="line">docker pull logstash:7.6.2</span><br><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志输出镜像</span></span><br><span class="line">docker pull nginx:1.17</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用命令docker images来查看镜像：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               1.17                602e111c06b6        3 days ago          127MB</span><br><span class="line">python              latest              b55669b4130e        10 days ago         933MB</span><br><span class="line">redis               latest              4cdbec704e47        3 weeks ago         98.2MB</span><br><span class="line">mysql               latest              9228ee8bac7a        3 weeks ago         547MB</span><br><span class="line">logstash            7.6.2               fa5b3b1e9757        4 weeks ago         813MB</span><br><span class="line">kibana              7.6.2               f70986bc5191        4 weeks ago         1.01GB</span><br><span class="line">elasticsearch       7.6.2               f29a1ee41030        4 weeks ago         791MB</span><br><span class="line">ubuntu              14.04               6e4f1fe62ff1        4 months ago        197MB</span><br></pre></td></tr></table></figure>

<h2 id="测试启动Elasticsearch"><a href="#测试启动Elasticsearch" class="headerlink" title="测试启动Elasticsearch"></a>测试启动Elasticsearch</h2><ol>
<li>使用命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch \</span><br><span class="line">-v "$PWD/esdata":/usr/share/elasticsearch/data \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>按照上述命令启动之后，会发现过了一会容器就自动退出了，使用docker logs来查看出了什么问题：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker logs -t elasticsearch &gt;log.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">2020-04-27T07:11:20.497427334Z OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">2020-04-27T07:11:38.104882650Z ERROR: [1] bootstrap checks failed</span><br><span class="line">2020-04-27T07:11:38.104977698Z [1]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">2020-04-27T07:11:38.105308797Z ERROR: Elasticsearch did not exit normally - check the logs at /usr/share/elasticsearch/logs/docker-cluster.log</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>出错了，ERROR: [1] bootstrap checks failed，然后该百度了,启动参数添加环境变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -e <span class="string">"discovery.type=single-node"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实际命令：</span></span><br><span class="line">docker run --name elasticsearch \</span><br><span class="line">-v "$PWD/esdata":/usr/share/elasticsearch/data \</span><br><span class="line">-e "discovery.type=single-node" \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试elasticsearch 启动成功否，访问<a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功的输出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"8ujzdvM"</span>,</span><br><span class="line"><span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch_wander"</span>,</span><br><span class="line"><span class="attr">"cluster_uuid"</span>: <span class="string">"8G1TTUgyQRGv_AmsreyFyg"</span>,</span><br><span class="line"><span class="attr">"version"</span>: &#123;</span><br><span class="line"><span class="attr">"number"</span>: <span class="string">"6.8.7"</span>,</span><br><span class="line"><span class="attr">"build_flavor"</span>: <span class="string">"oss"</span>,</span><br><span class="line"><span class="attr">"build_type"</span>: <span class="string">"tar"</span>,</span><br><span class="line"><span class="attr">"build_hash"</span>: <span class="string">"c63e621"</span>,</span><br><span class="line"><span class="attr">"build_date"</span>: <span class="string">"2020-02-26T14:38:01.193138Z"</span>,</span><br><span class="line"><span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"lucene_version"</span>: <span class="string">"7.7.2"</span>,</span><br><span class="line"><span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"5.6.0"</span>,</span><br><span class="line"><span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"5.0.0"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>命令解释：<ol>
<li>-v “$PWD/esdata”:/usr/share/elasticsearch/data 数据映射</li>
<li>-e “discovery.type=single-node” 单机模式</li>
<li>-p 9200:9200 端口映射</li>
<li>-d elasticsearch:7.6.2 后台运行</li>
</ol>
</li>
</ol>
<h2 id="Kibana可视化"><a href="#Kibana可视化" class="headerlink" title="Kibana可视化"></a>Kibana可视化</h2><ol>
<li>Kibana作为ES操作的UI，需要跟ES容器通信，所以这里要将ES的容器link一下，对外提供5601端口做页面交互：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">--link elasticsearch:elasticsearch \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>等待一会就可以通过浏览器访问：<a href="http://localhost:5601/；" target="_blank" rel="noopener">http://localhost:5601/；</a></li>
<li>接下来就可以按照网页中的指导添加数据到kibana，<a href="http://localhost:5601/app/kibana#/home/tutorial_directory/metrics；" target="_blank" rel="noopener">http://localhost:5601/app/kibana#/home/tutorial_directory/metrics；</a></li>
</ol>
<h2 id="Nginx启动（可能暂时不做日志的记录）"><a href="#Nginx启动（可能暂时不做日志的记录）" class="headerlink" title="Nginx启动（可能暂时不做日志的记录）"></a>Nginx启动（可能暂时不做日志的记录）</h2><ol>
<li>启动nginx：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx:1.17</span><br></pre></td></tr></table></figure>

<h2 id="Logstash日志收集"><a href="#Logstash日志收集" class="headerlink" title="Logstash日志收集"></a>Logstash日志收集</h2><ol>
<li><p>Logstash的主要作用是收集日志，这个组件有很多插件，可以支持大部分日志集成方式，如tcp、udp、jdbc、文件、队列等；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0cea1265f4bd3e8e6138466fba2d8c66-58988" alt="Logstash功能"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/31a78e9eed51824b5f3ce2d64baae336-38227" alt="Logstash工作流程"></p>
</li>
<li><p>Logstash特点：</p>
<ul>
<li>几乎可以访问任何数据</li>
<li>可以和多种外部应用结合</li>
<li>支持弹性扩展</li>
</ul>
</li>
<li><p>Logstash组成：</p>
<ul>
<li>Shipper－发送日志数据</li>
<li>Broker－收集数据，缺省内置 Redis</li>
<li>Indexer－数据写入</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/45db4671acdec3b15fc0dad1b171d9e7-19744" alt="Logstash 基本组成"></p>
</li>
<li><p>Shipper 负责从各种数据源里采集数据，然后发送到 Broker，Indexer 将存放在 Broker 中的数据再写入 Elasticsearch，Elasticsearch 对这些数据创建索引，然后由 Kibana 对其进行各种分析并以图表的形式展示；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ad5b4aa3ddace952afe93b7474a5dba6-106340" alt="ELK协议栈体系图"></p>
</li>
<li><p>配置文件格式：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">path</span> =<span class="string">&gt; "/var/log/messages"</span></span><br><span class="line">        <span class="attr">type</span> =<span class="string">&gt; "system"</span></span><br><span class="line">        <span class="attr">start_position</span> =<span class="string">&gt; "beginning"</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">path</span> =<span class="string">&gt; "/application/es/to/logs/elasticsearch.log"</span></span><br><span class="line">        <span class="attr">type</span> =<span class="string">&gt; "es-error"</span></span><br><span class="line">        <span class="attr">start_position</span> =<span class="string">&gt; "beginning"</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">output</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">if</span> <span class="string">[type] == "system" &#123;</span></span><br><span class="line">        <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">hosts</span> =<span class="string">&gt; ["10.0.0.169:9200"]</span></span><br><span class="line">            <span class="attr">index</span> =<span class="string">&gt; "system-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">if</span> <span class="string">[type] == "es-error" &#123;</span></span><br><span class="line">        <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">hosts</span> =<span class="string">&gt; ["10.0.0.169:9200"]</span></span><br><span class="line">            <span class="attr">index</span> =<span class="string">&gt; "es-error-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>详细阅读：<a href="https://wanderros.github.io/2020/05/11/Logstash-Quick-Start/">https://wanderros.github.io/2020/05/11/Logstash-Quick-Start/</a></p>
</li>
<li><p>官方文档：<a href="https://www.elastic.co/guide/en/logstash/7.x/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.x/index.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
  </entry>
  <entry>
    <title>Docker-Go</title>
    <url>/2020/04/26/Docker-Go/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>学习一门技术，要知道为什么需要学习技术，这门技术能够给我们带来什么，学习这门技术我们需要哪些基础知识？Docker的作用在其他的文章中已经详细介绍了，这里需要<strong>构建-安装-运行</strong>实施真正企业级别的运行环境。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><ol>
<li>阿里云加速地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors；" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors；</a></li>
<li>将阿里云的镜像加速地址出来，然后黏贴到自己的docker中的选项中的Docker Engine的”registry-mirrors”中；</li>
<li>重启docker服务器。</li>
</ol>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><ol>
<li>使用-v参数将宿主机目录映射到容器中的指定路径：docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名, ro是容器对数据目录的权限；</li>
<li>使用Dockerfile添加数据卷映射，使用VOLUME；</li>
<li>数据卷容器：容器之间通过挂载数据卷容器来实现数据共享，–volumes-from；</li>
<li>目前Docker数据卷管理上的问题：<ol>
<li>只支持本地数据卷</li>
<li>缺乏对数据卷生命周期的有效管理</li>
</ol>
</li>
</ol>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ol>
<li><p>在控制台执行docker COMMAND –help 来获取更多的关于命令的信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network --help</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器和虚拟机是互补的，虚拟机是用来进行硬件资源划分的完美解决方案，利用了硬件虚拟化技术，比如VT-x、AMD-V等实现对资源的彻底隔离，而容器是操作系统级别的虚拟化，利用的是内核的Cgroup和Namespace特性；</p>
</li>
<li><p>Namespace（命名空间）：主要的工作是访问隔离，原理是针对一类资源进行抽象，并将其封装在一起提供给一个容器使用；</p>
</li>
<li><p>Cgroup（控制组）是control group的简称，主要是资源控制，原理是将一组进程放在一个控制组里，通过给这个控制组分配指定的可用资源，达到控制这一组进程的可用资源的目的；</p>
</li>
<li><p>容器 = cgroup + namespace + rootfs + 容器引擎（用户态工具）</p>
<ol>
<li>rootfs：文件系统隔离</li>
<li>容器引擎：生命周期控制</li>
</ol>
</li>
</ol>
<h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><ol>
<li>Docker网络在早期称为广受诟病的一大缺陷,在部署大规模Docker集群时，网络也成了最大的挑战；</li>
<li>Libnetwork提出了新的容器网络模型（Container Network Model，CNM），定义了标准的API用于为容器配置网络，其底层可以适配各种网络驱动；</li>
<li>Libnetwork提供了5种驱动：<ol>
<li>bridge：Docker的默认容器网络驱动</li>
<li>host：容器与主机共享同一Network Namespace,共享一套网络协议栈、路由表以及iptables规则等</li>
<li>null：容器内网络配置为空，需要用户手动为容器配置网络接口以及路由等</li>
<li>remote：Docker网络插件的实现</li>
<li>overlay：Docker原生的跨主机多子网网络方案</li>
</ol>
</li>
<li>使用–net参数为容器配置网络；</li>
<li>网络解决方案：<ul>
<li>Weave</li>
<li>Flannel</li>
<li>SocketPlane</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Docker的内容很多，需要逐一的去学习，去实际操作，这部分主要介绍了基础的配置加速、数据卷、网络以及一些帮助，想要真正的应用Docker技术还需要学习集群管理、Dockerfile、Docker-Compose以及k8s等高级技术，这些在后续的深入学习时记录！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch 7.6 插件使用入门</title>
    <url>/2020/06/19/Elasticsearch-7-6-%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Elasticsearch支持插件系统，通过安装插件来增强Elasticsearch。各种插件的配置需要学习测试之后才知道如何使用，这部分主要介绍如何安装以及使用插件。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安全插件x-pack"><a href="#安全插件x-pack" class="headerlink" title="安全插件x-pack"></a>安全插件x-pack</h2><ol>
<li><p>功能：包括安全（x-pack-security），监视（x-pack-watcher），警报（x-pack-monitoring），报表（x-pack-graph），Elasticsearch SQL（x-pack-sql），跨集群复制（x-pack-ccr）、x-pack-upgrade、x-pack-rollup和机器学习（x-pack-ml）</p>
</li>
<li><p><strong>7.x版本中，es的安全核心功能免费使用</strong></p>
</li>
<li><p>配置文件修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在elasticsearch.yml最后添加</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.audit.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#basic表示xpack使用基础版license，否则无法启动</span></span><br><span class="line"><span class="attr">xpack.license.self_generated.type:</span> <span class="string">basic</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动，然后运行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>
</li>
<li><p>引导设置各种密码，包括elastic、kibana、apm_system、logstash_system、beats_system、remote_monitoring_user ;</p>
</li>
<li><p>然后就可以使用密码了，比如kibana，默认用户elastic，设置密码后：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/370df21929cfe237a35bec9f98316f3e-33507" alt="Kibana登录"></p>
</li>
<li><p>es启用x-pack后，kibana会新增用户和角色管理菜单;</p>
</li>
</ol>
<h2 id="分词插件ik"><a href="#分词插件ik" class="headerlink" title="分词插件ik"></a>分词插件ik</h2><ol>
<li><p>中文分词器ik安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成了之后需要重启elasticsearch；</p>
</li>
<li><p>注意版本要一致；</p>
</li>
<li><p>分词:即把一段中文或者别的语言内容划分成一个个的关键字,在搜索时候会把自己的信息进行分词,会把数据库中或者索引库中的数据进行分词,然后进行一个匹配操作；</p>
</li>
<li><p><strong>IK提供了两个分词算法</strong>：</p>
<ul>
<li><strong>ik_smart</strong> ——<strong>最少切分</strong></li>
<li><strong>ik_max_word</strong> ——<strong>最细粒度划分</strong></li>
</ul>
</li>
<li><p>快速使用：</p>
<ol>
<li><p>创建索引：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/index</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建mapping：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/index/_mapping -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">        "properties": &#123;</span><br><span class="line">            "content": &#123;</span><br><span class="line">                "type": "text",</span><br><span class="line">                "analyzer": "ik_max_word",</span><br><span class="line">                "search_analyzer": "ik_smart"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p>向index添加一些内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/index/_create/1 -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;"content":"美国留给伊拉克的是个烂摊子吗"&#125;</span><br><span class="line">'</span><br><span class="line">curl -XPOST http://localhost:9200/index/_create/2 -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;"content":"公安部：各地校车将享最高路权"&#125;</span><br><span class="line">'</span><br><span class="line">curl -XPOST http://localhost:9200/index/_create/3 -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;"content":"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船"&#125;</span><br><span class="line">'</span><br><span class="line">curl -XPOST http://localhost:9200/index/_create/4 -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;"content":"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/index/_search  -H 'Content-Type:application/json' -d'</span><br><span class="line">&#123;</span><br><span class="line">    "query" : &#123; "match" : &#123; "content" : "中国" &#125;&#125;,</span><br><span class="line">    "highlight" : &#123;</span><br><span class="line">        "pre_tags" : ["&lt;tag1&gt;", "&lt;tag2&gt;"],</span><br><span class="line">        "post_tags" : ["&lt;/tag1&gt;", "&lt;/tag2&gt;"],</span><br><span class="line">        "fields" : &#123;</span><br><span class="line">            "content" : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">0.642793</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">0.642793</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"content"</span>: <span class="string">"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">                    <span class="attr">"content"</span>: [</span><br><span class="line">                        <span class="string">"中韩渔警冲突调查：韩警平均每天扣1艘&lt;tag1&gt;中国&lt;/tag1&gt;渔船"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"index"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"4"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">0.642793</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"content"</span>: <span class="string">"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">                    <span class="attr">"content"</span>: [</span><br><span class="line">                        <span class="string">"&lt;tag1&gt;中国&lt;/tag1&gt;驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>ik_max_word 和 ik_smart 区别:</p>
<ul>
<li>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query</li>
<li>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase 查询</li>
</ul>
</li>
<li><p>该插件支持热更新 IK 分词!</p>
</li>
<li><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">详细内容</a></p>
</li>
</ol>
<h2 id="插件pinyin"><a href="#插件pinyin" class="headerlink" title="插件pinyin"></a>插件pinyin</h2><ol>
<li><p>pinyin插件能够将文档和查询条件在汉字和拼音间转换；</p>
</li>
<li><p>安装并重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v7.6.2/elasticsearch-analysis-pinyin-7.6.2.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建索引使用custom pinyin analyzer：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PUT /medcl/ </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span> : &#123;</span><br><span class="line">        <span class="attr">"analysis"</span> : &#123;</span><br><span class="line">            <span class="attr">"analyzer"</span> : &#123;</span><br><span class="line">                <span class="attr">"pinyin_analyzer"</span> : &#123;</span><br><span class="line">                    <span class="attr">"tokenizer"</span> : <span class="string">"my_pinyin"</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"tokenizer"</span> : &#123;</span><br><span class="line">                <span class="attr">"my_pinyin"</span> : &#123;</span><br><span class="line">                    <span class="attr">"type"</span> : <span class="string">"pinyin"</span>,</span><br><span class="line">                    <span class="attr">"keep_separate_first_letter"</span> : <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"keep_full_pinyin"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"keep_original"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"limit_first_letter_length"</span> : <span class="number">16</span>,</span><br><span class="line">                    <span class="attr">"lowercase"</span> : <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"remove_duplicated_term"</span> : <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e26424bdb16b4f9295e93f5cfc8c7f25-240849" alt="pinyin创建索引"></p>
</li>
<li><p>测试分析器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /medcl/_analyze</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"text"</span>: [<span class="string">"刘德华"</span>],</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"pinyin_analyzer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/db7ad81a5b8980f88fcdc614a4d13b66-258207" alt="测试pinyin"></p>
</li>
<li><p>创建mapping：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST /medcl/_mapping </span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"fields"</span>: &#123;</span><br><span class="line">                    <span class="attr">"pinyin"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                        <span class="attr">"store"</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">"term_vector"</span>: <span class="string">"with_offsets"</span>,</span><br><span class="line">                        <span class="attr">"analyzer"</span>: <span class="string">"pinyin_analyzer"</span>,</span><br><span class="line">                        <span class="attr">"boost"</span>: <span class="number">10</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d795af13510eb35ffd95a021579867e5-218093" alt="创建mapping"></p>
</li>
<li><p>indexing：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST /medcl/_create/andy</span></span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"刘德华"</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/76aae7ca8d18dd97ffffdfc620617655-208478" alt="indexing"></p>
</li>
<li><p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9200/medcl/_search?q=name:%E5%88%98%E5%BE%B7%E5%8D%8E</span><br><span class="line">curl http://localhost:9200/medcl/_search?q=name.pinyin:%e5%88%98%e5%be%b7</span><br><span class="line">curl http://localhost:9200/medcl/_search?q=name.pinyin:liu</span><br><span class="line">curl http://localhost:9200/medcl/_search?q=name.pinyin:ldh</span><br><span class="line">curl http://localhost:9200/medcl/_search?q=name.pinyin:de+hua</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/181c8d5dad78a29a642914d7b164fe9c-236088" alt="测试"></p>
</li>
<li><p><a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noopener">详细内容</a></p>
</li>
</ol>
<h2 id="分词器smartcn"><a href="#分词器smartcn" class="headerlink" title="分词器smartcn"></a>分词器smartcn</h2><ol>
<li><p>中科院分词器，和ik类似，但是smartcn无法自定义词库；</p>
</li>
<li><p>安装并重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/analysis-smartcn-7.6.2.zip</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="插件icu"><a href="#插件icu" class="headerlink" title="插件icu"></a>插件icu</h2><ol>
<li><p>Elasticsearch的 ICU 分析器插件 使用 国际化组件 Unicode (ICU) 函数库提供丰富的处理 Unicode 工具；</p>
</li>
<li><p>包含对处理亚洲语言特别有用的 icu_分词器 ，还有大量对除英语外其他语言进行正确匹配和排序所必须的分词过滤器；</p>
</li>
<li><p>安装并重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install analysis-icu</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="文本解析插件ingest-attachment"><a href="#文本解析插件ingest-attachment" class="headerlink" title="文本解析插件ingest-attachment"></a>文本解析插件ingest-attachment</h2><ol>
<li><p>基于Apache 文本扩展库Tika插件之上开发的一款适合elasticsearch文本解析插件；</p>
</li>
<li><p>可以实现对（PDF,DOC,EXCEL等）主流格式文件的文本抽取及自动导入；</p>
</li>
<li><p>由于ElasticSearch是基于JSON格式的文档数据库，所以附件文档在插入ElasticSearch之前必须进行Base64编码；</p>
</li>
<li><p>安装并重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install ingest-attachment</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="x-pack-sql"><a href="#x-pack-sql" class="headerlink" title="x-pack-sql"></a>x-pack-sql</h3><ol>
<li><p>支持mysql语法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET http://localhost:9200/_sql</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: <span class="string">"SELECT * FROM index"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/34ca770b850f632a9bb6a19fcdb5852a-208059" alt="x-pack-sql"></p>
</li>
</ol>
<h3 id="elasticsearch-sql（暂时不支持7-6-2）"><a href="#elasticsearch-sql（暂时不支持7-6-2）" class="headerlink" title="elasticsearch-sql（暂时不支持7.6.2）"></a>elasticsearch-sql（暂时不支持7.6.2）</h3><ol>
<li><p>安装并重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">elasticsearch-plugin install https://github.com/NLPchina/elasticsearch-sql/releases/download/7.5.1.0/elasticsearch-sql-7.5.1.0.zip</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a><del>其他插件</del></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/elasticsearch-plugin install discovery-multicast</span><br><span class="line">bin/elasticsearch-plugin install analysis-icu</span><br><span class="line">bin/elasticsearch-plugin install analysis-kuromoji</span><br><span class="line">bin/elasticsearch-plugin install analysis-phonetic</span><br><span class="line">bin/elasticsearch-plugin install analysis-smartcn</span><br><span class="line">bin/elasticsearch-plugin install analysis-stempel</span><br><span class="line">bin/elasticsearch-plugin install analysis-ukrainian</span><br><span class="line">bin/elasticsearch-plugin install discovery-file</span><br><span class="line">bin/elasticsearch-plugin install ingest-attachment</span><br><span class="line">bin/elasticsearch-plugin install ingest-geoip</span><br><span class="line">bin/elasticsearch-plugin install ingest-user-agent</span><br><span class="line">bin/elasticsearch-plugin install mapper-attachments</span><br><span class="line">bin/elasticsearch-plugin install mapper-size</span><br><span class="line">bin/elasticsearch-plugin install mapper-murmur3</span><br><span class="line">bin/elasticsearch-plugin install lang-javascript</span><br><span class="line">bin/elasticsearch-plugin install lang-python</span><br><span class="line">bin/elasticsearch-plugin install repository-hdfs</span><br><span class="line">bin/elasticsearch-plugin install repository-s3</span><br><span class="line">bin/elasticsearch-plugin install repository-azure</span><br><span class="line">bin/elasticsearch-plugin install repository-gcs</span><br><span class="line">bin/elasticsearch-plugin install store-smb</span><br><span class="line">bin/elasticsearch-plugin install discovery-ec2</span><br><span class="line">bin/elasticsearch-plugin install discovery-azure-classic</span><br><span class="line">bin/elasticsearch-plugin install discovery-gce</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/medcl" target="_blank" rel="noopener">插件Medcl</a></li>
<li><a href="https://github.com/NLPchina" target="_blank" rel="noopener">中国自然语言处理开源组织</a></li>
<li><a href="https://www.elastic.co/cn/downloads/" target="_blank" rel="noopener">elastic官方</a></li>
<li><a href="https://elastic-search-in-action.medcl.com/" target="_blank" rel="noopener">elastic实战</a></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不太清楚为什么网上的插件是如此的少，可能功能上已经有很多了，或者说开发者太少，或者说我搜索的方式不对，不知道，后续看到好的插件继续添加吧！</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Swagger Quick Start</title>
    <url>/2020/05/13/Docker-Swagger-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于公司代码阅读需要，之前的代码使用的是Nodejs加Loopback框架，展示APIs用的是Swagger中间件，代码太老了，构建环境太麻烦了，而且没有必要，这里将APIs展示出来，使用Docker加上镜像来展示swagger APIs。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li><p>获取swagger-editor的镜像，并启动，对外的接口是81，然后就可以在本地编辑API文档了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull swaggerapi/swagger-editor </span><br><span class="line">docker run -d -p 81:8080 swaggerapi/swagger-editor</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/1096351-4b95aeabd18187c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webpp" alt=""></p>
</li>
<li><p>获取swagger-ui的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull swaggerapi/swagger-ui</span><br></pre></td></tr></table></figure>
</li>
<li><p>将转换的Swagger Json文件挂载到容器中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 80:8080 -e SWAGGER_JSON=/foo/swagger.json -v /Volumes/Data/Download:/foo swaggerapi/swagger-ui</span><br></pre></td></tr></table></figure>

<ol>
<li>-e：执行容器中/foo/swagger.json</li>
<li>-v：将/Volumes/Data/Download中的swagger.json挂在到 /foo中执行</li>
<li>没有将swagger.json 在容器内修改的好处：在外部修改后容器可以直接运行，如果在容器内容修改需要在compile一次生成新的容器</li>
</ol>
</li>
</ol>
<h2 id="Swagger文件"><a href="#Swagger文件" class="headerlink" title="Swagger文件"></a>Swagger文件</h2><ol>
<li><a href="https://app.yinxiang.com/fx/ca3c92cf-0a99-46f7-ab88-f633162b6578" target="_blank" rel="noopener">swagger-base2pro</a></li>
<li><a href="https://app.yinxiang.com/fx/13330db5-d3bd-409b-9859-55cdd3f17d84" target="_blank" rel="noopener">swagger-open2pro</a></li>
<li><a href="https://app.yinxiang.com/fx/d61233e9-fb4e-4ad0-8af0-d07e0941dbc9" target="_blank" rel="noopener">swagger-pro2base</a></li>
<li><a href="https://app.yinxiang.com/fx/b2606826-6207-41e2-abfb-b4680ce82220" target="_blank" rel="noopener">swagger-pro2laundromat</a></li>
<li><a href="https://app.yinxiang.com/fx/cd22d1a6-6837-4063-898a-92db3856c618" target="_blank" rel="noopener">swagger-pro2laundromat2</a></li>
<li><a href="https://app.yinxiang.com/fx/01ba7bdb-11a6-4c8c-9a44-ed0f926cd01d" target="_blank" rel="noopener">swagger-pro2open</a></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用Docker镜像能使得我们可以不需要搭建环境就可以做很多事，真的节省了很多事！Swagger以后可能会长期使用吧，我觉得！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Start</title>
    <url>/2020/04/20/Docker-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>容器是轻量且可移植的仓库，包含应用程序及其依赖的组件。容器是对应用程序及其依赖关系的封装。乍一看容器只是个轻量级的虚拟机，它和虚拟机 一样拥有一个被隔离的操作系统实例，用来运行应用程序。容器的目的则是使应用程序能够移植，并把所有依赖关系包含进去。容器的优势：</p>
<ul>
<li>容器能与主机的操作系统共享资源，因而它的效率高出一个数量级；</li>
<li>容器具有可移植性；</li>
<li>容器是轻量的；</li>
<li>云端部署，用户可以下载并执行复杂的应用程序，而无需花费大量时间在配置和安装的问题上，也无需担心对系统本身的改动。</li>
</ul>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="容器的特点"><a href="#容器的特点" class="headerlink" title="容器的特点"></a>容器的特点</h2><ol>
<li>容器只能运行与主机一样的内核；</li>
<li>容器 引擎（container engine）负责启动及停止容器；</li>
<li>容器可以把主机上的应用程序隔离开来。</li>
</ol>
<h2 id="Docker与容器"><a href="#Docker与容器" class="headerlink" title="Docker与容器"></a>Docker与容器</h2><ol>
<li>Docker 利用现有的 Linux 容器技术，以不同方式将其封装及扩展——主要是通过提供可移植的镜像，以及一个用户友好的接口——来创建一套完整的容器创建及发布方案；</li>
<li>Docker 平台拥有两个不同部分：负责创建与运行容器的 Docker 引擎，以及用来发布容器的云服务 Docker Hub；</li>
</ol>
<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><ol>
<li>把容器的名称或 ID作为 docker inspect 命令的参数，来获取更多有关某个容器的信息；</li>
<li>以容器名称作为docker logs的参数，就能得知这个容器里曾经发生过的一切事情；</li>
<li>docker ps -a命令会列出所有容器，包括已经停止的容器；</li>
<li>只需为镜像指定一个合适名称的仓库和标签，然后用 docker push 命令上传到 Docker Hub；</li>
<li>正常获取 shell 的方法是执行 docker exec 命令；</li>
<li>Docker 通过数据卷与其他容器共享，而任何修改都会直接发生在主机的文件系统里，数据卷是直接在主机挂载的文件或目录，不属于常规联合文件系统的一部分。  声明一个目录为数据卷有两种方法，第一种是在 Dockerfile 里使用 VOLUME 指令，第二种是在执行docker run 的时候使用 -v 参数，可以在主机上打开一个新的 shell，通过执行 docker inspect 命令，找出数据卷在主机上的实际位置  ；将 docker run 命令的 -v选项用法进行扩展，使到能够具体指明数据卷要绑定的主机目录，命令格式为 -v HOST_DIR:CONTAINER_DIR（其中 HOST_DIR 为主机目录，CONTAINER_DIR 为容器目录）</li>
<li>停止所有的容器：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>删除所有的已停止的容器：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -v $(docker ps -aq -f status=exited)</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<h2 id="Docker术语"><a href="#Docker术语" class="headerlink" title="Docker术语"></a>Docker术语</h2><ol>
<li>寄存服务(registry)：负责托管和发布镜像的服务，默认为Docker Hub；</li>
<li>仓库（repository）：一组相关镜像的集合；</li>
<li>标签（tag）：仓库中镜像的识别号，由英文和数字组成；</li>
<li>Docker 守护进程：负责容器的创建、运行和监控，还负责镜像的构建和储存；</li>
<li>Docker 客户端  ：</li>
<li>核心技术：<ul>
<li>cgroups，负责管理容器使用的资源（例如 CPU 和内存的使用）；</li>
<li>Namespaces（命名空间），负责容器之间的隔离。</li>
</ul>
</li>
<li>技术支持：集群管理、服务发现（service discovery）工具和更先进的联网功能，Swarm是Docker 的集群方案，Docker Compose 是负责构建和运行由多个 Docker 容器所组成的应用程序的工具，Docker Machine 可以在本地或远程资源上安装和配置 Docker 主机  ，Kitematic 用于运行和管理 Docker 容器；</li>
<li>Docker 容器使用联合文件系统（Union File System, UFS），它允许多个文件系统以层级方式挂载，并表现为一个单一的文件系统。Docker 只需查看最上面的可读写层，便可找出曾对运行系统所作的所有改变；</li>
<li>容器可以处于以下几种状态之一： 已创建（created）、 重启中（restarting）、 运行中（running）、 已暂停（paused）和已退出（exited）；</li>
<li>Docker 的连接（link）是允许同一主机上的容器互相通信的最简单方法，当使用 Docker 默认的联网模型时，容器之间的通信将通过 Docker 的内部网络，这意味着主机网络无法看见这些通信；</li>
<li>数据容器，这种容器的唯一目的就是与其他容器分享数据 ，提供了一个方便的命名空间，使数据卷可以很容易通过 –volumes-from命令进行加载 ；</li>
</ol>
<h2 id="Dockerfile可用指令"><a href="#Dockerfile可用指令" class="headerlink" title="Dockerfile可用指令"></a>Dockerfile可用指令</h2><ol>
<li>ADD ：从构建环境的上下文或远程 URL 复制文件至镜像；</li>
<li>CMD ：当容器启动时执行指定的指令，假如定义了多个 CMD 指令，那么只有最后一个生效，前面出现过的 CMD 指令全部无效；</li>
<li>COPY：用于从构建环境的上下文复制文件至镜像；</li>
<li>ENTRYPOINT ：设置一个于容器启动时运行的可执行文件；</li>
<li>ENV：设置镜像内的环境变量；</li>
<li>EXPOSE ：向 Docker 表示该容器将会有一个进程监听所指定的端口；</li>
<li>FROM ：设置 Dockerfile 使用的基础镜像 ；</li>
<li>MAINTAINER ：把镜像中的“作者 ”元数据设定为指定的字符串 ；</li>
<li>ONBUILD ：指定当镜像被用作另一个镜像的基础镜像时将会执行的指令；</li>
<li>RUN ：在容器内执行指定的指令，并把结果保存下来 ；</li>
<li>USER ：设置任何后续的 RUN、 CMD 或 ENTRYPOINT 指令执行时所用的用户 ；</li>
<li>VOLUME ：指定为数据卷的文件或目录 ；</li>
<li>WORKDIR ：对任何后续的 RUN、 CMD、 ENTRYPOINT、 ADD 或 COPY 指令设置工作目录 ；</li>
</ol>
<h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><ol>
<li><p>容器不适合构建那种发布周期以周或月为单位的大型单一架构企业软件。  相反，容器天然适合采用微服务的方式，以及探索诸如持续部署（continuous deployment）这样的技术，使得我们能安全地在一天内多次更新生产环境；</p>
</li>
<li><p>没有映射端口的话，可以通过下面的命令访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl $(docker-machine ip default):port</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以把主机上的源码目录绑定挂载（bind mount）到容器内的源码目录之上 ,防止因为改变源码而要重新部署，使用命令如下：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p port1:port2 -v "$PWD"/app:/app identidock</span><br><span class="line">//-v "$PWD"/app:/app 参数把位于 /app 的 app 目录挂载到容器内,它将覆盖容器中 /app 目录</span><br><span class="line">的内容 ，而且在容器内还可以进行读写（如果你不希望这样，也可以把数据卷挂载为只读）;参数 -v 必须是绝对路径。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>永远谨记设置USER：</strong>在任何 Dockerﬁle 中，把 USER 设置妥当都是非常重要的，如果你不这样做， 容器中的进程将会以 root 身份运行；</li>
<li>当需要在一台主机上运行多个容器的时候，让 Docker 自动寻找并映射到未使用的端口， 比你自己跟踪哪些端口更轻松；</li>
<li>微服务架构的系统非常适合横向扩展到多台机器，能够轻松快速地被其他效能更高且功能相同的服务替代；不足之处就是分布式组件带来的额外开销，服务编排和服务发现是非常需要解决的问题;</li>
<li>Docker这种平台使得容器自然而然地演变成了一组具有明确功能的小服务,然后交互就形成了更大的系统。</li>
</ol>
<h2 id="Docker自动化"><a href="#Docker自动化" class="headerlink" title="Docker自动化"></a>Docker自动化</h2><ol>
<li>使用 YAML 文件来存储不同容器的配置，节省开发者重复且容易出错的输入，以及避免了自行开发解决方案的负担；</li>
<li>一个docker-compose的配置文件示例：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">identidock:</span></span><br><span class="line">	<span class="attr">build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">	<span class="attr">ENV:</span> <span class="string">DEV</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">./app:/app</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置文件说明：</li>
</ol>
<ul>
<li>“identidock”：构建的容器名称；</li>
<li>“build: .”:告知镜像是通过当前目录下的Dockerfile构建的；</li>
<li>“ports:”:用于声明对外开放的接口；</li>
<li>“environment:”：相当于docker run 命令的 -e 参数， 用来设置容器的环境变量；</li>
<li>“volumes:”：关键字相当于 docker run 的 -v 参数，用于配置数据卷。</li>
</ul>
<ol start="4">
<li>docker-compose命令的参数：</li>
</ol>
<ul>
<li>up：启动所有在compose文件中定义的容器，并且把它们的日志信息汇集在一起，通常使用-d参数使得在后台运行；</li>
<li>build：重新构造由Dockerfile构建的镜像;</li>
<li>ps：获取由compose管理的容器的状态信息;</li>
<li>run：启动一个容器,并运行一个一次性的命令;</li>
<li>logs：汇集由compose管理的容器的日志,并以彩色输出;</li>
<li>stop：停止容器,但是不会删除它们;</li>
<li>rm：删除已经停止的容器,配合-v参数删除任何由Docker管理的数据卷,当然还有其他的命令参数，这里不再一一列出了。</li>
</ul>
<h2 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h2><ol>
<li>别让 latest 标签误导你，很多仓库都会把它作为最 新的稳定版镜像的别名，但这只不过是一个惯例，而并非出于任何严格规定，latest 标签的镜像不会自动更新——也就意味着仍需明确执行 docker pull 命令来获取最新版本；</li>
<li>Docker Hub 是 Docker 公司提供的一个线上镜像寄存服务；</li>
</ol>
<h2 id="Docker日志"><a href="#Docker日志" class="headerlink" title="Docker日志"></a>Docker日志</h2><ol>
<li><p>如果想要系统能够正常的运行，对于容器的日志进行有效的监控和记录是必不可少的，而容器的短暂生命周期特性，导致日志集中管理是必不可少的；</p>
</li>
<li><p>默认的日志记录直接使用docker logs container_name命令就可以取得；</p>
</li>
<li><p>日志记录方法可以在启动 Docker 守护进程时通过 –log-driver 参数变更:</p>
<ol>
<li>json-file：默认记录方式；</li>
<li>syslog：系统日志驱动；</li>
<li>journald：systemd 的 journal 日志；</li>
<li>gelf：Graylog Extended Log Format（GELF）驱动；</li>
<li>fluentd：将日志信息转发到fluentd；</li>
<li>none：关闭日志。</li>
</ol>
</li>
<li><p>把所有的日志汇总到同一个地方（日志有可能是跨主机的），这样能够利用工具对日志进行分析和监控：</p>
<ol>
<li>在所有的容器内运行多一个进程，这个进程的角色相当于把日志转发到汇总服务的代理；</li>
<li>在主机上或在另一个独立的容器中，收集日志并转发到汇总服务；</li>
</ol>
</li>
<li><p>使用ELK进行日志记录：</p>
<ol>
<li>ELK 是 Elasticsearch、Logstash 和 Kibana 的首字母缩写；</li>
<li>Elasticsearch：接近实时搜索的文本搜索引擎；</li>
<li>Logstash：合读取原始日志，然后对其解析和过滤，再把结果发送到其他服务，例如索引或存储；</li>
<li>Kibana：基于 JavaScript 的 Elasticsearch 图形界面。 它可以用来运行 Elasticsearch 的查询， 并以 各种图表的形式显示结果，它还提供了仪表盘的功能，使用户对系统的状态一目了然；</li>
</ol>
</li>
<li><p>Docker 自带一个基本的命令行工具，名为 docker stats，能够返回一个资源使用情况的实时流; 这个命令接受一个或多个容器名称作为参数， 并打印各种关于这些容器的统计数据，与 Unix 程序 top 很类似;</p>
</li>
<li><p>谷歌的 cAdvisor（Container Advisor 的缩写）是最常用的 Docker 监控工具。它对主机上运行的容器以图形化的方式展示资源使用情况及性能指标的总览;cAdvisor 能够汇总和处理各种统计数据，其他人可以通过 REST API 获取，方便进一步的处理和存储;</p>
</li>
<li><p>谷歌已经开发出一套建立在 cAdvisor 之上的集群监控解决方案，称为 Heapster;</p>
</li>
<li><p>Prometheus是由 SoundCloud开发的一个开源集群监控解决方案， 能够接受众多不同的来源作为输入，其中包括 cAdvisor。 它的目的是要支持大型的微服务架构系统，目前已在 SoundCloud 和 Docker 公司正式使用;</p>
</li>
</ol>
<h2 id="Docker工具"><a href="#Docker工具" class="headerlink" title="Docker工具"></a>Docker工具</h2><ol>
<li><p>服务发现是为某个服务的客户端自动提供连接至该服务的合适实例的信息（通常是 IP 地址和端口）的过程；服务发现的一种实现方法是让客户端只用服务名称发出请求，然后在后台以特殊方法把名称对应到合适的地址；</p>
</li>
<li><p>将不同主机上的容器连接起来的一种方法叫作大使容器（ambassador）。 它其实是代理容器，代替真正的容器（或服务）接收网络通信，并把流量转发至真正的服务中去，允许在无需修改任何代码的情况下，让生产环境的联网架构 有别于开发环境；</p>
</li>
<li><p>Docker 联网有四个可用的基本模式：网桥（bridge）、主机（host） 、容器（container）和未联网（none）；</p>
</li>
<li><p>集群（Clustering）：把“主机”组合并通过网络连接起来，虚拟机或裸机皆可。集群看起来应该像一个单一 资源，而不是一组互不相干的机器，Swarm是Docker 自带的集群工具；</p>
</li>
<li><p>编排（Orchestration）：协调各组件使它们共同运作，在适合的主机上启动容器并把它们连接起来，编排系统也 可能包括扩展的支持、自动故障切换，以及节点的负载均衡；</p>
</li>
<li><p>管理（Management）：监督系统及支持各种管理任务；</p>
</li>
<li><p>过滤器（filter）：控制哪些节点可用于运行容器，有几种过滤器是默认使用的；</p>
</li>
<li><p>策略：</p>
<ol>
<li>分散（spread）：将容器放置在负载最小的主机上；</li>
<li>集装（binpack）：将容器放置在负载最多且还有可用空间的容器上；</li>
<li>随机（random）：将容器随机安排在任何主机上。</li>
</ol>
</li>
<li><p>安全问题：</p>
<ol>
<li>内核漏洞：所有容器以及主机都共同使用一个内核，因此内核漏洞的严重性将会被放大；</li>
<li>拒绝服务（DoS）攻击：所有容器共同使用相同的内核资源；</li>
<li>容器突破：留心潜在的权限提升攻击；</li>
<li>镜像污染：攻击者可以欺骗你运行他的镜像， 那么主机和数据将受到威胁；</li>
<li>密钥泄露：攻击者如果能够掌握密钥，他就能够访问这些额外的服务；</li>
</ol>
</li>
<li><p>系统防御策略也应该是多重的：</p>
<ol>
<li>容器可以置于虚拟机中运行；</li>
<li>可以防止攻击者到达主机或属于其他用户的容器；</li>
<li>监控系统必须确保在侦测到异常行为时通知管理员；</li>
<li>部署防火墙，限制从网络访问容器的权限，以缩小来自外部的攻击面等。</li>
</ol>
</li>
<li><p>每个进程和容器，应以足够执行其功能的最低访问权限和资源运行；需要保证镜像的出处（provenance）的真实性，建立软件或数据出处的主要工具是安全散列，安全散列类似于数据指纹；</p>
</li>
<li><p><strong>永远不要以 root 用户的身份在容器内运行正式的应用</strong>，Dockerﬁle 在任何情况下都应该创建一个普通用户并利用 USER 语句或 entrypoint 脚本切换为这个用户：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r user_grp &amp;&amp; useradd -r -g user_grp user </span></span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>容器应仅仅打开在生产环境中必须的端口，并且端口只对所需的容器开放;应用程序很可能不需要使用任何 setuid 或 setgid 的二进制文件,如果可以禁用或删除这些二进制文件，那么就能阻止攻击者利用它们来发动提权攻击;</p>
</li>
<li><p>限制内存使用，可以防止 DoS 攻击和应用程序的内存泄漏,docker run 的 -m 和 –memory-swap 参数可以用来限制容器能够使用的内存和虚拟内存容量;–memory-swap 设置的是<strong>总共的内存容量</strong>,如果只用 了 -m 参数而没有 –memory-swap，那么 –memory-swap 就会被设置为 -m 参数的一倍；</p>
</li>
<li><p>Docker 控制 CPU 占有率是依靠相对的比重，默认值为 1024，所有容器默认都有相同的 CPU 使用份额，CPU 可以使用完全公平调度器（Completely Fair Scheduler，CFS）进行分配， 方法是利用 –cpu-period 和 –cpu-quota 参数，容器会被分配一个在一段既定时间内能够使用的 CPU 配额（以微秒为单位）；</p>
</li>
<li><p><strong>限制重新启动：</strong>只需把重启策略由 always 改为 on-failure 即可；如下面的例子（Docker 只会最多重启容器10次）：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=on-failure:10 my-flaky-image</span><br></pre></td></tr></table></figure>

<ol start="17">
<li>可以在执行 docker run 时使用 –read-only 参数，把容器的文件系统 设置为完全只读；</li>
<li>进程的资源限制（ulimits）可以用于 Docker 容器，在执行docker run 时加上 –ulimit 选项，或在启动 Docker 守护进程时加上 –default-ulimit 选项给所有容器设置默认值；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Docker的很多特性和微服务息息相关，为微服务提供了良好的平台基础，现在的服务架构再逐渐倾向于微服务，掌握Docker技术可以很方便地搭建自己的开发环境，部署自己的服务。这部分的内容只能说是大致入门Docker,还需要不断深入学习!</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Express &amp; LoopBack</title>
    <url>/2020/04/29/Express-LoopBack/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Express 像一个精巧的微内核，不足以支撑起一个大项目,一般还会结合LoopBack完成企业级的应用！这部分不是去进行系统性的学习LoopBack框架,主要是为了能够更快速的阅读公司的后端Nodejs代码，加速自己的开发过程！LoopBack是一个真正的企业级框架，随着使用的深入，读者将会发现它更多的用法和优秀的特性。LoopBack 作为一个面向企业级的 Web 框架，提供了更丰富的功能，这在我们添加模型，权限控制，连接数据源等操作时，极大的提升我们的效率。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>LoopBack 是建立在 Express 基础上的企业级 Node.js 框架；</li>
<li>特性：</li>
</ol>
<ul>
<li>只需编写少量代码就能创建动态端到端的 REST API</li>
<li>支持主流的数据源，例如 Mongodb、SOAP、MySQL 等和 REST API 的数据</li>
<li>一致化的模型关系和对 API 访问的权限控制</li>
<li>可使用内置的用于移动应用场景下的地理定位、文件服务以及消息推送</li>
<li>提供 Android、iOS 和 JavaScript 的 SDK，轻松创建客户端应用程序</li>
<li>支持在云端或者本地部署服务等</li>
</ul>
<ol start="3">
<li><del>StrongLoop 是生成 LoopBack 框架的工具程序，使用下面的命令安装：</del></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 尝试安装在iMac上，失败了</span></span><br><span class="line">npm install -g strongloop</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>安装 Loopback 4 CLI：</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g @loopback/cli</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>LoopBack 符合MVC设计规范，对于熟悉MVC的开发人员来说，这个架构可以更方便上手；</li>
<li>创建项目，直接使用命令 <strong>lb4 项目名称</strong> 执行命令后按照提示进行操作，输入项目信息选择配置后按回车将自动创建项目；</li>
<li>等待创建项目创建完成后进入目录，然后使用命令 <strong>npm start</strong> 就可以启动项目了;</li>
<li>浏览器访问<a href="http://localhost:3000/；" target="_blank" rel="noopener">http://localhost:3000/；</a></li>
</ol>
<h2 id="添加REST-API"><a href="#添加REST-API" class="headerlink" title="添加REST_API"></a>添加REST_API</h2><ol>
<li><strong>添加数据源：</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lb4 datasource</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>LoopBack支持主流的数据源，例如 Mongodb、SOAP、MySQL 等和 REST API 的数据，方便起见我选择框架内置的数据库，当然实际的项目可能根据需求进行添加数据库，按照流程添加数据源即可；</li>
<li><strong>添加模型：</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lb4 model</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>添加Repository：</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lb4 repository</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>添加Controller:</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lb4 controller</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用 <strong>npm start</strong> 启动项目，然后就可以测试了，LoopBack列出了所有对外的模型和每一个模型的接口，以及如何构造GET等请求；</li>
<li>使用POSTMAN进行测试：<ol>
<li>在Headers中添加KEY: Content-Type    VALUE: application/json</li>
<li>在Body中选择raw,然后格式为JSON，然后在内容中按照JSON格式来就行了，测试各个功能；</li>
<li>按照LoopBack提出的规则，很简单的就可以测试每个功能；</li>
</ol>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Grokking Algorithms(0)</title>
    <url>/2020/04/26/Grokking-Algorithms-0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>算法是一组完成任务的指令，任何代码片段都可视为算法 ，算法是必须能完成一种功能的指令集合；二分查找是一种算法，其输入是一个有序的元素列表 ，如果要查找的元素包含在列表中，二分查找返回其位置；否则返回null。二分法是算法里非常重要的一种方法，非常重要！  <strong>如果只是养成了“一言不合就写脚本”的习惯，与真正优秀的程序员仍然有很大的差距！</strong>最重要的是工作方式的转变以及思维方式的转变，养成良好的编程习惯以及良好的记录习惯，更重要的是<strong><em>思维方式*</em></strong>的转变！我们需要转换自己的思维，算法是为了解决某一个问题而衍生出的产品，不是为了算法而算法，因为要去面试算法工程师，我就去学几个比较流行的算法，如果为了解决某一个实际的问题而去学习或者思考而出现的算法才是有意义的！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="优秀算法的特质"><a href="#优秀算法的特质" class="headerlink" title="优秀算法的特质"></a>优秀算法的特质</h2><ul>
<li>高速处理</li>
<li>简单可维护性更好</li>
<li>通用性</li>
</ul>
<h2 id="算法执行效率"><a href="#算法执行效率" class="headerlink" title="算法执行效率"></a>算法执行效率</h2><ol>
<li>大O表示法是一种特殊的表示法，指出了算法的速度有多快；<ol>
<li>O(log n)，也叫对数时间，这样的算法包括二分查找 ;</li>
<li>O(n)，也叫线性时间，这样的算法包括简单查找 ;</li>
<li>O(n * log n)  ,比如快排；</li>
<li>O(n^2)  ,比如一种速度较慢的排序算法 ；</li>
<li>O(n!)  比如递归；</li>
</ol>
</li>
<li>O(log n)比O(n)快。需要搜索的元素越多，前者比后者就快得越多；</li>
</ol>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol>
<li>编写递归函数时，必须告诉它何时停止递归；</li>
<li>每个递归函数都有两部分：基线条件（ base case）和递归条件（ recursive case） ；</li>
<li>调用栈（ call stack）  对于递归的实现非常重要；</li>
<li>存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息 ；</li>
</ol>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ol>
<li>散列函数“将输入映射到数字”  ；</li>
<li>散列函数总是将同样的输入映射到相同的索引 ，散列函数将不同的输入映射到不同的索引；</li>
<li>散列表可能是最有用的，也被称为散列映射、映射、字典和关联数组；</li>
<li>散列表由键和值组成 ，可以将散列表用作缓存；</li>
<li>散列表：</li>
</ol>
<ul>
<li>模拟映射关系  </li>
<li>防止重复  </li>
<li>缓存/记住数据</li>
</ul>
<ol start="6">
<li>散列函数总是将不同的键映射到数组的不同位置；</li>
<li>哈希冲突，如果两个键映射到了同一个位置，就在这个位置存储一个链表 ；</li>
<li>散列函数将键均匀地映射到散列表的不同位置 是最理想的情况；</li>
<li>要避免冲突，需要有：  </li>
</ol>
<ul>
<li>较低的填装因子  </li>
<li>良好的散列函数  </li>
<li>*<em>注意：一旦填装因子超过0.7，就该调整散列表的长度  *</em></li>
</ul>
<h2 id="关注的算法及数据结构"><a href="#关注的算法及数据结构" class="headerlink" title="关注的算法及数据结构"></a>关注的算法及数据结构</h2><ol>
<li>树，二叉查找树</li>
<li>反向索引（ inverted index）  </li>
<li>傅里叶变换</li>
<li>并行算法：<ol>
<li>并行性管理开销；</li>
<li>负载均衡。</li>
</ol>
</li>
<li>分布式算法 MapReduce  ：映射（ map）函数和归并（ reduce）函数  ；</li>
<li>布隆过滤器和 HyperLogLog ；</li>
<li>安全散列  （secure hash algorithm， SHA） 算法 ：SHA-0、 SHA-1、 SHA-2和SHA-3 ；</li>
<li>Diffie-Hellman算法使用两个密钥：公钥和私钥；</li>
<li>线性规划用于在给定约束条件下最大限度地改善指定的指标 ；</li>
<li>线性规划是一个宽泛得多的框架，图问题只是其中的一个子集 ；</li>
<li>Simplex算法；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>阅读量决定了学习能力的上限，写作量决定了学习能力的下限！</strong>算法需要长期的积累，需要大量的练习，强大的数学功底和推导能力。这部分是算法的开头，也是起步，慢慢积累吧！</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch Quick Start</title>
    <url>/2020/05/07/Elasticsearch-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>如何使用切面技术（faceting）基于查询结果来计算汇总数据，如何使用新引进的聚合框架（分析引擎，可以为你的数据赋予意义）。学习如何使用Elasticsearch的空间搜索能力（spatial capability）和预搜索（prospective search）使得我们的数据更有用是做这篇文章的主要目的！GitHub使用Elasticsearch搜索20TB的数据！<strong>推荐书籍：《Elasticsearch 服务器开发（第二版）》· [波兰] Rafa Kuc Marek Rogozinskl著 蔡建斌译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Elasticsearch：<strong><em>优秀的全文检索和分析引擎</em></strong></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2be99af31f82a8b99b6fcbce9da847a2-57206" alt="Elasticsearch基本原理"></p>
</li>
<li><p>文档（document）：索引和搜索时使用的主要数据载体，包含一个或多个存有数据的字段</p>
</li>
<li><p>字段（field）：文档的一部分，包含名称和值两部分</p>
</li>
<li><p>词（term）：一个搜索单元，表示文本中的一个词</p>
</li>
<li><p>标记（token）：表示在字段文本中出现的词，由这个词的文本、开始和结束偏移量以及类型组成</p>
</li>
<li><p>倒排索引建立索引中词和文档之间的映射，不同于以往的正排索引</p>
</li>
<li><p>分析的工作由分析器完成，它由一个分词器（tokenizer）和零个或多个标记过滤器（token filter）组成，也可以有零个或多个字符映射器（character mapper）</p>
<ul>
<li>小写过滤器（lowercase filter）：把所有的标记变成小写</li>
<li>同义词过滤器（synonyms filter）：基于基本的同义词规则，把一个标记换成另一个同义的标记</li>
<li>多语言词干提取过滤器（multiple language stemming filter）：减少标记（实际上是标记中的文本部分），得到词根或者基本形式，即词干</li>
</ul>
</li>
<li><p>通过使用多个过滤器，几乎可以达到无限的分析可能性</p>
</li>
<li><p>评分（scoring）：根据文档和查询的匹配度用计分公式计算的结果，Apache Lucene使用TF/IDF（term frequency/inverse document frequency，词频/逆向文档频率）评分机制（一种计算文档在我们查询上下文中相关度的算法）</p>
</li>
<li><p>索引（index）是Elasticsearch对逻辑数据的逻辑存储，可以分为更小的部分，可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个分片可以有多个副本（replica）</p>
</li>
<li><p>存储在Elasticsearch中的主要实体叫文档（document），文档由多个字段组成， 每个字段可能多次出现在一个文档里， 这样的字段叫多值字段（multivalued）</p>
</li>
<li><p>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象</p>
</li>
<li><p>Elasticsearch在映射中存储有关字段的信息，每一个文档类型都有自己的映射，即使我们没有明确定义</p>
</li>
<li><p><strong>CRUD（create-retrieve-update-delete，增删改查）</strong></p>
</li>
<li><p>Elasticsearch启动后，会创建如下目录 ：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ad51462a4f2534485f0e214e19eb4a2b-40950" alt="运行后建立目录"> </p>
</li>
</ol>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol>
<li>Elasticsearch可以运行在许多互相合作的服务器上， 这些服务器称为集群（cluster），形成集群的每个服务器称为节点（node）</li>
<li>数据可以分为较小的称为分片（shard）的部分，每个分片可以放在不同的服务器上，数据可以在集群的节点中传播，多个分片可以加快索引</li>
<li>副本（replica）只是一个分片的精确复制，每个分片可以有零个或多个副本，用于<strong>提高查询吞吐量或实现高可用性</strong></li>
<li>Elasticsearch处理许多节点，集群的状态由时光之门控制</li>
<li>Elasticsearch REST API可用于各种任务，可以管理索引，更改实例参数，检查节点和群集状态，索引数据，搜索数据或者通过GET API检索文档</li>
<li>查询信息（本地搭建）：<ol>
<li>基本信息：<a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a></li>
<li>集群中节点的信息：<a href="http://localhost:9200/_cluster/state/nodes/" target="_blank" rel="noopener">http://localhost:9200/_cluster/state/nodes/</a></li>
<li>关闭节点：<a href="http://localhost:9200/_cluster/nodes/_shutdown" target="_blank" rel="noopener">http://localhost:9200/_cluster/nodes/_shutdown</a></li>
</ol>
</li>
</ol>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ol>
<li>更多分片和副本：<ul>
<li>更多分片使索引能传送到更多服务器，意味着可以处理更多文件，而不会降低性能</li>
<li>更多分片意味着获取特定文档所需的资源量会减少，因为相较于部署更少分片时，存储在单个分片中的文件数量更少</li>
<li>更多分片意味着搜索索引时会面临更多问题，因为必须从更多分片中合并结果，使得查询的聚合阶段需要更多资源</li>
<li>更多副本会增强集群系统的容错性，因为当原始分片不可用时，其副本将替代原始分片发挥作用</li>
<li>更多副本意味着查询吞吐量将会增加，因为执行查询可以使用分片或分片的任一副本</li>
</ul>
</li>
<li>模式映射（schema mapping，或简称映射）用于定义索引结构:<ul>
<li>唯一标识符</li>
<li>名称</li>
<li>发布日期</li>
<li>内容</li>
</ul>
</li>
<li>每个字段类型可以指定为Elasticsearch提供的一个特定核心类型，核心类型有：<ul>
<li>string：字符串</li>
<li>number：数字</li>
<li>date：日期</li>
<li>boolean：布尔型</li>
<li>binary：二进制</li>
</ul>
</li>
<li>数值字段类型有：<ul>
<li>byte：定义字节值</li>
<li>short：定义短整型值</li>
<li>integer：定义整型值</li>
<li>long：定义长整型值</li>
<li>float：定义浮点值</li>
<li>double：定义双精度值</li>
</ul>
</li>
<li>开箱即用的分析器：<ul>
<li>standard：方便大多数欧洲语言的标准分析器</li>
<li>simple：这个分析器基于非字母字符来分离所提供的值，并将其转换为小写形式</li>
<li>whitespace：这个分析器基于空格字符来分离所提供的值</li>
<li>stop：这个分析器类似于simple分析器，但除了simple分析器的功能，它还能基于所提供的停用词过滤数据</li>
<li>keyword ：这是一个非常简单的分析器， 只传入提供的值</li>
<li>pattern：使用正则表达式灵活地分离文本</li>
<li>language：旨在特定的语言环境下工作</li>
<li>snowball：提供了词干提取算法</li>
</ul>
</li>
<li>可用的相似度模型：<ul>
<li>Okapi BM25模型：基于概率模型，概率模型估算根据指定查询找到指定文档的概率</li>
<li>随机性偏差（divergence from randomness）模型：这种相似度模型基于具有相同名称的概率模型</li>
<li>信息基础（information-based）模型：这是新推出的最后一个相似度模型，与随机性偏差模型非常相似</li>
</ul>
</li>
<li>合并调度器指示Elasticsearch合并过程的方式，有两种可能：<ul>
<li>并发合并调度器：默认，在独立的线程中执行，定义好的线程数量可以并行合并</li>
<li>串行合并调度器：在调用线程（即执行索引的线程）中执行。合并进程会一直阻塞线程直到合并完成</li>
</ul>
</li>
<li>Elasticsearch计算文档标识符的散列值，以此为基础将文档放置于一个可用的主分片上，接着，这些文档被重新分配至副本</li>
<li>路由可以控制文档和查询转发的目的分片</li>
</ol>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ol>
<li><p>无论想执行的操作是更改映射还是文档索引化，都要用REST API向Elasticsearch发送JSON结构的数据；</p>
</li>
<li><p>Elasticsearch支持两种类型的查询：基本查询和复合查询；</p>
</li>
<li><p>查询Elasticsearch最简单的办法是使用URI请求查询；</p>
</li>
<li><p>Elasticsearch能控制想要的最多结果数以及想从哪个结果开始：</p>
<ul>
<li>from，该属性指定我们希望在结果中返回的起始文档，默认值是0    </li>
<li>size，该属性指定了一次查询中返回的最大文档数，默认值为10    </li>
</ul>
</li>
<li><p>Elasticsearch提供一项功能，让我们可以根据文档需要满足的最低得分值，来过滤结果；</p>
</li>
<li><p>Elasticsearch是一个分布式搜索引擎，因此提供的所有功能在性质上都必须是分布式的；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e07ecfd5658278ed2efbd46541cf628b-40264" alt="查询"></p>
</li>
<li><p>Elasticsearch允许通过指定搜索类型来选择查询在内部如何处理，为了控制查询如何执行，可以使用search_type请求参数，并将其设置为下列值之一：</p>
<ul>
<li>query_then_fetch</li>
<li>query_and_fetch</li>
<li>dfs_query_and_fetch </li>
<li>dfs_query_then_fetch</li>
<li>count   </li>
<li>scan  </li>
</ul>
</li>
<li><p>Elasticsearch具有广泛的搜索和数据分析能力，以不同的查询、筛选和聚合等形式公开；</p>
</li>
<li><p>多词条查询允许匹配那些在内容中含有某些词条的文档。词条查询允许匹配单个未经分析的词条，多词条查询可以用来匹配多个这样的词条；</p>
</li>
<li><p>match查询把query参数中的值拿出来，加以分析，然后构建相应的查询；</p>
</li>
<li><p>Elasticsearch支持下列专用过滤器：  </p>
<ul>
<li>bool过滤器  </li>
<li>geo_shape过滤器 </li>
<li>has_child过滤器 </li>
<li>has_parent过滤器 </li>
<li>ids过滤器</li>
<li>indices过滤器</li>
<li>match_all过滤器  </li>
<li>nested过滤器  </li>
<li>prefix过滤器 </li>
<li>range过滤器</li>
<li>regexp过滤器 </li>
<li>term过滤器</li>
<li>terms过滤器  </li>
</ul>
</li>
<li><p>Elasticsearch在内部为每个过滤器都建立了一个叫bitset的结构，它保存着索引中的后续文档是否跟过滤器匹配的信息 ，Elasticsearch允许我们控制高亮片段的数量以及它们的大小，为此公开了两个属性供使用 ； </p>
</li>
</ol>
<h2 id="扩展索引结构-amp-更好的搜索"><a href="#扩展索引结构-amp-更好的搜索" class="headerlink" title="扩展索引结构&amp;更好的搜索"></a>扩展索引结构&amp;更好的搜索</h2><ol>
<li>为索引数组，只需要在数组名称中指定字段的属性；</li>
<li>得分是描述文档与查询相关度的一个参数；</li>
<li>Lucene返回文档时，意味着文档与我们发送的查询匹配，并且对该文档已给出一个分数；</li>
</ol>
<h2 id="超越全文检索"><a href="#超越全文检索" class="headerlink" title="超越全文检索"></a>超越全文检索</h2><ol>
<li>可以使用Elasticsearch作为各种系统的一个关键部分，处理大量的数据，提取结论，并将这些数据可视化为可读的方式；</li>
<li>有两组聚合：度量聚合（ metric aggregation）和桶聚合（ bucketing aggregation）<ul>
<li>度量聚合接收一个输入文档集并生成至少一个统计值  </li>
<li>桶聚合返回很多子集，并限定输入数据到一个特殊的叫做桶的子集中  </li>
</ul>
</li>
<li>查询是最简单的切面类型，它允许在切面结果中得到与查询匹配的文档数量；</li>
<li>除了使用查询以外， Elasticsearch允许使用过滤器来计算切面；</li>
<li>切面允许我们指定一个字段， Elasticsearch使用这个字段并返回该字段上最频繁的词条；</li>
<li>基于范围的切面使我们可以根据定义好的一组范围获取文档数，此外，还可以获取指定字段的汇总数据，每个范围<br>返回以下统计信息：<ul>
<li>from：定义了范围的左界（如果在查询中指定）    </li>
<li>to：定义了范围的右界（如果在查询中指定）  </li>
<li>min：定义了给定范围内，用作切面的字段的最小值  </li>
<li>max：定义了给定范围内，用作切面的字段的最大值  </li>
<li>count：定义了落在指定范围内的字段值的文档数目  </li>
<li>total_count：定义了落在指定范围内的字段值的文档总数  </li>
<li>total：定义了落在指定范围内的所有字段值的总和  </li>
<li>mean：定义了落在指定范围内用作range切面的字段值的均值  </li>
</ul>
</li>
<li>直方图切面允许你根据字段值的间隔来建立一个字段值的直方图；</li>
<li>statistical切面允许我们为数值型字段计算统计数据，在返回数据中，我们得到计数、总和、平方和、平均值、最小值、最大值、方差和标准偏差等统计信息；</li>
<li>查询中包含的过滤器并不会缩小切面结果的范围，切面的计算时基于与你的查询匹配的文档；</li>
<li>Elasticsearch提供了以下三种建议器的类型：<ul>
<li>term，这种建议器更正每个传入的单词，在非短语查询中很有用，比如单词条查询</li>
<li>phrase，这种建议器工作在短语上，返回一个恰当的短语</li>
<li>completion，这种建议器旨在提供快速高效的自动完成结果  </li>
</ul>
</li>
<li>Elasticsearch中，多词条过滤器乍看是个非常简单的过滤器！</li>
</ol>
<h2 id="深入集群"><a href="#深入集群" class="headerlink" title="深入集群"></a>深入集群</h2><ol>
<li>启动一个Elasticsearch节点时，该节点会开始寻找具有相同集群名字并且可见的主节点。如果找到主节点，该节点加入一个已经组成了的集群；  </li>
<li>默认情况下， Elasticsearch允许节点同时成为主节点和数据节点；</li>
<li>ping是一个节点间发送的信号，用来检测它们是否还在运行以及可以响应。主节点会ping集群中的其他节点，其他节点也会ping主节点；</li>
<li>Elasticsearch允许配置何时启动最初的恢复过程，恢复是初始化所有分片和副本的过程，从事务日志中读取所有数据，并应用到分片上； </li>
<li>字段数据缓存是Elasticsearch缓存的一部分，主要用于当查询对字段执行排序或切面时；</li>
<li>字段数据断路器（ field data circuit breaker）允许估计一个字段加载到缓存所需的内存；</li>
<li>一个好的软件可以管理硬件故障或人为错误等异常情况；      </li>
<li>快照保存它创建的时间点上所有跟集群相关的数据，包括集群状态和索引的信息，至少在创建第一个快照之前，必须创建一个快照存储库；</li>
<li>Elasticsearch提供了非常详细的信息，使你能够检查和监控单个节点或作为一个整体的集群；</li>
<li>一个最基本的API是集群健康度API，它允许使用单个HTTP命令得到整个集群的状态信息；</li>
<li>Elasticsearch索引是保存数据的地方，它对大多数部署来说是非常重要的部分；</li>
<li>Elasticsearch提供了下列信息：<ul>
<li>merges：该节点包含Lucene段合并的信息</li>
<li>refresh：该节点包含刷新操作的信息 </li>
<li>flush：该节点包含清理信息 </li>
<li>warmer：该节点包含预热器的信息，以及它们执行了多久</li>
<li>filter_cache：这些是过滤器缓存统计信息</li>
<li>id_cache：这些是标识符缓存统计信息</li>
<li>fielddata：这些是字段数据缓存统计信息  </li>
<li>percolate：该节点包含预匹配器使用情况的信息  </li>
<li>completion：该节点包含自动完成建议器的信息 </li>
<li>segments：该节点包含Lucene段的信息</li>
<li>translog：该节点包含事务日志计数和大小的信息                </li>
</ul>
</li>
<li>节点统计API跟前面描述的节点信息API类似。主要的区别是，节点信息API提供环境信息，而节点统计API告诉我们集群工作时发生过什么；</li>
<li>再平衡是在集群的不同节点之间移动分片的过程；    </li>
<li>Elasticsearch有两种主要类型的插件。这两种类型可以基于其内容来分类： Java插件和站点插件（ site plugins），Elasticsearch把站点插件当成被内置的HTTP服务器处理的文件集，于/_plugin/plugin_name/URL（如/_plugin/bigdesk）下面；    </li>
<li>Elasticsearch允许在elasticsearch.yml文件中指定各种参数来调优。但应该把这个文件当做默认设置，可以在运行时通过Elasticsearch REST API修改！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Elasticsearch是基于Lucene的新一代分布式、RESTful风格的开源搜索引擎，具有实时搜索、稳定、快速、安装使用方便等优点。学习ELK技术对于自己在数据上的分析非常的有帮助！</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
  </entry>
  <entry>
    <title>HTML&amp;WebGL</title>
    <url>/2020/06/08/HTML-WebGL/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Web 3D技术的发展历经坎坷，但是好的东西，还是很有必要去学习一下，也有利于自己对HTML的理解！<strong>推荐书籍：《HTML5与WebGL编程》· [美] Tony Parisi著 潘征译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>几乎所有的计算机和移动设备都搭载了3D图形处理硬件，普通智能手机甚至有着比五十年前的专业图形工作站更为优秀的图形处理能力！</li>
<li>3D技术为交互体验带来了新的维度，得益于与Web技术的结合，全世界的人们都可以切身地感受3D技术！</li>
<li>HTML5的出现，浏览器就成为一个能够运行复杂应用的平台，突出体现了多媒体的技术支持；<ul>
<li>WebGL，使得JavaScript支持硬件3D加速渲染</li>
<li>CSS3 3D变换、平移以及可以支持更高级页面效果的用户自定义滤镜</li>
<li>Canvas元素和相应的2D绘图API</li>
</ul>
</li>
<li>HTML5浏览器支持多线程编程（Web Workers）、全双工TCP/IP通信（WebSocket）、本地数据存储等新特性；</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5 &amp; CSS3 Quick Start</title>
    <url>/2020/05/06/HTML5-CSS3-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>过去的经验告诉我们，对于Web开发初学者来说，从一开始就学习最新技术和最佳实践，既可以节省时间，也有利于培养良好的编码习惯。HTML用于定义内容的含义，而CSS用于定义内容和网页如何显示。<strong>推荐书籍：《HTML5与CSS3基础教程（第8版）》· [美] Elizabeth Castro Bruce Hyslop著 望以文译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>一个网页主要包括 ：<ul>
<li>文本内容（ text content）：  在页面上让访问者了解页面内容的纯文字  </li>
<li>对其他文件的引用（ references to other files）：我们使用这些引用来加载图像音频、视频文件，以及样式表（控制页面的显示效果）和JavaScript文件（为页面添加行为）  </li>
<li>标记（ markup）：对文本内容进行描述并确保引用正确地工作  </li>
</ul>
</li>
<li>在每个 HTML 页面的开头都有一些主要用于浏览器和搜索引擎的信息，浏览器不会将这些信息呈现给访问者；</li>
<li>每个网页都包含 DOCTYPE、 html、 head 和body 元素，它们是网页的基础； </li>
<li>在 HTML5 中，空元素结尾处的空格和斜杠是可选的；在 HTML5 中， 属性值两边的引号是可选的， 但习惯上大家还是会写上；    </li>
<li>有一种特殊的属性称为布尔属性（ Boolean attribute），其值是可选的，因为只要这种属性出现就表示其值为真，布尔属性也是预先定义好的， 无法自创；</li>
<li>元素必须正确地嵌套；</li>
<li>HTML5 的音频和视频还不完美，但至少开始向着无插件的目标前进了；</li>
<li>HTML文件名规范：<ul>
<li>文件名采用小写字母  </li>
<li>使用正确的扩展名</li>
<li>用短横线分隔单词</li>
</ul>
</li>
<li>URL（ Uniform Resource Locator，统一资源定位符）是地址的别名；</li>
<li>每个浏览器自带的样式表规定 HTML 的默认表现样式。 开发人员可以使用自己写的 CSS 覆盖这些规则 ；</li>
</ol>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>网页文件应在文件名中使用 .html 或 .htm 作为扩展名； </li>
<li>安装并配置Web Storm集成IDE，然后配置好环境；</li>
<li>开发者工具是学习 HTML 和CSS 不可多得的资料，通过它可以查看某个特定的效果是如何实现的， 可以随意改动代码而不必担心破坏任何东西；</li>
<li>创建清晰、一致的结构不仅可以为页面建立良好的语义化基础， 也可以大大降低在文档中应用层叠样式表（ CSS）的难度；</li>
</ol>
<h2 id="基本HTML结构"><a href="#基本HTML结构" class="headerlink" title="基本HTML结构"></a>基本HTML结构</h2><ol>
<li><p>body 元素包住页面的内容，包括文本、图像、表单、音频、视频以及其他交互式内容；</p>
</li>
<li><p>每个 HTML 页面都必须有一个 title 元素，每个<strong>页面的标题</strong>都应该是简短的、 描述性的，而且是唯一的；*<em>要让每个页面的 title 是唯一的，从而提升搜索引擎结果排名， 并让访问者获得更好的体验; *</em>     </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不同搜索引擎确定网页排名和内容索引规则的算法是不一样的。不过， title通常都扮演着重要的角色；</p>
</li>
<li><p>HTML 提供了六级标题用于创建页面信息的层级关系。 使用 h1、 h2、 h3、 h4、 h5 或 h6元素对各级标题进行标记，其中 h1 是最高级别的标题；对任何页面来说， 分级标题都可以说是最重要的 HTML 元素；    </p>
</li>
<li><p>如果页面中有一块包含一组介绍性或导航性内容的区域， 应该用 header 元素对其进行标记。一个页面可以有任意数量的 header 元素，它们的含义可以根据其上下文而有所不同，*<em>只在必要时使用 header *</em>，不能在 header 里嵌套 footer 元素或另一个 header，也不能在 footer 或 address元素里嵌套 header；</p>
</li>
<li><p>HTML5有元素明确表示主导航链接的区域即nav，其中的链接可以指向页面中的内容，也可以指向其他页面或资源，或者两者兼而有之；</p>
</li>
<li><p>一个页面只有一个部分代表其主要内容，可以将这样的内容包在 main 元素中，该元素在一个页面仅使用一次。不能将 main 放置在 article、 aside、footer、 header 或 nav 元素中； </p>
</li>
<li><p>article 元素表示文档、页面、应用或网站中一个独立的容器， 原则上是可独立分配或可再用的， 就像聚合内容中的各部分；</p>
</li>
<li><p>section 元素代表文档或应用的一个一般的区块。 在这里， section是具有相似主题的一组内容，通常包含一个标题 ； </p>
</li>
<li><p>aside 的应用包括重要引述、侧栏、指向相关文章的一组链接、 广告、 nav 元素组等；HTML5 不允许将 aside 嵌套在 address元素内；    </p>
</li>
<li><p>footer元素代表嵌套它的最近的article、aside、 blockquote、body、details、fieldset、 figure、 nav、 section 或 td 元素的页脚，只有当它最近的祖先是 body 时，它才是整个页面的页脚 ；</p>
</li>
<li><p>div 用来创建一个完全没有任何语义含义的容器；    </p>
</li>
<li><p>WAI-ARIA（ Web Accessibility Initiative’s Accessible Rich Internet Applications，无障碍网页倡议 – 无障碍的富互联网应用，让所有的访问者都能获取网站的内容；</p>
</li>
<li><p>可以给 HTML 元素分配唯一的标识符（ ID），或指定其属于某个（或某几个）类别， 也可以同时指定标识符和类别，接着，就可以对具有给定 id 或 class 名称的元素添加样式了，还可以使用 JavaScript 获取 id 和 class 属性，从而对元素添加特定的行为；</p>
<ol>
<li>在元素的开始标签中输入 id=”name”，其中name 是唯一标识该元素的名称</li>
<li>在元素的开始标签中输入class=”name”，其中 name 是类别的名称       </li>
</ol>
<ul>
<li>HTML 文档中的每个 id 都必须是唯一的  </li>
<li>一个 class 名称可以分配给页面中任意数量的元素， 并且一个元素可以有一个以上的 class       </li>
</ul>
</li>
<li><p>可以使用 title 属性（不要与 title 元素混淆）为网站上任何部分加上提示标签； </p>
</li>
<li><p>可以在 HTML 文档中添加注释，标明区块开始和结束的位置， 提醒自己某段代码的意图， 或者阻止内容显示等；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释格式 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在发布网站之前，应该用浏览器查看一下加了注释的页面。 这样能帮你避免由于弄错注释格式导致私人化的注释内容直接暴露给公众访问者的情况</strong>；     </p>
</li>
</ol>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ol>
<li>HTML 会忽略你在文本编辑器中输入的回车符和其他额外的空格，<strong>要在网页中开始一个新的段落， 应该使用 p 元素</strong>；</li>
<li>small 表示细则一类的旁注（side comment），通常包括免责声明、注意事项、法律限制、版权信息等。有时我们还可以用它来表示署名，或者满足许可要求；</li>
<li>b元素表示出于实用目的提醒读者注意的一块文字，不传达任何额外的重要性；</li>
<li>i 元素表示一块不同于其他文字的文字，具有不同的语态或语气；</li>
<li>通过引入 figure 和figcaption ，HTML5可以创建图，figcaption 是figure 的标题，可选，出现在 figure 内容的开头或结尾处；</li>
<li>使用 cite 元素可以指明对某内容源的引用或参考，例如，戏剧、脚本或图书的标题，歌曲、电影、照片或雕塑的名称， 演唱会或音乐会， 规范、报纸或法律文件等；</li>
<li>有两个特殊的元素用以标记引述的文本：<ol>
<li>blockquote 元素表示单独存在的引述</li>
<li>浏览器应对 q 元素中的文本自动加上特定语言的引号</li>
</ol>
</li>
<li>使用 time 元素标记时间、日期或时间段；</li>
<li>使用 abbr 元素标记缩写词并解释其含义；</li>
<li>在 HTML 中定义术语时， 可以使用 dfn元素对其作语义上的区分，仅用 dfn 包围要定义的术语，而不是包围定义；</li>
<li>比主体文本稍高或稍低的字母或数字分别称为上标和下标，使用sub元素创建下标，sup元素创建上标；</li>
<li>address 元 素 是 用 以 定 义 与HTML 页面或页面一部分有关的作者、相关人士或组织的联系信息， 通常位于页面底部或相关部分内；</li>
<li>代表添加内容的 ins 元素和标记已删除内容的 del 元素，这两个元素既可以单独使用，也可以一起使用；</li>
<li>标记不再准确或不再相关的文本使用s元素；</li>
<li>使用 code 元素表示其中的文本是代码或文件名，如果内容需要显示 &lt; 或 &gt; ， 应分别使用 &amp;lt; 和 &amp;gt；</li>
<li>预格式化的文本可以保持文本固有的换行和空格,使用pre元素来定义；</li>
<li>使用 mark 元素用于提起读者对特定文本片段的注意；</li>
<li>手动地强制文字进行换行可以使用 br 元素；</li>
<li>span元素适合包围字词或短语内容；</li>
<li>u 元素用来为文本添加下划线；</li>
<li>wbr 元素可以在一个较长的无间断短语中使用，表示此处可以在必要的时候进行换行，从而让文本在有限的空间内更具可读性；</li>
<li>ruby 元素以及它们的子元素 rt 和 rp 是HTML5 中为内容添加旁注标记的机制；</li>
<li>使用 bdo ，必须包含 dir 属性并将属性值设为 ltr （由左至右）或 rtl （由右至左），指定你希望呈现的方向；</li>
<li>bdi 元素是 HTML5 中新加的元素， 用于内容的方向未知的情况。不必包含 dir 属性，默认已设为自动判断；</li>
<li>meter 元素表示分数的值或已知范围的测量结果；</li>
<li>progress 元素指示某项任务的完成进度；</li>
</ol>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ol>
<li>Web 上用的最广泛的三种格式是 GIF、PNG 和 JPEG；</li>
<li>谷歌建立了一种图像格式， 名为 WebP，既支持有损压缩也支持无损压缩；</li>
<li>可以利用透明度为图像创建非矩形的边缘， 在图像的下面设置背景色或图案，PNG和 GIF 都支持透明度，JPEG 则不支持；</li>
<li>&lt;img src=”image.url “&gt;可以进行图片的展示；</li>
<li>使用 alt 属性， 可以为图像添加一段描述性文本， 当图像出于某种原因不显示的时候， 就将这段文字显示出来；</li>
<li>在 img 标签中， src 属性的后面， 输 入 width=”x “ height=”y “ 指定图像的尺寸；</li>
</ol>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol>
<li><p>链接有两个主要的部分：目标和标签，目标（destination）可以指定访问者点击链接时会发生什么；标签（label）是访问者在浏览器中看到或在屏幕阅读器中听到的部分：</p>
<ul>
<li>可以创建链接进入另一个页面，在页面内跳转，显示图像，下载文件，呼叫电话，等等</li>
<li>创建连接到其他网页特定位置（称为锚，anchor）的链接也是可以的</li>
<li>通过 CSS 可以很方便地修改链接的样式</li>
<li>href指的是hypertext reference（超文本引用）</li>
</ul>
</li>
<li><p>a元素是创建链接的关键：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello.html"</span>&gt;</span>Test Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      链接目标       链接标签     --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标签可以是图像或者文本和图像的组合，几乎允许在链接内包含任何类型的元素或元素组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">    Test<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Kittens!"</span> <span class="attr">style</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"http://placekitten.com/300/250"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以对带有 rel=”external” 的链接添加不同的样式， 从而告知访问者这是一个指向外部网站的链接；</p>
</li>
<li><p>使用 target 属性可以将链接设置为在新的窗口或标签页（取决于所用的浏览器）中打开，不推荐使用，应该让用户决定是否在不同的窗口或标签页打开链接；</p>
</li>
<li><p>如果要想用户跳至网页的特定区域，可以创建一个锚，并在链接中引用该锚：</p>
<ol>
<li><p>在想要跳转到的地方添加id属性，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"features"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在href中使用该id，方法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#features"</span>&gt;</span>跳转到二级标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>为每一个锚 id 赋一个有意义的名称 可以增强 HTML 文档的语义丰富度</p>
</li>
<li><p>如果锚位于另一个文档， 就使用 &lt;a href =” page.html#anchor-name “&gt; 引用该提示区域</p>
</li>
</ol>
</li>
</ol>
<h2 id="CSS（层叠样式表）"><a href="#CSS（层叠样式表）" class="headerlink" title="CSS（层叠样式表）"></a>CSS（层叠样式表）</h2><ol>
<li><p>样式表是一种文本文件， 其中包含一个或多个（通过属性和值）决定网页某特定元素如何显示的规则；</p>
</li>
<li><p>样式表中包含了定义网页外观的规则，样式表中的每条规则都有两个主要部分： 选择器（selector） 和声明块（declaration block），选择器决定哪些元素受到影响；声明块由一个或多个属性 - 值对；</p>
</li>
<li><p>声明块内的每条声明都是一个由冒号隔开、以分号结尾的属性 - 值对，声明块以前花括号开始， 以后花括号结束；</p>
</li>
<li><p><strong>在样式规则中可以添加额外的空格、制表符或回车，从而提高样式表的可读性！</strong></p>
</li>
<li><p>样式表支持注释，使用/*注释内容*/进行注释；</p>
</li>
<li><p>继承（inheritance）可以简化样式表；</p>
</li>
<li><p>编写 CSS 不必死记硬背公式化的内容，也没有意义；</p>
</li>
<li><p>每个 CSS 属性对于它可以接受哪些值都有不同的规定：</p>
<ul>
<li>有的属性只能接受预定义的值</li>
<li>有的属性接受数字、整数、相对值、百分数、URL 或者颜色</li>
<li>有的属性可以接受多种类型的值</li>
</ul>
</li>
<li><p>CSS可以使用RGBA和HSLA来定义颜色，有16种基本颜色，可以直接使用名字：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ba7bf0b03a806059eab53cfa00890751-313946" alt="16种基本颜色"></p>
<ul>
<li>使用rgb指定，比如rgb(89,0,127)</li>
<li>使用16进制，比如color:#59007f</li>
<li>使用rgba指定，比如rgba(89,0,127,1)</li>
<li>使用hsl指定，比如hsl(95,100%,28%)</li>
<li>使用hsla指定，比如hsla(95,100%,28%,0.4)</li>
</ul>
</li>
<li><p>外部样式表一旦浏 览器在某个页面加载了它， 在随后浏览引用 它的页面时， 通常无需再向 Web 服务器请求该文件；</p>
</li>
<li><p>可以使用style元素创建嵌入式的样式表，嵌入样式表是为页面添加 CSS 的次选方式；</p>
</li>
<li><p>同 HTML 一样， 可以从其他设计人员的代码中借鉴灵感， 然后编写自己的样式表，可以使用浏览器的检查器查看页面的样式表！</p>
</li>
</ol>
<h2 id="定义选择器"><a href="#定义选择器" class="headerlink" title="定义选择器"></a>定义选择器</h2><ol>
<li><p>最简单的选择器可以对给定类型的所有元素进行样式化， 有的选择器允许我们根据元素的类、上下文、状态等来应用格式化规则；</p>
</li>
<li><p>选择器可以定义五个不同的标准来选择要进行格式化的元素，为了指出目标元素， 选择器可以使用这五个标准的任意组合：</p>
<ul>
<li>元素的类型或名称，比如h1</li>
<li>元素所在的上下文，比如h1 em</li>
<li>元素的类或 ID，比如.error，#gaudi</li>
<li>元素的伪类或伪元素，比如a:link</li>
<li>元素是否有某些属性和值，比如a[title]</li>
</ul>
</li>
<li><p><strong>尽量不要使用ID选择器！</strong></p>
</li>
<li><p>CSS 有子结合符， 从而可以为父元素的直接后代 （即子元素）定义样式规则，使用&gt;：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.architect</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">			<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性选择参考：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a3a51e003182cac614948e1f0bc4ce53-220496" alt="属性选择器"></p>
</li>
</ol>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li>HTML 包含专门用于创建项目列表的元素，可以创建普通列表、编号列表、符号列表以及描述列表， 可以在一个列表中嵌套另外一个或多个列表；</li>
<li>所有的列表都是由父元素和子元素构成的，父元素用于指定要创建的列表的类型，子元素用于指定要创建的列表项目类型：<ul>
<li>有序列表， ol 为父元素， li 为列表项</li>
<li>无序列表， ul 为父元素， li 为列表项</li>
<li>描述列表（定义列表）， dl 为父元素， dt 和 dd 分 别代表 dl 中的术语和描述</li>
</ul>
</li>
<li>对于有序列表，可以包含 start 、type 和 reversed 这三个可选的属性；</li>
<li>选择标记：输 入 list-style-type: marker ，这里的 marker 是以下属性值中的一种<ul>
<li>disc——圆点</li>
<li>circle——圆圈</li>
<li>square——方块</li>
<li>decimal——数字</li>
<li>upper-alpha——大写字母</li>
<li>lower-alpha——小写字母</li>
<li>upper-roman——大写罗马数字</li>
<li>lower-roman——小写罗马数字</li>
<li>none——无标记</li>
</ul>
</li>
<li>设置整个列表编号方案的初始值，在 ol 开始标签中输入 start=”n “ ， 这里的 n 表示列表的初始值；</li>
<li>修改有序列表中某列表项目的编号，在目标 li 项目内输入 value=”n “ ， 这里的 n 代表该列表项目的值；</li>
</ol>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ol>
<li><p>表单有两个基本组成部分：</p>
<ul>
<li>访问者在页面上可以看见并填写的控件、标签和按钮的集合</li>
<li>用于获取信息并将其转化为可以读取或计算的格式的处理脚本</li>
</ul>
</li>
<li><p>基本的表单字段类型包括文本框、单选按钮、复选框、下 拉菜单、更大的文本区域；</p>
</li>
<li><p>HTML5 通过引入新的表单元素、输入 类型和属性， 以及内置的对必填字段、电子 邮件地址、URL 以及定制模式的验证， 让这 一切变得很轻松！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/da8a0f86cfdd34aba7a6745c7d0aa660-498005" alt="表单输入和元素"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4b5d14c7f484bcb3005b14c4d35deb8c-375608" alt="表单相关属性"></p>
<ul>
<li>form 开始标签可以有一些属性，其中最重要的就是 action 和 method</li>
<li>将 action 属性的值设为访问者提交表单时服务器上对数据进行处理的脚本的 URL</li>
<li>method 属性的值要么是get ， 要么是 post ，大多数情况下都可以使用 post</li>
<li>如果对表单使用 method=”get” ，那么表单提交后，表单中的数据会显示在浏览器的地址栏里</li>
<li>如果对表单使用 method=”post” ，那么提交表单后，表单中的数据不会显示在浏览器的地址栏里，这样更为安全</li>
</ul>
</li>
<li><p>每个表单都以 form开始标签开始， 以form结束标签结束，两个标签之间是组成表单的说明标签、控件和按钮；</p>
</li>
<li><p><strong>从服务器接收数据尤其需要注意安全性！</strong></p>
</li>
<li><p>表单验证指的是提交表单时， 对用户输入的每个字段的内容进行检查， 看是否符合预期的格式；</p>
</li>
<li><p>隐藏字段可以用于存储表单中的数据， 但它不会显示给访问者！</p>
</li>
<li><p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"name"</span> </span></span><br><span class="line"><span class="tag">			   <span class="attr">placeholder</span>=<span class="string">"请输入名称"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputfile"</span>&gt;</span>文件输入<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"inputfile"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>这里是块级帮助文本的实例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 请打勾</span><br><span class="line">		<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="视频、音频等媒体"><a href="#视频、音频等媒体" class="headerlink" title="视频、音频等媒体"></a>视频、音频等媒体</h2><ol>
<li><p>HTML5 支持三种视频文件格式（即编解码器）：</p>
<ul>
<li>Ogg Theora 使用的文件扩展名为 .ogg或 .ogv</li>
<li>MP4（H.264）使用的文件扩展名为.mp4 或 .m4v</li>
<li>WebM 使用的文件扩展名为 .webm</li>
</ul>
</li>
<li><p><strong>在有的浏览器中， 如果没有设置正确的 MIME 类型， 媒体文件就不会播放；</strong></p>
</li>
<li><p>要在 HTML5 网页中添加视频， 需要使用新的 video 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"paddle-steamer.webm"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以使用其他大小的 width 和 height 值， 浏览器会对视频进行缩放，并尽可能地保证质量</p>
</li>
<li><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5b2ad5075ed606a5aedf33c3b0d807e8-688760" alt="video属性"></p>
</li>
<li><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7fa5bc956f1e03abc16e89e9aae8c6d3-336091" alt="source属性"></p>
</li>
<li><p>设置自动播放以及添加控制：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"my-video.ext "</span> <span class="attr">autoplay</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一个video元素中可以包含任意数量 的 source 元素，这样就可以添加多个视频；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"369"</span> <span class="attr">height</span>=<span class="string">"208"</span> <span class="attr">controls</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"paddle-steamer.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"paddle-steamer.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"paddle-steamer.mp4"</span>&gt;</span> Download the video<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML5 支持大量不同的音频文件格式（编解码器）：</p>
<ul>
<li>Ogg Vorbis使用的文件扩展名为.ogg</li>
<li>MP3 使用的文件扩展名为 .mp3</li>
<li>WAV 使用的文件扩展名为 .wav</li>
<li>AAC 使用的文件扩展名为 .aac</li>
<li>MP4 使用的文件扩展名为 .mp4</li>
<li>Opus 使用的文件扩展名是 .opus</li>
</ul>
</li>
<li><p>使用 audio 元素来添加音频播放，可以添加下面的属性：</p>
<ul>
<li><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/df6a1459c87f5a04e5924dc6e4ef83e9-432605" alt="音频属性"></p>
</li>
<li><p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"piano.ogg"</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用 canvas 元素及相应的 JavaScript API 可以在网页上描制并创建动画；</p>
</li>
</ol>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ol>
<li>HTML通过table元素来提供表格支持，table元素是由行组成的，行又是由单元格组成的，每个行（ tr ）都包含标题单元格（ th ）或数据单元格（ td ）或者同时包含这两种单元格；</li>
<li>可以通过 colspan 和 rowspan 属性让 th或 td 跨越一个以上的列或行；</li>
<li><strong>表格中的每一行都应具有相同的单元 格数量</strong>，跨越多列的单元格应算做多个单元格，它的 colspan 属性值为多少，就算做多少个单元格；</li>
<li><strong>表格中的每一列都应具有相同的单元格数量</strong>，跨越多行的单元格应算做多个单元格，它的 rowspan 属性值为多少，就算做多少个单元格。</li>
</ol>
<h2 id="使用JavaScript"><a href="#使用JavaScript" class="headerlink" title="使用JavaScript"></a>使用JavaScript</h2><ol>
<li><p>JavaScript 定义网页中的特殊的行为，jQuery等 JavaScript 库确保了为页面添加简单交互和复杂行为的过程变得容易了许多；</p>
</li>
<li><p>脚本主要有两种类型， 一种是从外部文件（使用纯文本格式）加载的脚本， 另一种是嵌入在页面中的脚本，<strong>无论是加载外部脚本还是嵌入脚本， 均使用 script （脚本）元素</strong>；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js "</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">/* JavaScript 代码写在这里*/</span> </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>为了保持组织文件良好，通常将JavaScript 文件放在一个子文件夹中;</p>
</li>
<li><p>JavaScript事件：</p>
<ul>
<li>onblur：访问者离开先前获得焦点的元素</li>
<li>onchange：访问者改变元素的值或内容</li>
<li>onclick：访问者点击特定的区域或在元素（如链接）获得焦点时按下回车键</li>
<li>ondblclick ：访问者双击特定的区域</li>
<li>onfocus：访问者选择、点击或用制表键将焦点移至特定的元素</li>
<li>onkeydown：在指定的元素上， 访问者按下一个键</li>
<li>onkeypress：在指定的元素上， 访问者按下并松开一个键</li>
<li>onkeyup：在指定的元素上，访问者在输入后松开一个键</li>
<li>onload：浏览器完成页面的加载， 包括所有的外部文件</li>
<li>onmousedown：在指定的元素上， 访问者按下鼠标键</li>
<li>onmousemove：访问者移动鼠标指针</li>
<li>onmouseout：访问者在鼠标指针停留的特定元素上移开鼠标</li>
<li>onmouseover：访问者将鼠标指向元素</li>
<li>onmouseup：访问者在点击元素后松开鼠标键</li>
<li>onreset：访问者点击表单的重置按钮或在该按钮获得焦点时按下回车键</li>
<li>onselect：访问者选择元素中的一个或多个字符</li>
<li>onsubmit：访问者点击表单的提交按钮或在该按钮获得焦点时按下回车键</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要是html的描述，为了快速使用，并没有仔细去研究CSS样式表中的每个知识点该如何使用，也不会考虑如何去使用样式表构建自己满意的页面渲染，最多是能看懂，然后能够大致修改，主要是为了快速开发，能够进行前端页面的设计，有现成的模板比如Bootstrap，这部分不作为主要内容进行学习！HTML的元素在这里都有好好学习，但是CSS确实没花多少时间，Mark一下吧！如果将来真的有需求在深入学习，这部分就当是一个浅尝辄止的点吧！</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5秘籍</title>
    <url>/2020/05/29/HTML5%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HTML5指的是HTML5及其所有相关的标准，甚至可以更宽泛，代表下一代网页编写技术！但是有一个问题就是不同的浏览器对HTML5的支持程度是不同的。想要做好HTML，必须写过网页，懂得样式表，学过JavaScript！这篇主要介绍HTML5以及CSS相关的技术。<strong>推荐书籍：《HTML5秘籍》· [美] Matthew MacDonald 著 李松峰 朱巍 刘帅 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>HTML的基本思想：使用元素为内容添加结构</p>
</li>
<li><p>HTML5标准没有引入导致已有的网页无法工作的改变；</p>
</li>
<li><p>在HTML5以前，所有版本的HTML官方规范都要求使用&lt;html&gt;元素，而实际上用不用它对浏览器来说是无所谓的,HTML5则规定可用可不用;</p>
</li>
<li><p>为整个页面添加语言说明的最简单方式，就是为&lt;html&gt;元素指定lang属性,比如&lt;html lang=”en”&gt;;</p>
</li>
<li><p>指定想要使用的CSS样式表时，需 要在HTML5文档的&lt;head&gt;区块中添加&lt;link&gt;元素;</p>
</li>
<li><p><a href="http://validator.w3.org/" target="_blank" rel="noopener">在线验证HTML</a></p>
</li>
<li><p>HTML5新引入的元素：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d8c49c26162b090e139653b0780bc6fa-227242" alt="HTML5新引入元素"></p>
<ul>
<li>了解HTML元素，访问<a href="http://dev.w3.org/html5/markup/" target="_blank" rel="noopener">w3官方网址</a></li>
</ul>
</li>
</ol>
<h2 id="用语义元素构造网页"><a href="#用语义元素构造网页" class="headerlink" title="用语义元素构造网页"></a>用语义元素构造网页</h2><ol>
<li><p>利用&lt;div&gt;元素，可以把整个HTML文档分隔为页眉、侧边面板、导航条，等等——DIV+CSS</p>
</li>
<li><p>插图（figure）应该把它放在相关文本旁边的一个比较近便的位置上， 而不要把它们锁定在特定的词或元素旁边;</p>
</li>
<li><p>服务器端框架：在浏览器请求某个页面时，Web服务器临时将页面的各个部分组装起来，包括公共的元素（如导航条）和内容；</p>
</li>
<li><p>页面模板：利用模板来创建网站的所有页面也是一种不错的方式；</p>
</li>
<li><p>页面结构相关的语义元素：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/369174b9cd3f74143918b17a7461a192-53032" alt="页面结构相关的语义元素1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e8a80289ab277b4fb4f9a95eaeea0304-87293" alt="页面结构相关的语义元素2"></p>
</li>
<li><p>RDFa（Resource Description Framework，资源描述框架 ）是一种使用属性向网页中嵌入详细信息的标准；</p>
</li>
<li><p>SEO（Search Engine Optimization，搜索引擎优化）可以让网站更容易被搜索引擎曝光，获得更好的搜索排名；</p>
</li>
<li><p>表单指的是从网站访客那里收集信息的HTML控件，所有基本表单的工作方式都类似，即用户填写信息然后单击按钮；</p>
</li>
<li><p>表单验证：</p>
<ul>
<li>客户端验证，在浏览器中检查错误，没有错误再提交</li>
<li>服务器端验证，在用户将数据提交给服务器之后进行的验证</li>
</ul>
</li>
<li><p>客户端验证（包括HTML5表单验证）是为访客提供方便的，而服务器端验证才是确保数据正确性的！</p>
</li>
<li><p>要禁用整个表单的验证功能，可以在&lt;form&gt;元素中添加novalidate 属性;</p>
</li>
<li><p>时间控件：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8bb3e024d308a43f7b63d67bb8e4195b-91057" alt="时间控件"></p>
</li>
<li><p>&lt;datalist&gt;元素可以让你在普通文本框中添加一个下拉建议列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"animalChoices"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Alpaca"</span> <span class="attr">value</span>=<span class="string">"alpaca"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Zebra"</span> <span class="attr">value</span>=<span class="string">"zebra"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Cat"</span> <span class="attr">value</span>=<span class="string">"cat"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Caribou"</span> <span class="attr">value</span>=<span class="string">"caribou"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Caterpillar"</span> <span class="attr">value</span>=<span class="string">"caterpillar"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Anaconda"</span> <span class="attr">value</span>=<span class="string">"anaconda"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Human"</span> <span class="attr">value</span>=<span class="string">"human"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Elephant"</span> <span class="attr">value</span>=<span class="string">"elephant"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Wildebeest"</span> <span class="attr">value</span>=<span class="string">"wildebeest"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Pigeon"</span> <span class="attr">value</span>=<span class="string">"pigeon"</span>&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Crab"</span> <span class="attr">value</span>=<span class="string">"crab"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"favoriteAnimal"</span> <span class="attr">list</span>=<span class="string">"animalChoices"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>过程显示progress元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">"90"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>meter元素大致也一样，它表示的是某种计量，因此也被称为计量器;</p>
</li>
<li><p>网页中注册字体：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123; </span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'ChantelliAntiquaRegular'</span>; </span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'Chantelli_Antiqua-webfont.eot'</span>); </span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">'Chantelli Antiqua'</span>), </span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'Chantelli_Antiqua-webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), </span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'Chantelli_Antiqua-webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), </span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'Chantelli_Antiqua-webfont.svg'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>@font-face是正式注册字体的工具，注册之后才能在样式表的其他地方使用该字体</li>
<li>font-family: ‘ChantelliAntiquaRegular’; 用来起名字，随意，但是将来使用该字体时要用到这个名字</li>
<li>src: url(‘Chantelli_Antiqua-webfont.eot’); 注册ROT格式的字体文件</li>
<li>src: local(‘Chantelli Antiqua’)告知浏览器使用这种字体的名字，其他可使用格式</li>
</ol>
</li>
<li><p>谷歌字体:</p>
<ul>
<li><p><a href="http://www.google.com/fonts" target="_blank" rel="noopener">谷歌字体网址</a></p>
</li>
<li><p>使用谷歌字体（比如选择了Metrophobic字体）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.googleapis.com/css?family=Metrophobic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>媒体查询（media query）是移动Web开发的基础技术，可以确保网站能够自适应浏览器窗口大小的变化，这种自适应设计属于<strong><em>响应式设计</em></strong>；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7fd342436e6763db726f710323e774b0-199888" alt="媒体查询经常用到的特性1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/71520f4ec16558860f6974aa482ed48f-263885" alt="媒体查询经常用到的特性2"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">480px</span>)&#123;</span><br><span class="line">  <span class="selector-class">.leftColumn</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: lime;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过媒体查询替换整个样式表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"standard.css"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"(max-width: 568px)"</span> <span class="attr">href</span>=<span class="string">"small_styles.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器会下载第二个样式表（small_styles.css），但只有在页面宽度小于568像素时才会应用这个样式表；</p>
</li>
</ul>
</li>
</ol>
<h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><ol>
<li><p>HTML5的目标之一就是让网页中的富应用实现起来更简单，富应用的含义包括漂亮的图 片、人机互动功能，以及眩目的动画效果；</p>
</li>
<li><p>canvas是实现富应用最重要的HTML5工具之一，能够进行绘图，是一切高级图形应用的核心所在，<strong>canvas独特的地方是需要JavaScript来操作</strong>;</p>
</li>
<li><p>canvas元素就是一块画布，只要给它指定三个属性即可：id、width和height：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"drawingCanvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>id属性是一个唯一的名字，JavaScript脚本可以利用它找到这块“画布”</li>
<li>width和height属性指定的就是这块“画布”的宽度和高度，单位是像素</li>
</ul>
</li>
<li><p>开始绘图之前，需要JavaScript执行两步操作:</p>
<ul>
<li>利用document.getElementById()方法取 得canvas对象</li>
<li>调用canvas对象的getContext()方 法，取得二维绘图上下文，取得了上下文对象之后，任何时候都可以进行绘图了</li>
</ul>
</li>
<li><p>使用javaScript在canvas上进行绘图：</p>
<ol>
<li><p>画直线：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  context.moveTo(<span class="number">10</span>,<span class="number">10</span>); </span><br><span class="line">	context.lineTo(<span class="number">400</span>,<span class="number">40</span>); </span><br><span class="line">	context.stroke();</span><br><span class="line"><span class="comment">// stroke 使得内容被显现出来</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用stroke()方法把直线实际地绘制出来之前，可以在任何时候设置绘图上下文的3个属性：lineWidth、strokeStyle和lineCap：</p>
<ul>
<li>lineWidth可以设置线条宽度，单位是像素</li>
<li>strokeStyle用于设置线条的颜色，可以使用HTML颜色名、HTML颜色编码或CSS 中的rgb()函数</li>
<li>lineCap可以设置线条两端的形状，即线头类型，可以是butt（默认方头）、round（圆头）或square（加长方头）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置线条宽度和颜色（适用于所有线条） ，两头形状</span></span><br><span class="line">context.lineWidth = <span class="number">25</span>; </span><br><span class="line">context.lineCap = <span class="string">"butt"</span>;</span><br><span class="line">context.strokeStyle = <span class="string">"rgb(205,40,40)"</span>;</span><br><span class="line"><span class="comment">//context.strokeStyle = "#cd2828";</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6ec6ce57f30d96598e19534b64961d46-146040" alt="画布lineCap属性"></p>
</li>
<li><p>每次调用beginPath() 方法，都重新开始一个新线段的绘制，如果没有这一步，那么每次调用stroke()，都会把画布上原有的线段再重新绘制一遍！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 获取canvas</span></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>);</span><br><span class="line">	<span class="comment">// 获取上下文</span></span><br><span class="line">	<span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">	<span class="comment">//设置线条宽度和颜色（适用于所有线条） ，两头形状</span></span><br><span class="line">	context.lineWidth = <span class="number">25</span>; </span><br><span class="line">	context.lineCap = <span class="string">"butt"</span>;</span><br><span class="line">	context.strokeStyle = <span class="string">"rgb(205,40,40)"</span>;</span><br><span class="line">	<span class="comment">//context.strokeStyle = "#cd2828";</span></span><br><span class="line">	<span class="comment">// 画直线</span></span><br><span class="line">	context.moveTo(<span class="number">10</span>,<span class="number">10</span>); </span><br><span class="line">	context.lineTo(<span class="number">400</span>,<span class="number">40</span>); </span><br><span class="line">	context.stroke();</span><br><span class="line">	<span class="comment">// 新的绘制</span></span><br><span class="line">	context.beginPath();</span><br><span class="line">	context.moveTo(<span class="number">250</span>,<span class="number">50</span>); </span><br><span class="line">	context.lineTo(<span class="number">50</span>,<span class="number">250</span>); </span><br><span class="line">	context.lineTo(<span class="number">450</span>,<span class="number">250</span>); </span><br><span class="line">	context.lineTo(<span class="number">250</span>,<span class="number">50</span>);</span><br><span class="line">	context.lineWidth = <span class="number">10</span>; </span><br><span class="line">	context.strokeStyle = <span class="string">"red"</span>; </span><br><span class="line">	context.stroke();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>beginPath方法效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0afec1bae32d135126c31574724665cb-25297" alt="beginPath方法"></p>
</li>
<li><p>未使用beginPath效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3c91b92aaf6a97802ef72a213441cd2e-31551" alt="未使用beginPath方法"></p>
</li>
</ul>
</li>
<li><p>填充颜色时，使用stroke方法是无能为力的，这个时候需要显示调用closePath来明确关闭路径，然后再使用fillStyle属性设置想要填充的颜色，然后调用fill方法完成填充操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    </span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">250</span>,<span class="number">50</span>); </span><br><span class="line">context.lineTo(<span class="number">50</span>,<span class="number">250</span>); </span><br><span class="line">context.lineTo(<span class="number">450</span>,<span class="number">250</span>); </span><br><span class="line">context.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充内部 </span></span><br><span class="line">context.fillStyle = <span class="string">"blue"</span>; </span><br><span class="line">context.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制轮廓 </span></span><br><span class="line">context.lineWidth = <span class="number">10</span>; </span><br><span class="line">context.strokeStyle = <span class="string">"red"</span>; </span><br><span class="line">context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>填充效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/898a4b607e2291d4e5fe982c9f66f0cc-18698" alt="填充效果"></p>
</li>
<li><p>最好是先填充形状，然后再绘制其轮廓，不然形状的轮廓线会有一部分被填充色覆盖掉；</p>
</li>
<li><p>可以使用fillRect()方法直接填充一个矩形区域，提供矩形区域左上角 的坐标、宽度和高度即可，fillRect()也是从绘图上下文的fillStyle属性取得颜色；还有一个strokeRect()方法，用于直接绘制一个矩形框；</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>绘制曲线：</p>
<ol>
<li><p>绘制曲线的四个方法，arc()、artTo()、bezierCurveTo()和quadraticCurveTo()；</p>
</li>
<li><p><strong>绘制这些玩意还是需要做一点数学计算的</strong>；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cfc13bd42aa6f407c27d4ad3085bee62-342893" alt="圆弧绘制"></p>
<ul>
<li><p>圆弧代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line">	<span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建变量，保存圆弧的各方面信息 </span></span><br><span class="line">	<span class="keyword">var</span> centerX = <span class="number">150</span>; </span><br><span class="line">	<span class="keyword">var</span> centerY = <span class="number">300</span>; </span><br><span class="line">	<span class="keyword">var</span> radius = <span class="number">100</span>; </span><br><span class="line">	<span class="keyword">var</span> startingAngle = <span class="number">1.25</span> * <span class="built_in">Math</span>.PI; </span><br><span class="line">	<span class="keyword">var</span> endingAngle = <span class="number">1.75</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用确定的信息绘制圆弧 </span></span><br><span class="line">	context.arc(centerX, centerY, radius, startingAngle, endingAngle); </span><br><span class="line">	context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果在调用stroke()之前调用closePath()，就会在圆弧的起点和终点之间绘制一条直线；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a24dcfa80706618b585a5124c767156e-18586" alt="圆弧效果"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9f3054aa3c9b528d26ebcfc979389122-18469" alt="添加closePath后效果"></p>
</li>
<li><p>几乎任何插图软件中都会用贝塞尔曲线,这种曲线能够保证平滑，哪怕再小、再大的弧度都可以：</p>
<ul>
<li><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b4ddd2906f795f801be15ff0a847879c-223403" alt="贝塞尔曲线"></p>
</li>
<li><p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把笔移动到起点位置 </span></span><br><span class="line">context.moveTo(<span class="number">62</span>, <span class="number">242</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建变量，保存两个控制点及曲线终点信息 </span></span><br><span class="line"><span class="keyword">var</span> control1_x = <span class="number">187</span>; </span><br><span class="line"><span class="keyword">var</span> control1_y = <span class="number">32</span>; </span><br><span class="line"><span class="keyword">var</span> control2_x = <span class="number">429</span>; </span><br><span class="line"><span class="keyword">var</span> control2_y = <span class="number">480</span>; </span><br><span class="line"><span class="keyword">var</span> endPointX = <span class="number">365</span>; </span><br><span class="line"><span class="keyword">var</span> endPointY = <span class="number">133</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制曲线 </span></span><br><span class="line">context.bezierCurveTo(control1_x, control1_y, control2_x, control2_y, endPointX, endPointY); </span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure>
</li>
<li><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/afc5baf350cc870cfaae53c4c207e410-30029" alt="效果图"></p>
</li>
<li><p><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html" target="_blank" rel="noopener">测试网址</a></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>变换是一种通过变canvas坐标系达到绘制目的的技术：</p>
<ol>
<li><p>样例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在(0,0)点绘制正方形 </span></span><br><span class="line">context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把坐标系向下、向右各移动50像素 </span></span><br><span class="line">context.translate(<span class="number">50</span>, <span class="number">50</span>); </span><br><span class="line">context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把坐标系再向下移一点；变换是可以累积的 </span></span><br><span class="line"><span class="comment">//因此现在(0,0)点实际上将被平移到(100,100) </span></span><br><span class="line">context.translate(<span class="number">50</span>, <span class="number">50</span>); </span><br><span class="line">context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/72ceb4fead2dec4f9d85c0c516a019b0-15148" alt="变换效果"></p>
</li>
<li><p>变换有几种不同的方式，平移（translate）变换移动了坐标系的原点；缩放（scale）变换可以把本来要绘制的形状放大或缩小；旋转（rotate）变换可以旋转坐标系；矩阵（matrix）变换更复杂一些，但可以在任意方向拉伸和扭曲坐标系（要求高）；</p>
</li>
<li><p>变换稍微复杂的案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动(0,0)点。这一步很重要 //因为接下来要围绕新原点旋转 </span></span><br><span class="line">context.translate(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制10个正方形 </span></span><br><span class="line"><span class="keyword">var</span> copies = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;copies; i++) &#123;</span><br><span class="line">	<span class="comment">//绘制正方形之前，先旋转坐标系 </span></span><br><span class="line">	<span class="comment">//旋转一周是2*Math.PI，因此每个正方形的旋转角度取决于要绘制的总数 </span></span><br><span class="line">	context.rotate(<span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="number">1</span>/(copies<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//绘制正方形 </span></span><br><span class="line">	context.rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">&#125; </span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/09004f99755e3a8c56f9c1a20e3241ca-61752" alt="变换复杂效果"></p>
</li>
<li><p>调用绘图上下文的 save() 方法可以保存坐标系当前的状态。然后再调用 restore() 方法可以返回保存过的前一个状态；每次调用 restore() ，坐标系就会恢复到前一个最近的状态；</p>
</li>
</ol>
</li>
<li><p>想要用canvas创作出夺人眼目的图形，但又不愿意复习几何知识，可以使用绘图库，<a href="http://fabricjs.com/" target="_blank" rel="noopener">Fabric.js</a>和<a href="http://fabricjs.com/" target="_blank" rel="noopener">KineticJS</a>是两个绘图库；</p>
</li>
<li><p>canvas支持使用半透明的颜色，从而实现多个形状叠加透视的效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置填充及描边颜色 </span></span><br><span class="line">context.fillStyle = <span class="string">"rgb(100,150,185)"</span>; </span><br><span class="line">context.lineWidth = <span class="number">10</span>;</span><br><span class="line">context.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"><span class="comment">//绘制圆形 </span></span><br><span class="line">context.arc(<span class="number">110</span>, <span class="number">120</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI); </span><br><span class="line">context.fill(); </span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//别忘了调用beginPath()，然后再绘制新形状 </span></span><br><span class="line"><span class="comment">//否则，两个形状的路径会意外地连在一起 </span></span><br><span class="line">context.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用半透明的颜色填充三角形 </span></span><br><span class="line">context.fillStyle = <span class="string">"rgba(100,150,185,0.5)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好了，绘制三角形 </span></span><br><span class="line">context.moveTo(<span class="number">215</span>,<span class="number">50</span>); </span><br><span class="line">context.lineTo(<span class="number">15</span>,<span class="number">250</span>); </span><br><span class="line">context.lineTo(<span class="number">315</span>,<span class="number">250</span>); </span><br><span class="line">context.closePath(); </span><br><span class="line">context.fill(); </span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/951d928599f1ea8d127cf7eaa1d5d527-54981" alt="透明效果"></p>
</li>
<li><p>canvas支持合成操作，就是怎么显示两个重叠的图形，默认是source-over，即新绘制的图形会位于先绘制的图形之上，还有其他的合成操作，只要在画后面的图形之前设置绘图上下文的 globalCompositeOperation属性即可：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7f8048bc4eae9e0b864635799768da31-103963" alt="合成操作"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形 </span></span><br><span class="line">context.fillStyle = <span class="string">"blue"</span>; </span><br><span class="line">context.fillRect(<span class="number">15</span>,<span class="number">15</span>,<span class="number">70</span>,<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择globalCompositeOperation </span></span><br><span class="line">context.globalCompositeOperation = <span class="string">"source-atop"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在上方绘制圆形 </span></span><br><span class="line">context.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">context.beginPath(); </span><br><span class="line">context.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">true</span>); </span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e521feb21d85a0da7c2e5ea3e9c92c68-15938" alt="合成操作效果"></p>
</li>
<li><p>使用javaScript实现画图板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>This is canvas Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">	canvas &#123; </span><br><span class="line">		border: 1px dashed black; </span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"drawingCanvas"</span>); </span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//添加用于实现绘图操作的事件处理程序 </span></span></span><br><span class="line">canvas.onmousedown = startDrawing; </span><br><span class="line">canvas.onmouseup = stopDrawing; </span><br><span class="line">canvas.onmouseout = stopDrawing; </span><br><span class="line">canvas.onmousemove = draw;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> isDrawing = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">startDrawing</span><span class="params">(e)</span> </span>&#123; </span></span><br><span class="line"><span class="actionscript"><span class="comment">//开始绘图了 </span></span></span><br><span class="line"><span class="actionscript">isDrawing = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//创建新路径（使用当前设置好的描边颜色和线条粗细） </span></span></span><br><span class="line">	context.beginPath();</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//把画笔放到鼠标当前所在位置</span></span></span><br><span class="line">context.moveTo(e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (isDrawing == <span class="literal">true</span>) &#123; </span></span><br><span class="line"><span class="actionscript"><span class="comment">//找到鼠标的新位置 </span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> x = e.pageX - canvas.offsetLeft; </span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> y = e.pageY - canvas.offsetTop;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//画一条到新位置的线 </span></span></span><br><span class="line">context.lineTo(x, y); context.stroke();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">stopDrawing</span><span class="params">()</span> </span>&#123; </span></span><br><span class="line"><span class="actionscript">	isDrawing = <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"drawingCanvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9e69d76d52a2a67287e652d3f6281a2b-22773" alt="效果"></p>
</li>
<li><p>canvas元素提供了三个基本的方法将画布保存为图像：</p>
<ul>
<li>使用数据URL，把画布转换为一幅图像文件，然后将图像数据转换为字符序列并编码为URL形式</li>
<li>使用getImageData()方法，取得原始的像素数据，然后可以继续根据需要操作这些数据</li>
<li>保存一组“步骤”，可以把在画布上绘制的每一条线都保存到一个数组中</li>
</ul>
</li>
<li><p>使用数据URL，提供参数可以指定得到类型的图像，默认png格式，可以通过传入想要的图像的MIME类型得到：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = canvas.toDataURL();</span><br><span class="line"><span class="keyword">var</span> url = canvas.toDataURL(<span class="string">"image/jpeg"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>数据URL就是一个以 data:image/png;base64开头的base-64编码的字符串;</li>
<li>Base-64编码是一种将图像数据转换成长字符串的编码方法， 长字符串由字符、数字及少量特殊字符组成;</li>
</ul>
</li>
</ol>
<h2 id="高级绘图"><a href="#高级绘图" class="headerlink" title="高级绘图"></a>高级绘图</h2><ol>
<li><p>绘图上下文提供了drawImage()方法，用于在画布上绘制图片，调用 它的时候传入相应的图片对象及起点坐标即可；</p>
</li>
<li><p>可以给drawImage()函数传递一些可选的参数，从而影响在画布上绘制图片的方式；</p>
</li>
<li><p><strong>可以利用一个计时器来不断捕获播放中的视频，然后不断将新画面绘制到画布上</strong></p>
</li>
<li><p>设置好字体后就可以调用fillText()方法绘制文本内容；</p>
</li>
<li><p>阴影相关的内容：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ff9bf1292a02428da02d86b19802384a-321024" alt="阴影相关的属性"></p>
</li>
<li><p>还可以填充渐变效果，绘图上下文为此提供了两个方 法：createLinearGradient()和createRadialGradient()；</p>
</li>
<li><p>只要创建交互图形，几乎就一定要用到碰撞检测，也就是测试某个点是否“碰到”了某个图形，一些比较完善的动画开发框架（比如Flash或Silverligh）可以帮你做碰撞检测；</p>
</li>
<li><p>高级绘图想要快速开发，可以借助一些库！<a href="https://www.benjoffe.com/code/demos/canvascape" target="_blank" rel="noopener">3d效果图</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">Mozilla教程</a></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HTML5的内容远不止这些，在这部分主要介绍了画布canvas这个元素的特性，当然这部分不是完全就介绍完了，技术永远都在变化，都在更新，需要的时候再去更深入这部分，当然参考书籍的第三部分Web相关的大致过了一遍，并没有做笔记，后续如果有用到再补上笔记吧，那也许是我想深入前端技术的时候！</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP Quick Start</title>
    <url>/2020/05/30/HTTP-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>只要在互联网行业从事技术开发，无论是前端还是后端，网络相关的基础知识这一课终究是躲不过去的！无论是服务器端要面对的大负载和高并发，还是客户端要面对的有限计算资源和弱网通信环境，最后都离不开对网络的深入理解。*<em>推荐书籍：《HTTP/2 基础教程》· [美] Stephen Ludin  Javier Garza 著 罗正龙 郑维智 译 《HTTP 权威指南》· [美] David Gourley，Brian Totty等著 陈涓 赵振平译   *</em></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Web（全称 World Wide Web）的四大技术基石是 URI、HTML、HTTP 和 MIME；</p>
</li>
<li><p>HTTP/2， 简称 h2， 是万维网（World Wide Web）所使用的 HTTP 网络协议的一个重大修订版本，其目的是提升加载 Web 内容时的感知性能；</p>
</li>
<li><p><strong>Google 的一项研究表明， 甚至 400 毫秒（一眨眼的时间）的延迟，都可能降低人们的搜索意愿！</strong></p>
</li>
<li><p>HTTP请求，以及处理请求后的渲染过程如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b08815f54a3f4cd3cf2ff677721c318d-387857" alt="请求"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/85419871c57fbcf83871b27bfa115168-360479" alt="渲染"></p>
</li>
<li><p>关键性能指标：</p>
<ul>
<li>延迟，指 IP 数据包从一个网络端点到另一个网络端点所花费的时间（主要瓶颈）</li>
<li>带宽，只要带宽没有饱和， 两个网络端点之间的连接会一次处理尽可能多的数据量</li>
<li>DNS查询，通过域名系统（DNS）把主机名称转换成 IP 地址</li>
<li>建立连接时间，建立连接需要往返数据应答， 称为“三次握手”，握手时间一 般与客户端和服务器之间的延迟有关</li>
<li>TLS协商时间，客户端发起 HTTPS 连接，则还需要进行传输层安全协议（TLS）协商</li>
<li>首字节时间 （TTFB），指客户端从开始定位到Web页面， 至接收到主体页面响应的第一字节所耗费的时间</li>
<li>内容下载时间，等同于被请求资源的最后字节到达时间（TTLB）</li>
<li>开始渲染时间，指的是用户看到空白页面的时长</li>
<li>文档加载完成时间 （ 又叫页面加载时间 ），是客户端浏览器认为页面加载完毕的时间</li>
</ul>
</li>
<li><p>Web性能优化策略：</p>
<ul>
<li>DNS查询优化<ul>
<li>限制不同域名的数量</li>
<li>保证低限度的解析延迟</li>
<li>在主体页面 HTML 或响应中利用 DNS 预取指令</li>
</ul>
</li>
<li>优化TCP连接<ul>
<li>利用 preconnect 指令，连接在使用之前就已经建立好了，这样处理流程的关键路径上就不必考虑连接时间了</li>
<li>尽早终止并响应，借助 CDN， 在距离请求用户很近的边缘端点上，请求就可以获得响应</li>
<li>实施最新的 TLS 最佳实践来优化 HTTPS</li>
</ul>
</li>
<li>避免重定向<ul>
<li>利用 CDN 代替客户端在云端实现重定向</li>
<li>如果是同一域名的重定向，使用 Web 服务器上的 rewrite 规则，避免重定向</li>
</ul>
</li>
<li>客户端缓存</li>
<li>网络边缘的缓存</li>
<li>条件缓存<ul>
<li>在请求中包含 HTTP 首部 Last-Modiﬁed-Since</li>
<li>在请求体中包含实体校验码，或者叫 ETag</li>
</ul>
</li>
<li>压缩和代码极简化<ul>
<li>极简化（miniﬁcation）是指从文本资源中剥离所有非核心内容的过程</li>
</ul>
</li>
<li>避免阻塞CSS/JS</li>
<li>图片优化</li>
</ul>
</li>
<li><p>HTTP/2支持情况：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b1a807e38710f046ea479dba680f42e1-146243" alt="HTTP/2支持情况"></p>
</li>
<li><p>MIME（Multipurpose Internet Mail Extension， 多用途因特网邮件扩展）</p>
<ul>
<li>HTML格式的文本文档由text/html类型来标记</li>
<li>普通的 ASCII 文本文档由text/plain类型来标记</li>
<li>JPEG版本的图片为image/jpeg类型来标记</li>
<li>GIF格式的图片为image/gif类型来标记</li>
<li>Apple 的 QuickTime 电影为video/quicktime类型来标记</li>
<li>微软的PowerPoint演示文件为application/vnd.ms-powerpoint类型来标记</li>
</ul>
</li>
<li><p>服务器资源名被称为统一资源标识符（Uniform Resource Identiﬁer，URI），URI 有两种形式， 分别称为 URL 和 URN</p>
</li>
<li><p>统一资源定位符（URL）是资源标识符最常见的形式，URL 描述了一台特定服务器上某资源的特定位置</p>
</li>
<li><p>统一资源名 （URN）是作为特定内容的唯一名称使用的，与目前的资源所在地无关</p>
</li>
<li><p>HTTP 支持几种不同的请求命令， 这些命令被称为 HTTP 方法 （HTTP method）</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/04ad6f35eaa3158deb92fdc8f01e9231-335922" alt="常见HTTP方法"></p>
</li>
<li><p>HTTP 报文包含：</p>
<ul>
<li>起始行，在请求报文中用来说明要做些什么， 在响应报文中说 明出现了什么情况</li>
<li>首部字段，每个首部字段都包含一个名字和一个值， 为了便于解析， 两者之间用冒号（:）来分隔</li>
<li>主体，包含了所有类型的数据</li>
</ul>
</li>
<li><p>Web机构组件：</p>
<ul>
<li>代理，位于客户端和服务器之间的HTTP中间实体，通常会将代理作为转发所有 Web 流量的可信任中间节点使用</li>
<li>缓存，HTTP的仓库，使常用页面的副本可以保存在离客户端更近的地方</li>
<li>网关，连接其他应用程序的特殊 Web 服务器</li>
<li>隧道，对 HTTP 通信报文进行盲转发的特殊代理</li>
<li>Agent代理，发起自动 HTTP 请求的半智能 Web 客户端</li>
</ul>
</li>
</ol>
<h2 id="迁移到TLS"><a href="#迁移到TLS" class="headerlink" title="迁移到TLS"></a>迁移到TLS</h2><ol>
<li>每种Web服务器配置HTTPS的方式都略有差异；</li>
<li>获得证书：获取网站的证书通常要完成几个步骤，包括创建证书签名请求（CSR），验证你的身份和证书所有者，然 后从证书颁发机构（CA）购买证书；</li>
<li>保护私钥：证书是否安全完全取决于开发人员，为了使网站安全地基于 TLS 运行，应该考虑私钥存放的方式、位置，以及哪些人有访问权限；</li>
<li>为增加的服务器负载做准备</li>
</ol>
<h2 id="HTTP-2协议"><a href="#HTTP-2协议" class="headerlink" title="HTTP/2协议"></a>HTTP/2协议</h2><ol>
<li><p>HTTP/2 大致可以分为两部分：分帧层，即 h2 多路复用能力的核心部分；数据或 http 层，其中包含传统上被认为是 HTTP 及其关联数据的部分；</p>
</li>
<li><p>分帧层是基于帧的二进制协议，首部会进行深度压缩，显著减少传输中的冗余字节；</p>
</li>
<li><p>采用分帧是为了将重要信息都封装起来， 让协议的解析方可以轻松阅读、解析并还原信息；</p>
</li>
<li><p>HTTP/2帧：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/20669ef5edd047ed3381bd310286ef87-265576" alt="帧结构首部字段"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/522f617877498df016f9226440177091-377841" alt="帧类型"></p>
</li>
<li><p>HTTP/2 连接上独立的、双向的帧序列交换；</p>
</li>
<li><p>HTTP/2 协议的制定经过了许多年，包含了各种设计理念、决策、创新，以及妥协</p>
</li>
</ol>
<h2 id="HTTP-2调试"><a href="#HTTP-2调试" class="headerlink" title="HTTP/2调试"></a>HTTP/2调试</h2><ol>
<li><p>大多数现代的浏览器都包含 Web 开发者工具，它们对调试 h2 非常有用；</p>
</li>
<li><p>谷歌浏览器调试工具：</p>
<ol>
<li><p>net-internals：地址栏输入chrome://net-internals访问谷歌浏览器的net-internals功能，可以查看网络数据，包括捕获/导出/导入底层网络数据、检查网络和DNS日志、以图形界面显示网络活动；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/01600486b355284f6446a8d1acaca9e9-48665" alt="net-internals"></p>
</li>
<li><p>服务端推送的可视化:Chrome 开发者工具中的 Network 栏， 有助于简单直观地跟踪客户端和服务端的通讯</p>
</li>
</ol>
</li>
<li><p>使用Charles Proxy的计算机可以来调试 iOS 设备，Charles Proxy 是一个代理（proxy），把它设置为设备访问网络的代理，就可以清楚地看到当前正在发送的请求和接收的响应；</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基础的HTTP认识，算是普及知识型！想要在HTTP上深入，还需要理解HTTPS！</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>HTTPS 权威指南</title>
    <url>/2020/06/01/HTTPS-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HTTPS不仅和HTTP相关，还和密码学相关。密码学这门学科非常吸引人，对这个领域了解得越多，实际上就越不了解它！HTTP在浏览器上运用加密的方法非常特殊，带来了很多问题！<strong>推荐书籍：《HTTPS权威指南 在服务器和Web应用上部署SSL/TLS和PKI》· [英] Ivan Ristic 著 杨洋 李振宇等译</strong>     </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="SSL、-TLS和密码学"><a href="#SSL、-TLS和密码学" class="headerlink" title="SSL、 TLS和密码学"></a>SSL、 TLS和密码学</h2><ol>
<li>所有连接到互联网的设备都有一个共同点，依赖于安全套接字层（ secure socket layer， SSL）和传输层安全（ transport layer security， TLS）协议保护传输的信息；</li>
<li>SSL和TLS都是加密协议，旨在基于不安全的基础设施提供安全通信；</li>
<li>TLS实际上有以下四个主要目标 ：<ol>
<li>加密安全，为任意愿意交换信息的双方启用安全通信</li>
<li>互操作性，独立的编程人员应该能够使用通用的加密参数开发程序和库，使它们可以相互通信</li>
<li>可扩展性，TLS是一种能高效开发和部署加密协议的框架</li>
<li>效率，在实现上述所有目标的基础上保持性能成本在可接受的范围内</li>
</ol>
</li>
<li>IP和TCP不是唯一易受攻击的协议，还有一系列其他路由协议用于协助发现网络上的其他计算机；</li>
<li>部署正确的密码能解决安全的三个核心需求：保持秘密（ 机密性）、验证身份（ 真实性），以及保证传输安全（ 完整性）；</li>
<li>对称加密（ symmetric encryption）又称私钥加密（ private-key cryptography），是一种混淆算法，能够让数据在非安全信道上进行安全通信；</li>
<li>序列密码（ stream cipher）将1字节的明文输入加密算法，就得到1字节的密文输出；</li>
<li>分组密码（ block cipher）每次加密一整块数据，并且现代的分组密码倾向于使用128位（ 16字节）大小的块；</li>
<li>散列函数（ hash function）是将任意长度的输入转化为定长输出的算法；</li>
<li>非对称加密（ asymmetric encryption）又称为公钥加密（public key cryptography），它是另一种方法，使用两个密钥，而不是一个；其中一个密钥是私密的，另一个是公开的；<ol>
<li>如果某人用私钥加密数据，任何人都可以利用对应的公钥<br>解开消息，这种操作不提供机密性，但可以用作数字签名</li>
<li>如果利用某人的公钥加密数据，那么只有他们对应的私钥能够解密</li>
</ol>
</li>
</ol>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ol>
<li>TLS是一种密码学协议，用于保证两个团体之间的会话安全；</li>
<li>TLS以记录协议（ record protocol）实现，记录协议负责在传输连接上交换的所有底层消息，并可以配置加密，每一条TLS记录以一个短标头起始，标头包含记录内容的类型（或子协议）、协议版本和长度，消息数据紧跟在标头之后；</li>
<li>握手是TLS协议中最精密复杂的部分，通信双方协商连接参数，并且完成身份验证：<ul>
<li>交换各自支持的功能，对需要的连接参数达成一致</li>
<li>验证出示的证书，或使用其他方式进行身份验证 </li>
<li>对将用于保护会话的共享主密钥达成一致</li>
<li>验证握手消息并未被第三方团体修改       </li>
</ul>
</li>
<li>密钥交换是握手过程中最引人入胜的部分；</li>
<li>在TLS中，为了避免重复执行密码操作造成巨大开销，身份验证与密钥交换紧紧捆绑在一起；</li>
<li>TLS可以使用各种方法加密数据，比如使用3DES、 AES、 ARIA、 CAMELLIA、 RC4或者SEED等算法；</li>
<li>大部分TLS连接都以握手作为起点，经过应用数据的交换，最后关闭会话；</li>
<li>应用数据协议携带着应用消息，只以TLS的角度考虑的话，这些就是数据缓冲区；</li>
<li>警报的目的是以简单的通知机制告知对端通信出现异常状况；</li>
</ol>
<h2 id="公钥基础设施"><a href="#公钥基础设施" class="headerlink" title="公钥基础设施"></a>公钥基础设施</h2><ol>
<li>公钥基础设施（public key infrastructure，PKI）的目标就是实现不同成员在不见面的情况下进行安全通信；</li>
<li>当前采用的模型是基于 可信的第三方机构，也就是证书颁发机构（certification authority或certificate authority，CA）签发的证书；</li>
<li>登记机构（registration authority，RA）主要是完成一些证书签发的相关管理工作，本地登记机构（local registration authority，LRA）；</li>
<li>证书颁发机构（certification authority，CA）是指我们都信任的证书颁发机构，它会在确认申请用户的身份之后签发证书；</li>
<li>证书是一个包含公钥、订阅人相关信息以及证书颁发者数字签名的数字文件，也就是一个让我们可以交换、存储和使用公钥的壳；</li>
<li>当出现私钥泄露或者不再需要使用的时候，就需要吊销证书；</li>
<li>攻击PKI最好的方法之一是直接对根证书下手！</li>
</ol>
<h2 id="攻击PKI"><a href="#攻击PKI" class="headerlink" title="攻击PKI"></a>攻击PKI</h2><ol>
<li>所有的CA都可以在不经域名所有者同意的情况下给任意域名签发证书，如果CA被入侵了，攻击者就可以给任意网站生成证书；</li>
<li>大部分用户在遇到有其签名的软件时都会同意安装！</li>
<li>攻击的过程：<ol>
<li>确定CA生成的证书前缀是什么，以及确定一些CSR字段的内容</li>
<li>给伪造的证书刻意构建一个前缀</li>
<li>确定后缀</li>
<li>从前面三步的数据构建碰撞块</li>
<li>构建CSR文件并提交给证书机构</li>
<li>通过将伪造的前缀、第二部分的碰撞块以及后缀合并起来构建一张伪造的证书，其中的签名信息从真正的证书中获取</li>
</ol>
</li>
<li>火焰病毒在大约1000个系统中被发现，看起来是一种目标性非常明确的攻击！不久之后，火焰病毒的创造者发出了自杀命令，让所有的火焰病毒将自身删除！</li>
<li>最佳攻击方式就是直接攻击证书颁发机构！</li>
</ol>
<h2 id="HTTP和浏览器问题"><a href="#HTTP和浏览器问题" class="headerlink" title="HTTP和浏览器问题"></a>HTTP和浏览器问题</h2><ol>
<li>sidejacking是网络应用会话劫持的一种特殊情况，在这种情况下，攻击者会从一条未加密的连接上获取会话令牌，这种攻击在无线网络或者本地局域网中非常容易实施；</li>
<li>程序员常犯的一个错误是忘记对Cookie进行加密，当这种问题发生时，攻击者可以使用一种叫作Cookie窃取（cookie stealing）的技术来获得会话令牌；</li>
<li>Cookie被设计成跨特定域名的不同主机名来使用，也可以跨不同协议和端口使用；</li>
<li>TLS的核心目的是保护你不被中间攻击所危害，但是当真的攻击到来的时候，你所能得到的全部只是一个来自浏览器的证书警告；</li>
<li>有一个众所周知的针对安全通信的攻击叫作重放攻击（replay attack），这种攻击是指攻击者会捕获并利用正确的请求，并很可能是用在不同的上下文中！</li>
</ol>
<h2 id="实现问题"><a href="#实现问题" class="headerlink" title="实现问题"></a>实现问题</h2><ol>
<li>心脏出血 是OpenSSL中的一个灾难性漏洞，它在2014年4月被发现并公开。此攻击利用了心跳（Heartbeat）协议实现中的一个缺陷，心跳协议是一个很少使用的TLS协议扩展；</li>
<li>心脏出血不能获取访问数据库的权限，至少不能直接获取，但是可以通过心脏出血间接地获取一些有用的信息；</li>
<li>据估计，大概三分之二的服务器使用的是重复弱密钥，其他的服务器则会为每次握手重新生成新的密钥！</li>
<li>协议降级攻击是指攻击者作为中间人企图修改TLS握手过程中的连接参数；</li>
<li>当互操作性问题出现之后，浏览器开始支持自愿协议降级（voluntary protocol downgrade）；协议内置的针对回退攻击的防御对于攻击者干扰一个新连接进行攻击是有效的；</li>
<li>攻击者可以通过向HTTP请求和响应中注入任意长度的数据来达到控制TLS记录长度的目的。如果攻击者能控制TLS记录的长度，那么就可以控制记录如何进行分割（取决于大小和其他限制）。在结合截断攻击的情况下，攻击者可以分割HTTP的请求和响应头，这会造成一些有意思的结果！</li>
</ol>
<h2 id="协议攻击"><a href="#协议攻击" class="headerlink" title="协议攻击"></a>协议攻击</h2><ol>
<li>不安全重新协商（insecure renegotiation）也叫作TLS身份验证缺口（TLS authentication gap），之所以存在，是因为在旧的和新的TLS连接之间没有连续性；</li>
<li>一个中间人（man-in-the-middle，MITM）攻击者可以通过下面三个步骤来利用这个不安全重新协商漏洞：<ol>
<li>拦截一个受害客户端到服务器的TCP连接</li>
<li>新建一个到服务器的TLS连接，包含攻击负载</li>
<li>从这时起，在受害客户端和服务器之间扮演透明代理</li>
</ol>
</li>
<li>如果攻击者可以在一个网站上找到某个进行重定向的资源， 他可能成功地执行以下几种攻击：<ul>
<li>将用户重定向到恶意网站</li>
<li>连接降级至HTTP</li>
<li>通过重定向POST请求截获身份凭据</li>
</ul>
</li>
<li>有时候系统设计和架构决策可能会导致本不应该存在的重新协商问题的发生！</li>
<li>BEAST攻击针对的是TLS 1.0和更早版本的协议中对称加密算法的CBC模式，BEAST是发生在客户端的一种缺陷，因此需要将解决问题的措施部署在客户端；</li>
<li>一个实际的压缩旁路攻击发生在2012年，被命名为CRIME攻击！攻击者必须能够操作受害者的浏览器来向目标服务器提交大量的请求，与此同时观察网络上发出的数据包；</li>
</ol>
<h2 id="部-署"><a href="#部-署" class="headerlink" title="部 署"></a>部 署</h2><ol>
<li>私钥是TLS安全的基石，为私钥选择恰当的密钥算法和长度，TLS可以提供高强度的安全性；</li>
<li>目前TLS支持3种算法，但实际上只有RSA这一种被广泛使用；DSA已经被废弃，而ECDSA在未来几年内有望被广泛使用；</li>
<li>在密钥长度方面，大部分系统部署只需要2048位RSA密钥或者256位ECDSA密钥，分别提供112位和128位的加密强度；</li>
<li>双密钥部署是一种不错的选择，既可以避免性能的损失，又能提供最好的浏览器支持；</li>
<li>大部分成功的攻击都是绕过了加密环节，而不是直接破解出加密内容；因此，应该考虑：<ol>
<li>保证私钥的私密性</li>
<li>仔细选择随机数生成器</li>
<li>保护密钥的密码</li>
<li>不要随意共享密钥</li>
<li>定期更新密钥</li>
<li>安全存储密钥</li>
</ol>
</li>
<li>证书主要有三种类型：域名验证（domain validated，DV）、组织验证（organization validated，OV）和扩展验证（extended validation，EV）；</li>
<li>证书的主要作用就是为保障用户安全顺畅地访问域名建议合适的信任机制；</li>
<li>当多个域名共用一个证书时，事实上它们也就共用了一个相同的私钥！</li>
<li>使用前向保密后，用户的每次访问都会使用不同的密钥独立加密，如果没有前向保密，所有连接的安全性都完全依赖于服务器的密钥，一旦服务器密钥被破解或者泄露，所有历史通信都可以被直接解密，这是一个巨大的隐患，可以通过调整配置来直接修复；</li>
<li>共享主机不应该用于任何有商业加密需求的场合，有很多通过文件系统或直接内存访问的攻击可以导致私钥泄露；</li>
<li>一种被广泛接受的做法是为每个安全服务器配置一个独立的IP地址，主要的原因在于虚拟安全托管（将许多不相关的安全服务器置于相同IP地址）依赖服务器名称指示（server name indication，SNI）特性；</li>
<li>会话缓存是性能优化的常见方案，客户端和服务器在首次建立连接并创建SSL会话时协商好传输密钥，在后续连接中就可以直接复用相同的传输密钥，大大减少CPU消耗和网络延迟；</li>
<li>心脏出血是OpenSSL的一个漏洞，而OpenSSL是使用最广泛的SSL加密库！<ol>
<li>给受影响的系统打上OpenSSL补丁，修复漏洞</li>
<li>更新私钥，重新签发证书，吊销老证书</li>
<li>如果使用了会话票证，更新票证密钥</li>
<li>评估可能存在于服务器内存中的敏感信息，并决定是否还要采取其他措施（例如一些网站建议用户更改密码）</li>
</ol>
</li>
<li>钉扎技术大大降低了证书伪造的攻击可能性，但是也需要付出一些代价：需要一定的投入才能建立起一个成熟的钉扎战略和运营机制，并且钉扎完全依赖于浏览器的内部验证机制！</li>
<li>内容安全策略（Content Security Policy，CSP）是一种机制，允许网站控制在HTML页面中嵌入的资源用什么协议来访问；</li>
<li>虽然TLS具有内置的协议降级保护，但有些浏览器在握手失败时会自愿降级，直接导致降级保护不起作用！</li>
</ol>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ol>
<li>网络通讯的速度由两个主要因素决定：带宽和延迟，带宽用来衡量在单位时间内有多少数据可发送；延迟则描述一个消息从一端发送到另一端接收所需的时间；</li>
<li>大部分TLS性能影响集中在每一个连接的开始握手阶段，一个重要的优化技术是在连接数允许的情况下尽可能保持每个连接不断开；</li>
<li>使用SPDY（Google在2009年开始，在TCP层和HTTP层之间引入以提升速度）可以复用多个HTTP请求和响应，这意味着浏览器永远只需与每个服务器建立一个连接；</li>
<li>CDN（content delivery network，内容分发网络）是利用地理上分散的服务器提供边缘缓存和流量优化（通常也称为广域网优化，WAN optimization）来产生价值的；</li>
<li>一次完整的TLS握手期间，服务器会把它的证书链发送给客户端验证，证书链的长度和正确性对握手的性能有很大影响！</li>
<li>发起拒绝服务攻击最主要的方式是使用僵尸网络，一种由大量被感染的计算机组成的网络；对抗方式：<ol>
<li>连接限制</li>
<li>资源超配</li>
<li>第三方援助</li>
</ol>
</li>
</ol>
<h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><ol>
<li>OpenSSL是一个开源项目，包括密码库和SSL/TLS工具集；</li>
<li>OpenSSL项目是安全套接字层（secure sockets layer，SSL）和传输层安全（transport layer security，TLS）协议的一个实现，是大家共同努力开发出的代码可靠、功能齐全、商业级别的开源工具集；</li>
<li>不同的操作系统经常会修改OpenSSL的代码，主要是修复一些已知漏洞!</li>
<li>OpenSSL自带的客户端工具可以用来连接安全服务器；</li>
</ol>
<h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><ol>
<li><p>Nginx是一个反向代理Web服务器，由于在系统资源使用上的高效率而广受欢迎,而且Nginx开放源代码，因此可以好好研究！</p>
</li>
<li><p>稳定版本的Nginx提供了部署一个独立运行、配置良好的TLS服务所需要的一切内容；</p>
</li>
<li><p>可以自己编译Nginx并且静态链接到一个兼容的OpenSSL版本，方法很简单：在 配置Nginx的编译选项时，使用–with-openssl参数来指向OpenSSL的源代码；</p>
</li>
<li><p>要启用TLS，需要告诉Nginx在指定的端口上启用相应的协议，这可以通过在listen指令后加上ssl参数来实现；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">listen 192.168.0.1:443 ssl spdy; server_name www.example.com; </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Nginx在支持前向保密上没有任何问题；</p>
</li>
<li><p>Nginx提供独立服务器上TLS会话恢复的良好支持，包括服务器端会话缓存和会话票证两种方式，在服务器集群环境中，Nginx支持分布式会话票证，不支持分布式会话缓存；</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>安全协议的成功不能单纯地从技术性和安全性方面来衡量，更加重要的是在现实生活中的成功实践和实际效果，尽管TLS并不完美，但每天仍有数十亿人使用它！安全问题始终存在，就看你认不认真对待！    </p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Hello,JavaScript</title>
    <url>/2020/04/25/Hello-JavaScript/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为什么要有JavaScript？</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>箭头函数(a,b)=&gt;{return a+b;}</p>
<p>闭包： (function(){ //内部可以执行函数 }()); 营造了一个独立的运行环境，不影响外界。</p>
<p>创建命名空间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test1.js</span></span><br><span class="line"><span class="built_in">window</span>.namespace=<span class="built_in">window</span>.namespace||&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello from mynamespace'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.namespace.test2=hello2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test2.js</span></span><br><span class="line"><span class="built_in">window</span>.namespace=<span class="built_in">window</span>.namespace||&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello from myns2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.namespace.test=hello;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">namespace.test();</span><br><span class="line">namespace.test2();</span><br></pre></td></tr></table></figure>



<p>循环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> arr)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式4</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>();</span><br><span class="line"><span class="comment">// 方式5      </span></span><br><span class="line"><span class="keyword">while</span>()</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>数组声明： var arr=[];</p>
<p>对象声明： var obj={}; 也可以  var obj={name: “Wander”,age: 26};</p>
<p> 解构：（可以让函数返回数组，或者对象，这样可以传出”多个返回值”）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组解构，没有对应的值，则为undefined</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">"wader"</span>,<span class="number">25</span>];</span><br><span class="line"><span class="keyword">let</span> [name,age]=arr;</span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;<span class="attr">name</span>:<span class="string">"wander"</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=obj;</span><br></pre></td></tr></table></figure>

<p>Map:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map =<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>

<p>WeakMap对象是一组键值对的集合，且其中的键是弱引用的，键必须是对象，值可以是任意值；</p>
<p>Set：集合；</p>
<p>WeakSet：允许将弱保持对象存储在一个集合中；</p>
<p>时间对象Date；</p>
<p>数学类Math；</p>
<p>函数对象Function； “use strict”; //使用严格模式</p>
<p><strong>Proxy对象用于定义基础操作的自定义行为（例如，属性查找、赋值、枚举、函数调用等）；</strong></p>
<p>Promise用于异步编程；</p>
<p>生成器对象是由一个generator function返回的，并且它符合可迭代协议和迭代器协议；</p>
<p>async以及await；</p>
<p>git搜索资料： git 最好学习资料 in:readme stars&gt;10000</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Hello Nodejs</title>
    <url>/2020/04/24/Hello-Nodejs/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Node.js是一个可以让 JavaScript 代码运行在服务器端的平台，让JavaScript 脱离浏览器的束缚运行在一般的服务器环境下轻松地进行服务器端应用开发，主要是为了实时Web应用开发而诞生的平台，充分考虑了实时响应、超大规模数据要求下架构的可扩展性。<strong>Node.js采用单线程、异步I/O、事件驱动型的程序设计模型。</strong>Node.js有强大而灵活的包管理器(node package manager,npm)，有很多第三方模块，方便进行数据库集成、模板语言解析、CSS生成工具、邮件、加密、图形、调试支持等等。为什么需要学习Node.js？因为有需求，公司的以前的后端代码是用Node.js来开发的，需要转成SpringBoot框架下的后端服务。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ol>
<li>Node.js 是一个让 JavaScript 运行在服务端的开发平台；</li>
<li>Node.js 可以作为服务器向用户提供服务，直接面向前端开发；</li>
<li>JavaScript 是由 ECMAScript、文档对象模型（DOM）和浏览器对象模型（BOM）组成；</li>
<li>Node.js 中所谓的 JavaScript 只是 Core JavaScript；</li>
<li>Node.js 的 JavaScript 引擎是 V8，来自 Google Chrome 项目；</li>
<li>Node.js 不运行在浏览器中，所以也就不存在 JavaScript 的浏览器兼容性问题，<strong>可以放心地使用 JavaScript 语言的所有特性！</strong></li>
<li>能干什么：<ol>
<li>具有复杂逻辑的网站</li>
<li>基于社交网络的大规模 Web 应用</li>
<li>Web Socket 服务器</li>
<li>TCP/UDP 套接字应用程序</li>
<li>命令行工具</li>
<li>交互式终端程序</li>
<li>带有图形用户界面的本地应用程序</li>
<li>单元测试工具</li>
<li>客户端 JavaScript 编译器</li>
</ol>
</li>
<li>Node.js 内建了 HTTP 服务器支持，也就是说你可以轻而易举地实现一个网站和服务器的组合，也就意味着你可以很方便地去开发，而不需要再考虑搭建一个Apache或者Nginx服务器；</li>
<li>Node.js 可以调用C/C++ 的代码；</li>
<li><strong>Node.js 最大的特点就是采用异步式 I/O 与事件驱动的架构设计。</strong></li>
<li>Node.js很大程度上可以提高 Web 应用的健壮性，防止恶意攻击！</li>
</ol>
<h2 id="快速使用Node-js"><a href="#快速使用Node-js" class="headerlink" title="快速使用Node.js"></a>快速使用Node.js</h2><ol>
<li>手写一个hello.js,其中内容为：console.log(‘hello world’),然后在终端输入命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node hello.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hello world</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> console 是 Node.js 提供的控制台对象</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一个简单的web服务程序：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//easy_web.js</span></span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">        res.write(<span class="string">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</span><br><span class="line">        res.end(<span class="string">'&lt;p&gt;Hello world!&lt;/p&gt;'</span>);</span><br><span class="line">&#125; ).listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Http server is listening at port 80.'</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>supervisor 可以监视对代码的改动，并自动重启 Node.js</strong>,使用只要安装supervisor,然后使用supervisor来启动脚本就可以了:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行代码</span></span><br><span class="line">supervisor easy_web.js</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列，在开发者看来，事件由 EventEmitter 对象提供；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册了一个事件监听器，然后2000毫秒后发送事件som_event，然后会回调匿名函数；</span></span><br><span class="line"><span class="keyword">var</span> EventEmitter=<span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> myevent=<span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">myevent.on(<span class="string">'som_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'som_event occured!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">myevent.emit(<span class="string">'som_event'</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>模块（Module）和包（Package）是Node.js的重要内容，不可能你的代码只有一个js文件吧，而且不可能重复造轮子吧！</li>
<li>在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，exports 是模块公开的接口，require 用于从外部获取一个模块的接口；</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="comment">// npm 提供的上万个模块都是通过这种简单的方式搭建起来的</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line">exports.setName=<span class="function"><span class="keyword">function</span>(<span class="params">theName</span>)</span>&#123;</span><br><span class="line">  name=theName;</span><br><span class="line">&#125;;</span><br><span class="line">exports.sayHello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello ,'</span> + name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个脚本文件中使用</span></span><br><span class="line"><span class="comment">// require始终都是单次加载</span></span><br><span class="line"><span class="keyword">var</span> mymodule=<span class="built_in">require</span>(<span class="string">'./module'</span>);</span><br><span class="line">mymodule.setName(<span class="string">'WanderROS'</span>);</span><br><span class="line">mymodule.sayHello();</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>简化模块创建：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//singleobject.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">  name = thyName; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name); </span><br><span class="line">&#125;; </span><br><span class="line">&#125;;</span><br><span class="line">exports.Hello = Hello;</span><br><span class="line"><span class="comment">// 这种使用的时候 require('./singleobject').Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐使用下面的方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">  name = thyName; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name); </span><br><span class="line">&#125;; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br><span class="line"><span class="comment">// 这种使用的时候 require('./singleobject')</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>exports 本身仅仅是一个普通的空对象，即 {}，它专门用来声明接口，本质上是通过它为模块闭包的内部建立了一个有限的访问接口;</li>
<li>Node.js 的包是一个目录，其中包含一个 JSON 格式的包说明文件 package.json,严格符合 CommonJS 规范的包应该具备以下特征:<ol>
<li>package.json 必须在包的顶层目录下</li>
<li>二进制文件应该在 bin 目录下</li>
<li>JavaScript 代码应该在 lib 目录下</li>
<li>文档应该在 doc 目录下</li>
<li>单元测试应该在 test 目录下</li>
</ol>
</li>
<li>Node.js 在调用某个包时，会首先检查包中 package.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口;</li>
</ol>
<h2 id="包管理器npm"><a href="#包管理器npm" class="headerlink" title="包管理器npm"></a>包管理器npm</h2><ol>
<li>使用 npm 安装包的命令格式为（放置在当前目录的 node_modules 子目录下）： npm [install/i] [package_name] ；</li>
<li>npm 还有另一种不同的安装模式被成为全局模式（npm 会将包安装到系统目录），使用方法为：npm [install/i] -g [package_name] ；</li>
<li>npm link在本地包和全局包之间创建符号链接；</li>
<li>npm init 可以根据交互式问答产生一个符合标准的 package.json；</li>
<li>node-inspector 是一个完全基于 Node.js 的开源在线调试工具，提供了强大的调试功能和友好的用户界面，使用 npm install -g node-inspector 命令安装 node-inspector。</li>
</ol>
<h2 id="Node-js核心"><a href="#Node-js核心" class="headerlink" title="Node.js核心"></a>Node.js核心</h2><ol>
<li>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量,Node.js 中的全局对象是 global，所有全局变量都是 global对象的属性;</li>
<li><strong>process</strong> 是一个全局变量,用于描述当前 Node.js 进程状态,提供了一个与操作系统的简单接口:<ol>
<li>process.argv是命令行参数数组，第一个元素是 node，第二个元素是脚本文件名,从第三个元素开始每个元素是一个运行参数</li>
<li>process.stdout是标准输出流,process.stdout.write() 函数提供了更底层的接口;</li>
<li>process.stdin是标准输入流,初始时它是被暂停的，恢复要使用：process.stdin.resume();</li>
<li>process.nextTick(callback)的功能是为事件循环设置一项任务；</li>
</ol>
</li>
<li>*<em>console *</em>用于提供控制台标准输出：<ol>
<li>console.log()：向标准输出流打印字符并以换行符结束；</li>
<li>console.error()：与 console.log() 用法相同，只是向标准错误流输出；</li>
<li>console.trace()：向标准错误流输出当前的调用栈；</li>
</ol>
</li>
<li><strong>util</strong>是一个 Node.js 核心模块，提供常用函数的集合：<ol>
<li>util.inherits(constructor, superConstructor) 是一个实现对象间原型继承的函数；</li>
<li>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换为字符串的方法，通常用于调试和错误输出；</li>
<li>util还提供了util.isArray()、util.isRegExp()、util.isDate()、util.isError() 四个类型测试工具，以及 util.format()、util.debug() 等工具；</li>
</ol>
</li>
<li><ol>
<li>events 模块只提供了一个对象： events.EventEmitter，事件发射与事件监听器功能的封装；</li>
<li>EventEmitter.on(event, listener) 为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数 listener；</li>
<li>EventEmitter.emit(event, [arg1], [arg2], […]) 发射 event 事件；</li>
<li>EventEmitter.once(event, listener) 为指定事件注册一个单次监听器；</li>
<li>EventEmitter.removeListener(event, listener) 移除指定事件的某个监听器；</li>
<li>EventEmitter.removeAllListeners([event]) 移除所有事件的所有监听器；</li>
</ol>
</li>
<li>EventEmitter 定义了一个特殊的事件 error，当 error 被发射时，EventEmitter 规定如果没有响应的监听器，Node.js 会把它当作异常，退出程序并打印调用栈；</li>
<li>*<em>fs *</em>模块是文件操作的封装，它提供了文件的读取、写入、更名、删除、遍历目录、链接等 POSIX 文件系统操作：<ol>
<li>fs.readFile(filename,[encoding],[callback(err,data)]) 是最简单的读取文件的函数；</li>
<li>fs.readFileSync(filename, [encoding])是 fs.readFile 同步的版本；</li>
<li>fs.open(path, flags, [mode], [callback(err, fd)])是 POSIX open 函数的封装，与 C 语言标准库中的 fopen 函数类似；</li>
<li>fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead,buffer)])是 POSIX read 函数的封装；</li>
</ol>
</li>
<li>*<em>http *</em>模块封装了一个高效的 HTTP 服务器和一个简易的HTTP 客户端：<ol>
<li>http.Server 是 http 模块中的 HTTP 服务器对象，http.createServer 创建了一个 http.Server 的实例，将一个函数作为 HTTP 请求处理函数；</li>
<li>http.Server的事件：<ol>
<li>request：当客户端请求到来时，该事件被触发，提供两个参数 req 和res，分别是http.ServerRequest 和 http.ServerResponse 的实例；</li>
<li>connection ：当 TCP 连接建立时， 该事件被触发， 提供一个参数 socket ， 为net.Socket 的实例；</li>
<li>close ：当服务器关闭时，该事件被触发；</li>
<li>还有 checkContinue、upgrade、clientError 事件；</li>
</ol>
</li>
<li><strong>http.ServerRequest 是 HTTP 请求的信息，是后端开发者最关注的内容；</strong></li>
<li><strong>http.ServerResponse是返回给客户端的信息，决定了用户最终能看到的结果；</strong><ol>
<li>response.writeHead(statusCode, [headers])：向请求的客户端发送响应头；</li>
<li>response.write(data, [encoding])：向请求的客户端发送响应内容；</li>
<li>response.end([data], [encoding])：结束响应，告知客户端所有发送已经完成；</li>
</ol>
</li>
<li>http.request(options, callback) 发起 HTTP 请求；</li>
<li>http.get(options, callback) http 模块还提供了一个更加简便的方法用于处理GET请求：<ol>
<li>http.ClientRequest 是由 http.request 或 http.get 返回产生的对象，表示一个已经产生而且正在进行中的 HTTP 请求；</li>
<li>request.abort()：终止正在发送的请求；</li>
<li>request.setTimeout(timeout, [callback])：设置请求超时时间，timeout 为毫秒数，当请求超时以后，callback 将会被调用；</li>
<li>http.ClientResponse 与 http.ServerRequest 相似，提供了三个事件 data、end和 close，分别在数据到达、传输结束和连接结束时触发；</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Web开发相关"><a href="#Web开发相关" class="headerlink" title="Web开发相关"></a>Web开发相关</h2><ol>
<li><strong>MVC</strong> （Model-View-Controller，模型-视图-控制器）是一种软件的设计模式：<ol>
<li>模型是对象及其数据结构的实现，通常包含数据库操作；</li>
<li>视图表示用户界面，在网站中通常就是 HTML 的组织结构；</li>
<li>控制器用于处理用户请求和数据流、复杂模型，将输出传递给视图。</li>
</ol>
</li>
<li><strong>Express</strong>除了为 http 模块提供了更高层的接口外，还有很多功能，是一个轻量级的 Web 框架：<ol>
<li>路由控制</li>
<li>模板解析支持</li>
<li>动态视图</li>
<li>用户会话</li>
<li>CSRF 保护</li>
<li>静态文件服务</li>
<li>错误控制器</li>
<li>访问日志</li>
<li>缓存</li>
<li>插件支持</li>
</ol>
</li>
<li><strong>REST</strong>：表征状态转移（Representational State Transfer是一种基于 HTTP 协议的网络应用的接口风格，充分利用 HTTP 的方法实现统一风格接口的服务，HTTP 协议定义了标准的方法：</li>
</ol>
<ul>
<li>GET：请求获取指定资源</li>
<li>HEAD：请求指定资源的响应头</li>
<li>POST：向指定资源提交数据</li>
<li>PUT：请求服务器存储一个资源</li>
<li>DELETE：请求服务器删除指定资源</li>
<li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li>
<li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</li>
<li>OPTIONS：返回服务器支持的HTTP请求方法</li>
</ul>
<ol start="4">
<li>模板引擎（Template Engine）是一个从页面模板根据一定的规则生成 HTML 的工具；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Node.js里面有很多包帮助我们开一个应用级别的Web程序，这部分主要还是对Node.js有个基础的认识，很多的应用还是需要去学习一些框架，以及一些编程思想，比如MVC等等框架，还有模板引擎能帮助我们设计出比较友好的界面！</p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>IoT 设备上报查询</title>
    <url>/2020/06/15/IoT-%E8%AE%BE%E5%A4%87%E4%B8%8A%E6%8A%A5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>！！！—————————————看不到，气不气—————————————！！！</p>
<p>！！！—————————————看不到，气不气—————————————！！！</p>
<p>！！！—————————————看不到，气不气—————————————！！！</p>
<p>！！！—————————————看不到，气不气—————————————！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            _ooOoo_</span></span><br><span class="line"><span class="comment">//                           o8888888o</span></span><br><span class="line"><span class="comment">//                           88" . "88</span></span><br><span class="line"><span class="comment">//                           (| -_- |)</span></span><br><span class="line"><span class="comment">//                           O\  =  /O</span></span><br><span class="line"><span class="comment">//                        ____/`---'\____</span></span><br><span class="line"><span class="comment">//                      .'  \\|     |//  `.</span></span><br><span class="line"><span class="comment">//                     /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment">//                    /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">//                    |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment">//                    | \_|  ''\---/''  |   |</span></span><br><span class="line"><span class="comment">//                    \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">//                  ___`. .'  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">//               ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></span><br><span class="line"><span class="comment">//              | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">//              \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">//         ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment">//                            `=---='</span></span><br><span class="line"><span class="comment">//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment">//                      佛祖保佑       永无BUG</span></span><br></pre></td></tr></table></figure>

<p>无力吐槽电控的编程水平,每次都要给定位问题,浪费自己的时间,真实很无奈,直接通过IoT部门的设备指令查询就可以直接将问题指给电控部门自己去查代码，不然老是花自己的时间来帮忙定位问题，就感觉很傻逼！</p>
<hr>
<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><ol>
<li><p>下载代理工具profixer；</p>
</li>
<li><p>配置代理工具的Proxy：</p>
<ol>
<li>地址:121.40.83.192</li>
<li>端口：1080</li>
<li>协议：SOCKS Version5</li>
<li>认证账户：liuxq17</li>
<li>认证密码：FDS54#$^#jhm7$#xNG</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ab58397a921edd48766d461867f1aa80-96463" alt="配置Proxy"></p>
</li>
<li><p>配置规则：</p>
<ol>
<li>名称：美居IoT</li>
<li>目标主机：10.47.123.232;10.51.235.159;10.171.168.96;100.98.27.208</li>
<li>Action：指向配置的Proxy</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/301a024859a96f60204699122bc0bfd7-127538" alt="配置Rules"></p>
</li>
<li><p>访问kibana日志：<a href="http://100.98.27.208:666/" target="_blank" rel="noopener">http://100.98.27.208:666/</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://100.98.27.208:666/app/kibana#/discover?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-1h,to:now))&amp;_a=(columns:!(body),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:'0b446ae0-e12a-11e9-a186-cf08cb3e53ae',key:deviceid,negate:!f,params:(query:'144036023561578'),type:phrase,value:'144036023561578'),query:(match:(deviceid:(query:'144036023561578',type:phrase))))),index:'0b446ae0-e12a-11e9-a186-cf08cb3e53ae',interval:auto,query:(language:kuery,query:''),sort:!('@timestamp',desc))</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>Java 性能权威指南</title>
    <url>/2020/05/20/Java-%E6%80%A7%E8%83%BD%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JVM优化是个老生常谈的话题，也是程序员面试容易遇到的高频问题。在项目初期，很容易找到架构上的改进点，一旦找到能极大改善，在成熟应用中，要找到这样的性能改进点则很罕见！JVM有新的垃圾收集器（G1），Java性能调优覆盖两个领域：编译器和垃圾收集器等的调优参数，以及API的最佳实践。性能调优是门科学和艺术！<strong>推荐书籍：《Java 性能权威指南》· [美] Scott Oaks 著 柳飞 陆明刚等译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java 代码优化</title>
    <url>/2020/04/18/Java-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>代码优化的最重要的作用应该是：<strong>避免未知的错误。</strong>在代码上线运行的过程中，往往会出现很多我们意想不到的错误，因为线上环境和开发环境是非常不同的，错误定位到最后往往是一个非常小的原因。然而为了解决这个错误，我们需要先自验证、再打包出待替换的class文件、暂停业务并重启，对于一个成熟的项目而言，最后一条其实影响是非常大的，这意味着这段时间用户无法访问应用。</p>
<p>代码优化的目标是：</p>
<ol>
<li>减小代码的体积；</li>
<li>提高代码运行的效率；</li>
<li>减少不必要的错误等。</li>
</ol>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a><strong>开始</strong></h1><ol>
<li><strong>尽量指定类、方法的final修饰符：</strong></li>
</ol>
<ul>
<li>带有final修饰符的类是不可派生的；</li>
<li>为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写；</li>
<li>Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大。</li>
</ul>
<ol start="2">
<li><strong>尽量重用对象：</strong></li>
</ol>
<ul>
<li>特别是String对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer代替；</li>
<li>由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</li>
</ul>
<ol start="3">
<li><strong>尽可能使用局部变量:</strong></li>
</ol>
<ul>
<li>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中，速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢;</li>
<li>栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</li>
</ul>
<ol start="4">
<li><strong>及时关闭流：</strong></li>
</ol>
<ul>
<li>进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源；</li>
<li>对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果（可能会导致资源泄露等）。</li>
</ul>
<ol start="5">
<li><strong>尽量减少对变量的重复计算：</strong></li>
</ol>
<ul>
<li>对方法的调用，即使方法中只有一句语句，也是有消耗的；</li>
<li>比如下面的代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)</span><br><span class="line">&#123;...&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>建议替换为：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, length = list.size(); i &lt; length; i++)</span><br><span class="line">&#123;...&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong><em>尽量采用懒加载的策略：</em></strong></li>
</ol>
<ul>
<li>在需要的时候才创建，尽量避免不太需要的创建；</li>
<li>比如下面的代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">　　list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以修改为如下的代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">　　String str = <span class="string">"aaa"</span>;</span><br><span class="line">　　list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong><em>慎用异常：</em></strong></li>
</ol>
<ul>
<li>异常对于性能来说是非常不利的；</li>
<li>主要原因在于：抛出异常需要先创建一个新的对象，然后还需要收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调用堆栈。</li>
</ul>
<ol start="8">
<li><strong><em>不要在循环中使用try…catch…，应该把它放在最外层。</em></strong></li>
<li><strong>如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度：</strong></li>
</ol>
<ul>
<li>通过类（这里指的不仅仅是上面的StringBuilder）的构造函数来设定它的初始化容量，这样可以明显地提升性能；</li>
<li>像HashMap这种是以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。</li>
</ul>
<ol start="10">
<li><strong>当复制大量数据时，使用System.arraycopy()命令。</strong></li>
<li><strong>乘法和除法使用移位操作，最好加上相应的注释。</strong></li>
<li><strong>循环内不要不断创建对象引用，内存中只有一份，这样就大大节省了内存空间了。</strong></li>
<li><strong>基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList。</strong></li>
<li><strong>尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销。</strong></li>
<li><strong>不要将数组声明为public static final，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变。</strong></li>
<li><strong>尽量在合适的场合使用单例：</strong></li>
</ol>
<ul>
<li>控制资源的使用，通过线程同步来控制资源的并发访问；</li>
<li>控制实例的产生，以达到节约资源的目的；</li>
<li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信等。</li>
</ul>
<ol start="17">
<li><strong>尽量避免随意使用静态变量，当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的。</strong></li>
<li><strong>及时清除不再需要的会话，为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。</strong></li>
<li><strong>实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。</strong></li>
<li><strong>使用同步代码块替代同步方法。</strong></li>
<li><strong>将常量声明为static final，并以大写命名，在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量。</strong></li>
<li><strong>不要创建一些不使用的对象，不要导入一些不使用的类。</strong></li>
<li><strong>程序运行过程中避免使用反射。</strong></li>
<li><strong>使用数据库连接池和线程池，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程。</strong></li>
<li><strong>使用带缓冲的输入输出流进行IO操作，带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率。</strong></li>
<li><strong>顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList。</strong></li>
<li><strong>不要让public方法中有太多的形参，会有如下坏处：</strong></li>
</ol>
<ul>
<li>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合；</li>
<li>参数太多势必导致方法调用的出错概率增加。</li>
</ul>
<ol start="28">
<li><strong>字符串变量和字符串常量equals的时候将字符串常量写在前面。</strong></li>
<li><strong>在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者。</strong></li>
<li><strong>不要对数组使用toString()方法。</strong></li>
<li><strong>不要对超出范围的基本数据类型做向下强制转型。</strong></li>
</ol>
<ul>
<li>比如下面的代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> l = <span class="number">12345678901234L</span>;</span><br><span class="line">    <span class="keyword">int</span> i = (<span class="keyword">int</span>)l;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：1942892530</span></span><br></pre></td></tr></table></figure>

<ol start="32">
<li><strong>公用的集合类中不使用的数据一定要及时remove掉，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</strong></li>
<li><strong>把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢：</strong></li>
</ol>
<ul>
<li>String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断；</li>
<li>i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串。</li>
</ul>
<ol start="34">
<li><p><strong>使用最有效率的方式去遍历Map。</strong></p>
</li>
<li><p><strong>对资源的close()建议分开操作。虽然有些麻烦，却能避免资源泄露。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对于ThreadLocal使用前或者使用后一定要先remove,如果在项目中使用到了ThreadLocal，一定要记得使用前或者使用后remove一下。线程池技术做的是一个<em>线程重用</em>,代码运行过程中，一条线程使用完毕，并不会被销毁而是等待下一次的使用。</strong></p>
</li>
<li><p><strong>切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定。</strong></p>
</li>
<li><p><strong>long或者Long初始赋值时，使用大写的L而不是小写的l，因为字母l极易与数字1混淆。</strong></p>
</li>
<li><p><strong>所有重写的方法必须保留@Override注解：</strong></p>
</li>
</ol>
<ul>
<li>清楚地可以知道这个方法由父类继承而来；</li>
<li>getObject()和get0bject()方法，前者第四个字母是”O”，后者第四个子母是”0”，加了@Override注解可以马上判断是否重写成功；</li>
<li>在抽象类中对方法签名进行修改，实现类会马上报出编译错误。</li>
</ul>
<ol start="40">
<li><strong>推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a.equals(b)，有空指针异常的风险。</strong></li>
<li><strong>循环体内不要使用”+”进行字符串拼接，而直接使用StringBuilder不断append。</strong></li>
<li><strong>不捕获Java类库中定义的继承自RuntimeException的运行时异常类，异常处理效率低，RuntimeException的运行时异常类，其中绝大多数完全可以由程序员来规避。</strong></li>
</ol>
<ul>
<li>ArithmeticException可以通过判断除数是否为空来规避；</li>
<li>NullPointerException可以通过判断对象是否为空来规避；</li>
<li>IndexOutOfBoundsException可以通过判断数组/字符串长度来规避；</li>
<li>ClassCastException可以通过instanceof关键字来规避；</li>
<li>ConcurrentModificationException可以使用迭代器来规避等。</li>
</ul>
<ol start="43">
<li><strong>避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数。</strong></li>
<li><strong>静态类、单例类、工厂类将它们的构造函数置为private。因为静态类、单例类、工厂类这种类本来我们就不需要外部将它们new出来，将构造函数置为private之后，保证了这些类不会产生实例对象。</strong></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分只是进行Java代码编写的部分优化，还有许多地方可以进行优化，比如参数配置，算法的迭代优化，算法的改进等等，都属于提高代码运行的高校办法。希望能够在高效编程的路上越走越优秀，写出来的代码也像艺术品那样可以被阅读！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java 测试驱动开发</title>
    <url>/2020/05/19/Java-%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>将各种 TDD 最佳实践应用于 Java 开发，从而开发出更易维护的软件代码，从这里开始更规范的Java代码编写，从各种工具框架以及环境搭建开始一步一步走入Java测试型开发编程的大门！学习编码实践的最佳方式是编写代码和不断练习！ <strong>推荐书籍：《Java 测试驱动开发》· [西] Viktor Farcic Alex Garcia 著 袁国忠 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><h3 id="项目中的不足之处"><a href="#项目中的不足之处" class="headerlink" title="项目中的不足之处"></a>项目中的不足之处</h3><ul>
<li>部分团队成员无缘参与需求、规范或用户故事的制定</li>
<li>大部分乃至全部测试都是手动的，抑或根本就没有测试</li>
<li>虽然使用了自动化测试，但并未检测出真正的问题</li>
<li>编写并执行自动化测试的时间太晚，无法给项目带来真正的价值</li>
<li>总是有更紧急的问题需要处理，没法腾出专门用于测试的时间</li>
<li>整个团队分为测试、开发和功能分析小组，而这些小组常常不能同步</li>
<li>无法重构代码，因为担心这样做会破坏既有的功能</li>
<li>维护成本高</li>
<li>上市时间过长</li>
<li>客户觉得交付的产品不符合要求</li>
<li>文档从来都不是最新的</li>
<li>害怕部署到生产环境，因为结果无法预料</li>
<li>常常无法部署到生产环境，因为运行回归测试的时间太长</li>
<li>团队为搞清楚某些方法或类的作用花费的时间太多</li>
</ul>
<h3 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h3><p>刚入职，上述问题的太多点都有遇到，都深有体味！至少中了上述痛点的9点，说实话！</p>
<h2 id="TDD（测试驱动开发）是什么"><a href="#TDD（测试驱动开发）是什么" class="headerlink" title="TDD（测试驱动开发）是什么"></a>TDD（测试驱动开发）是什么</h2><ol>
<li>TDD是一种简单的流程，要求你先编写测试，再编写实现代码，这与“编写代码后再测试”的传统方法相反；</li>
<li>测试驱动开发是一个过程，依赖于不断重复极短的开发周期，基于极限编程（XP）的测试优先理念，倡导采用可高度信赖的简单设计：<ol>
<li>编写一个测试</li>
<li>运行所有测试</li>
<li>编写实现代码</li>
<li>运行所有测试</li>
<li>重构</li>
<li>运行所有测试</li>
</ol>
</li>
<li>测试驱动开发是一种设计方法，要求在编写代码前考虑实现以及代码需要提供的功能，且每次只关注一项功能的需求和实现——有助于理清思路以及更好地组织代码；</li>
<li><strong>传统软件文档存在的主要问题是它们通常都不是最新的，一部分代码发生变化后，文档便不再反映实际情况！</strong></li>
<li>开发人员不应依赖于系统文档，因为它几乎在任何时候都不是最新的，在详尽而及时地描述代码方面，没有任何文档比代码本身做得更好；</li>
<li><strong>对新来者而言，项目描述、环境搭建、安装以及构建和打包说明等部分很有用！</strong></li>
<li>在编写代码前编写测试且代码覆盖率很高的情况下，完全可以相信应用程序将像预期的那样工作！</li>
</ol>
<h2 id="工具以及环境"><a href="#工具以及环境" class="headerlink" title="工具以及环境"></a>工具以及环境</h2><ol>
<li><strong>程序员必须熟悉开发生态环境以及简化编程的工具！</strong></li>
<li>最常用的Java单元测试框架——JUnit和TestNG；<ol>
<li><a href="http://junit.org/" target="_blank" rel="noopener">JUnit</a>是一个用于编写和运行测试的框架，每个测试都是一个方法，包含特定场景下将执行的部分代码</li>
<li><a href="http://testng.org/doc/index.html" target="_blank" rel="noopener">TestNG</a>中测试被组织成类，这与JUnit中完全相同</li>
</ol>
</li>
<li>Hamcrest添加了大量被称为“匹配器”的方法，其中每个匹配器都设计用于执行特定的比较操作；</li>
<li>AssertJ的工作原理与Hamcrest类似，一个重要的差别是AssertJ断言是可以串接的；</li>
<li>Selenium是一款出色的Web测试工具，它使用浏览器运行验证，并支持所有流行的浏览器，如Firefox、Safari和Chrome；</li>
<li>Selenide是一个基于Selenium的项目，提供了优良的测试编写语法，提高了测试的可读性；</li>
<li>行为驱动开发（BDD）是一种敏捷过程，旨在整个项目开发过程中都专注于相关方的利益，JBehave是一个Java BDD框架，用于编写可执行和自动化的验收测试；</li>
<li>Cucumber最初是一个Ruby BDD框架，但现在支持包括Java在内的多种语言，它提供的功能与JBehave很像；</li>
</ol>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol>
<li>你不会需要它：代码越少，需要维护的代码就越少，同时引入bug的可能性也越小</li>
<li>不要自我重复：重用而不是复制以前编写的代码</li>
<li>保持简单：越简单的东西越能实现其功能</li>
<li>奥卡姆剃刀原理：如果你有两个或多个类似的解决方案，选择最简单的</li>
<li>SOLID：<ol>
<li>单一职责原则：一个类应该只有一个导致它需要修改的原因</li>
<li>开-闭原则：类应该对扩展是开放的，对修改是封闭的</li>
<li>里氏替换原则：类应该能够被扩展它的类替换</li>
<li>接口分离原则：提供多个具体接口胜过提供单个通用接口</li>
<li>依赖倒转原则：类应依赖于抽象而不是实现</li>
</ol>
</li>
</ol>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>命名约定</li>
<li>流程</li>
<li>开发实践</li>
<li>工具</li>
</ul>
<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><ol>
<li>团队的每个成员都知道要遵循哪些命名约定，并能熟练使用；</li>
<li>选择流行的命名约定的优点在于，新加入团队的成员能快速掌握，因为既有的知识可提供帮助；</li>
<li>Gradle和Maven等构建工具不仅要求将测试代码和实现代码放在不同的源代码目录，还要遵循特定的命名约定；</li>
</ol>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>先编写测试的另一个好处时，可避免测试变成质量检查的手段；</li>
<li><strong>每次修改实现代码后，都再次运行所有测试；</strong></li>
<li>仅当所有测试都通过后才编写新测试;</li>
<li>仅当测试都通过后才重构;</li>
</ol>
<h3 id="开发实践"><a href="#开发实践" class="headerlink" title="开发实践"></a>开发实践</h3><ol>
<li>编写让测试能够通过的最简单的代码;</li>
<li>先编写断言，再编写操作;</li>
<li>最大限度减少每个测试中的断言;</li>
<li>不要让测试依赖其他测试;</li>
<li>测试的运行速度必须很快;</li>
<li>不要在测试中使用基类;</li>
</ol>
<h2 id="事实"><a href="#事实" class="headerlink" title="事实"></a>事实</h2><p>先写测试再写代码是一个逆向的过程，实际上，很多公司都是先写代码，测试成了质量检测的工具，甚至连自动测试都没有！</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>套路（kata）是一种练习，学习者不断重复同样的招式，每次重复都进步一点点，每一次重复都会形成肌肉式记忆，编程也需要学习很多套路，形成大脑上的记忆！程序员要提高技能，只能通过练习，别无他法。使用不同技术创建不同类型的程序，通常让程序员对软件开发有新的洞见！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java Base_0</title>
    <url>/2020/05/17/Java-Base-0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java在编程界到我工作的时候都是出于霸主地位，尽管机器学习、深度学习技术的兴起到火爆，Java的霸主地位一直没有改变过，只是Python语言的火热度爆发式上涨。Python的学习持续着，当然工作需要，Java还是深入学习！ <strong>推荐书籍：《Java8实战》· [英] Raoul-Gabriel Urma [意] Mario Fusco [英] Alan Mycroft 著 陆明刚 劳佳 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Java的注释主要有三种方式：</p>
<ul>
<li><p>单行注释</p>
</li>
<li><p>多行注释</p>
</li>
<li><p>多行注释并生成java doc文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  多行注释，生成Java doc文档</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="public-class-amp-class"><a href="#public-class-amp-class" class="headerlink" title="public class &amp;class"></a>public class &amp;class</h2><ol>
<li>采用 public class 来声明 class，那么文件名必须和类名一致，如果文件名和类名不一致，将会出现错误；</li>
<li>采用 class 来声明类，文件名可以是任何合法的文件名称，文件名不需要和 class 类一致，但生成的 class 文件名称和类名一致， 不和原文件名称一致；</li>
<li>在一个 Java 文件中，可以声明多个类，但是只能有一个类采用 public class 进行声明！</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol>
<li>有两种数据类型：基本类型和引用类型</li>
<li>基本类型：<ul>
<li>数值类型</li>
<li>字符类型</li>
<li>布尔类型</li>
</ul>
</li>
<li>引用类型：<ul>
<li>数组</li>
<li>类</li>
<li>接口</li>
</ul>
</li>
</ol>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ISO-8859-1</td>
<td>有称 latin-1,是国际化标准或组织 ISO 制定 的，主要为了西欧语言中的字符编码，和 ASCII 兼容</td>
</tr>
<tr>
<td>ASCII字符编码</td>
<td>采用一个字节编码，主要针对英文编码</td>
</tr>
<tr>
<td>GB2312/GBK/GB18030</td>
<td>主要是汉字编码，三种编码从容量上看是包含关系</td>
</tr>
<tr>
<td>unicode</td>
<td>Unicode 统一了全世界上的所有文字编码，unicode 有几种实现： UTF-8,UTF-16,UTF-32</td>
</tr>
</tbody></table>
<ul>
<li>java 中的 char 使用 utf-16 编码，所以 char 占用两个字节，可以存储中文；。</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li><p>方法是可以重复调用的代码块，通常是为了实现各种功能才去定义的；</p>
</li>
<li><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[方法修饰列表] 返回值类型 方法名(方法参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法修饰列表 ：public，protected，private，abstract，static，final，synchronized，其中 public，protected，private 不能同时存在</li>
<li>返回值类型：如果没有返回值使用 void 关键字，如果存在返回值可以是基本类型和引用类型，如果存在返回值，使用 return 语句。<strong>return 语句后面不能再执行语句，因为不可能会执行到，编译器会发生错误</strong></li>
<li>方法名：任意合法的标识符</li>
<li>方法参数列表：参数列表可以多个</li>
</ul>
</li>
<li><p>方法的重载和递归：</p>
<ol>
<li>重载：<ul>
<li>方法名相同</li>
<li>方法的参数类型，个数，顺序至少有一个不同</li>
<li>方法的返回类型可以不同（不依靠返回类型来区分重载）</li>
<li>方法的修饰符可以不同，因为方法重载和修饰符没有任何关系</li>
<li>方法重载只出现在同一个类中</li>
</ul>
</li>
<li>递归：指方法调用自身  </li>
</ol>
</li>
</ol>
<h2 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h2><ol>
<li><p>Java 8所做的改变，在许多方面比Java历史上任何一次改变都深远，，这些改变会让你编起程来更容易，用不着再写啰嗦的代码了；</p>
</li>
<li><p>Java8对于处理器的多核操作更加人性化，对于硬件的使用也更加优秀；</p>
</li>
<li><p>Java 8支持许多处理数据的并行操作，用更高级的方式表达想要的东西；</p>
</li>
<li><p>数据处理完全在库内部进行的思想叫作内部迭代；</p>
</li>
<li><p><strong>行为参数化就是可以帮助处理频繁变更的需求的一种软件开发模式</strong>，一个良好的原则是在编写类似的代码之后，尝试将其抽象化；</p>
</li>
<li><p>对需求选择进行标准建模，根据需要的属性来定义一个返回boolean的函数，这种类型的函数称为<strong>谓词</strong>，这种设计方式对应着设计模式中的<strong>策略设计模式</strong>；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e4f989c475a572d4e441167070f4c9b5-70964" alt=""></p>
</li>
<li><p>参数模式比较：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/14d94bed05a85dc2cc691cd270e24cdd-43403" alt=""></p>
</li>
</ol>
<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><ol>
<li><p>可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式：没有名称，但有参数列表、函数主体、返回类型，可能还有一个可以抛出的异常列表；</p>
</li>
<li><p>Lambda表达式有三个部分：</p>
<ul>
<li>参数列表</li>
<li>箭头——箭头-&gt;把参数列表与Lambda主体分隔开</li>
<li>Lambda主体</li>
</ul>
</li>
<li><p>Lambda的基本语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">(parameters) -&gt; expression</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数式接口就是只定义一个抽象方法的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span> <span class="params">(T t)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口现在还可以拥有默认方法，在类没有对方法进行实现时，其主体为方法提供默认实现的方法</li>
<li>哪怕有很多默认方法，只要接口只定义了一个抽象方法，就仍然是一个函数式接口</li>
<li>Lambda表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例</li>
</ul>
</li>
<li><p>Lambda表达式允许直接以内联的形式为函数式接口的抽象方法提供实现，并把整个表达式作为函数式接口的实例；</p>
</li>
<li><p>函数式接口的抽象方法（函数描述符）的签名基本上就是Lambda表达式的签名，签名必须匹配，否则会报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">  r.run();</span><br><span class="line">&#125;</span><br><span class="line">process(() -&gt; System.out.println(<span class="string">"This is awesome!!"</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>大多数Java程序员都已经熟悉了具有一个抽象方法的接口的理念，这样来设定只有在需要函数式接口的时候才可以传递Lambda！</li>
<li><strong>语言的设计者也考虑过其他办法，但是都没有使用Lambda方式自然且能避免语言变得更复杂</strong></li>
</ul>
</li>
<li><p>@FunctionalInterface的标注用于表示该接口会设计成一个函数式接口，如果用@FunctionalInterface定义了一个接口，而它却不是函数式接口的话，编译器将返回一个提示原因的错误，虽然不是必须的，但是建议定义函数式接口时加上该标注；</p>
</li>
<li><p>Java 8的库设计师在java.util.function包中引入了几个新的函数式接口：</p>
<ul>
<li><p>java.util.function.Predicate<T>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean</p>
</li>
<li><p>java.util.function.Consumer<T> 定义了一个名叫 accept 的抽象方法， 它接受泛型 T的对象，没有返回（void）</p>
</li>
<li><p>java.util.function.Function&lt;T, R&gt;接口定义了一个叫作apply的方法，它接受一个泛型T的对象，并返回一个泛型R的对象</p>
</li>
<li><p>注意：(T,U) -&gt; R的表达方式展示了应当如何思考一个函数描述符</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/22583f12ca5f51790b33d8b7cc99a616-52378" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5e5b69f66c9a66af02bf659e14c43b56-60025" alt=""></p>
</li>
</ul>
</li>
<li><p>泛型只能绑定到引用类型，这是由泛型内部的实现方式造成的，在Java里有一个将原始类型转换为对应的引用类型的机制（装箱，boxing），将引用类型转换为对应的原始类型，叫作拆箱（unboxing），提供了一个自动装箱机制来帮助程序员执行这一任务；</p>
</li>
<li><p>捕获Lambda：允许使用自由变量（在外层作用域中定义的变量），就像匿名类一样，但是有限制：</p>
<ul>
<li>可以没有限制地捕获实例变量和静态变量</li>
<li>局部变量必须显式声明为final（实例变量都存储在堆中，而局部变量则保存在栈上）</li>
</ul>
</li>
<li><p>闭包就是一个函数的实例，且它可以无限制地访问那个函数的非本地变量：</p>
<ul>
<li>闭包可以作为参数传递给另一个函数</li>
<li>可以访问和修改其作用域之外的变量</li>
<li>注意：Java 8的Lambda和匿名类可以做类似于闭包的事情，但是不能修改定义Lambda的方法的局部变量的内容</li>
</ul>
</li>
<li><p><strong>方法引用</strong>：可以重复使用现有的方法定义，并像Lambda一样传递它们</p>
<ul>
<li><p>方法引用可以被看作仅仅调用特定方法的Lambda的一种快捷写法；</p>
</li>
<li><p>Apple::getWeight就是引用了Apple类中定义的方法getWeight，不需要括号，因为没有实际调用这个方法；</p>
</li>
<li><p>方法引用主要有三类：</p>
<ul>
<li><p>指向静态方法的方法引用（例如Integer的parseInt方法，写作Integer::parseInt）</p>
</li>
<li><p>指向任意类型实例方法的方法引用 （ 例如 String的 length 方法 ， 写作 String::length）</p>
</li>
<li><p>指向现有对象的实例方法的方法引用</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cae1c2368492a1371ab5b823b63db2f2-68949" alt=""></p>
</li>
</ul>
</li>
<li><p>注意：还有针对构造函数、数组构造函数和父类调用（super-call）的一些特殊形式的方法引用</p>
</li>
</ul>
</li>
</ol>
<h2 id="高效Java-8-编程"><a href="#高效Java-8-编程" class="headerlink" title="高效Java 8 编程"></a>高效Java 8 编程</h2><ol>
<li><p>大多数情况下都没有机会从头开始一个全新的项目，很多时候，不得不面对的是用老版Java接口编写的遗留代码！</p>
</li>
<li><p>改善可读性意味着你要确保你的代码能非常容易地被包括自己在内的所有人理解和维护：</p>
<ul>
<li>减少冗长的代码</li>
<li>通过方法引用和Stream API，直观化代码</li>
</ul>
</li>
<li><p>增加代码的灵活性：</p>
<ul>
<li>采用函数接口</li>
<li>有条件的延迟执行</li>
<li>环绕执行</li>
</ul>
</li>
<li><p>对设计经验的归纳总结被称为<strong>设计模式</strong>，可以复用这些方式方法来解决一些常见问题：</p>
<ul>
<li><strong>访问者模式</strong>常用于分离程序的算法和它的操作对象</li>
<li><strong>单例模式</strong>一般用于限制类的实例化，仅生成一份对象</li>
</ul>
</li>
<li><p><strong>策略模式</strong>代表了解决一类算法的通用解决方案，可以在运行时选择使用哪种方案，包含三部分内容：</p>
<ul>
<li>一个代表某个算法的接口</li>
<li>一个或多个该接口的具体实现，它们代表了算法的多种实现</li>
<li>一个或多个使用策略对象的客户</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7d1ee84b2e065f0cbfafd944fc72c8ca-18822" alt=""></p>
</li>
<li><p>模板方法模式在“希望使用这个算法，但是需要对其中的某些行为进行改进，才能达到希望的效果”；</p>
</li>
<li><p><strong>观察者模式</strong>适用于某些事件发生时（比如状态转变），如果一个对象（通常我们称之为主题）需要自动地通知其他多个对象（称为观察者）</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/52009a6e2007d242cbf8d94ef284d61b-20736" alt=""></p>
</li>
<li><p><strong>责任链模式</strong>是一种创建处理对象序列（比如操作序列）的通用方案，一个处理对象可能需要在完成一些工作之后，将结果传递给另一个对象，这个对象接着做一些工作，再转交给下一个处理对象，以此类推；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e0afc65801ccc42a14d7c3cbb9c951ec-19488" alt=""></p>
</li>
<li><p><strong>工厂模式</strong>是无需向客户暴露实例化的逻辑就能完成对象的创建；</p>
</li>
<li><p>默认方法：（样例，isEmpty就有默认方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">Sized</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Size</span> <span class="keyword">implements</span> <span class="title">Sized</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>默认方法导致接口包含的方法签名在它的实现类中也可以不提供实现</li>
<li>默认方法由default修饰符修饰，并像类中声明的其他方法一样包含方法体</li>
<li>样任何一个实现了Sized接口的类都会自动继承isEmpty的实现，向提供了默认实现的接口添加方法就不是源码兼容的</li>
</ul>
</li>
<li><p>函数式接口只包含一个抽象方法，默认方法是种非抽象方法；通过默认方法方式，可以减少无效的模板代码，因为在接口里已经有一个默认的实现了；</p>
</li>
<li><p>注意：带有默认方法的单个抽象方法的接口是不属于函数式接口的；</p>
</li>
<li><p>Java的类只能继承单一的类，但是一个类可以实现多接口，默认方法可以帮助实现行为的多继承；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4e2808b87e1da5e0d16f7f641ad7ce81-40497" alt=""></p>
</li>
<li><p>声明为final的类不能被其他的类继承，避免发生不必要的复杂性，防止核心代码的功能被污染；</p>
</li>
<li><p>多接口继承会有可能出现一个类继承了多个方法而它们使用的却是同样的函数签名，解决这种问题的规则：</p>
<ol>
<li><strong><em>类中的方法优先级最高，类或父类中声明的方法的优先级高于任何声明为默认方法的优先级</em></strong></li>
<li><strong><em>如果无法依据第一条进行判断，那么子接口的优先级更高，函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体</em></strong></li>
<li><strong><em>最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现</em></strong></li>
</ol>
</li>
<li><p>样例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">B</span>, <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Hello from B</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3204a9b1af9f0237ea20e4998e3ec7fd-12412" alt=""></p>
</li>
<li><p>样例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">B</span>, <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 还是输出的 Hello from B</span></span><br><span class="line"><span class="comment">// 因为虽然有类D，但是没有实现覆盖</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2bc48aafc0ccd7c4da4fa98b9a68d776-18372" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Hello from D"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">B</span>, <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有点不同</span></span><br><span class="line"><span class="comment">// 输出也不一样了</span></span><br><span class="line"><span class="comment">// Hello from D</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>显示解决冲突：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">B</span>, <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 显式地选择调用接口B中的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        B.<span class="keyword">super</span>.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不能符合判断条件，即不能判断哪个更具体的话，那编译器会报错！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*出错的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">B</span>, <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> D().hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认方法的优势：</p>
<ul>
<li>默认方法的出现能帮助库的设计者以后向兼容的方式演进API</li>
<li>默认方法可以用于创建可选方法和行为的多继承</li>
</ul>
</li>
</ol>
<h2 id="日期和时间API"><a href="#日期和时间API" class="headerlink" title="日期和时间API"></a>日期和时间API</h2><ol>
<li><p>java.time包中提供了很多新的类可以解决时间问题，如LocalDate、 LocalTime、 Instant、 Duration和Period；</p>
</li>
<li><p>LocalDate类的实例是一个不可变对象，它只提供了简单的日期，并不含当天的时间信息，提供了多种方法来读取常用的值，比如年份、月份、星期几等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">localdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//使用工厂方法从系统时钟获取当前日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="keyword">int</span> year = date.getYear();</span><br><span class="line">        Month month = date.getMonth();</span><br><span class="line">        <span class="keyword">int</span> day = date.getDayOfMonth();</span><br><span class="line">        DayOfWeek dow = date.getDayOfWeek();</span><br><span class="line">        <span class="keyword">int</span> len = date.lengthOfMonth();</span><br><span class="line">        <span class="keyword">boolean</span> leap = date.isLeapYear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LocalTime类可以实现时间的处理，提供时间相关的函数，可以使用of重载的两个工厂方法创建LocalTime的实例，LocalDate和LocalTime都可以通过解析代表它们的字符串创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">localdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> hour = time.getHour();</span><br><span class="line">        <span class="keyword">int</span> minute = time.getMinute();</span><br><span class="line">        <span class="keyword">int</span> second = time.getSecond();</span><br><span class="line">        LocalDate date = LocalDate.parse(<span class="string">"2014-03-18"</span>);</span><br><span class="line">        LocalTime time2 = LocalTime.parse(<span class="string">"13:45:20"</span>);</span><br><span class="line">        LocalTime time3 = LocalTime.now();</span><br><span class="line">        System.out.println(time3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LocalDateTime是LocalDate和LocalTime的合体，同时表示了日期和时间，但不带有时区信息，可以直接创建，也可以通过合并日期和时间对象构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">localdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        LocalDate date = LocalDate.parse(<span class="string">"2014-03-18"</span>);</span><br><span class="line">        LocalDateTime dt1 = LocalDateTime.of(<span class="number">2014</span>, Month.MARCH, <span class="number">18</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        LocalDate date1 = dt1.toLocalDate();</span><br><span class="line">        LocalTime time1 = dt1.toLocalTime();</span><br><span class="line">        LocalDateTime dt2 = LocalDateTime.of(date, time);</span><br><span class="line">        LocalDateTime dt3 = date.atTime(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        LocalDateTime dt4 = date.atTime(time);</span><br><span class="line">        LocalDateTime dt5 = time.atDate(date);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建模时间最自然的格式是表示一个持续时间段上某个点的单一大整型数，java.time.Instant类静态工厂方法ofEpochSecond传递一个代表秒数的值创建一个该类的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> System.out.println(Instant.ofEpochSecond(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 1970-01-01T00:00:03Z</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Duration类的静态工厂方法between方法可以返回一段时间，Period类可以以年、月或者日的方式对多个时间单位建模：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Duration d1 = Duration.between(time1, time2);</span><br><span class="line">   Duration d1 = Duration.between(dateTime1, dateTime2);</span><br><span class="line">   Duration d2 = Duration.between(instant1, instant2);</span><br><span class="line">Duration threeMinutes = Duration.ofMinutes(<span class="number">3</span>);</span><br><span class="line">Duration threeMinutes = Duration.of(<span class="number">3</span>, ChronoUnit.MINUTES);</span><br><span class="line">Period tenDays = Period.ofDays(<span class="number">10</span>);</span><br><span class="line">Period threeWeeks = Period.ofWeeks(<span class="number">3</span>);</span><br><span class="line">Period twoYearsSixMonthsOneDay = Period.of(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d172e52728a76ae65c1887c4e1de72cd-156654" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8088ee4d9551b61a6704444fc86a66fd-42668" alt=""></p>
</li>
<li><p>表示时间点的日期-时间类的通用方法：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/285cec4fca970db1d7ddb67afde7d1ef-200727" alt=""></p>
</li>
<li><p>TemporalAdjuster类 ：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b50ed15bf81b49721d5ede231f06d719-258618" alt=""></p>
</li>
<li><p>处理日期和时间对象时，格式化以及解析日期时间对象是另一个非常重要的功能，java.time.format包就是特别为这个目的而设计的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">localdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.parse(<span class="string">"2020-05-18"</span>);</span><br><span class="line">        String s1 = date.format(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        String s2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>时区的处理是新版日期和时间API新增加的重要功能，新的java.time.ZoneId类可以无需为时区处理的复杂和繁琐而操心，一旦得到一个ZoneId对象，就可以将它与LocalDate、 LocalDateTime或者是Instant对象整合起来，构造为一个ZonedDateTime实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2014</span>, Month.MARCH, <span class="number">18</span>);</span><br><span class="line">ZonedDateTime zdt1 = date.atStartOfDay(romeZone);</span><br><span class="line">LocalDateTime dateTime = LocalDateTime.of(<span class="number">2014</span>, Month.MARCH, <span class="number">18</span>, <span class="number">13</span>, <span class="number">45</span>);</span><br><span class="line">ZonedDateTime zdt2 = dateTime.atZone(romeZone);</span><br><span class="line">Instant instant = Instant.now();</span><br><span class="line">ZonedDateTime zdt3 = instant.atZone(romeZone);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>可以用绝对或者相对的方式操纵日期和时间，操作的结果总是返回一个新的实例，老的日期时间对象不会发生变化；</strong>     </p>
</li>
</ol>
<h2 id="Optional-amp-null"><a href="#Optional-amp-null" class="headerlink" title="Optional&amp;null"></a>Optional&amp;null</h2><ol>
<li><p>每次你不确定一个变量是否为null时，都需要添加一个进一步嵌套的if块，也增加了代码缩进的层数，不具备扩展性，同时还牺牲了代码的可读性！      </p>
</li>
<li><p>null 带来的问题：</p>
<ul>
<li>错误之源，NullPointerException是目前Java程序开发中最典型的异常  </li>
<li>会使代码膨胀，充斥着深度嵌套的null检查，代码的可读性糟糕透顶  </li>
<li>自身毫无意义，代表的是在静态类型语言中以一种错误的方式对缺失变量值的建模  </li>
<li>破坏了Java的哲学，Java一直试图避免让程序员意识到指针的存在，null指针  </li>
<li>在Java的类型系统上开了个口子，null并不属于任何类型，这意味着它可以被赋值给任意引用类型的变量  </li>
</ul>
</li>
<li><p>java.util.Optional&lt;T&gt;中的Optional类在变量存在时只是对类简单封装，变量不存在时，缺失的值会被建模成一个“空”的Optional对象，由方法Optional.empty()返回；</p>
</li>
<li><p>Optional.empty()方法是一个静态工厂方法，返回Optional类的特定单一实例，它是Optional类的一个有效对象，多种场景都能调用，不会触发 NullPointerException；    </p>
</li>
<li><p>在代码中始终如一地使用Optional，能非常清晰地界定出变量值的缺失是结构上的问题，还是算法上的缺陷，抑或是数据中的问题，引入Optional类的意图并非要消除每一个null引用；</p>
</li>
<li><p>创建 Optional 对象：</p>
<ol>
<li><p>声明一个空的Optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optCar = Optional.empty();</span><br></pre></td></tr></table></figure>
</li>
<li><p>依据一个非空值创建Optional  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optCar = Optional.of(car);</span><br><span class="line"><span class="comment">// 如果car是一个null，这段代码会立即抛出一个NullPointerException</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可接受null的Optional  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optCar = Optional.ofNullable(car);</span><br><span class="line"><span class="comment">// 使用静态工厂方法Optional.ofNullable，你可以创建一个允许null值的Optional对象</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>使用 map 从 Optional 对象中提取和转换值 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Insurance&gt; optInsurance = Optional.ofNullable(insurance);</span><br><span class="line">Optional&lt;String&gt; name = optInsurance.map(Insurance::getName);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 flatMap 链接 Optional 对象，flatMap方法接受一个函数作为参数，这个函数的返回值是另一个流；</p>
</li>
<li><p>Optional的方法：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ad8f0bcdef088a84af6bc34296a4cb0c-42455" alt="">    </p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7a32b13d36fdbc50963cef4598a4bf92-205204" alt=""></p>
</li>
<li><p>使用Optional会迫使你更积极地解引用Optional对象，以应对变量值缺失的问题，最终，能更有效地防止代码中出现不期而至的空指针异常；</p>
</li>
<li><p>使用Optional能帮助你设计更好的API，用户只需要阅读方法签名，就能了解该方法是否接受一个Optional类型的值！   </p>
</li>
</ol>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><h2 id="流的认识"><a href="#流的认识" class="headerlink" title="流的认识"></a>流的认识</h2><ol>
<li><p>几乎每个Java应用程序都会制造和处理集合,但是集合操作却远远算不上完美；</p>
</li>
<li><p><strong>流</strong>允许你以声明性方式处理数据集合，可以透明地并行处理而无需写任何多线程代码，为了利用多核架构并行执行只需要把stream()换成parallelStream()；</p>
</li>
<li><p><strong>Guava、Apache和lambdaj库</strong>：Guava是谷歌创建的一个很流行的库，提供了 multimaps 和 multisets 等额外的容器类，Apache Commons Collections库也提供了类似的功能，lambdaj库也提供了很多声明性操作集合的工具；</p>
</li>
<li><p>流：从支持数据处理操作的源生成的元素序列</p>
<ul>
<li>元素序列—可以访问特定元素类型的一组有序值</li>
<li>源—流会使用一个提供数据的源，如集合、数组或输入/输出资源</li>
<li>数据处理操作—流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作，如filter、map、reduce、find、match、sort等</li>
</ul>
</li>
<li><p>流操作的重要特点：</p>
<ul>
<li><p>流水线—很多流操作本身会返回一个流，这样多个操作就可以链接起来，形成一个大的流水线</p>
</li>
<li><p>内部迭代—流的迭代操作是在背后进行的</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/00bb6b0c7bd2010a476578b199154dd9-79858" alt=""></p>
</li>
</ul>
</li>
<li><p><strong>集合与流之间的差异就在于什么时候进行计算！</strong>集合是一个内存中的数据结构，集合中的每个元素都得先算出来才能添加到集合中；流则是在概念上固定的数据结构（你不能添加或删除元素），其元素则是按需计算的（流就像是一个延迟创建的集合）；</p>
</li>
<li><p>和迭代器类似，流只能遍历一次，遍历完之后，我们就说这个流已经被消费掉了，可以从原始数据源那里再获得一个新的流来重新遍历一遍，就像迭代器一样；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> List&lt;String&gt; title = Arrays.asList(<span class="string">"Java8"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</span><br><span class="line"> Stream&lt;String&gt; s = title.stream();</span><br><span class="line"> s.forEach(System.out::println);</span><br><span class="line"> s.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 流只能消费一次</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Exception in thread "main" java.lang.IllegalStateException: stream has already been operated upon or closed</span></span><br><span class="line"><span class="comment">	at java.base/java.util.stream.AbstractPipeline.sourceStageSpliterator(AbstractPipeline.java:279)</span></span><br><span class="line"><span class="comment">	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)</span></span><br><span class="line"><span class="comment">	at UseAnotation.D.main(D.java:31)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>集合和流的另一个关键区别在于它们遍历数据的方式：使用Collection接口需要用户去做迭代（比如用for-each），这称为外部迭代；Streams库使用内部迭代，内部迭代时，项目可以透明地并行处理，或者用更优化的顺序进行处理；</p>
</li>
</ol>
<h2 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h2><ol>
<li><p>java.util.stream.Stream中的Stream接口定义了许多操作：</p>
<ul>
<li><p>可以连接起来的流操作称为<strong>中间操作</strong></p>
</li>
<li><p>关闭流的操作称为<strong>终端操作</strong></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b98a383583bf7527644378d45e48904d-20376" alt=""></p>
</li>
</ul>
</li>
<li><p>诸如filter或sorted等中间操作会返回另一个流，多个操作可以连接起来形成一个查询，除非流水线上触发一个终端操作，否则中间操作不会执行任何处理，因为中间操作一般都可以合并起来，在终端操作时一次性全部处理（延迟处理）；</p>
<ul>
<li>有好几种优化利用了流的延迟性质</li>
</ul>
</li>
<li><p>终端操作会从流的流水线生成结果，其结果是任何不是流的值，比如List、Integer，甚至是void；</p>
</li>
<li><p>使用流一般包含三件事：</p>
<ul>
<li>一个数据源（如集合）来执行一个查询</li>
<li>一个中间操作链，形成一条流的流水线</li>
<li>一个终端操作，执行流水线，并能生成结果</li>
</ul>
</li>
<li><p>选择流中的元素：用谓词筛选，筛选出各不相同的元素，忽略流中的头几个元素，或将流截短至指定长度：</p>
<ol>
<li>Streams接口支持filter方法，接受一个谓词（一个返回 boolean 的函数）作为参数，并返回一个包括所有符合谓词的元素的流；</li>
<li>筛选各异的元素的distinct 方法会返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流；</li>
<li>截短流的limit(n)方法会返回一个不超过给定长度的流，所需的长度作为参数传递给limit，最多会返回前n个元素；</li>
<li>跳过元素的skip(n)方法，返回一个扔掉了前n个元素的流，如果流中元素不足n个，则返回一空流；</li>
</ol>
</li>
<li><p>对流中每一个元素应用函数的map方法，会接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素；</p>
</li>
<li><p>flatmap方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流；</p>
</li>
<li><p>查找和匹配：</p>
<ol>
<li>anyMatch方法可以回答“流中是否有一个元素能匹配给定的谓词”</li>
<li>allMatch方法的工作原理和anyMatch类似，但它会看流中的元素是否都能匹配给定的谓词</li>
<li>noneMatch可以确保流中没有任何元素与给定的谓词匹配</li>
<li>findAny方法将返回当前流中的任意元素，可以与其他流操作结合使用</li>
<li>findFirst方法找出第一个匹配的元素</li>
</ol>
</li>
<li><p>归约：（将流归约成一个值）</p>
<ol>
<li><p>使用reduce操作来表达更复杂的查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = numbers.stream().reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line"><span class="comment">// 下面的方式也可以</span></span><br><span class="line"><span class="keyword">int</span> sum = numbers.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0390f025c929efd15ed61c50d3412ca0-49298" alt=""></p>
</li>
<li><p>最值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; max = numbers.stream().reduce(Integer::max);</span><br><span class="line">Optional&lt;Integer&gt; min = numbers.stream().reduce(Integer::min);</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e21c5ded98e207028ef0df38be453324-47442" alt=""></p>
</li>
<li><p>map和reduce的连接通常称为map-reduce模式，因Google用它来进行网络搜索而出名，因为它很容易并行化；</p>
</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e41bcd2e66a9178153e01f1f962151a2-121716" alt=""></p>
</li>
<li><p>数值流：IntStream 、 DoubleStream 和LongStream，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本，加速流的处理；</p>
<ol>
<li>将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong；</li>
<li>IntStream还支持其他的方便方法，如max、min、average等；</li>
<li>要把原始流转换成一般流可以使用boxed方法</li>
</ol>
</li>
<li><p>构建流：</p>
<ol>
<li><p>可以使用静态方法Stream.of，通过显式值创建一个流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"Java 8 "</span>, <span class="string">"Lambdas "</span>, <span class="string">"In "</span>, <span class="string">"Action"</span>); stream.map(String::toUpperCase).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 空流</span></span><br><span class="line">Stream&lt;String&gt; emptyStream = Stream.empty();</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用静态方法Arrays.stream从数组创建一个流，接受一个数组作为参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> sum = Arrays.stream(numbers).sum();</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件生成流：java.nio.file.Files 中的很多静态方法都会返回一个流，一个很有用的方法是Files.lines，它会返回一个由指定文件中的各行构成的字符串流；</p>
</li>
<li><p>函数生成流：Stream.iterate和Stream.generate，这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限流，使用limit方法限制返回一个有限流</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">10</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>iterate 方法接受一个初始值（在这里是 0 ）， 还有一个依次应用在每个产生的新值上的Lambda</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.iterate(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, t -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;t[<span class="number">1</span>], t[<span class="number">0</span>] + t[<span class="number">1</span>]&#125;)</span><br><span class="line">        .limit(<span class="number">20</span>)</span><br><span class="line">        .forEach(t -&gt; System.out.println(<span class="string">"("</span> + t[<span class="number">0</span>] + <span class="string">","</span> + t[<span class="number">1</span>] + <span class="string">")"</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>generate方法接受一个Supplier&lt;T&gt; （供应源）类型的Lambda提供新的值生成一个无限流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.generate(Math::random)</span><br><span class="line">               .limit(<span class="number">5</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br></pre></td></tr></table></figure>
</li>
<li><p>供应源不一定是无状态的，可以创建存储状态的供应源，注意在并行代码中使用有状态的供应源是不安全的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全是1 的生成流</span></span><br><span class="line">IntStream ones = IntStream.generate(() -&gt; <span class="number">1</span>);</span><br><span class="line"><span class="comment">//  裴波那契流</span></span><br><span class="line">        IntSupplier fib = <span class="keyword">new</span> IntSupplier() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> previous = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> current = <span class="number">1</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAsInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> oldPrevious = <span class="keyword">this</span>.previous;</span><br><span class="line">                <span class="keyword">int</span> nextValue = <span class="keyword">this</span>.previous + <span class="keyword">this</span>.current;</span><br><span class="line">                <span class="keyword">this</span>.previous = <span class="keyword">this</span>.current;</span><br><span class="line">                <span class="keyword">this</span>.current = nextValue;</span><br><span class="line">                <span class="keyword">return</span> oldPrevious;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        IntStream.generate(fib).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// getAsInt在调用时会改变对象的状态，由此在每次调用时产生新的值</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>处理一个无限流必须使用limit操作来显示限制它的大小，否则终端操作将永远计算下去；</p>
</li>
</ol>
<h2 id="用流收集数据"><a href="#用流收集数据" class="headerlink" title="用流收集数据"></a>用流收集数据</h2><ol>
<li><p>对流调用collect方法将对流中的元素触发一个归约操作（由Collector来参数化），Collector会对元素应用一个转换函数，并将结果累积在一个数据结构中，从而产生这一过程的最终输出；</p>
</li>
<li><p>收集器：</p>
<ol>
<li><p>可以从Collectors类提供的工厂方法（例如groupingBy）创建的收集器，提供三大功能：</p>
<ul>
<li>将流元素归约和汇总为一个值</li>
<li>元素分组</li>
<li>元素分区</li>
</ul>
</li>
<li><p>使用Collectors.maxBy 和Collectors.minBy，来计算流中的最大或最小值，接收一个Comparator参数来比较流中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Dish&gt; dishCaloriesComparator = Comparator.comparingInt(Dish::getCalories);</span><br><span class="line"></span><br><span class="line">Optional&lt;Dish&gt; mostCalorieDish = menu.stream().collect(maxBy(dishCaloriesComparator));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Collectors类专门为汇总提供了一个工厂方法：Collectors.summingInt可接受一个把对象映射为求和所需int的函数，并返回一个收集器,该收集器在传递给普通的collect方法后即执行我们需要的汇总操作</p>
</li>
<li><p>汇总不仅仅是求和Collectors.summingLong和Collectors.summingDouble方法,还有Collectors.averagingInt，连同对应的averagingLong和averagingDouble可以计算数值的平均数</p>
</li>
<li><p>可以使用summarizingInt工厂方法返回的收集器，得到总和、平均值、最大值、最小值；</p>
</li>
<li><p>joining工厂方法返回的收集器会把对流中每一个对象应用toString方法得到的所有字符串连接成一个字符串，有一个重载版本可以接受元素之间的分界符；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串以,分界</span></span><br><span class="line">String shortMenu = menu.stream().map(Dish::getName).collect(joining(<span class="string">", "</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>所有收集器，都是一个可以用reducing工厂方法定义的归约过程的特殊情况而已，Collectors.reducing工厂方法是所有这些特殊情况的一般化；</p>
</li>
<li><p>用Collectors.groupingBy工厂方法返回的收集器可以完成数据的分组操作；可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建收集器，可以进行二级分组；</p>
</li>
<li><p>分区由一个谓词（返回一个布尔值的函数）作为分类函数，它称分区函数；</p>
<ul>
<li>保留了分区函数返回true或false的两套流元素列表</li>
</ul>
</li>
<li><p>Collector接口包含了一系列方法，为实现具体的归约操作（即收集器）提供了范本，可以为Collector接口提供自己的实现，从而自由地创建自定义归约操作；</p>
<ul>
<li>开发自定义收集器可以在需要的时候实现自己的收集器，优化得到性能提升</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="并行数据处理"><a href="#并行数据处理" class="headerlink" title="并行数据处理"></a>并行数据处理</h2><ol>
<li><p>可以通过对收集源调用parallelStream方法来把集合转换为<strong>并行流</strong>（一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流），parallel()方法将过程转换成并行过程；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/391a8cf3369155b81c6ec5d36847c61d-79554" alt=""></p>
</li>
<li><p>并行化并不是没有代价的，本身需要对流做递归划分，把每个子流的归纳操作分配到不同的线程，然后把这些操作的结果合并成一个值；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c523ac453ead8a619eb11a7628276ae4-21817" alt=""></p>
</li>
<li><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果；（多路归并？）</p>
</li>
<li><p>Spliterator 是“可分迭代器”（splitable iterator），用于遍历数据源中的元素，并行化遍历；</p>
</li>
</ol>
</li>
</ol>
<h1 id="Java-amp-函数式编程"><a href="#Java-amp-函数式编程" class="headerlink" title="Java&amp;函数式编程"></a>Java&amp;函数式编程</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>声明式编程：采用这种“要做什么”风格的编程通常被称为声明式编程，用这种方式编写的代码更加接近问题陈述了；</p>
</li>
<li><p><strong>函数式编程具体实践了声明式编程和无副作用计算</strong>，可以更容易地构建和维护系统；</p>
</li>
<li><p>目标：使用函数式编程，实现更加健壮的程序，还不会有任何的副作用！</p>
</li>
<li><p>在函数式编程的上下文中，一个“函数”对应于一个数学函数：它接受零个或多个参数，生成一个或多个结果，并且不会有任何副作用；</p>
</li>
<li><p>在Java语言中，如果希望编写函数式的程序，首先需要做的是确保没有人能觉察到你代码的副作用；</p>
</li>
<li><p>要被称为函数式，函数或者方法不应该抛出任何异常；</p>
</li>
<li><p>为了各种各样的实战需求，最终可能会发现即便对函数式的代码，还是需要向某些日志文件打印输出调试信息，这意味着严格意义上说，这些代码并非函数式的，但是在实际中享受了函数式程序带来的大多数好处；</p>
</li>
<li><p><strong>函数无论在何处、何时调用，如果使用同样的输入总能持续地得到相同的结果，就具备了函数式的特征</strong>；</p>
</li>
<li><p>两种极端：</p>
<ul>
<li>支持极端的面向对象：任何事物都是对象，程序要么通过更新字段完成操作，要么调用对与它相关的对象进行更新的方法</li>
<li>支持引用透明的函数式编程：认为方法不应该有（对外部可见的）对象修改</li>
</ul>
</li>
<li><p>函数式编程推荐使用递归而不是迭代，虽然递归很消耗资源，但是，函数式语言提供了一种解决该问题的方法：尾调优化（tail-call optimization）：</p>
<ul>
<li><p>可以编写阶乘的一个迭代定义，不过迭代调用发生在函数的最后</p>
</li>
<li><p><strong>Java的尾递归代码与普通递归无异，可能JVM是想在出现异常时更好地输出堆栈信息的缘故</strong>，也导致了Java中一般能用迭代就不用递归，但是这与函数式编程背道而驰</p>
</li>
<li><p>递归：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/202899e4127e7cfbc9a8da77c04d63fc-50130" alt=""></p>
</li>
<li><p>尾递归：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b5d70777f971a08a86b9c9777c706d46-39054" alt=""></p>
</li>
</ul>
</li>
<li><p>从长远看，减少共享的可变数据结构能帮助你降低维护和调试程序的代价；</p>
</li>
</ol>
<h2 id="编程技巧"><a href="#编程技巧" class="headerlink" title="编程技巧"></a>编程技巧</h2><ol>
<li><p>高阶函数（higher-order function）：（满足任意一个要求）</p>
<ul>
<li>接受至少一个函数作为参数</li>
<li>返回的结果是一个函数</li>
</ul>
</li>
<li><p>科里化：（一种可以帮助你模块化函数、提高代码重用性的技术）</p>
<ul>
<li><p>定义：一种将具备2个参数的函数f转化为使用一个参数的函数g，并且这个函数的返回值也是一个函数，它会作为新函数的一个参数；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> DoubleUnaryOperator <span class="title">curriedConverter</span><span class="params">(<span class="keyword">double</span> f, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span> x) -&gt; x * f + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DoubleUnaryOperator convertCtoF = curriedConverter(<span class="number">9.0</span>/<span class="number">5</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">double</span> gbp=convertCtoF.applyAsDouble(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>函数式方法不允许修改任何全局数据结构或者任何作为参数传入的参数</strong>；如果需要使用表示计算结果的数据结果，那么请创建它的一个副本而不要直接修改现存的数据结构；</p>
</li>
<li><p>Java 8的Stream以其延迟性而著称，被刻意设计成这样，即延迟操作：Stream就像是一个黑盒，它接收请求生成结果，当你向一个 Stream发起一系列的操作请求时，这些请求只是被一一保存起来，只有当你向Stream发起一个终端操作时，才会实际地进行计算；</p>
</li>
<li><p><del>（结构式）模式匹配能够有效减少代码的逻辑混乱的情况；</del></p>
</li>
<li><p>Java加入了对通配符的支持，来更灵活地支持泛型的子类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Number&gt; numbers = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="随心"><a href="#随心" class="headerlink" title="随心"></a>随心</h1><p>先抢占市场往往能够吓退竞争对手！产品战略可以先占领大学市场，毕业生随后会把它带进业界。语言需要不断改进以跟进硬件的更新或满足程序员的期待，变化需要有意义，被接受，那变化才是有价值的变化！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript Algorithm &amp; Datastructure</title>
    <url>/2020/04/29/JavaScript-Algorithm-Datastructure/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript是一门非常强大的编程语言， JavaScript不仅可用于前端开发，也适用于后端开发，而Node.js就是其背后的技术 。数据结构和算法可以很高效地解决常见问题！*<em>这里不再讲述基础的语法了！  推荐书籍：《学习JavaScript数据结构与算法（第2版）》· [巴西] Loiane Groner著 邓刚 孙晓博等译   《数据结构与算法：JavaScript描述》· [美] Michael McMillan 著 王群锋 杜欢译 *</em></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>作用域指在编写的算法函数中，  有本地变量和全局变量；在JavaScript里应该尽量少用全局变量；</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol>
<li>数组存储一系列同一种数据类型的值，也可以在数组中保存不同类型的值；</li>
<li>用JavaScript声明、创建和初始化数组 ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>); <span class="comment">//&#123;2&#125;</span></span><br><span class="line"><span class="keyword">var</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'Sunday'</span>, <span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line"><span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>); <span class="comment">//&#123;3&#125;</span></span><br><span class="line"><span class="keyword">var</span> daysOfWeek = [];</span><br><span class="line"><span class="keyword">var</span> daysOfWeek = [<span class="string">'Sunday'</span>, <span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line"><span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>];</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>要访问数组里特定位置的元素，可以用中括号传递数值位置，得到想知道的值或者赋新的值 ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;daysOfWeek.length; i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(daysOfWeek[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>想要给数组添加一个元素（比如10），只要把值赋给数组中最后一个空位上的元素即可 ,还有一个push方法，能把元素添加到数组的末尾，数组有一个方法叫unshift，可以直接把数值插入数组的首位：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numbers[numbers.length] = <span class="number">10</span>;</span><br><span class="line">numbers.push(<span class="number">10</span>);</span><br><span class="line">numbers.unshift(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>要删除数组里最靠后的元素，可以用pop方法，要确实删除数组的第一个元素，可以用shift方法实现  ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numbers.pop();</span><br><span class="line">numbers.shift();</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>指定位置/索引，使用splice方法就可以删除（或者插入）相应位置和数量的元素 ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numbers.splice(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 删除从数组索引5开始的3个元素</span></span><br><span class="line"><span class="comment">// 想把数字2、 3、 4插入数组里，放到之前删除元素的位置上</span></span><br><span class="line">numbers.splice(<span class="number">5</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>JavaScript只支持一维数组，并不支持矩阵，用数组套数组，实现矩阵或任一多维数组；    </li>
<li>在JavaScript里，数组是可修改的对象，这意味着创建的每个数组都有一些可用的方法 ；</li>
<li>数组核心方法：</li>
</ol>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>concat</td>
<td>连接2个或更多数组，并返回结果</td>
</tr>
<tr>
<td>every</td>
<td>对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true</td>
</tr>
<tr>
<td>filter</td>
<td>对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组</td>
</tr>
<tr>
<td>forEach</td>
<td>对数组中的每一项运行给定函数。这个方法没有返回值</td>
</tr>
<tr>
<td>join</td>
<td>将所有的数组元素连接成一个字符串</td>
</tr>
<tr>
<td>indexOf</td>
<td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td>
</tr>
<tr>
<td>lastIndexOf</td>
<td>返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td>
</tr>
<tr>
<td>map</td>
<td>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</td>
</tr>
<tr>
<td>reverse</td>
<td>颠倒数组中元素的顺序</td>
</tr>
<tr>
<td>slice</td>
<td>传入索引值，将数组里对应索引范围内的元素作为新数组返回</td>
</tr>
<tr>
<td>some</td>
<td>对数组中的每一项运行给定函数，如果任一项返回true，则返回true</td>
</tr>
<tr>
<td>sort</td>
<td>按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td>
</tr>
<tr>
<td>toString</td>
<td>将数组作为字符串返回</td>
</tr>
<tr>
<td>valueOf</td>
<td>和toString类似，将数组作为字符串返回</td>
</tr>
</tbody></table>
<ol start="10">
<li>ES6和ES7新增的数组方法：</li>
</ol>
<table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>@@iterator</td>
<td>返回一个包含数组键值对的迭代器对象，可以通过同步调用得到数组元素的键值对</td>
</tr>
<tr>
<td>copyWithin</td>
<td>复制数组中一系列元素到同一数组指定的起始位置</td>
</tr>
<tr>
<td>entries</td>
<td>返回包含数组所有键值对的@@iterator</td>
</tr>
<tr>
<td>includes</td>
<td>如果数组中存在某个元素则返回true，否则返回false。 ES7新增</td>
</tr>
<tr>
<td>find</td>
<td>根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素</td>
</tr>
<tr>
<td>findIndex</td>
<td>根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素在数组中的索引</td>
</tr>
<tr>
<td>fill</td>
<td>用静态值填充数组</td>
</tr>
<tr>
<td>from</td>
<td>根据已有数组创建一个新数组</td>
</tr>
<tr>
<td>keys</td>
<td>返回包含数组所有索引的@@iterator</td>
</tr>
<tr>
<td>of</td>
<td>根据传入的参数创建一个新数组</td>
</tr>
<tr>
<td>values</td>
<td>返回包含数组中所有值的@@iterator</td>
</tr>
</tbody></table>
<ol start="11">
<li>迭代器使用：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = numbers[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aEntries = numbers.entries(); <span class="comment">// 得到键值对的迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [0, 1] - 位置0的值为1</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [1, 2] - 位置1的值为2</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [2, 3] - 位置2的值为3</span></span><br></pre></td></tr></table></figure>

<ol start="12">
<li>展开操作符（ …）会把numbers4数组里的值都展开成参数 :</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbersCopy = <span class="built_in">Array</span>.of(...numbers4);</span><br></pre></td></tr></table></figure>

<ol start="13">
<li><strong>类型数组</strong>则用于存储单一类型的数据，  语法是let myArray = new TypedArray(length)，其中TypedArray需替换为下表所列之一：</li>
</ol>
<table>
<thead>
<tr>
<th>类型数组</th>
<th>数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>Int8Array</td>
<td>8位二进制补码整数</td>
</tr>
<tr>
<td>Uint8Array</td>
<td>8位无符号整数</td>
</tr>
<tr>
<td>Uint8ClampedArray</td>
<td>8位无符号整数</td>
</tr>
<tr>
<td>Int16Array</td>
<td>16位二进制补码整数</td>
</tr>
<tr>
<td>Uint16Array</td>
<td>16位无符号整数</td>
</tr>
<tr>
<td>Int32Array</td>
<td>32位二进制补码整数</td>
</tr>
<tr>
<td>Uint32Array</td>
<td>32位无符号整数</td>
</tr>
<tr>
<td>Float32Array</td>
<td>32位IEEE浮点数</td>
</tr>
<tr>
<td>Float64Array</td>
<td>64位IEEE浮点数</td>
</tr>
</tbody></table>
<ol start="14">
<li>使用WebGL API、进行位操作、处理文件和图像时，类型数组都可以大展拳脚；</li>
<li>可以调用 Array.isArray() 来判断一个对象是否是数组！</li>
<li>当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用，这种行为被称为<strong>浅复制</strong> ，新数组依然指向原来的数组；</li>
<li>使用<strong>深复制</strong> ，将原数组中的每一个元素都复制一份到新数组中！  </li>
</ol>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ol>
<li>栈是一种遵从后进先出（ LIFO）原则的有序集合，  新添加的或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底；   </li>
<li>在栈里，新元素都靠近栈顶，旧元素都接近栈底；</li>
<li>栈被用在编程语言的编译器和内存中保存变量、方法调用等；</li>
<li>创建一个类来表示栈：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//各种属性和方法的声明</span></span><br><span class="line">	<span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">// 添加一个（或几个）新元素到栈顶</span></span><br><span class="line">    <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">		items.push(element);</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 移除栈顶的元素，同时返回被移除的元素</span></span><br><span class="line">    <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.pop();</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 返回栈顶的元素，不对栈做任何修改</span></span><br><span class="line">    <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items[items.length<span class="number">-1</span>];</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 如果栈里没有任何元素就返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 移除栈里的所有元素</span></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		items = [];</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 返回栈里的元素个数</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length;</span><br><span class="line">	&#125;;	</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(items.toString());</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>ES6新增了一种叫作Symbol的基本类型，它是不可变的，可以用作对象的属性；  </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _items = <span class="built_in">Symbol</span>(); <span class="comment">//&#123;1&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span> () &#123;</span><br><span class="line"><span class="keyword">this</span>[_items] = []; <span class="comment">//&#123;2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Stack方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建了一个假的私有属性</span></span><br></pre></td></tr></table></figure>

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ol>
<li>队列是遵循FIFO（ First In First Out， 先进先出，也称为先来先服务）原则的一组有序的项，  队列在尾部添加新元素，并从顶部移除元素 ；</li>
<li>创建一个类来表示队列  ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//这里是属性和方法</span></span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">// 向队列尾部添加一个（或多个）新的项</span></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">		items.push(element);</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素</span></span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.shift();</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 返回队列中第一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 如果队列中不包含任何元素，返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="comment">// 返回队列包含的元素个数，与数组的length属性类似</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.length;</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(items.toString());</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用Queue类:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//输出true</span></span><br><span class="line">queue.enqueue(<span class="string">"John"</span>);</span><br><span class="line">queue.enqueue(<span class="string">"Jack"</span>);</span><br><span class="line">queue.enqueue(<span class="string">"Camila"</span>);</span><br><span class="line">queue.print();</span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//输出3</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//输出false</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.print();</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p><strong>优先队列：一些使用队列的 应用，在删除元素时不必遵守先进先出的约定！</strong></p>
</li>
<li><p><strong>循环队列</strong></p>
</li>
</ol>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li><p>列表是一组有序的数据，每个列表中的数据项称为元素；</p>
</li>
<li><p>在JavaScript中，列表中的元素可以是任意数据类型，列表中可以保存多少元素并没有事先限定，实际使用时元素的数量受到程序内存的限制；</p>
</li>
<li><p>不包含任何元素的列表称为空列表；</p>
</li>
<li><p>列表中包含元素的个数称为列表的 length；</p>
</li>
<li><p>列表方法：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1bee3059e98cfea23a5c19a33377a1a8-85529" alt="列表方法"></p>
</li>
<li><p>使用迭代器，可以不必关心数据的内部存储方式，以实现对列表的遍历；</p>
</li>
<li><p>使用迭代器的一些优点：</p>
<ul>
<li>访问列表元素时不必关心底层的数据存储结构</li>
<li>当为列表添加一个元素时，索引的值就不对了，此时只用更新列表，而不用更新迭代器</li>
<li>可以用不同类型的数据存储方式实现 cList 类，迭代器为访问列表里的元素提供了一种统一的方式</li>
</ul>
</li>
</ol>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ol>
<li><p>链表是由一组节点组成的集合，每个节点都使用一个对象的引用指向它的后继，指向另一个节点的引用叫做链；</p>
</li>
<li><p>JavaScript中数组的主要问题是被实现成了对象， 与其他语言（比如 C++ 和 Java） 的数组相比，效率很低；</p>
</li>
<li><p>除了对数据的随机访问，链表几乎可以用在任何可以使用一维数组的情况中；</p>
</li>
<li><p>带头节点的链表：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6c9948f08e3721a2a58f537706c364a7-15813" alt="带头节点链表"></p>
</li>
<li><p>插入元素到链表：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3d8c732466bc292a197b46568912614a-19101" alt="插入元素到链表"></p>
</li>
<li><p>删除链表中的元素：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/73cee1330139b93555b022cc14543c26-23193" alt="删除元素"></p>
</li>
<li><p>双向链表：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9353b130caf6dd0314156b8ac95c7d1e-24891" alt="双向链表"></p>
</li>
</ol>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol>
<li>字典是一种以键 - 值对形式存储数据的数据结构，JavaScript 的 Object 类就是以字典的形式设计的；</li>
<li>Dictionay 类的基础是 Array 类， 而不是 Object 类；</li>
</ol>
<h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><ol>
<li><p>散列使用的数据结构叫做散列表；  </p>
</li>
<li><p>在散列表上插入、 删除和取用数据都非常快， 但是对于查找操作来说却效率低下， 比如查找一组数据中的最大值和最小值；</p>
</li>
<li><p>使用散列表存储数据时， 通过一个散列函数将键映射为一个数字， 这个数字的范围是 0 到散列表的长度；</p>
</li>
<li><p>即使使用一个高效的散列函数， 仍然存在将两个键映射成同一个值的可能， 这种现象称为碰撞（collision）；</p>
</li>
<li><p>防冲突方案：</p>
<ul>
<li><p>开链法是指实现散列表的底层数组中， 每个数组元素又是一个新的数据结构， 比如另一个数组， 这样就能存储多个键了</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2f14bc7d3294190d2b9fa874d45f720e-36301" alt="开链法"></p>
</li>
<li><p>线性探测法属于一种更一般化的散列技术，当发生碰撞时， 线性探测法检查散列表中的下一个位置是否为空，如果为空，就将数据存入该位置； 如果不为空， 则继续检查下一个位置， 直到找到一个空的位置为止</p>
</li>
</ul>
</li>
</ol>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ol>
<li>集合（set） 是一种包含不同元素的数据结构，集合中的元素称为成员； </li>
<li>集合是由一组无序但彼此之间又有一定相关性的成员构成的， 每个成员在集合中只能出现一次；</li>
<li>集合的定义：<ul>
<li>不包含任何成员的集合称为空集， 全集则是包含一切可能成员的集合</li>
<li>如果两个集合的成员完全相同， 则称两个集合相等  </li>
<li>如果一个集合中所有的成员都属于另外一个集合， 则前一集合称为后一集合的子集</li>
</ul>
</li>
<li>集合的基本操作：<ul>
<li>并集——将两个集合中的成员进行合并， 得到一个新集合</li>
<li>交集——两个集合中共同存在的成员组成一个新的集合</li>
<li>补集——属于一个集合而不属于另一个集合的成员组成的集合</li>
</ul>
</li>
</ol>
<h2 id="二叉树和二叉查找树"><a href="#二叉树和二叉查找树" class="headerlink" title="二叉树和二叉查找树"></a>二叉树和二叉查找树</h2><ol>
<li>二叉树是一种特殊的树， 它的子节点个数不超过两个， 二叉树具有一些特殊的计算性质，使得在它们之上的一些操作异常高效；</li>
<li>二叉查找树（BST）  是一种特殊的二叉树， 相对较小的值保存在左节点中， 较大的值保存在右节点中；</li>
<li>有三种遍历 BST 的方式： 中序、 先序和后序；</li>
<li>对 BST 通常有下列三种类型的查找：<ul>
<li>查找给定值</li>
<li>查找最小值 </li>
<li>查找最大值  </li>
</ul>
</li>
</ol>
<h2 id="图的基础知识"><a href="#图的基础知识" class="headerlink" title="图的基础知识"></a>图的基础知识</h2><ol>
<li><p>图由边的集合及顶点的集合组成；</p>
</li>
<li><p>有向图表明了顶点的流向：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9cb723a1d8e823775ba2909b75cc9db2-98052" alt="有向图">  </p>
</li>
<li><p>如果图是无序的， 则称之为无序图， 或无向图 ：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/469e78c86102cdc11c7022ddca0eca17-73813" alt="无向图"> </p>
</li>
<li><p>图的深度优先搜索：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/81fbb829b3549dc69920f1566de4b3b8-158565" alt="深度优先搜索"></p>
</li>
<li><p>图的广度优先搜索：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/723af35b5e3f5c9c46908ef7abc1e85d-158829" alt="广度优先搜索"></p>
</li>
</ol>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><ol>
<li><p>冒泡排序：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/103da7a369802078a7f9b86ac55eadf4-135647" alt="冒泡排序过程"></p>
</li>
<li><p>选择排序：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/80f68072f2b2a189b5596ed2818abeb3-93200" alt="选择排序过程"></p>
</li>
<li><p>还有希尔排序、归并排序、插入排序、快速排序等</p>
</li>
</ol>
<h2 id="NP-完全理论概述"><a href="#NP-完全理论概述" class="headerlink" title="NP 完全理论概述"></a>NP 完全理论概述</h2><ol>
<li>如果一个算法的复杂度为O(nk)，其中k是常数，我们就认为这个算法是高效的；</li>
<li>一个问题可以在多项式时间内验证解是否正确，则计为NP（ nondeterministic polynomial， 非确定性多项式）； </li>
<li>NP问题中最难的是NP完全问题，它满足以下两个条件：<ul>
<li>是NP问题，也就是说，可以在多项式时间内验证解，但还没有找到多项式算法  </li>
<li>所有的NP问题都能在多项式时间内归约为它  </li>
</ul>
</li>
<li>只需满足NP完全问题的第二个条件，称为NP困难问题；</li>
<li>非NP完全的NP困难问题的例子有停机问题和布尔可满足性问题（ SAT）！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>算法是通用的，学习这些数据结构相关的实际上是无关算法实现的，只要理解了数据结构就可以使用学过的语言来实现！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 全栈快速开发基础</title>
    <url>/2020/06/17/JavaScript-%E5%85%A8%E6%A0%88%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>技术栈包含Node.js、 MongoDB、Twitter Bootstrap、LESS、jQuery、Parse.com、Heroku。快速入门其实就是动手实践小例程，从效果上对其进行认知！ <strong>推荐书籍：《JavaScript 快速全栈开发》· [美] Azat Mardanov 著 胡波 译</strong>   </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>Web 和移动应用开发过程一般包含以下步骤：<ol>
<li>用户在浏览器（客户端）里输入或者点击一个链接</li>
<li>浏览器向服务器发送 HTTP 请求</li>
<li>服务器处理请求，如果查询字符串或者请求体里含有参数，服务器也会把这些参数信息考虑进去</li>
<li>服务器更新、获取或者转换数据库里的数据</li>
<li>服务器以 HTML、JSON 或者其他格式返回一个 HTTP 响应</li>
<li>浏览器接收 HTTP 响应</li>
<li>浏览器以 HTML 或者其他格式（比如 JPEG、XML 或者 JSON）把 HTTP 响应呈现给用户</li>
</ol>
</li>
<li>JSON 库帮助我们序列化和解析 JavaScript 对象；</li>
<li>结对编程是两个开发者在同一个环境里一起工作的技术。其中一个开发者为“驾驶员”，另一个为“观察员”。驾驶员主要负责写代码，观察员围观并且提供建议；</li>
<li>云计算由下列服务组成：<ul>
<li>基础设施即服务（IaaS）</li>
<li>平台即服务（PaaS）</li>
<li>后端即服务（BaaS，最新、最酷的一种）</li>
<li>软件即服务（SaaS）</li>
</ul>
</li>
<li>云应用平台具备以下功能：<ul>
<li>可伸缩性</li>
<li>部署简单</li>
<li>现收现付制，用户根据需要添加和删除内存及磁盘空间</li>
<li>可扩展，方便安装和设置数据库、应用服务器、程序包等</li>
<li>安全和技术支持</li>
</ul>
</li>
<li>JSON 已经成为 Web 和移动应用不同组件间、同第三方服务间数据交换的标准格式；</li>
</ol>
<h2 id="Node-js-和-MongoDB"><a href="#Node-js-和-MongoDB" class="headerlink" title="Node.js 和 MongoDB"></a>Node.js 和 MongoDB</h2><ol>
<li><p>Node.js 并没有自带一个庞大的标准库，核心模块是非常小的，其他的模块可以通过 NPM（Nodejs Package Manager）获取；</p>
</li>
<li><p>创建一个服务器并且暴露到模块外，这样就可以供别的代码使用；</p>
</li>
<li><p>值得关注的 Node.js 框架：</p>
<ul>
<li>Derby，MVC 框架，用来构建在 Node.js 和浏览器里运行的实时、协作应用</li>
<li>Express.js，最健壮、测试最完善、使用最多的 Node.js 框架</li>
<li>Restify，构建 REST API 服务器的轻量级框架</li>
<li>Sails.js，MVC Node.js 框架</li>
<li>hapi，在 Express.js 基础上构建的 Node.js 框架</li>
<li>Connect ，node 中间件框架，内置超过 18 个中间件，并且拥有大量可选的第三方中间件</li>
<li>GeddyJS，一个简单的结构化的 Node MVC Web 框架</li>
<li>CompoundJS，在 ExpressJS 基础上构建的 Node.js MVC 框架</li>
<li>Tower.js，为 Node.js 和浏览器开发的全栈 Web 框架</li>
<li>Meteor，只需用很少的时间就可以构建出高质量 Web 应用的开源平台</li>
</ul>
</li>
<li><p>安装 MongoDB 的原生 Node.js 驱动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mongodb</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用一些别的封装好的模块，它们是原生驱动的扩展:</p>
<ul>
<li>Mongoskin，node-mongodb-native 的未来包装层</li>
<li>Mongoose，带有可选的建模功能的异步 JavaScript 驱动器</li>
<li>Mongolia，轻量级 MongoDB ORM/驱动器包装器</li>
<li>Monk，一个小型的包装层，给 Node.js 里使用 MongoDB 提供了简单且更易用的增强</li>
</ul>
</li>
<li><p>Binary JSON，也叫 BSON，它是 MongoDB 使用的一种专有的数据类型；</p>
</li>
<li><p>MongoHQ 服务使得在 15 分钟内恢复数据库。进行这个操作有两种选择：</p>
<ul>
<li>Mongo shell 脚本</li>
<li>Node.js 程序</li>
</ul>
</li>
<li><p>Mocha是一个测试驱动开发的库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g mocha</span><br></pre></td></tr></table></figure>
</li>
<li><p>Wintersmith 是一个 Node.js 静态网站生成器，可以使用模板创建页面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g wintersmith</span><br></pre></td></tr></table></figure>
</li>
<li><p>Node.js 静态网站生成器还有：</p>
<ul>
<li>Docpad</li>
<li>Blacksmith</li>
<li>Scotch</li>
<li>Wheat</li>
<li>Petrify</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Nodejs还是非常不错的项目的，有很多开元框架可以使用，工作中需要阅读这些代码，多掌握点对于我的意识流编程的形成非常有帮助，加油！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 基础再度强化</title>
    <url>/2020/06/19/JavaScript-%E5%9F%BA%E7%A1%80%E5%86%8D%E5%BA%A6%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ECMAScript 6有可能会给JavaScript以及编码方式带来巨大的转变。Node.js已经改变了我们使用JavaScript编写服务器的方法，而像React和Flux这些新理念将会推动JavaScript的再次迭代！在学习这些新特性的同时，不应该忽略那些必须掌握的JavaScript基础知识。<strong>推荐书籍：《JavaScript 编程精粹》· [印度] Ved Antani 著 门佳 译</strong>         </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="函数、闭包与模块"><a href="#函数、闭包与模块" class="headerlink" title="函数、闭包与模块"></a>函数、闭包与模块</h2><ol>
<li><p>在JavaScript中，对象、函数和闭包之间存在着紧密的联系，而理解这种联系能够极大地增强你的JavaScript编程技艺，为开发各种应用程序打下坚实的基础；</p>
</li>
<li><p>在JavaScript中，对象、函数和闭包之间存在着紧密的联系，而理解这种联系能够极大地增强 你的JavaScript编程技艺，为开发各种应用程序打下坚实的基础；</p>
</li>
<li><p>如同JavaScript中的其他对象，函数可以：</p>
<ul>
<li>通过字面形式创建</li>
<li>可以赋值给变量、数组元素以及其他对象的属性</li>
<li>可以作为函数参数传递</li>
<li>可以作为函数值返回</li>
<li>可以拥有能动态创建和赋值的属性</li>
</ul>
</li>
<li><p>声明的所有变量默认都是定义在全局作用域中，这是JavaScript最恼人的设计决定之一；</p>
</li>
<li><p>Emscripten（ <a href="http://kripken.github.io/emscripten-site/），这是一个基于低层虚拟机（" target="_blank" rel="noopener">http://kripken.github.io/emscripten-site/），这是一个基于低层虚拟机（</a> Low-Level Virtual Machine， LLVM）的项目，它能够将C和C++代码编译成高度优化的asm.js格式的JavaScript代码 ；</p>
</li>
<li><p>在大多数情况下，并不是非得依赖高精度小数，但如果真的需要的话，可以尝试使用big.js（ <a href="https://github.com/MikeMcl/big.js）这类库来解决问题" target="_blank" rel="noopener">https://github.com/MikeMcl/big.js）这类库来解决问题</a> ； </p>
</li>
<li><p>eval()方法可以接受一个包含JavaScript代码的字符串，然后编译并执行；</p>
</li>
<li><p>在解析一个变量时， JavaScript从最内的作用域开始向外搜索；</p>
</li>
<li><p>不能在条件语句块中使用函数声明，函数声明只允许出现在程序或者函数体中，不能出现在块结构（ {…}）中，因为几乎所有的JavaScript实现在这一点上的行为都各不相同  ；</p>
</li>
<li><p>arguments参数是传递给函数的所有参数的集合， arguments不是数组，但是可以通过方法转换输出数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i, total = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		total += <span class="built_in">arguments</span>[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)); <span class="comment">// 打印出45</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">// 打印出15</span></span><br><span class="line"><span class="comment">// 转换输出数组</span></span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>要想使用apply()方法调用函数，需要传入两个参数：作为函数上下文的对象以及作为调用参数的数组。 call()方法的用法也差不多，除了调用参数不能作为数组传入，而是要直接写成参数列表的形式传入；</p>
</li>
<li><p>闭包在JavaScript中是无所不在的，是在函数声明时所创建的作用域，使得函数能够访问并处理函数的外部变量 ，即闭包可以让函数访问到在函数声明时处于作用域中的所有变量以及其他函数！ </p>
</li>
</ol>
<h2 id="JavaScript-amp-数据结构"><a href="#JavaScript-amp-数据结构" class="headerlink" title="JavaScript&amp;数据结构"></a>JavaScript&amp;数据结构</h2><ol>
<li><p>大多数有经验的工程师都离不开正则表达式，用起来既精炼又易于测试；</p>
</li>
<li><p>通过正则表达式字面量和构造RegExp对象的实例来创建正则表达式；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组是值的有序集合，可以使用名称和索引来引用数组元素：、</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript允许数组中包含各种类型的值，在内部是将数组元素作为标准的对象属性来存储的，数组索引就是属性名！  </p>
</li>
<li><p>数组方法：</p>
<ul>
<li>concat()方法能够合并两个数组，并返回合并后的新数组  </li>
<li>join()方法能够将数组的所有元素合并成一个字符串 </li>
<li>pop()方法能够删除数组最后一个元素并将其返回  </li>
<li>push()方法能够在数组尾部添加一个或多个元素，并返回最终的数组长度  </li>
<li>shift()方法能够删除数组第一个元素并将其返回  </li>
<li>unshift()方法能够在数组的头部添加一个或多个元素，并返回数组新的长度  </li>
<li>reverse()方法能够反转或者说颠倒数组元素  </li>
<li>sort()方法能够对数组元素进行排序  </li>
<li>indexOf(searchElement[, fromIndex])方法在数组中搜索searchElement，并返回第一次匹配的索引  </li>
<li>lastIndexOf(searchElement[, fromIndex]) 方法同indexOf类似，但是从后向前搜索</li>
</ul>
</li>
<li><p>Underscore.js提供了一批极其有用的函数式编程辅助程序，能够让你的代码更加清晰和函数化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install underscore</span><br></pre></td></tr></table></figure>
</li>
<li><p>Underscore样例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line">_.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], print);</span><br><span class="line"><span class="comment">// 打印出1 2 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map是一个简单的键值映射，可以依据元素的插入顺序进行迭代；</p>
</li>
<li><p>set是值的集合，可以依据其插入顺序进行迭代，其中的值只能出现一次！</p>
</li>
</ol>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol>
<li>JavaScript对象可视为可修改（ mutable）的键值集合；</li>
<li>面向对象设计的两条基本原则：  <ul>
<li>针对接口编程，而非实现（ Program to an interface and not to an implementation）  </li>
<li>对象的组合优于类的继承（ Object composition over class inheritance）</li>
</ul>
</li>
<li>JavaScript几乎所有的对象都有一个叫作prototype的默认属性，如果对象没有所请求的属性， JavaScript会到原型中去查找。 Object.getPrototypeOf()方法会返回对象的原型！</li>
<li>原型可视为对象创建的模板，它类似于面向对象语言中的类；</li>
<li>JavaScript会去对象原型中搜索，这就像是代码实时加载（ hot code loading）；</li>
<li>作为一种无类的语言， JavaScript利用原型来实现继承；</li>
</ol>
<h2 id="JavaScript设计模式"><a href="#JavaScript设计模式" class="headerlink" title="JavaScript设计模式"></a>JavaScript设计模式</h2><ol>
<li>模式为常见问题提供了行之有效的解决方案：模式提供了解决特定问题的优化模板；</li>
<li>尽管我们要花费大量的时间和精力来领会并掌握设计模式，但理解反模式（ anti-pattern）以及如何避免设计陷阱也很重要；</li>
<li>设计模式分类：<ul>
<li>创建型设计模式，用于创建对象的各种机制  </li>
<li>结构型设计模式，对象的组成以及对象彼此之间的关系  </li>
<li>行为型设计模式 ，对象之间的依赖关系以及通信  </li>
</ul>
</li>
<li>创建模式：<ul>
<li>工厂方法（ Factory method）  </li>
<li>抽象工厂（ Abstract factory）  </li>
<li>建造者（ Builder）  </li>
<li>原型（ Prototype） </li>
<li>单例（ Singleton）  </li>
</ul>
</li>
<li>结构型模式：<ul>
<li>适配器（ Adapter）  </li>
<li>桥接（ Bridge）  </li>
<li>组合（ Composite）  </li>
<li>装饰器（ Decorator）  </li>
<li>外观（ Façade）</li>
<li>享元（ Flyweight）   </li>
<li>代理（ Proxy）  </li>
</ul>
</li>
<li>行为型模式：<ul>
<li>解释器（ Interpreter）    </li>
<li>模板方法（ Template method） </li>
<li>责任链（ Chain of responsibility）   </li>
<li>命令（ Command）  </li>
<li>迭代器（ Iterator）  </li>
<li>中介者（ Mediator）  </li>
<li>备忘录（ Memento）  </li>
<li>观察者（ Observer）  </li>
<li>状态（ State）  </li>
<li>策略（ Strategy）  </li>
<li>访问者（ Visitor）  </li>
</ul>
</li>
<li><strong>详细的在JavaScript设计模式中深入学习！</strong></li>
</ol>
<h2 id="测试和调试"><a href="#测试和调试" class="headerlink" title="测试和调试"></a>测试和调试</h2><ol>
<li>测试必须能够覆盖代码所有重要的功能，以确保以下要点：<ul>
<li>现有代码的行为和规范中的一致</li>
<li>新代码不会违背规范所定义的行为</li>
</ul>
</li>
<li>测试覆盖面的最显著优势在于它能够确保推送到生产系统的代码几乎是没有错误的。</li>
<li>在处理由他人或大型分散式团队编写的代码时，很容易引入错误，把事情搞砸；</li>
<li>不愿意重构或优化代码，是因为不确定对代码基础库做出的改动会不会捅篓子！</li>
<li>一个单元测试具有下列功能：<ul>
<li>测试单个逻辑功能</li>
<li>不依照指定的执行顺序运行</li>
<li>负责自身的依赖关系以及模拟数据（mock data）</li>
<li>对于相同的输入，总是返回相同的结果</li>
<li>一目了然，可维护，具有良好的可读性</li>
</ul>
</li>
<li>测试驱动开发（test-driven development，TDD）近几年来声名卓越；</li>
<li>像IntelliJ和WebStorm这样的IDE，对JavaScript及Node.js调试提供了很好的支持；</li>
<li>Chrome DevTools包含许多有用的工具：<ul>
<li>Elements面板可以帮助你检查和监视DOM树以及相关的样式表单</li>
<li>Network面板有助于理解网络活动</li>
<li>Sources面板，JavaScript源代码以及调试器会在该面板中显示</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就像所有的手艺一样，编程也需要全身心的投入和自律！JavaScript是一门高级、动态、无类型、轻量的解释型编程语言，是创造万维网内容必不可少的技术之一。学习JavaScript还是非常有用的，基础是需要不断地编程来强化！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 基础强化</title>
    <url>/2020/06/17/JavaScript-%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript 是一种可以用来给网页增加交互性的编程语言。“站在其他程序员肩膀上”的方式正是熟悉 JavaScript 的好方法！Java 已经成为一种在服务器端编写代码的流行语言，而JavaScript也在浏览器端名声大噪。  <strong>推荐书籍：《JavaScript基础教程（第9版）》· [美] Dori·Smith Tom·Negrino 著 柳靖 等 译</strong>            </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="能干什么"><a href="#能干什么" class="headerlink" title="能干什么"></a>能干什么</h2><ol>
<li>用 JavaScript 可以做许多事情，使网页更具交互性，给站点的用户提供更好、更令人兴奋的体验；</li>
<li>使用 JavaScript 来确保用户以表单形式输入有效的信息，这可以节省业务时间和开支；</li>
<li>使用 JavaScript，根据用户的操作可以创建自定义的 Web 页面；</li>
<li>JavaScript 还可以处理表单，设置 cookie，即时构建 HTML 页面以及创建基于 Web 的应用程序！</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>用来表示文档中对象的标准模型就称为DOM（Document Object Model，文档对象模型）；</p>
</li>
<li><p>树中的每个对象也称为树的节点（node）；</p>
</li>
<li><p>事件（event）是用户在访问页面时执行的操作，提交表单和在图像上移动鼠标就是两种事件；</p>
</li>
<li><p>JavaScript 使用称为事件处理程序（event handler）的命令来处理事件：</p>
<p><img src="" alt="事件处理程序"></p>
<ul>
<li>在编写脚本时，不必预测出用户可能采取的所有操作，只需处理那些你希望提供特殊处理的事件</li>
<li>如果没有 onload 事件处理程序，页面也会顺利地加载</li>
</ul>
</li>
<li><p>CSS 是一种用于 Web 的标准布局语言，可以控制版面、颜色以及元素和图像的大小和位置；</p>
</li>
<li><p>优秀的站点应该分离,应该包含三种文件:</p>
<ul>
<li>HTML：包含页面的内容和结构</li>
<li>CSS：控制页面的外观和表现</li>
<li>JavaScript：控制页面的行为</li>
</ul>
</li>
<li><p>CSS 样式表在规则中使用class 和 id属性定义页面的外观，而 JavaScript 文件在代码中使用class 和 id属性来影响页面上元素的行为:</p>
<ul>
<li><p>类（class）标识出可能会多次使用的元素,用于定位多个元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.movieTitle</span> &#123; </span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">14px</span>; </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000099</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>id 标识出的元素对于文档是唯一的,用于定位指定元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#theaterName</span> &#123; </span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">28px</span>; </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在给定的页面上，一个 id 只能出现一次。“1”是一个数字，而井号（#）也称为数字符，所以这个符号用于 id</strong></p>
</li>
</ul>
</li>
<li><p>养成在脚本中添加注释的习惯是一种很好的做法，事实上不管代码写的多优秀，时间一久还是容易不记得，经验告诉我们还是要有<strong><em>正确</em></strong>的注释，不是那种无用的注释，比如注释i++为自加操作！注释有助于开发者和其他开发人员理解代码；</p>
</li>
<li><p>编写任何脚本都有许多种方式，并且都能实现同样的效果！相信自己写的代码是正确的，多做单元测试！</p>
</li>
<li><p>在 JavaScript 代码中，要想避免与变量作用域有关的问题和混淆，最容易的方法是避免使用同名的两个变量在不同的地方做不同的事。如果必须使用同名的变量，就一定要弄清变量的作用域；</p>
</li>
<li><p>JavaScript 关键字 this 使脚本能够根据使用这个关键字的上下文将值传递给函数；</p>
</li>
<li><p>使用 JavaScript 的 try/throw/catch 命令可以产生友好、有用的错误消息；</p>
</li>
</ol>
<h2 id="深入Web-amp-JavaScript"><a href="#深入Web-amp-JavaScript" class="headerlink" title="深入Web&amp;JavaScript"></a>深入Web&amp;JavaScript</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>在编写脚本时，可能希望检查浏览器是否有能力理解将要使用的对象，进行这种检查的方法称为<strong>对象探测（object detection）</strong>；</p>
</li>
<li><p>方法是对要寻找的对象进行条件测试，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById) &#123;</span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><del>对于检查浏览器支持哪些对象，另一种替代方法是进行<strong>浏览器探测（browser detection）</strong>，这种方法尝试查明用户使用哪种浏览器查看页面；</del></p>
</li>
<li><p>数组是一种可以存储一组信息的变量，数组可以包含任何类型的数据：文本字符串、数字、其他 JavaScript 对象,数组编号是从零开始的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newCars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Toyota"</span>, <span class="string">"Honda"</span>, <span class="string">"Nissan"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="窗口-amp-表单"><a href="#窗口-amp-表单" class="headerlink" title="窗口&amp;表单"></a>窗口&amp;表单</h3><ol>
<li><p>在Web 浏览器中，窗口是最重要的接口元素，JavaScript 提供了很多用来操纵窗口的工具；</p>
</li>
<li><p>在 JavaScript 中，窗口形成一个层次结构，父窗口处于这个层次结构的顶层；</p>
</li>
<li><p>HTML 页面调用可以打开新窗口的外部 JavaScript 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Opening a Window<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script07.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>The Master of the House<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Click on His name to behold He Who Must Be Adored<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">  	<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"newWin"</span>&gt;</span>Pixel <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = newWinLinks;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newWinLinks</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">document</span>.links.length; i++) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.links[i].className == <span class="string">"newWin"</span>) &#123; </span><br><span class="line">      <span class="built_in">document</span>.links[i].onclick = newWindow; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newWindow</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> catWindow = <span class="built_in">window</span>.open(<span class="string">"images/pixel1.jpg"</span>,<span class="string">"catWin"</span>,<span class="string">"resizable=no,width=350,height=260"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要从 Web 站点的用户那里收集信息，那么就需要使用表单；</p>
</li>
<li><p>表单可以包含大多数常见的图形界面元素，包括输入字段、单选按钮、复选框、弹出菜单和输入列表；</p>
</li>
<li><p>JavaScript 是检查数据的好方法，这种技术称为<strong>表单验证（form validation）</strong>，在客户机上用 JavaScript 进行验证要快得多，而且用户操作的效率也更高；</p>
</li>
<li><p>可以使用 JavaScript 检查某些或所有字段是否已经填写了，指定用户必须填写某些字段，然后才能提交表单；</p>
</li>
<li><p>将输入字段的边框改为红色是很不错的，但是如果能够让有问题的字段再醒目一点儿就更好了；</p>
</li>
<li><p>正则表达式（regular expression，常常缩写为 RegExp）是一种用特殊符号编写的模式，描述一个或多个文本字符串；</p>
</li>
<li><p><strong>只要把混乱的正则表达式分解成有意义的小块，其语法并不难理解；</strong></p>
</li>
</ol>
<h2 id="工具包、框架-amp-库"><a href="#工具包、框架-amp-库" class="headerlink" title="工具包、框架&amp;库"></a>工具包、框架&amp;库</h2><ol>
<li>jQuery 库的优点：<ul>
<li>轻量级</li>
<li>活跃的开发社区</li>
<li>插件架构</li>
<li>支持旧浏览器</li>
<li>速度</li>
<li>初级开发人员容易掌握</li>
</ul>
</li>
<li>在网站的页面中使用<a href="http://code.jquery.com/" target="_blank" rel="noopener">jQuery库</a>，引入库就可以了；</li>
<li>在基于 jQuery 的 JavaScript 代码中，人们首先注意到的通常是美元符号$。$符号仅仅表示一个合法但不常见的函数名，jQuery 通过它来获取所需的一切；</li>
<li>即使访客的浏览器端没有缓存所需的库文件，CDN（Content Delivery Network，内容发布网络）的因特网连接性也要优于你自己实现的网站，所以 CDN 提供文件的速度会优于你的服务器；</li>
<li>jQuery 流行的原因之一是它的选择器与 CSS 中的选择器非常相似，这样一来，偏重于设计的开发人员就可以更快地掌握它！</li>
<li>jQuery本身可能不支持某一功能，但是可以添加插件来获取功能，比如排序可以使用插件tablesorter；</li>
<li>jQuery 通过 <a href="https://code.jquery.com/ui/" target="_blank" rel="noopener">jQuery UI</a> 来处理常用的用户界面元素；</li>
<li>ThemeRoller 允许用户根据项目需要来定制 jQuery 的用户界面主题；</li>
<li>开发人员为了扩展 jQuery 的核心功能而创建了各式各样的插件；</li>
</ol>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li>当浏览器探测到一个事件时，比如用鼠标单击或按键，它可以触发与这个事件相关联的 JavaScript 对象，这些对象称为事件处理程序（event handler）;</li>
<li>事件处理实际上包含了用户与页面的所有交互；</li>
<li>当用户执行某些会影响整个浏览器窗口的操作时，就会发生窗口事件；</li>
<li>当用户进入页面而且所有页面元素都完成加载时，就会触发onload事件；</li>
<li>当用户离开网页时，就会触发 onunload 事件处理程序，onbeforeunload在用户开始离开页面之前触发，而 onunload 在用户离开页面之后触发；</li>
<li>事件：<ul>
<li>当窗口调整大小时，会触发 onresize 事件处理程序</li>
<li>当窗口移动时，会触发 onmove 事件处理程序</li>
<li>当用户取消网页上的图像加载时，会触发 onabort 事件处理程序</li>
<li>当页面上发生 JavaScript 错误时，可能会触发 onerror 事件处理程序</li>
<li>当一个页面成为最前面的活动窗口时，就会触发 onfocus 处理程序；而当一个页面退回后台的时候，就会触发 onblur 事件处理程序</li>
<li>当用户向上或者向下滚动页面时，就会触发 onscroll 事件</li>
<li>onmouseup 事件会在用户单击鼠标然后释放按钮时触发</li>
<li>当页面的访问者移动鼠标时，就会触发 onmousemove 事件</li>
<li>当鼠标移动进任何注册了 onmouseover 事件处理程序的区域时，就会触发这个事件</li>
<li>当鼠标离开一个注册了此事件的区域时，就会触发onmouseout事件</li>
<li>onclick 要求用户按下鼠标按钮并放开才能触发单击事件</li>
</ul>
</li>
<li>键盘事件：<ul>
<li>通过使用键事件处理程序，可以在用户按下适当的键时执行相应的操作，比如onkeydown事件</li>
<li>onkeyup 事件处理程序在用户已按下并释放键的过程中触发</li>
<li>当用户按下并释放键时触发 onkeypress 事件</li>
</ul>
</li>
</ol>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ol>
<li><p>cookie 是一小段信息，当用户第一次访问 Web 服务器时，服务器将这些信息发送给浏览器；</p>
</li>
<li><p>浏览器将 cookie（其中包含关于访问者的信息）作为纯文本文件保存在计算机硬盘上；</p>
</li>
<li><p>cookie 技术背后的本质是“识别”，cookie 是一个具有特定格式的文本字符串：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">cookieName=cookieValue;expires=expirationDateGMT;path=URLpath;domain=siteDomain</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用 cookie 和 JavaScript 提醒经常访问站点的用户注意他们没看到过的内容;</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JavaScript按照现在的前景来看，在很长一段时间会制霸浏览器脚本语言，学习一下，真的很有帮助！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 深入高级话题</title>
    <url>/2020/06/18/JavaScript-%E6%B7%B1%E5%85%A5%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> JavaScript 是一种非常松散的面向对象语言，也是 Web 开发中极受欢迎的一门语言，植根于全球数亿网民都在使用的 Web 浏览器之中，致力于增强网站和 Web 应用程序的交互性。JavaScript 从一个简单的输入验证器发展成为一门强大的编程语言，完全出乎人们的意料！ <strong>推荐书籍：《JavaScript 高级程序设计（第3版）》· [美] Nicholas C.Zakas 著 李松峰 曹力 译</strong>   </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>一个完整的 JavaScript 实现应该由下列三个不同的部分组成：</p>
<ul>
<li>核心（ECMAScript）</li>
<li>文档对象模型（DOM）</li>
<li>浏览器对象模型（BOM）</li>
</ul>
</li>
<li><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于 HTML 的应用程序编程接口（API，Application Programming Interface）。DOM 把整个页面映射为一个多层节点结构；</p>
</li>
<li><p>借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点；</p>
</li>
<li><p>由于没有 BOM 标准可以遵循，因此每个浏览器都有自己的实现！因此不推荐使用BOM进行交互；</p>
</li>
<li><p>包含在&lt;script&gt;元素内部的 JavaScript 代码将被从上至下依次解释；</p>
</li>
<li><p><strong>在访问自己不能控制的服务器上的JavaScript 文件时则要多加小心，如果不幸遇到了怀有恶意的程序员，那他们随时都可能替换该文件中的代码！</strong></p>
</li>
<li><p>支持使用外部文件的人的观点是：</p>
<ul>
<li>可维护性强</li>
<li>可缓存，浏览器能够根据具体的设置缓存链接的所有外部 JavaScript 文件</li>
<li>适应未来</li>
</ul>
</li>
<li><p>要在整个脚本中启用严格模式，可以在顶部添加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>这行代码看起来像是字符串，而且也没有赋值给任何变量，但其实它是一个编译指示（pragma），用于告诉支持的 JavaScript 引擎切换到严格模式</li>
<li>为了不破坏 ECMAScript 3 语法而特意选定的语法</li>
<li>在函数内部的上方包含这条编译指示，也可以指定函数在严格模式下执行</li>
<li>严格模式下，JavaScript 的执行结果会有很大不同</li>
</ul>
</li>
<li><p>typeof用来检测给定变量的数据类型：</p>
<ul>
<li>“undefined”——如果这个值未定义</li>
<li>“boolean”——如果这个值是布尔值</li>
<li>“string”——如果这个值是字符串</li>
<li>“number”——如果这个值是数值</li>
<li>“object”——如果这个值是对象或 null</li>
<li>“function”——如果这个值是函数</li>
</ul>
</li>
<li><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是简单的数据段，而引用类型值指那些可能由多个值构成的对象；</p>
</li>
<li><p>在检测引用类型的值时，ECMAScript 提供了 instanceof 操作符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// result = variable instanceof constructor</span></span><br><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// 变量 person 是 Object 吗？</span></span><br><span class="line">alert(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>);   <span class="comment">// 变量 colors 是 Array 吗？ </span></span><br><span class="line">alert(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>); <span class="comment">// 变量 pattern 是 RegExp 吗？</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果变量是给定引用类型的实例， 那么instanceof 操作符就会返回 true</li>
</ul>
</li>
<li><p>执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中；每个函数都有自己的执行环境；</p>
</li>
<li><p>当执行流进入下列任何一个语句时，作用域链就会得到加长：</p>
<ul>
<li>try-catch 语句的 catch 块</li>
<li>with 语句</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUrl</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> qs = <span class="string">"?debug=true"</span>;</span><br><span class="line">  <span class="keyword">with</span>(location)&#123; </span><br><span class="line">    <span class="keyword">var</span> url = href + qs; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">with 语句接收的是 location 对象，因此其变量对象中就包含了 location 对象的所有属性和方法，而这个变量对象被添加到了作用域链的前端</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部环境；在 with 语句中，最接近的环境是函数环境；如果初始化变量时没有使用 var 声明，该变量会自动被添加到全局环境；</p>
</li>
<li><p>变量查询也不是没有代价的，访问局部变量要比访问全局变量更快；</p>
</li>
<li><p>JavaScript 具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。JavaScript 中最常用的垃圾收集方式是<strong>标记清除（mark-and-sweep）</strong>；垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记；另一种不太常见的垃圾收集策略叫做引用计数（reference counting），然后这种收集策略出现了严重的问题：<strong>循环引用</strong>！</p>
</li>
<li><p>一旦数据不再有用，最好通过将其值设置为 null 来释放其引用，称为解除引用（dereferencing）；</p>
</li>
<li><p>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象；</p>
</li>
</ol>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ol>
<li><p>在 ECMAScript 中，<strong>引用类型</strong>是一种数据结构，用于将数据和功能组织在一起；</p>
</li>
<li><p>对象是某个特定引用类型的实例，新对象是使用 new 操作符后跟一个构造函数来创建的；</p>
</li>
<li><p>创建 Object 实例的方式有两种：</p>
<ul>
<li>使用 new 操作符后跟 Object 构造函数</li>
<li>使用对象字面量表示法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">person.name = <span class="string">"Nicholas"</span>; </span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;; <span class="comment">//与 new Object()相同</span></span><br><span class="line">person.name = <span class="string">"Nicholas"</span>; </span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> person = &#123; </span><br><span class="line">  name : <span class="string">"Nicholas"</span>, </span><br><span class="line">  age : <span class="number">29</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一般来说，访问对象属性时使用的都是点表示法，在 JavaScript 也可以使用方括号表示法来访问对象的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(person[<span class="string">"name"</span>]);  <span class="comment">//"Nicholas"</span></span><br><span class="line">alert(person.name);     <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ECMAScript 数组的每一项可以保存任何类型的数据，可以用数组的第一个位置来保存字符串，用第二位置来保存数值，用第三个位置来保存对象；</p>
<ol>
<li><p>创建数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>); <span class="comment">//指定数组长度</span></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>); <span class="comment">//指定项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在读取和设置数组的值时，要使用方括号并提供相应值的基于 0 的数字索引</p>
</li>
<li><p>数组的项数保存在其 length 属性中，这个属性始终会返回 0 或更大的值，数组的 length 属性不是只读的</p>
</li>
<li><p>检测数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123; </span><br><span class="line">  <span class="comment">//对数组执行某些操作 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组继承的 toLocaleString()、toString()和 valueOf()方法，在默认情况下都会以逗号分隔的字符串的形式返回数组项</p>
</li>
</ol>
</li>
<li><p>ECMAScript 为数组专门提供了 push()和 pop()方法，以便实现类似栈的行为：</p>
<ul>
<li>push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度</li>
<li>pop()方法从数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项</li>
</ul>
</li>
<li><p>结合使用 shift()和 push()方法，可以像使用队列一样使用数组；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//创建一个数组 </span></span><br><span class="line"><span class="keyword">var</span> count = colors.push(<span class="string">"red"</span>, <span class="string">"green"</span>); <span class="comment">//推入两项</span></span><br><span class="line">alert(count); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">count = colors.push(<span class="string">"black"</span>); <span class="comment">//推入另一项</span></span><br><span class="line">alert(count); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.shift(); </span><br><span class="line">alert(item); <span class="comment">//"red" </span></span><br><span class="line">alert(colors.length); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>unshift()方法在数组的前端添加项，能在数组前端添加任意个项并返回新数组的长度；</p>
</li>
<li><p>数组中已经存在两个可以直接用来重排序的方法：reverse()和 sort()；</p>
</li>
<li><p>数组操作方法：</p>
<ul>
<li>concat()方法可以基于当前数组中的所有项创建一个新数组</li>
<li>slice()方法可以基于当前数组中的一或多个项创建一个新数组</li>
<li>indexOf()和 lastIndexOf()位置方法，要查找的项和（可选的）表示查找起点位置的索引</li>
<li>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true</li>
<li>filter()：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组</li>
<li>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值</li>
<li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</li>
<li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true</li>
<li>reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项，归并数组</li>
</ul>
</li>
<li><p>ECMAScript 中的 Date 类型是在早期 Java 中的 java.util.Date 类基础上构建的；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Date 类型重写了 toLocaleString()、toString()和 valueOf()方法；</p>
</li>
<li><p>Date 类型方法：</p>
<ul>
<li>toDateString()——以特定于实现的格式显示星期几、月、日和年</li>
<li>toTimeString()——以特定于实现的格式显示时、分、秒和时区</li>
<li>toLocaleDateString()——以特定于地区的格式显示星期几、月、日和年</li>
<li>toLocaleTimeString()——以特定于实现的格式显示时、分、秒</li>
<li>toUTCString()——以特定于实现的格式完整的 UTC 日期</li>
</ul>
</li>
<li><p>ECMAScript 通过 RegExp 类型来支持正则表达式；</p>
</li>
<li><p>ECMAScript 还提供了 3 个特殊的引用类型：Boolean、Number 和 String；</p>
</li>
<li><p>函数实际上是 Function 类型的实例，因此函数也是对象；</p>
</li>
</ol>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol>
<li><p>ECMAScript 中没有类的概念，因此它的对象也与基于类的语言中的对象有所不同；</p>
</li>
<li><p>对象定义：无序属性的集合，其属性可以包含基本值、对象或者函数；</p>
</li>
<li><p>对象示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">person.name = <span class="string">"Nicholas"</span>; </span><br><span class="line">person.age = <span class="number">29</span>; </span><br><span class="line">person.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert(<span class="keyword">this</span>.name); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的也可以</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">	name: <span class="string">"Nicholas"</span>, </span><br><span class="line">  age: <span class="number">29</span>, </span><br><span class="line">  job: <span class="string">"Software Engineer"</span>,</span><br><span class="line">	sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据属性包含一个数据值的位置,数据属性有 4 个描述其行为的特性：</p>
<ul>
<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性</li>
<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性</li>
<li>[[Writable]]：表示能否修改属性的值</li>
<li>[[Value]]：包含这个属性的数据值</li>
</ul>
</li>
<li><p>数据属性示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;; </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">	writable: <span class="literal">false</span>,</span><br><span class="line">	value: <span class="string">"Nicholas"</span> &#125;);</span><br><span class="line"></span><br><span class="line">alert(person.name); <span class="comment">// "Nicholas"</span></span><br><span class="line">person.name = <span class="string">"Greg"</span>; </span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"><span class="comment">// 如果尝试为它指定新值，则在非严格模式下，赋值操作将被忽略；在严格模式下，赋值操作将会导致抛出错误</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;; </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">	configurable: <span class="literal">false</span>,</span><br><span class="line">	value: <span class="string">"Nicholas"</span> &#125;);</span><br><span class="line"></span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"><span class="keyword">delete</span> person.name; </span><br><span class="line">alert(person.name); <span class="comment">// "Nicholas"</span></span><br><span class="line"><span class="comment">// 一旦把属性定义为不可配置的，就不能再把它变回可配置了</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多数情况下，可能都没有必要利用 Object.defineProperty() 方法提供的这些高级功，不过，理解这些概念对理解 JavaScript 对象却非常有用；</p>
</li>
<li><p>访问器属性不包含数据值；它们包含一对儿 getter 和 setter 函数，有4个特性：</p>
<ul>
<li>[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性， 或者能否把属性修改为数据属性</li>
<li>[[Enumerable]]：表示能否通过 for-in 循环返回属性</li>
<li>[[Get]]：在读取属性时调用的函数</li>
<li>[[Set]]：在写入属性时调用的函数</li>
</ul>
</li>
<li><p>访问器属性示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">  _year: <span class="number">2004</span>, </span><br><span class="line">  edition: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123; </span><br><span class="line">  <span class="keyword">get</span>: function()&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._year; &#125;, </span><br><span class="line">  <span class="keyword">set</span>: function(newValue)&#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123; </span><br><span class="line">      <span class="keyword">this</span>._year = newValue; </span><br><span class="line">      <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2005</span>; </span><br><span class="line">alert(book.edition);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ECMAScript 5 定义了一个 Object.defineProperties()方法，利用这个方法可以通过描述符一次定义多个属性；</p>
</li>
<li><p>使用 ECMAScript 5 的 Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符；</p>
</li>
<li><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程！</p>
</li>
<li><p>ECMAScript 中的构造函数可用来创建特定类型的对象，任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；</p>
</li>
</ol>
<h2 id="JavaScript库"><a href="#JavaScript库" class="headerlink" title="JavaScript库"></a>JavaScript库</h2><ol>
<li>YUI（Yahoo!User Interface Library，雅虎用户 界面库）：开源 JavaScript 与 CSS 库，以一种组件方式设计的，涵盖了 JavaScript 的所有方面，从基本的工具及帮助函数到完善的浏览器部件；</li>
<li>Prototype：提供了常见任务 API的开源库，只有一个单独的文件，可以很容易地放入任意页面；</li>
<li>Dojo Toolkit： 基于一种包系统建模，一组功能组成一个包，可以按需载入，Dojo 提供了范围 广泛的选项和配置，几乎涵盖了你要用 JavaScript 做的任何事情；</li>
<li>MooTools ：为了精简和优化而设计的开源库，它为内置 JavaScript 对象添加了各种方法，以通过接近的接口提供新功能，或者直接提供新的对象；</li>
<li>jQuery ：给 JavaScript 提供了函数式编程接口的开源库；</li>
<li>MochKit ：一个由一些小工具组成的开源库，它以完善的文档和完整的测试见长，拥有大量 API 及 相关范例文档以及数百个测试来确保质量；</li>
<li>Underscore.js：是对 jQuery 的补充，提供了操作对象、数组、函数和其他 JavaScript 数据类型的更多的低级功能；</li>
<li>Backbone.js：构建于 Underscore.js 基础之上的一个迷你 MVC 开源库；</li>
<li>Rico ：开源库，旨在让行为丰富的互联网应用的开发更加简单；</li>
<li>moo.fx ：开源动画库，是设计在 Prototype 或者 MooTools 之上运行的；</li>
<li>JavaScript MD5：实现了 MD4、MD5 以及 SHA-1 安全散列函数；</li>
<li>JavaScrypt：实现了 MD5 和 AES（256 位）加密算法；</li>
<li>… …</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript异步编程</title>
    <url>/2020/06/16/JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript是个单线程的编程语言，经验丰富的JavaScript程序员也难免被网络中错综复杂的回调函数弄得灰头土脸。理解了 Javascript 的异步模式可以写出结构更合理、性能更出色、维护更方便的Javascript 程序！让我们证明给全世界看，即使是最复杂的问题也可以用整洁的、可维护的 JavaScript 代码来解决！ <strong>推荐书籍：《JavaScript异步编程·设计快速响应的网络应用》· [美] Trevor Burnham 著 许青松 译</strong>            </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="深入理解-JavaScript-事件"><a href="#深入理解-JavaScript-事件" class="headerlink" title="深入理解 JavaScript 事件"></a>深入理解 JavaScript 事件</h2><ol>
<li><p>JavaScript 事件模型既优雅又实用，了解了JavaScript的单线程设计之后，就会觉得JavaScript事件模型更像是一种功能；</p>
</li>
<li><p>回调就是一种普通函数，只不过它是传给像setTimeout 这样的函数，或者绑定为像document.onready 这样的属性；运行回调时，称已触发某事件；</p>
</li>
<li><p>JavaScript 事件处理器在线程空闲之前不会运行；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) </span><br><span class="line">&#123; </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i); </span><br><span class="line"> &#125;, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 输出 4 4 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件的易调度性是 JavaScript 语言最大的特色之一，像setTimeout这样的异步函数只是简单地做延迟执行， 而不是孵化新的线程；</p>
</li>
<li><p>每一种 JavaScript 环境都有自己的异步函数集。异步函数通常可以分为两大类：I/O 函数和计时函数；</p>
</li>
<li><p>在 Node 中， process.nextTick 允许将事件调度成尽可能快地触发；</p>
</li>
<li><p>一些现代浏览器（含 IE9+）带有一个 requestAnimationFrame函数；</p>
</li>
<li><p>JavaScript 中的每个异步函数都构建在其他某个或某些异步函数之上，凡是异步函数，从上到下（一直到原生代码）都是异步的！</p>
</li>
<li><p>JavaScript 允许抛出异常，随后再用一个 try/catch 语句块捕获，如果抛出的异常未被捕获，大多数 JavaScript 环境都会提供一个有用的堆栈轨迹；</p>
</li>
<li><p>对于未捕获的异常，不同的环境有着不同的规则！不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草，请仅在调试时才使用它；</p>
</li>
</ol>
<h2 id="分布式事件"><a href="#分布式事件" class="headerlink" title="分布式事件"></a>分布式事件</h2><ol>
<li>学会如何使用 PubSub（Publish/Subscribe，意为 布/订阅”）模式来分发事件；</li>
<li>从软件架构的角度看，jQuery 将 link 元素的事件发布给了任何想订阅此事件的人，正是称其为 PubSub 模式的原因；</li>
<li>Node 中几乎所有的 I/O 源都是 EventEmitter 对象：文件流、HTTP 服务器，甚至是应用进程本身。很多 MVC 框架，如 Backbone.js 和 Spine，都提供了自己的类 EventEmitter 模块；</li>
<li>Backbone.js 允许向”all”事件类型绑定事件处理器，这样不管发生什么事，都会导致这些事件处理器的触发。jQuery 和Backbone.js 都支持用空格隔开多个事件来同时绑定或触发多种事件类型，譬如”keypress mousemove”；</li>
<li>在几乎所有的应用程序中，这种关注层面的分离都会带来更优雅、更直观的代码；</li>
<li>事件化模型要想工作的话，必须要使用一些像Backbone.js之set/get这样的方法；</li>
<li>事件直观映射至页面元素之后，jQuery 就成为分发这些事件的一种理想方式；</li>
</ol>
<h2 id="Promise-对象和-Deferred-对象"><a href="#Promise-对象和-Deferred-对象" class="headerlink" title="Promise 对象和 Deferred 对象"></a>Promise 对象和 Deferred 对象</h2><ol>
<li>Promise 对象代表一项有两种可能结果（成功或失败）的任务，它还持有多个回调，出现不同结果时会分别触发相应的回调；</li>
<li>Promise 对象允许向同一个事件绑定任意多的处理器（堆积技术），可以轻松从现有Promise对象派生出新的 Promise 对象；</li>
<li>Deferred 是 Promise 的超集，它比 Promise 多了一项关键特性：可以直接触发。纯 Promise 实例只允许添加多个调用，而且必须由其他什么东西来触发这些调用；</li>
<li>使用 resolve（执行）方法和 reject（拒绝）方法均可触发 Deferred 对象；</li>
<li>对 Deferred 对象调用 promise 方法即可获得纯生的promise对象；</li>
<li>每个 Deferred 对象都含有一个 Promise 对象，而每个Promise 对象都代表着一个 Deferred 对象。有了 Deferred 对象，就可以控制其状态，而有了纯 Promise 对象，只能读取其状态及附加回调；</li>
<li>Promise 同样适用于本地的一些异步操作，比如动画；</li>
<li>执行或拒绝 Deferred 对象时， 提供的任何参数都会转发至相应的回调；</li>
<li>Promise 对象接受 3 种回调形式： done、 fail 和 progress。执行 Promise 对象时，运行的是 done 回调；拒绝 Promise对象时，运行的是 fail 回调；对处于挂起状态的 Deferred 对象调用notify 时，运行的是 progress 回调；</li>
</ol>
<h2 id="Async-js-的工作流控制"><a href="#Async-js-的工作流控制" class="headerlink" title="Async.js 的工作流控制"></a>Async.js 的工作流控制</h2><ol>
<li><p>工作流控制（也称作控制工作流）可以大幅度简化同步代码中的迭代，也可以消解异步代码中的套话；</p>
</li>
<li><p>目前最流行的工作流控制库当属 Caolan McMahon 开发的强大的Async.js ；</p>
</li>
<li><p>获取并安装最新的Node，然后npm安装包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g async step</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步方法读取文件夹中所有文件的内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">process.chdir(<span class="string">'/Users/wander/Desktop/test'</span>);</span><br><span class="line"><span class="keyword">var</span> concatenation = <span class="string">''</span>;</span><br><span class="line">fs.readdirSync(<span class="string">'.'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 跳过不是文件的目录 </span></span><br><span class="line">	<span class="keyword">return</span> fs.statSync(filename).isFile(); &#125;).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 内容添加到输出上 </span></span><br><span class="line">		concatenation += fs.readFileSync(filename, <span class="string">'utf8'</span>)</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(concatenation);</span><br></pre></td></tr></table></figure>
</li>
<li><p>上述代码换成异步读取文件内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">process.chdir(<span class="string">'/Users/wander/Desktop/test'</span>);</span><br><span class="line"><span class="keyword">var</span> concatenation = <span class="string">''</span>;</span><br><span class="line">fs.readdirSync(<span class="string">'.'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 跳过不是文件的目录 </span></span><br><span class="line">	<span class="keyword">return</span> fs.statSync(filename).isFile(); &#125;).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 内容添加到输出上 </span></span><br><span class="line">		fs.readFile(filename, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123; <span class="keyword">if</span> (err) <span class="keyword">throw</span> err; concatenation += contents; &#125;);</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(concatenation);</span><br><span class="line"><span class="comment">// 无法输出内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把同步迭代器所使用的 filter 和 forEach 方法替换成相应的异步方法，Async.js 给了我们两个选择：</p>
<ul>
<li>async.filter 和 async.forEach ，它们会并行处理给定的数组</li>
<li>async.filterSeries 和 async.forEachSeries ，它们会顺序处理给定的数组</li>
</ul>
</li>
<li><p>Async.js数据收集方法代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>); </span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </span><br><span class="line">process.chdir(<span class="string">'/Users/wander/Desktop/test'</span>); <span class="comment">// 改变工作目录 </span></span><br><span class="line"><span class="keyword">var</span> concatenation = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dirContents = fs.readdirSync(<span class="string">'.'</span>); </span><br><span class="line"><span class="keyword">async</span>.filterSeries(dirContents, isFilename, <span class="function"><span class="keyword">function</span>(<span class="params">filename,callback</span>) </span>&#123; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">async</span>.forEachSeries(dirContents, readAndConcat, onComplete); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFilename</span>(<span class="params">filename, callback</span>) </span>&#123; </span><br><span class="line">	fs.stat(filename, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123; </span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">throw</span> err; </span><br><span class="line">		callback(stats.isFile()); </span><br><span class="line">	&#125;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAndConcat</span>(<span class="params">filename, callback</span>) </span>&#123;</span><br><span class="line">	fs.readFile(filename, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, fileContents</span>) </span>&#123; </span><br><span class="line">		<span class="keyword">if</span> (err) </span><br><span class="line">			<span class="keyword">return</span> callback(err); </span><br><span class="line">		concatenation += fileContents; </span><br><span class="line">		</span><br><span class="line">		callback(); </span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onComplete</span>(<span class="params">err</span>) </span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (err) </span><br><span class="line">		<span class="keyword">throw</span> err; </span><br><span class="line">	<span class="built_in">console</span>.log(concatenation); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Async.js 还提供了以下方法：</p>
<ul>
<li>reject / rejectSeries ，与 filter 刚好相反</li>
<li>map / mapSeries ， 1:1 变换</li>
<li>reduce / reduceRight ，值的逐步变换</li>
<li>detect / detectSeries ，找到筛选器匹配的值</li>
<li>sortBy ，产生一个有序副本</li>
<li>some ，测试是否至少有一个值符合给定标准</li>
<li>every ，测试是否所有值均符合给定标准</li>
</ul>
</li>
<li><p>Async.js 提供了 async.series 的并行版本，即 async.parallel,支持异步函数的并行运行；</p>
</li>
<li><p>async.queue 的底层基本理念令人想起 DMV（Dynamic Management View，动态管理视图）。async.queue 接受的参数有两个：</p>
<ul>
<li>一个是 worker（办事员） 函数，而不是一个函数列表</li>
<li>一个是代表着 concurrency（并发度）的值，代表了办事员最多可同时处理的任务数</li>
</ul>
</li>
<li><p>Tim Caswell 的 Step是一个轻量级的 JavaScript 库，只有一个函数：Step，接受一个函数列表作为参数；</p>
</li>
</ol>
<h2 id="worker-对象的多线程技术"><a href="#worker-对象的多线程技术" class="headerlink" title="worker 对象的多线程技术"></a>worker 对象的多线程技术</h2><ol>
<li>与不同线程进行交互的方式与在 JavaScript 中进行 I/O 操作一模一样；</li>
<li>在JavaScript环境中，由worker对象运行的并发代码从来不会分享状态；</li>
<li>通常情况下，worker 对象会把自己的计算结果发送给主线程，由主线程去更新页面。为了保护JavaScript 异步抽象概念，使其免受影响；</li>
<li>worker 对象看不到全局的 window 对象和主线程及其他 worker 线程中的其他任何对象；</li>
<li>Node 版 worker 几乎拥有主线程的所有权利和权限，但以下这些除外（但不限于这些）：<ul>
<li>关停应用程序的能力</li>
<li>孵化出更多 worker 对象的能力</li>
<li>彼此交流的能力</li>
</ul>
</li>
<li>为了尽可能减少线程间通信的开销，线程间分享的状态应该存储在像 Redis 这样的外部数据库中；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>做，或者不做，没有试试看一说！这部分属于JavaScript较为高级,或者说挺有用的部分，需要根据业务场景去实现相应的代码才能够说真正掌握了这部分的内容！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java注解（Annotation）</title>
    <url>/2020/05/16/Java%E6%B3%A8%E8%A7%A3%EF%BC%88Annotation%EF%BC%89/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Java 中注解是一个很重要的知识点，但经常还是有点让新手不容易理解。Java中的注解是一种对程序元素进行配置，提供附加信息的机制。如果还不会使用注解，肯定不好意思对别人说你学过Spring，你学过Mybatis，因为它们用了大量的注解。可见注解在开发领域已经使用的非常广泛了。在SpringBoot中大量使用注解，要想使用以及深入学习Spring框架，SpringBoot等需要对注解进行学习，不然不能理解代码，以及自动化配置等等内容，这部分作为基础性知识，需要较为系统的学习。Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="为什么要注解"><a href="#为什么要注解" class="headerlink" title="为什么要注解"></a>为什么要注解</h2><ul>
<li>能够读懂别人写的代码，特别是框架相关的代码；</li>
<li>本来可能需要很多配置文件，需要很多逻辑才能实现的内容，就可以使用一个或者多个注解来替代，这样就使得编程更加简洁，代码更加清晰；</li>
<li>使用自定义注解来解决问题；</li>
<li>Java提供了一种原程序中的元素关联任何信息和任何元数据的途径的方法；</li>
<li>提供信息给编译器： 编译器可以利用注解来探测错误和警告信息；</li>
<li>编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、html文档或者做其它相应处理；</li>
<li>运行时的处理： 某些注解可以在程序运行的时候接受代码的提取；</li>
<li>值得注意的是，注解不是代码本身的一部分！</li>
</ul>
<h2 id="JDK注解"><a href="#JDK注解" class="headerlink" title="JDK注解"></a>JDK注解</h2><ul>
<li><p>@override：标注方法是覆盖了某个接口的方法；</p>
</li>
<li><p>@deprecated：标注表明这个方法已经过时了，使用该方法时编译器会出现警告；</p>
</li>
<li><p>@suppvisewarnings： @SuppressWarnings(“deprecation”)就表示我们忽略了deprecation这样的一个警告；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SuppressWarnings 常用的关键字</span></span><br><span class="line">deprecation  -- 使用了不赞成使用的类或方法时的警告</span><br><span class="line">unchecked    -- 执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。</span><br><span class="line">fallthrough  -- 当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。</span><br><span class="line">path         -- 在类路径、源文件路径等中有不存在的路径时的警告。</span><br><span class="line">serial       -- 当在可序列化的类上缺少 serialVersionUID 定义时的警告。</span><br><span class="line"><span class="keyword">finally</span>      -- 任何 <span class="keyword">finally</span> 子句不能正常完成时的警告。</span><br><span class="line">all          -- 关于以上所有情况的警告。</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>@SafeVarargs：参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作,它的存在会阻止编译器产生 unchecked 这样的警告；</p>
</li>
<li><p>@FunctionalInterface：函数式接口注解；</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/08/28123151-d471f82eb2bc4812b46cc5ff3e9e6b82.jpg" alt=""></p>
</li>
<li><p>“每 1 个 Annotation” 都与 “1 个 RetentionPolicy” 关联，并且与 “1～n 个 ElementType” 关联；</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/08/28124653-adf73c4cdcce4a63b7bf78efbe1a9cdf.jpg" alt=""></p>
</li>
</ul>
<h2 id="Java第三方注解"><a href="#Java第三方注解" class="headerlink" title="Java第三方注解"></a>Java第三方注解</h2><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul>
<li>@Autowired：</li>
<li>@Service：</li>
<li>@Repository：</li>
</ul>
<h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><ul>
<li>@InsertProvider：</li>
<li>@UpdateProvider：</li>
<li>Options：</li>
</ul>
<h2 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h2><ul>
<li>运行机制：源码注解，编译时注解，运行时注解；</li>
<li>来源：来自JDK的注解，来自第三方的注解，自定义注解；</li>
<li>元注解：给注解进行注解，是一种基本注解。</li>
</ul>
<h2 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h2><ol>
<li>注解通过 @interface 关键字进行定义，形式跟接口很类似，不过前面多了一个 @ 符号；</li>
<li>元注解有 @Retention、@Documented、@Target、@Inherited、@Repeatable（Java 8 开始支持，标识某注解可以在同一个声明上使用多次） 5 种；</li>
<li>@Retention：解释说明了这个注解的的存活时间：<ul>
<li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视</li>
<li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中</li>
<li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们</li>
</ul>
</li>
<li>@Documented：类和方法的 Annotation 在缺省情况下是不出现在 javadoc 中的，能够将注解中的元素包含到 Javadoc 中去；</li>
<li>@Target：指定了注解运用的地方：<ul>
<li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li>
<li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li>
<li>ElementType.FIELD 可以给属性进行注解</li>
<li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li>
<li>ElementType.METHOD 可以给方法进行注解</li>
<li>ElementType.PACKAGE 可以给一个包进行注解</li>
<li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li>
<li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>
</ul>
</li>
<li>@Inherited：如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解；<ul>
<li><strong>假设，我们定义了某个 Annotaion，它的名称是 MyAnnotation，并且 MyAnnotation 被标注为@Inherited。现在，某个类 Base 使用了MyAnnotation，则 Base 具有了”具有了注解 MyAnnotation”；现在，Sub 继承了 Base，由于 MyAnnotation 是 @Inherited的(具有继承性)，所以，Sub 也 “具有了注解 MyAnnotation”</strong></li>
</ul>
</li>
<li>@Repeatable：注解的值可以同时取多个；</li>
</ol>
<h2 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h2><ol>
<li><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> "Hi"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代码定义了 TestAnnotation 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。赋值的方式是在注解的括号内以 value=”” 形式，多个属性之前用 ，隔开;</li>
<li>在注解中定义属性时它的类型必须是 8 种基本数据类型外加类、接口、注解及它们的数组；</li>
<li>注解中属性可以有默认值，默认值需要用 default 关键值指定；</li>
<li>如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接接属性值填写到括号内</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span>(id=<span class="number">3</span>,msg=<span class="string">"hello annotation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="提取注解"><a href="#提取注解" class="headerlink" title="提取注解"></a>提取注解</h2><ol>
<li><p>注解通过反射获取。首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后通过 getAnnotation() 方法来获取 Annotation 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span> </span>&#123;&#125; </span><br><span class="line"><span class="comment">// 返回指定类型的注解</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或者是 getAnnotations() 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations() &#123;&#125;   </span><br><span class="line"><span class="comment">// 返回注解到这个元素上的所有注解</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果获取到的 Annotation 如果不为 null，则就可以调用它们的属性方法了。</p>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">isAnnotationPresent</span>(<span class="title">TestAnnotation</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">            TestAnnotation testAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">TestAnnotation</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            System.out.println(<span class="string">"id:"</span>+testAnnotation.id());</span><br><span class="line">            System.out.println(<span class="string">"msg:"</span>+testAnnotation.msg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>如果一个注解要在运行时被成功提取，那么 @Retention(RetentionPolicy.RUNTIME) 是必须的；</li>
<li>注解的提取需要借助于 Java 的反射技术，反射比较慢，所以注解使用时也需要谨慎计较时间成本；</li>
<li>注解主要给编译器及工具类型的软件用的！</li>
</ul>
</li>
</ol>
<h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><ol>
<li><p>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Anotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wander</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FirstAnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Anotation.FirstAnotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FirstAnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InheritableFather:"</span>+Base<span class="class">.<span class="keyword">class</span>.<span class="title">isAnnotationPresent</span>(<span class="title">FirstAnotation</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test base"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> UseAnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Anotation.FirstAnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span>  <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"InheritableSub:"</span>+Sub<span class="class">.<span class="keyword">class</span>.<span class="title">isAnnotationPresent</span>(<span class="title">FirstAnotation</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFirstAnotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Test FirstAnotation!"</span>);</span><br><span class="line">       Sub test=<span class="keyword">new</span> Sub();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation在反射函数中的使用示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> <span class="string">"unknown"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Person类。它会使用MyAnnotation注解。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * empty()方法同时被 "<span class="doctag">@Deprecated</span>" 和 "<span class="doctag">@MyAnnotation</span>(value=&#123;"a","b"&#125;)"所标注</span></span><br><span class="line"><span class="comment">     * (01) <span class="doctag">@Deprecated</span>，意味着empty()方法，不再被建议使用</span></span><br><span class="line"><span class="comment">     * (02) <span class="doctag">@MyAnnotation</span>, 意味着empty() 方法对应的MyAnnotation的value值是默认值"unknown"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\nempty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sombody() 被 <span class="doctag">@MyAnnotation</span>(value=&#123;"girl","boy"&#125;) 所标注，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@MyAnnotation</span>(value=&#123;"girl","boy"&#125;), 意味着MyAnnotation的value值是&#123;"girl","boy"&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MyAnnotation</span>(value=&#123;<span class="string">"girl"</span>,<span class="string">"boy"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somebody</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\nsomebody: "</span>+name+<span class="string">", "</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 新建Person</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 获取Person的Class实例</span></span><br><span class="line">        Class&lt;Person&gt; c = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">// 获取 somebody() 方法的Method实例</span></span><br><span class="line">        Method mSomebody = c.getMethod(<span class="string">"somebody"</span>, <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>&#125;)</span>;</span><br><span class="line">        <span class="comment">// 执行该方法</span></span><br><span class="line">        mSomebody.invoke(person, <span class="keyword">new</span> Object[]&#123;<span class="string">"lily"</span>, <span class="number">18</span>&#125;);</span><br><span class="line">        iteratorAnnotations(mSomebody);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 somebody() 方法的Method实例</span></span><br><span class="line">        Method mEmpty = c.getMethod(<span class="string">"empty"</span>, <span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">        <span class="comment">// 执行该方法</span></span><br><span class="line">        mEmpty.invoke(person, <span class="keyword">new</span> Object[]&#123;&#125;);        </span><br><span class="line">        iteratorAnnotations(mEmpty);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorAnnotations</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 somebody() 方法是否包含MyAnnotation注解</span></span><br><span class="line">        <span class="keyword">if</span>(method.isAnnotationPresent(MyAnnotation<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">            <span class="comment">// 获取该方法的MyAnnotation注解实例</span></span><br><span class="line">            MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 获取 myAnnotation的值，并打印出来</span></span><br><span class="line">            String[] values = myAnnotation.value();</span><br><span class="line">            <span class="keyword">for</span> (String str:values)</span><br><span class="line">                System.out.printf(str+<span class="string">", "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 获取方法上的所有注解，并打印出来</span></span><br><span class="line">        Annotation[] annotations = method.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span>(Annotation annotation : annotations)&#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 输出</span></span><br><span class="line"><span class="comment">somebody: lily, 18</span></span><br><span class="line"><span class="comment">girl, boy, </span></span><br><span class="line"><span class="comment"><span class="doctag">@MyAnnotation</span>(value=&#123;"girl", "boy"&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">empty</span></span><br><span class="line"><span class="comment">unknown, </span></span><br><span class="line"><span class="comment"><span class="doctag">@MyAnnotation</span>(value=&#123;"unknown"&#125;)</span></span><br><span class="line"><span class="comment"><span class="doctag">@java</span>.lang.Deprecated(forRemoval=false, since="")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>注解这部分还是需要好好理解的，对于Java语言的特性能够更深入了解！特别有助于学习Spring。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Jenkins Quick Start</title>
    <url>/2020/08/22/Jenkins-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。开发工作流程一般划分为：编码 → 构建 → 集成 → 测试 → 交付 → 部署。整个流程中快速进行编码 → 构建 → 集成这个过程的时候如果使用了像Jenkins这种工具的话，开发的效率以及代码的质量相对来说会提高很多。这部分主要记录如何快速搭建Jenkins环境以及如何使用Jenkins构建SpringBoot项目！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>持续集成（Continuous Integration，CI）指的是将软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现其中的错误；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8b4508b66d3c33e06a1632072019daa5-54359" alt="CI"></p>
</li>
<li><p>CI的好处：</p>
<ul>
<li>快速发现错误，定位错误也比较容易</li>
<li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成</li>
</ul>
</li>
<li><p>CI的目的：CI并不能消除Bug，而是让Bug非常容易发现和改正。让产品可以快速迭代，同时还能保持高质量；</p>
</li>
<li><p>CI的核心措施：代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成；</p>
</li>
<li><p>持续交付（Continuous Delivery，CD）指的是频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的类生产环境中，持续交付优先于整个产品生命周期的软件部署，建立在高水平自动化持续集成之上；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cc7372ca51780017d8a758454cd19389-97226" alt="CI/CD"></p>
</li>
<li><p>CD的目的：不管软件代码怎么更新，软件是随时随地可以交付的、可以进入生产阶段的；</p>
</li>
<li><p>CD的前提：能自动化完成测试、构建、部署等步骤；</p>
</li>
<li><p>常用的构建工具有：</p>
<ul>
<li>Jenkins</li>
<li>Travis</li>
<li>Codeship</li>
<li>Strider</li>
</ul>
</li>
<li><p>Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码的编译、打包、部署）的基于web界面的平台；</p>
</li>
<li><p>Jenkins特性：</p>
<ul>
<li>基于java语言开发的开源持续集成工具，支持CI，CD</li>
<li>易于安装部署配置</li>
<li>消息通知及测试报告</li>
<li>分布式构建</li>
<li>文件识别，能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等</li>
<li>丰富的插件支持</li>
</ul>
</li>
<li><p>Jenkins的中文官网：<a href="https://www.jenkins.io/zh/" target="_blank" rel="noopener">https://www.jenkins.io/zh/</a></p>
</li>
</ol>
<h2 id="Jenkins项目配置基础"><a href="#Jenkins项目配置基础" class="headerlink" title="Jenkins项目配置基础"></a>Jenkins项目配置基础</h2><h3 id="general"><a href="#general" class="headerlink" title="general"></a>general</h3><ol>
<li>项目名称：创建任务时设置的，用于区分任务；</li>
<li>描述: 对构建任务的描述；</li>
<li>丢弃旧的构建：服务器资源是有限的，有时候保存了太多的历史构建，会导致Jenkins速度变慢，并且服务器硬盘资源也会被占满。”保持构建天数” 和”保持构建的最大个数”是可以自定义的，需要根据实际情况确定一个合理的值；</li>
</ol>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><ol>
<li>配置代码的存放位置；</li>
<li>Git: 支持主流的github 和gitlab代码仓库；</li>
<li>Repository URL：仓库地址；</li>
<li>Credentials：凭证，可以使用HTTP方式的用户名密码，也可以是RSA文件；</li>
<li>Branches to build：构建的分支。*/master表示master分支，也可以设置为其他分支；</li>
<li>源码浏览器：所使用的代码仓库管理工具，如github, gitlab；</li>
<li>URL：填入上方的仓库地址即可；</li>
<li>Version: gitlab服务器的版本；</li>
</ol>
<h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><ol>
<li>触发远程构建：该选项会提供一个接口，可以用来在代码层面触发构建；</li>
<li>Build after other projects are built：在其他projects构建后构建；</li>
<li>Build periodically： 周期性的构建。日程表类似linux crontab书写格式；</li>
<li>Build when a change is pushed to GitLab：当有更改push到gitlab代码仓库，即触发构建。GitLab的Web Hooks来触发构建；</li>
<li>Poll SCM：周期性的去检查代码仓库是否发生改动；</li>
</ol>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><ol>
<li>Eexcute shell：执行shell命令，该工具是针对linux环境的，windows环境也有对应的工具”Execute Windows batch command”；</li>
<li>Invoke Ant：Ant是一款java项目构建工具；</li>
<li>Send files or execute commands over SSH：发送文件到远程主机或执行命令(脚本)！</li>
</ol>
<h3 id="构建状态"><a href="#构建状态" class="headerlink" title="构建状态"></a>构建状态</h3><ul>
<li>Successful蓝色：构建完成，并且被认为是稳定的</li>
<li>Unstable黄色：构建完成，但被认为是不稳定的</li>
<li>Failed红色：构建失败</li>
<li>Disable灰色：构建已禁用</li>
</ul>
<h3 id="构建稳定性"><a href="#构建稳定性" class="headerlink" title="构建稳定性"></a>构建稳定性</h3><ul>
<li>构建稳定性用天气表示</li>
<li>晴、晴转多云、多云、小雨、雷阵雨</li>
<li>天气越好表示构建越稳定，反之亦然</li>
</ul>
<h2 id="Docker搭建Jenkins环境（版本2-253）"><a href="#Docker搭建Jenkins环境（版本2-253）" class="headerlink" title="Docker搭建Jenkins环境（版本2.253）"></a>Docker搭建Jenkins环境（版本2.253）</h2><ol>
<li><p>查看DockerHub上有哪些版本的jenkins：<a href="https://hub.docker.com/r/jenkins/jenkins/tags" target="_blank" rel="noopener">https://hub.docker.com/r/jenkins/jenkins/tags</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/41fe5ab3e8f42706fc1aae2d46ed6338-224724" alt="Docker Jenkins Tags"></p>
<ul>
<li><p>官方支持很多Tag的Jenkins，默认的latest版本支持jdk-8</p>
</li>
<li><p>选择jdk11标签的版本以匹配自己的开发环境</p>
</li>
<li><p>下载镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:jdk11</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建一个工作目录，用于存放docker-compose.yml文件以及jenkins数据，这里创建的目录是/Users/wander/docker/jenkins，并且创建了docker-compose.yml以及jenkins_data目录；</p>
</li>
<li><p>编辑docker-compose.yml，内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:jdk11</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/Users/wander/docker/jenkins/jenkins_data:/var/jenkins_home"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/Volumes/Data/Java_Env/apache-maven-3.6.3:/usr/apache-maven-3"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>挂载了数据目录以及apache-maven-3.6.3目录，其中apache-maven-3.6.3目录是本地的管理工具Maven目录</li>
<li>jdk11的目录不需要挂载本地的，因为docker环境是jdk11的，可以直接使用</li>
</ul>
</li>
<li><p>启动docker-compose.yml，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compse up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>等待容器启动完成，然后访问<a href="http://localhost:8080：">http://localhost:8080：</a></p>
<ul>
<li><p>正在初始化</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d10d9814c067808d1ab4c71f446ba161-104509" alt="jenkins正在初始化"></p>
</li>
<li><p>解锁jenkins：在jenkins_data目录下的secrets目录下的initialAdminPassword文件中有管理员原始密码</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0c6dd00343a8c0e0c0e065a7e0a86e40-228990" alt="解锁jenkins"></p>
</li>
<li><p>插件安装：（暂时不要点击，修改配置文件，不然下载速度太慢）</p>
</li>
</ul>
</li>
<li><p>停止容器，然后修改jenkins_data目录下的updates目录下default.json文件：</p>
<ul>
<li><p>使用vim编辑文件，替换所有插件的下载url：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:1,$s/https:\/\/updates.jenkins.io\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用vim编辑文件，替换所有插件的测试url：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存，然后重启容器，按照推荐的下载插件</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/744ef30a52f825964a282dc5f686fa8e-129604" alt="下载插件"></p>
</li>
</ul>
</li>
<li><p>下载完成推荐的插件之后就可以创建账户了：</p>
<ul>
<li><p>创建账户：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1b8647a710930b2c9f6a3946c1258cf2-37993" alt="创建账户"></p>
</li>
<li><p>实例配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/906de5691549ee34b2282c54f8a8a6f5-56961" alt="实例配置"></p>
</li>
</ul>
</li>
<li><p>默认配置好的jenkins还不支持SpringBoot项目的构建，需要一些配置工作：</p>
<ul>
<li><p>在插件管理里搜索maven并安装：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2be284e04d07dd346dc915f68166b8b9-116310" alt="搜索maven"></p>
</li>
<li><p>配置工具中的JDK配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f26f84ecd210a2d8df41eb0691c26871-50648" alt="配置JDK"></p>
</li>
<li><p>配置工具中的Maven配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6f091f656547425819b9f6ebd189a811-64430" alt="配置Maven"></p>
</li>
<li><p>应用并保存配置即可</p>
</li>
<li><p>注意：这些地址根据之前的配置进行填，不知道的话可以使用which java等命令确定位置</p>
</li>
</ul>
</li>
<li><p>Jenkins时区和时间设置，在【系统管理】-【脚本命令行】里运行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/119b110cc4382e00fc69b2057e7abaa7-97316" alt="时区设置"></p>
</li>
<li><p>安装插件Publish Over SSH：</p>
<ul>
<li>在插件安装中搜索Publish Over SSH，然后安装</li>
<li>该插件是可以通过SSH命令部署服务</li>
</ul>
</li>
</ol>
<h2 id="Jenkins配置GitHub"><a href="#Jenkins配置GitHub" class="headerlink" title="Jenkins配置GitHub"></a>Jenkins配置GitHub</h2><ol>
<li><p>在Jenkins的配置中心添加GitHub服务，直接连接测试效果如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e5efc6df291facef4d1bf0cc718d5186-62962" alt="Jenkins连接github测试"></p>
</li>
<li><p>创建GitHub凭证，使用Secret text，需要填写Secret，这个要在GitHub中申请：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/34889c4e3f43c57205855568e719b107-50289" alt="jenkins凭证"></p>
</li>
<li><p>在GitHub中的【设置】-【开发者设置】-【个人权限令牌】中生成令牌：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b10bfb98a189a17cc99f0c7acaf6770d-287790" alt="GitHub令牌"></p>
</li>
<li><p>配置凭证之后验证：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6b76ac1235eafa984e77973fd4e1be05-53053" alt="验证github"></p>
</li>
<li><p>新建一个使用github仓库的maven项目：</p>
<ul>
<li><p>创建任务：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/507b34fb9942ad6dc91c8aeeae432748-184147" alt="创建任务"></p>
</li>
<li><p>通用配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/99eea970581cf25582e61ac7886a04c7-61426" alt="通用配置"></p>
</li>
<li><p>源码管理：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8f378a9e476ba41087a4d9df31b9656f-63192" alt="源码管理"></p>
<ul>
<li>注意添加自己的账户和密码凭证</li>
</ul>
</li>
<li><p>其他配置后续再解释</p>
</li>
</ul>
</li>
<li><p>配置完成之后保存，然后点击立即构建，然后查看控制台的输出：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6e1c9292c6b11797a062d1a2956d5ec2-238590" alt="控制台输出"></p>
</li>
<li><p>配置GitHub的Webhook自动触发Jenkins项目构建：</p>
<ul>
<li><p>全局配置Jenkins的HookURL：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/061c0600516e385088c95124c5adcc58-69411" alt="全局配置Jenkins的HookURL"></p>
</li>
<li><p>配置项目的Hook：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/654ba7746fece889a08f0e637fa7a141-74112" alt="配置项目的Hook"></p>
</li>
<li><p>在GitHub项目中的设置中配置Webhooks，添加对应的地址即可</p>
</li>
<li><p>修改源码之后进行push到master分支之后就会触发构建操作</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c706b18f1f5962bad739aa09567fb566-57781" alt="WebHook构建成功"></p>
</li>
</ul>
</li>
</ol>
<h2 id="Publish-Over-SSH配置"><a href="#Publish-Over-SSH配置" class="headerlink" title="Publish Over SSH配置"></a>Publish Over SSH配置</h2><ol>
<li><p>在搭建环境的时候直接配置下载Publish Over SSH插件了，这里不再进行搜索啥的截图了；</p>
</li>
<li><p>进入Jenkins容器中生成ssh秘钥对：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器ID] bash</span><br><span class="line"></span><br><span class="line">ssh-keygen  -t rsa  -C &quot;wangsp14@midea.com&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Jenkins的【管理Jenkins】-【Configure System】-【Publish Over SSH】进行配置：</p>
<ul>
<li><p>添加私钥：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/506970b21d5e5e2887a2de720a3c58de-166694" alt="将生成的私钥添加到配置中"></p>
</li>
<li><p>添加SSH服务器：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d44be829a2d05e68c41f395ab30e5ccd-80809" alt="添加SSH服务器"></p>
</li>
<li><p>注意要将jenkins的公钥拷贝到SSH服务器的authorized_keys文件中</p>
</li>
<li><p>可以测试连接状况</p>
</li>
</ul>
</li>
<li><p>在项目中添加远程部署：</p>
<ul>
<li><p>远程部署配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c37c1916d9970e274db68cd9e9dddb48-180606" alt="ssh远程部署配置"></p>
</li>
<li><p>Exec Command如下（非通用）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 `ps -ef | grep java | grep web | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">sh /Users/wander/jenkins/start.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>start.sh脚本如下（非通用）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/nohup /usr/<span class="built_in">local</span>/Cellar/openjdk@11/11.0.8/bin/java -jar /Users/wander/jenkins/web-0.0.1-SNAPSHOT.jar 2&gt;file1 1&gt;file1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了防止创建新目录，勾选Flatten files选项</p>
</li>
</ul>
</li>
<li><p>点击构建项目或者使用WebHooks修改源码之后自动构建之后就会将jar包拷贝到SSH服务器中，并且自动运行项目：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e3d4a70cd820f8d2f0e82d289fb6e55a-15533" alt="SSH服务器文件"></p>
</li>
</ol>
<h2 id="Jenkins配置GitLab"><a href="#Jenkins配置GitLab" class="headerlink" title="Jenkins配置GitLab"></a>Jenkins配置GitLab</h2><ol>
<li><p>GitLab和Jenkins使用过程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/219147e7ecd12aa47e99bf923b264f49-48796" alt="GitLab和Jenkins使用过程"></p>
</li>
<li><p>搜索并安装GitLab插件：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eeb91ac5e412a1b3b65f52265ab41aac-255425" alt="GitLab插件"></p>
</li>
<li><p>在Jenkins的【管理Jenkins】-【Configure System】-【Gitlab】进行配置：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7a144a4e5cbcb85b19645e2842097add-162382" alt="Gitlab配置"></p>
</li>
<li><p>GitLab生成令牌（API Token）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/49d019c771a4b5df0edeeb235fcc4d6a-411279" alt="GitLab生成令牌"></p>
</li>
<li><p>Jenkin添加GitLab凭证：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4774481ba42a00a11ac5281d83759937-139812" alt="添加GitLab凭证"></p>
</li>
<li><p>测试GitLab通信：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/422e2da24994892d28a7bb43d7555879-125410" alt="测试GitLab通信"></p>
</li>
<li><p>创建项目和GitHub的过程类似，然后就是源码管理需要添加账户认证：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9aed4656f2c3194c8a7f26b416704900-123421" alt="GitLab账户认证"></p>
<ul>
<li>可以添加源码浏览器</li>
</ul>
</li>
<li><p>Webhooks的配置有一个选项，如下所示，过程和GitHub的配置类似，后续过程不再添加说明</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3e8e72189da5cc3df689f6b56f6c10e5-202968" alt="GitLab WebHooks"></p>
</li>
<li><p>GitLab完整过程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c3436be72129e7e64281c9d29db5d963-575892" alt="GitLab完整过程"></p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><p>默认的邮件通知只支持异常构建，可以添加插件Email Extension Plugin来通知，搜索插件：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0d7d9848774acef0cecedee8bbd826a5-105431" alt="Email Extension Plugin"></p>
</li>
<li><p>破解管理员密码：如果忘记了管理员密码可以修改users目录下的用户子目录下的config.xml，修改其中的passwordHash字段，然后重启：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">passwordHash</span>&gt;</span>#jbcrypt:$2a$10$eJAMBW3qb/ijrFsSxkJnDOB747e0mFWSR03UmLCn96E4N7vL5BYzC<span class="tag">&lt;/<span class="name">passwordHash</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重启之后的密码为123456，然后重新设置密码即可</li>
</ul>
</li>
<li><p>jenkins思维导图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3a7c3b3321b3aaed8f1b2397692f06b5-224591" alt="jenkins思维导图"></p>
</li>
</ul>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul>
<li><strong>Jenkins中文社区：</strong><a href="http://jenkins-zh.cn/" target="_blank" rel="noopener">http://jenkins-zh.cn/</a></li>
<li><strong>Jenkins中文网：</strong><a href="http://www.jenkins.org.cn/" target="_blank" rel="noopener">http://www.jenkins.org.cn/</a></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要！CI倡导团队开发成员必须经常集成代码，甚至每天都可能发生多次集成，搭建Jenkins环境就显得尤为重要，这部分只能算是一个起步，还需要不断地阅读与探索！</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
  </entry>
  <entry>
    <title>Json Quick Start</title>
    <url>/2020/04/21/Json-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Json 之父 <strong>Douglas Crockford</strong>，真的需要瞻仰这种大神，越来越多不同行业的 IT从业者都想要或需要学习 Json（JavaScript Object Notation，JavaScript 对象表示法）。为什么需要学习Json？Rest API框架使用的就是Json进行数据的返回，还有很多公司也在用，比如百度。宏观上看， Json 是一种轻量的数据格式， 在各种地方传递数据，是一种数据交换格式，乃至规范。数据交换格式有很 多，如 XML（extensible markup language， 可扩展性标记语言），每个人都有自己的数据交换爱好，但是Json的高效让人不得不去了解，熟悉。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a><strong>专业术语</strong></h2><ol>
<li>表示法：一个用于表示诸如数字或单词等数据的字符系统；</li>
<li>数据交换格式：用于在不同的平台或系统间交换数据的文本；</li>
<li>可移植性：以一种对双方系统都兼容的方式在平台间传递信息；</li>
<li>名称 - 值对：键 - 值对、属性 - 值对或字段 - 值对等；</li>
<li>字面量：字面意思与其想要表达的意思是完全一致的值；</li>
<li>变量：通过形如 x 的标识符来表示的、可以修改的一类值；</li>
<li>最大可移植性（数据交换中）：通过保证数据本身对于平台和系统的兼容性来提供超越数据格式本身的可移植性；</li>
<li>内置类型（原始数据类型）：在不同的编程语言中，“一成不变”的数据类型；</li>
<li>复合数据类型：由原始数据类型融合而成的数据类型；</li>
</ol>
<h2 id="Json的格式-样例"><a href="#Json的格式-样例" class="headerlink" title="Json的格式(样例)"></a><strong>Json的格式(样例)</strong></h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"brand"</span>: <span class="string">"Nike"</span>,</span><br><span class="line">  <span class="attr">"color"</span>: <span class="string">"Pink"</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">"hasLaces"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><ol>
<li>Json中使用冒号（ : ）来分隔名称和值，名称始终在左侧，值始终在右侧，<strong>双引号</strong>中的名称可以是任何有效的字符串；</li>
<li>Json 这种数据交换格式是可以作为独立的文件存在于文件系统中的，文件扩展名为“.json”；</li>
<li>Json 的 MIME 类型是 application/json ；</li>
<li>Json支持语法嵌套；</li>
</ol>
<h2 id="JSON数据类型"><a href="#JSON数据类型" class="headerlink" title="JSON数据类型"></a>JSON数据类型</h2><ol>
<li>对象：JSON 本身就是对象；</li>
<li>字符串：使用双引号包含，其他形式都是错误的；</li>
<li>数字：可以是整数、小数、负数或者指数；</li>
<li>布尔值：使用小写形式： true 或 false ， 任何其他形式的写法都会报错；</li>
<li>null：表示“没有值”的值，， null 必须使用小写形式；</li>
<li>数组：数组始终应被方括号（ [] ）包裹，在数组中， 可以看到一个列表， 列表项之间用逗号隔开；数组里可以包含任何支持的数据类型。</li>
</ol>
<h2 id="Json注意事项"><a href="#Json注意事项" class="headerlink" title="Json注意事项"></a>Json注意事项</h2><ol>
<li>JSON 的字符串来说， 双引号也不是唯一一个需要转义的字符；<ol>
<li>/ （正斜线）</li>
<li>\b （退格符）</li>
<li>\f （换页符）</li>
<li>\t （制表符）</li>
<li>\n （换行符）</li>
<li>\r （回车符）</li>
<li>\u 后面跟十六进制字符（如笑脸表情 \u263A ）</li>
</ol>
</li>
</ol>
<h2 id="Json-Schema"><a href="#Json-Schema" class="headerlink" title="Json Schema"></a>Json Schema</h2><ol>
<li>数据交换 Schema：通过验证数据与 Schema 的一致性，轻松地定位和修复了错误，保证数据符合要求-数据交换中的一种虚拟的“合同”；</li>
<li>需要在 JSON 第一个名称 - 值对中，声明其为一个 schema 文件,第二个名称-值对应该是 JSON Schema 文件的标题,第三个名称值对中，要定义需要在 JSON 中包含的属性,接下来就能验证 JSON 是否符合 JSON Schema：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-04/schema#"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Cat"</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123; </span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"number"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Your cat's age in years."</span> </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">"declawed"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>JSON Schema 主页（<a href="http://json-schema.org/）" target="_blank" rel="noopener">http://json-schema.org/）</a>;</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Json是一种非常重要的数据交换规范,在SpringBoot中大量使用,了解其规范非常重要,这部分属于基础,后期在不同的项目中使用的时候再进行详细的使用介绍。</p>
]]></content>
      <categories>
        <category>Json</category>
      </categories>
  </entry>
  <entry>
    <title>Kali Proxy</title>
    <url>/2020/04/27/Kali-Proxy/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>kali是一款强大的安全测试工具集系统，这一部分主要介绍代理工具，为我们以后的渗透测试做准备工作，从基础原理到工具一步步的进入代理的世界！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="代理的相关"><a href="#代理的相关" class="headerlink" title="代理的相关"></a>代理的相关</h2><p>正向代理</p>
<p>反向代理</p>
<p>透明代理</p>
<h2 id="Mitmporxy"><a href="#Mitmporxy" class="headerlink" title="Mitmporxy"></a>Mitmporxy</h2><h2 id="Owasp-zap"><a href="#Owasp-zap" class="headerlink" title="Owasp-zap"></a>Owasp-zap</h2><ol>
<li>OWASP Zed Attack Proxy Project 攻击代理是一款查找网页应用程序漏洞的综合类渗透测试工具，包含了拦截代理、自动处理、被动处理、暴力破解、端口扫描以及蜘蛛搜索等功能；</li>
<li>OWASP ZAP属于会话类调试工具，调试功能对网站不会发起大量请求，对服务器的影响比较小；</li>
</ol>
<h2 id="Paros"><a href="#Paros" class="headerlink" title="Paros"></a>Paros</h2><ol>
<li>paros proxy是一个对web应用程序的漏洞进行评估的代理程序（基于Java），支持动态地编辑/查看Web通信记录程序、Web圈套程序、Hash计算器、还可以测试常见的Web应用程序攻击，检查的漏洞形式包括：SQL注入、跨站脚本攻击、目录遍历等；</li>
</ol>
<h2 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h2><ol>
<li>Burp Suite是用于Web攻击应用程序的集成平台；</li>
<li>带有一个默认8080端口的代理，使用这个代理，我们可以拦截并修改客户端到web应用程序的数据包；</li>
</ol>
<h2 id="Proxystrike"><a href="#Proxystrike" class="headerlink" title="Proxystrike"></a>Proxystrike</h2><h2 id="Vega"><a href="#Vega" class="headerlink" title="Vega"></a>Vega</h2><h2 id="Webscarab"><a href="#Webscarab" class="headerlink" title="Webscarab"></a>Webscarab</h2><hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Kali</category>
      </categories>
  </entry>
  <entry>
    <title>Kibana Quick Start</title>
    <url>/2020/05/11/Kibana-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.elastic.co/cn/elastic-stack" target="_blank" rel="noopener">Kibana</a>是一种开源分析和可视化工具，可通过基于浏览器的界面轻松搜索，可视化和探索大量数据。借助Elasticsearch和Kibana，几乎可以浏览任何类型的数据，从文本文档到机器日志，应用程序指标，电子商务流量，传感器遥测或公司的业务KPI，一旦数据进入Elasticsearch，就可以在Kibana中进行探索并与之交互！可以使用Kibana搜索栏搜索数据，使用各种图表类型可视化数据，并使用实时仪表板进行可视化处理；还可以在大屏幕上显示仪表板，以提供整个公司或办公室的可见性。<strong><em>确保ELK的版本保持一致。</em></strong> <strong>推荐书籍：《实战Elasticsearch、Logstash、Kibana——分布式大数据搜索与日志挖掘及可视化解决方案》· 高凯 编著</strong>   </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装并运行-7-6-2"><a href="#安装并运行-7-6-2" class="headerlink" title="安装并运行(7.6.2)"></a>安装并运行(7.6.2)</h2><ol>
<li><p>macOS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install kibana</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>kibana默认的网址是：<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a></p>
</li>
<li><p>配置：Kibana默认从$KIBANA_HOME/config/kibana.yml文件加载其配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>索引模式告诉Kibana您想探索哪些Elasticsearch索引，可以在Elasticsearch中为特定索引创建索引模式，也可以使用通配符*同时查询多个索引。在Kibana中可以有多个索引模式（就像数据库中有很多表一样）， 在创建可视化或搜索数据时，需要选择要在其上进行搜索的索引模式；</p>
</li>
<li><p>重要的导航栏：发现(Discover)，可视化(Visualize)和仪表板(Dashboard)</p>
<ol>
<li>发现(Discover)：搜索和过滤原始文档的地方，每个记录都表示为一行，可以展开各行以查看每个记录中的所有字段及其值</li>
<li>可视化(Visualize)：可以使用许多现成的图表创建可视化并研究数据的工具，有两个核心定义值：<ul>
<li>存储桶聚合：存储桶聚合将文档分为多个存储桶，每个存储桶可以包含多个文档，一个文档或根本不包含任何文档</li>
<li>指标聚合：创建存储桶后，指标聚合将为每个存储桶计算一个值</li>
</ul>
</li>
<li>仪表板(Dashboard)：可以从多个角度查看数据并在同一视图中与数据进行交互<ul>
<li>选择图表的区域以放大特定的时间范围</li>
<li>单击饼图中的一个切片以过滤该值</li>
</ul>
</li>
</ol>
</li>
<li><p>在Kibana的搜索中，有以下三种方式进行搜索：</p>
<ul>
<li>KQL (Kibana Query Language)</li>
<li>Lucene</li>
<li>DSL：适用于使用Kibana中的Dev tools</li>
</ul>
</li>
<li><p>可以使用 Kibana 来 search（查询），view（浏览）并且可以与存储在 Elasticsearch indices（索引）中的数据交互，可以很容易的以各种各样的 charts（图表），tables（表） 和 maps（地图） 样式来针对 data（数据）执行高级的 data analysis（数据分析）以及 visualize（ 可视化）；</p>
</li>
<li><p>基于浏览器的界面使得可以快速的创建并且实时显示修改的 Elasticsearch 查询的 dashboards（仪表盘）；</p>
</li>
<li><p>Kibana 服务在启动时从 kibana.yml 文件中获取属性，默认设置将Kibana配置为在localhost:5601上运行。需要更改主机或端口号，需要更新kibana.yml文件，还可以启动SSL并设置各种其它的选项：</p>
<ul>
<li>server.port :默认值 ，5601 Kibana，由后端服务器提供服务，此设置指定要使用的端口</li>
<li>server.host :默认值 ， “localhost” ，此设置指定后端服务器的主机</li>
<li>server.basePath :使您能够指定如果您在代理后运行的 Kibana 的路径</li>
<li>server.maxPayloadBytes :默认值 :，1048576 传入服务器请求的最大有效负载大小</li>
<li>server.name :默认值 “your-hostname” 用于标识此 Kibana 实例的可读的显示名称</li>
<li>server.defaultRoute :默认值 ，“/app/kibana” 此设置指定打开 Kibana 时的默认路由</li>
<li>elasticsearch.url :默认值 ，“<a href="http://localhost:9200”">http://localhost:9200”</a> 要用于所有查询的 Elasticsearch 实例的 URL</li>
<li>elasticsearch.preserveHost :默认值，true</li>
<li>kibana.index :默认值，“.kibana”Kibana 使用 Elasticsearch 中的索引来存储保存的搜索</li>
<li>kibana.defaultAppId :默认值， “discover” 要加载的默认应用程序</li>
<li>tilemap.url :Kibana 用于在 tilemap 可视化中显示地图图块的图块服务的 URL</li>
<li>tilemap.options.minZoom :默认值，1 最小缩放级别</li>
<li>tilemap.options.maxZoom :默认值，10 最大缩放级别</li>
<li>server.ssl.cert 和 server.ssl.key :分别指向 PEM 格式 SSL 证书和 SSL 密钥文件的路径</li>
<li>elasticsearch.ssl.ca :可选设置，使您能够为 Elasticsearch 实例指定证书颁发机构的 PEM 文件的路径</li>
<li>elasticsearch.ssl.verify :默认值，true 要忽略 SSL 证书的有效性，请将此设置的值更改为 false</li>
<li>… …</li>
</ul>
</li>
<li><p>Kibana 支持客户端请求和 Kibana 服务器发送到 Elasticsearch 的请求的 SSL 加密；</p>
</li>
<li><p>Elasticsearch不仅是开源分布式检索与数据处理平台，而且是一个基于Lucene构建的开源、分布式、RESTful信息检索框架；</p>
</li>
<li><p>ELK架构为数据分布式存储、可视化查询和日志解析创建了一个功能强大的管道链；</p>
</li>
<li><p>ELK对于大数据处理、信息检索以及搜索引擎研发、日志处理与分析、挖掘信息可视化等、对于设计高效的大型商业网站都具有重要的现实意义；</p>
</li>
<li><p>Elasticsearch支持服务器集群，节点之间是对等关系的（去中心话），Master节点多了维护集群状态的功能，每个节点上的集群状态数据都是实时同步的，Master节点出故障，会选出一个节点成为Master节点；</p>
</li>
<li><p>Elasticsearch API的简单使用：</p>
<ol>
<li>通过HTTP方式的JSON格式进行调用</li>
<li>通过Thrift软件框架方式，Thrift结合了功能强大的软件堆栈和代码生成引擎，以构建在C++、Java等编程语言间的无缝、高效服务</li>
<li>通过Memcached方式，分布式内存对象缓存系统，用于在动态系统中减少数据库负载，提升性能</li>
<li>节点客户端，以一个无数据节点的身份加入到集群中</li>
<li>传输客户端，更加轻量的传输客户端用来项远程集群发送请求</li>
</ol>
</li>
<li><p>Elasticsearch集群中各个节点都是通过9300端口进行通信；</p>
</li>
<li><p>Elasticsearch支持安装插件，可以下载插件然后在Elasticsearch的安装目录进行安装操作；</p>
</li>
<li><p>部分插件介绍：</p>
<ul>
<li>Analysis-ansj——ansj中文分词器</li>
<li>Analysis-ik——IK中文分词器</li>
<li>Analysis-mmseg——mmseg中文分词</li>
<li>Analysis-pinyin——拼音分词器</li>
<li>Analysis-string2int——字符串转整形工具，可以用在Facets、Aggregations功能上</li>
<li>Bigdesk——监控Elasticsearch状态</li>
<li>Head——对Elasticsearch进行多种操作的客户端工具</li>
<li>Inquisitor——调试查询</li>
<li>Kopf——网络管理</li>
</ul>
</li>
<li><p>Head是一个用来监控Elasticsearch状态的客户端插件，可以在github中查找<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a>：</p>
<ol>
<li><p>elasticsearch-head在高版本不再支持插件了，需要单独运行；</p>
</li>
<li><p>需要在Elasticsearch的配置文件中添加如下信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是docker则配置完了要重启一下容器，然后启动elasticsearch-head：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line">docker run -d -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器之后就可以在本地9100端口访问，效果如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5db98a2cdb5623becbc3c272d0059099-60822" alt="elasticsearch-head运行效果"></p>
</li>
</ol>
</li>
<li><p>Elasticsearch可以接受本地、共享以及云平台上的数据，在Lucene提供的基本功能上，通过构建分布式索引，完成对大数据的加工处理；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/71749631586178399fcc3b145da45172-155551" alt="Elasticsearch基本架构"></p>
</li>
<li><p>Elasticsearch 中建立索引的简要流程：</p>
<ol>
<li>准备待处理的文档；</li>
<li>将准备好的数据提交文档给Elasticsearch；</li>
<li>完成索引；</li>
<li>返回索引结果。</li>
</ol>
</li>
</ol>
<h2 id="文档索引及管理"><a href="#文档索引及管理" class="headerlink" title="文档索引及管理"></a>文档索引及管理</h2><ol>
<li><p>Elasticsearch中对文档的索引等进行操作时，既可以通过RESTful接口进行操作，也可以通过Java客户端进行操作；</p>
</li>
<li><p>文本数据首先要被加工处理，即建立索引文件之后才能被检索到；</p>
</li>
<li><p>建立索引方法有：</p>
<ul>
<li>倒排索引（最常用）</li>
<li>后缀数组索引</li>
<li>签名文件索引</li>
<li>… …</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e7fd24e4ced5dfd5c90cb94b19346c38-49292" alt="倒排索引示意"></p>
</li>
<li><p>一个关闭的索引将禁止写入或读取其中数据的操作，而一个打开的索引文件可以允许用户对其中的数据文件进行操作；</p>
</li>
<li><p>相对于Lucene的索引，Elasticsearch索引过程多了分布式数据的扩展，主要用Tranlog进行各个节点间的数据平衡；</p>
</li>
<li><p>Elasticsearch提供多种途径对文档进行诸如获取信息、增删该、更新等相关操作；</p>
</li>
<li><p>实现人机间自然语言的交互，意味着要使用计算机既能理解自然语言的意义，也能以自然语言文本来表达给定的意图、思想等。前者是自然语言处理（NLP，Natural Language Processing）,后者是自然语言生成；</p>
</li>
<li><p>在进行自然语言处理时，特别是对像中文这样的语言来说分词是非常必要的；</p>
</li>
</ol>
<h2 id="信息检索及结果过滤"><a href="#信息检索及结果过滤" class="headerlink" title="信息检索及结果过滤"></a>信息检索及结果过滤</h2><ol>
<li>在Elasticsearch中的RESTful接口方式中，完成信息检索功能的关键词是_search，通过POST方式发送到Elasticsearch，其后再跟“?q=查询词”等；</li>
<li>信息检索时，可简单地使用基于Lucene的通用检索语法，也可以使用灵活的基于JSON格式的Query DSL（Domain Special Language）来构造各种检索请求；</li>
<li>在处理字段、类型和查询时可以指定分析器；</li>
<li>Elasticsearch在执行带有filter的查询时，会打开索引的每个segment段文件，然后去判断里面的文档是否符合filter要求，并且这个匹配的结果用一个很大的只有两个状态的数组BitSet来存储;</li>
</ol>
<h2 id="信息统计分析与搜索提示"><a href="#信息统计分析与搜索提示" class="headerlink" title="信息统计分析与搜索提示"></a>信息统计分析与搜索提示</h2><ol>
<li>在面向关系型数据库管理系统中的SQL语句中，可以使用集函数完成简单的统计分析工作；</li>
<li>基于facets可以得到各种统计结果（可以是以数组形式返回单的）；</li>
<li>terms facets能够指定一个字段进行统计，Elasticsearch将返回在指定字段中使用最多的词项及其分布；</li>
<li>range facets可以允许指定区间并在这个区间内进行统计并获得指定字段的统计数据；</li>
<li>histogram facets是一种可以根据其返回值生成可以将来用于柱状图的统计数据；</li>
<li>date_histogram facets是一个增强型的专门针对于日期型字段进行统计的facets；</li>
<li>statistical facets 可以对数字类型的字段进行统计；</li>
<li>terms_stats facets是terms facets和statistical facets的组合形式，提供了在一个字段上基于另一个字段获得的取值进行统计的能力；</li>
<li>aggregations是facets的升级版，新版本中将废弃facets功能，相应的功能转而由aggregations替代；</li>
</ol>
<h2 id="Elasticsearch配置"><a href="#Elasticsearch配置" class="headerlink" title="Elasticsearch配置"></a>Elasticsearch配置</h2><ol>
<li>Elasticsearch.yml负责设置服务器的默认状态：<ol>
<li>集群名称 cluster.name: “ELK”</li>
<li>节点名称 node.name: “Franz Fafka”</li>
<li>节点是否为master节点 node.master: true</li>
<li>节点是否存储数据 node.data: true</li>
<li>设置绑定的IP地址 network.bind_host</li>
<li>设置节点和其他节点交互的TCP端口，默认是9300 transport.tcp.port</li>
<li>… …</li>
</ol>
</li>
<li>集群中的索引可能由多个分片构成，且每个分片可能拥有多个副本，通过将一个单独的索引分成多个分片，可以处理由于文件太大而不能在一个单一机器上运行的大型索引；</li>
<li>通过监控集群状态，可以使管理员了解集群的整体运行情况，这对及时发现可能存在的问题是很有必要的；</li>
</ol>
<h2 id="Kibana可视化"><a href="#Kibana可视化" class="headerlink" title="Kibana可视化"></a>Kibana可视化</h2><ol>
<li>信息可视化技术是利用计算机实现对抽象数据的可视表示,用来增强人们对抽象信息的感知;</li>
<li>河流模型是将得到的海量信息资源集合,按照时间维度构造一个类似河流的可视化显示方式;</li>
<li>关联分析模型是按照新闻报道的要素,通过提取并分析时间、地点、分类等属性，构造关联分析模型，用于发现它们之间可能存在的关联关系；</li>
<li>Kibana是由类似栅格的仪表盘构成的，而仪表盘是由行和面板组成的；</li>
<li>如果在本地启动Kibana，则可以使用浏览器打开<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a>;</li>
</ol>
<h2 id="Docker联合ELK"><a href="#Docker联合ELK" class="headerlink" title="Docker联合ELK"></a>Docker联合ELK</h2><ol>
<li><p>启动elasticsearch:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --name elasticsearch -e "ES_JAVA_OPTS=-Xms512m -Xmx512m"  -e "discovery.type=single-node"  -v "$PWD/esdata":/usr/share/elasticsearch/data -p 9200:9200 -d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动kibana：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm --name kibana --link elasticsearch:elasticsearch -p 5601:5601 -d kibana:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>logstash数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --name logstash -v /Users/wander/test/elk/logstash/data:/usr/share/logstash/config -p9900:9900 --link elasticsearch:elasticsearch logstash:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动elasticsearch-head：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>
</li>
<li><p>kibana中文（修改kibana中的配置文件kibana.yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.elastic.co/guide/cn/kibana/current/index.html" target="_blank" rel="noopener">官方用户手册</a></li>
<li><a href="https://www.elastic.co/guide/en/kibana/7.6/settings.html" target="_blank" rel="noopener">官方配置文档</a></li>
<li>谷歌插件：ElasticSearch Head </li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ELK的日志检索还是需要进行实际操作才能深有体会!</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
  </entry>
  <entry>
    <title>Learn How to Bak</title>
    <url>/2020/04/23/Learn-How-to-Bak/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>书到用时方恨少，备份也是一样！懂我什么意思吧？我中过招，研究生期间，将所有的内容放到一个3TB的硬盘中,然后没有备份的,然后因为格式问题,所有内容都没了,所有的东西,真的是,然后一切都需要重头开始!从那之后,我觉得重头再来也没什么,只要大脑还是好的,那就不是什么大问题,但是学会备份是真的很重要!</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><ol>
<li>tar命令可以归档文件，可以将多个文件和文件夹打包为单个文件，同时还能保留所有的文件属性，如所有者、权限等；</li>
<li>归档之后可以将归档文件压缩：<ol>
<li>gzip格式：file.tar.gz或file.tgz；</li>
<li>bzip2格式：file.tar.bz2；</li>
<li>Lempel-Ziv-Markov格式：file.tar.lzma；</li>
</ol>
</li>
<li>tar的命令那么多，实际上日常就知道怎么归档成压缩文件，以及解压缩文件就可以了；</li>
<li>cpio类似于tar，可以归档多个文件和目录，同时保留所有的文件属性，如权限、文件所有权等；</li>
<li>gzip是GNU/Linux平台下常用的压缩格式，使用gzip压缩文件，使用gunzip解压缩gzip文件；</li>
<li>zcat命令无需经过解压缩操作就可以将.gz文件的内容输出到stdout；</li>
<li>bzip2在功能和语法上与gzip类似，压缩率高；</li>
<li>squashfs程序能够创建出一种具有超高压缩率的只读型文件系统;</li>
<li>rsync可以在最小化数据传输量同时，同步不同位置上的文件和目录;</li>
<li>fsarchiver可以将整个磁盘分区中的内容保存成一个压缩归档文件;</li>
</ol>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>一定要定时备份重要的文档及数据，一旦丢失就得不偿失了！</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没什么好说的，就备份吧！</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Learn How to Design Your Code</title>
    <url>/2020/05/05/Learn-How-to-Design-Your-Code/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>编程是件有趣的事，是一种创造性的情感发泄，是一种用有形的方式表达抽象思维的方法!设计程序可以教会人们多种技能，如<strong>阅读判断、分析思考、综合创造以及关注细节</strong>等等。和数学一样，程序设计可以训练人的分析能力；和语文一样，设计程序可以增强学生的阅读和写作能力。<strong>推荐书籍：《如何设计程序 程序设计和计算引论》· [美] Matthias Felleisen著 黄林鹏 朱崇恺译   《程序是怎样跑起来的 How Program Works》· [日] 矢泽久雄著 李逢俊译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>基本程序设计步骤：<ol>
<li>问题分析和数据定义：问题数据类型描述</li>
<li>合约，用途说明与结果的描述，函数头部：程序行为的非形式描述</li>
<li>例子：说明程序行为的例子</li>
<li>函数模板：开发程序的模板或视图</li>
<li>函数定义：把模板转换成完整的定义</li>
<li>测试：通过测试发现错误</li>
</ol>
</li>
<li>加载到内存中的机器语言程序，由 CPU 进行解析和运行，进而计算机系统整体的控制和数据运算也开始运行;</li>
<li>无论任何事情， 了解其本质非常重要，只有了解了本质才能提高利用效率；</li>
<li>CPU负责的就是解释和运行最终转换成机器语言的程序内容，内部由寄存器、控制器、运算器和时钟四个部分构成， 各部分之间由电流信号相互连通。主要关注的就是寄存器，因为程序是把寄存器作为对象来描述的；</li>
<li>无论当前累加寄存器的运算结果是负数、零还是正数， 标志寄存器都会将其保存（也负责存放溢出和奇偶校验的结果 )；</li>
<li>return 命令的功能是把保存在栈中的地址设定到程序计数器中；</li>
<li>变址寄存器的值就相当于高级编程语言程序中数组的索引功能；</li>
</ol>
<h2 id="程序数据存储"><a href="#程序数据存储" class="headerlink" title="程序数据存储"></a>程序数据存储</h2><ol>
<li>IC 的一个引脚，只能表示两个状态，决定了计算机的信息数据只能用二进制数来处理；</li>
<li>二进制数左移后就会变成原来的 2 倍、4 倍、8 倍……反之， 二进制数右移后则会变成原来的1/2、1/4、1/8……；</li>
<li>补数就是用正数来表示负数，计算机在做减法运算时， 实际上内部是在做加法运算；</li>
<li>0 包含在正数范围内， 所以负数就要比正数多 1 个，主要是计算机设计的时候考虑加法用减法来表示；</li>
<li>小数点后面部分的位权， 第 1 位是 2的－1 次幂、第 2 位是 2 的－2 次幂，以此类推。<strong>有一些十进制数的小数无法转换成二进制数</strong>；</li>
<li>浮点数是指用符号、尾数、基数和指数这四部分来表示的小数，双精度浮点数类型用 64 位、单精度浮点数类型用 32 位来表示全体小数；</li>
<li>对于浮点数的计算出错，可以采取回避策略， 即无视这些错误或者把小数转换成整数来计算；</li>
<li>虚拟内存的方法有分页式和分段式两种，虚拟内存无法彻底解决内存不足的问题：<ol>
<li>通过 DLL 文件实现函数共有</li>
<li>通过调用 _stdcall 来减小程序文件的大小</li>
</ol>
</li>
</ol>
<h2 id="技术黑话"><a href="#技术黑话" class="headerlink" title="技术黑话"></a>技术黑话</h2><ol>
<li>PV：Page View，页面访问量，每日每个网站的总PV量是形容一个网站规模的重要指标；</li>
<li>CDN：Content Delivery Network， 内容分发网络，对访问流量进行分散；</li>
<li>任何网站的发展都不是一蹴而就的，通常是在什么阶段采用什么技术；</li>
<li>好的架构是进化来的，不是设计来的！</li>
<li>架构设计的过程：基本是⼀个填坑与挖坑的过程！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>了解一部分的计算机组成原理，为什么那样设计，还有知道要设计的内容需要哪些技术来支持，重点分析需求，良好的设计风格，慢慢采坑填坑！真的没有纸上的设计，只有实战才能获取更多！</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Performance Analysis &amp; Optimization</title>
    <url>/2020/04/30/Linux-Performance-Analysis-Optimization/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>性能优化大师布伦丹·格雷格的<a href="http://brendangregg.com" target="_blank" rel="noopener">网址</a>，对Linux系统进行优化，其实就是找出应用或系统的瓶颈，并设法去避免或者缓解它们！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li>性能优化的步骤：<ul>
<li>选择指标评估应用程序和系统的性能</li>
<li>为应用程序和系统设置性能目标</li>
<li>进行性能基准测试</li>
<li>性能分析定位瓶颈</li>
<li>优化系统和应用程序</li>
<li>性能监控和告警</li>
</ul>
</li>
<li>建立整体系统性能全局观，需要：<ul>
<li>理解最基本的几个系统知识原理</li>
<li>掌握必要的性能工具</li>
<li>通过实际的场景演练，贯穿不同的组件</li>
</ul>
</li>
<li>选择合适的性能工具，可以大大简化整个性能优化过程，但是<strong>千万不要把性能工具当成学习的全部</strong>，工具只是解决问题的手段，关键在于利用工具的方法，只有真正理解了它们背后原理，并且结合具体场景，融合贯通系统的不同组件，才能真正掌握它们；</li>
<li><strong>实践以及良好的记录才可以让学习更高效！</strong></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Platform</title>
    <url>/2020/04/27/Linux-Platform/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Linux是一个很好的平台，因为它是一个透明的系统,特别是大多数系统配置都存放在文本文件中，让人一目了然!Linux这样的现代操作系统非常复杂，内部有多得令人眼花缭乱的各种组件在同步运行和相互通信。学会使用<strong>抽象思维</strong>来思考问题！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol>
<li>Linux操作系统主要分为三层，最底层是硬件系统，包括内存和中央处理器等；硬件系统之上是内核，它是操作系统的核心，内核管理硬件系统，是硬件系统和应用程序之间进行通信的接口；进程是指计算机中运行的所有程序，由内核统一管理，它们组成了最顶层，称为<strong>用户空间</strong>；</li>
<li>内核在内核模式（kernel mode）中运行，而用户进程则在用户模式（user mode）中运行；</li>
<li>只有内核可以访问的空间我们称为内核空间（kernel space）；用户空间指的是那些用户进程能够访问的内存空间；</li>
<li>内核负责管理：</li>
</ol>
<ul>
<li>进程：内核决定哪个进程可以使用CPU</li>
<li>内存：内核管理所有的内存，为进程分配内存，管理进程间的共享内存以及空闲内存</li>
<li>设备驱动程序：作为硬件系统（如磁盘）和进程之间的接口，内核负责操控硬件设备</li>
<li>系统调用和支持：进程通常使用系统调用和内核进行通信</li>
</ul>
<ol start="5">
<li>一个进程让出CPU使用权给另一个进程称为上下文切换（context switch）；</li>
<li><strong>内核是在上下文切换时的时间段间隙中运行的</strong>；</li>
<li>系统调用（system call或syscall）为进程执行一些它们不擅长或无法完成的工作，比如打开、读取和写文件这些操作都涉及系统调用；</li>
<li>虚拟设备对于用户进程而言是物理设备，但是通过软件来实现的；</li>
<li>用户机制主要用于权限管理,用户组是指一组用户的集合。用户组的主要作用是允许一个用户同组内的其他用户共享文件权限;</li>
</ol>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ol>
<li>cat：显示一个或者多个文件的内容；</li>
<li>ls：显示指定目录的内容，默认参数为当前目录；</li>
<li>cp：用来复制文件；</li>
<li>mv：用来重命名或者移动文件；</li>
<li>touch：用来创建文件，如果文件已经存在，则该命令会更新文件的时间戳；</li>
<li>rm：删除文件，文件一旦被删除通常无法恢复；</li>
<li>echo：将它的参数显示到标准输出；</li>
<li>cd：用来设置当前工作目录；</li>
<li>mkdir：用来创建新目录；</li>
<li>rmdir：用来删除目录，使用rm -rf来删除一个目录以及其中的所有内容；</li>
<li>pwd：输出当前的工作目录名；</li>
<li>diff：用来查看两个文件之间的不同；</li>
<li>file：查看一个文件的格式信息；</li>
<li>find，locate：查找文件；</li>
<li>sort：将文件内的所有行按照字母顺序快速排序；</li>
<li><strong>man：获取系统的帮助；</strong><!--如果有不会的命令那就man一下--></li>
<li>&gt;&amp;：将标准输出和标准错误输出重定向到同一个地方；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把标准输出和标准错误输出重定向到文件f中</span></span><br><span class="line">ls &gt; f 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<ol start="18">
<li>&lt;：操作符将文件内容重定向为命令的标准输入；</li>
<li>ps：列出所有正在运行的进程；</li>
<li>kill：发送一个信号给指定的进程；</li>
<li>任务控制命令：<ol>
<li>fg：将进程置于前台；</li>
<li>bg：将进程移入后台；</li>
<li>jobs：查看暂停了哪些进程；</li>
<li>&amp;：将进程设置为后台运行；</li>
</ol>
</li>
<li>chmod：更改文件权限；</li>
<li>ln -s：创建符号链接；</li>
<li>sudo：以root用户身份执行命令；</li>
</ol>
<h2 id="Linux设备管理"><a href="#Linux设备管理" class="headerlink" title="Linux设备管理"></a>Linux设备管理</h2><ol>
<li>在Unix系统中操纵大多数设备都很容易，因为很多I/O接口都是以文件的形式由内核呈现给用户的；</li>
<li>设备类型：</li>
</ol>
<ul>
<li>块设备：按固定的块大小读取数据</li>
<li>字符设备：只能对字符设备读取和写入字符数据</li>
<li>管道设备：输入输出端不是内核驱动程序，而是另外一个进程</li>
<li>套接字设备：跨进程通信经常用到的特殊接口</li>
<li>终端设备：在用户进程和输入输出设备之间传送字符</li>
</ul>
<ol start="3">
<li>dd命令是从输入文件和输入流读取数据然后写入输出文件和输出流，在此过程中可能涉及到编码转换；</li>
<li><strong>小型计算机系统接口（Small Computer System Inteface，SCSI）；</strong></li>
<li>mknod命令用来创建设备，必须知道设备名以及主要和次要编号，可以用于在系统恢复的时候创建丢失的设备文件；</li>
</ol>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ol>
<li><p><strong>分区</strong>是对整块磁盘的进一步划分,内核将分区用块设备呈现，如同每个分区是一整块的磁盘,分区数据存放在磁盘上的分区表中;</p>
</li>
<li><p><strong>文件系统</strong>是用户空间中与你日常交互的文件和目录数据库;</p>
</li>
<li><p>分区表：</p>
<ol>
<li>主引导记录（Master Boot Record，MBR）</li>
<li>全局唯一标识符分区表（Globally Unique Identifier Partition Table，GPT）</li>
</ol>
</li>
<li><p>虚拟文件系统（Virtual File System，以下简称VFS）负责文件系统的具体实现；</p>
</li>
<li><p>第四扩展文件系统（ext4）：支持更大的文件和更多的子目录个数；</p>
</li>
<li><p>mkfs能够自己决定设备上的块数量并且设置适当的默认值，用来创建文件系统；</p>
</li>
<li><p>系统可以通过使用磁盘空间来扩展内存容量，如果出现内存空间不足的情况，Linux虚拟内存系统会自动将内存中的进程移出至磁盘以及从磁盘移入内存，用来保存内存页面的磁盘空间我们称为交换空间；</p>
</li>
<li><p>创建交换分区：</p>
<ol>
<li>确保分区为空</li>
<li>运行mkswap dev，其中dev是分区设备</li>
<li>运行swapon dev向内核注册</li>
<li>在/etc/fstab文件中创建一个新的交换条目，这样系统在重启之后即可使用该交换空间</li>
</ol>
</li>
<li><p>如果不想重新分区或者不想新建交换分区的话，你可以使用常规文件作为交换空间：</p>
<ol>
<li>创建一个空文件：dd if=/dev/zero of=swap_file bs=1024k count=num_mb</li>
<li>将其初始化为交换空间：mkswap swap_file</li>
<li>将其加入交换池：swapon swap_file</li>
</ol>
</li>
<li><p>可以使用<strong>swapoff命令来删除交换分区或交换文件</strong>；</p>
</li>
<li><p><strong>高性能网络服务器需要尽可能避免磁盘存取和交换空间；</strong></p>
</li>
<li><p>传统的Unix文件系统有两个基础组件：一个用来存储数据的数据块池和一个用来管理数据池的数据库系统；</p>
</li>
</ol>
<h2 id="内核启动"><a href="#内核启动" class="headerlink" title="内核启动"></a>内核启动</h2><ol>
<li>简化流程：<ol>
<li>BIOS或者启动固件加载并运行引导装载程序</li>
<li>引导装载程序在磁盘上找到内核映像，将其载入内存并启动</li>
<li>内核初始化设备及其驱动程序</li>
<li>内核挂载root文件系统</li>
<li>内核使用PID 1来运行一个叫init的程序，用户空间在此时开始启动</li>
<li>init启动其他的系统进程</li>
<li>init还会启动一个进程，通常发生在整个过程的尾声，负责用户登录</li>
</ol>
</li>
<li>在启动时，Linux内核的初始化过程:<ol>
<li>检查CPU</li>
<li>检查内存</li>
<li>检测设备总线</li>
<li>检测设备</li>
<li>设置附加内核子系统（如网络等）</li>
<li>挂载root目录</li>
<li>启动用户空间</li>
</ol>
</li>
<li>运行Linux内核的时候，引导装载程序会向内核传递一系列文本形式的<strong>内核参数</strong>来设定内核的启动方式；</li>
<li>几乎所有的磁盘设备都由固件系统供BIOS通过线性块寻址（Linear Block Addressing）来访问硬件，引导装载程序往往是唯一使用BIOS访问磁盘的程序；</li>
<li>GRUB工作原理：<ol>
<li>BIOS或者固件初始化硬件，在启动存储设备上寻找启动代码</li>
<li>BIOS和固件运行找到的启动代码，开始GRUB</li>
<li>加载GRUB核心</li>
<li>初始化GRUB核心，此时GRUB可以读取磁盘和文件系统</li>
<li>GRUB识别启动分区，在那里加载配置信息</li>
<li>GRUB为用户提供一个更改配置的机会</li>
<li>超时或者用户完成操作以后，GRUB执行配置</li>
<li>执行过程当中，GRUB可能会在启动分区中加载额外的代码</li>
<li>GRUB执行boot命令，以加载和执行配置信息中linux命令指定的内核</li>
</ol>
</li>
</ol>
<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><ol>
<li>计算机硬件有一个使用电池的实时时钟（Real-time Clock，RTC），将硬件时钟设置为通用协调时间（Universal Coordinated Time，UTC），这样可以避免不同时区和夏令时带来的问题；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hwclock --hctosys --utc</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用ntpdate（或者ntpd）从网络设置系统时间，然后使用硬件时钟命令进行同步；</li>
<li>crontab：可以在任何时间运行任何程序（定时任务）；</li>
<li>at：在将来的某一时刻一次性运行任务；</li>
</ol>
<h2 id="进程以及资源"><a href="#进程以及资源" class="headerlink" title="进程以及资源"></a>进程以及资源</h2><ol>
<li>top命令将系统中最活跃的进程显示在最上方；</li>
<li>lsof命令列出打开的文件以及使用它们的进程；</li>
<li>strace（系统调用跟踪）和ltrace（系统库跟踪）命令能够帮助你了解程序试图执行哪些操作；</li>
<li>很多进程只有一个线程，叫单线程进程，有超过一个线程的叫多线程进程，多个线程可以同时在多个处理器上运行，ps和top命令添加-m选项可以看线程信息；</li>
<li>uptime命令显示三个平均负载值和内核已经运行的时长；</li>
<li>iostat在不带任何参数时显示系统当前的运行时间信息；</li>
<li><strong>iotop是为数不多的显示线程而非进程的工具；</strong></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Linux上还有很多内容,比如shell的讲解需要单独的去记录,也算是对一本书里我认为重要的内容的记录!书名:《How Linux Works 2nd Edition》（《精通Linux》第二版 姜南 袁志鹏译），如果想获取更多的知识，可以自行阅读，可能收获的更多！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 三剑客</title>
    <url>/2020/04/23/Linux-%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>shell脚本语言包含了众多用于解决Unix/Linux系统问题的工具，其中有不少和文本处理相关,包括sed、awk、grep和cut，这些工具可以相互结合以满足文本处理需求。这些命令的熟练掌握可以使得我们的Shell脚本编程达到新的层次。这些实用工具能够帮助我们在不同的层面上处理文本文件，比如字符、行、单词、行列等。正则表达式是一种基础的模式匹配技术。大多数文本处理工具都支持正则表达式。借助适合的正则表达式，我们可以对文本文件执行过滤、剥离（strip）、替换、搜索等操作。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol>
<li>正则表达式是基于模式匹配的文本处理技术的关键所在，想要有效地运用正则表达式，就必须对其有一个基本的理解；</li>
<li>[a-z0-9_]+ @[a-z0-9]+.[a-z]+.就是一个典型的能够匹配电子邮件地址的正则表达式；</li>
<li>正则表达式是由字面文本和具有特殊意义的符号组成的，可以根据需要，构造出适合的正则表达式来匹配任何文本；</li>
</ol>
<h2 id="正则表达式规则"><a href="#正则表达式规则" class="headerlink" title="正则表达式规则"></a>正则表达式规则</h2><ol>
<li><strong>位置标记锚点：</strong>标识字符串位置的正则表达式：<ol>
<li>^：指定了匹配正则表达式的文本必须起始于字符串的首部；</li>
<li>$：指定了匹配正则表达式的文本必须结束于目标字符串的尾部。</li>
</ol>
</li>
<li><strong>标识符：</strong>定义了那些为了匹配正则表达式，必须存在或不存在的字符：<ol>
<li>A字符：正则表达式必须匹配该字符；</li>
<li>.：匹配任意一个字符；</li>
<li>[]：匹配括号内的任意一个字符，中括号内可以是一个字符组或字符范围；</li>
<li>[^]：匹配不在括号中的任意一个字符，中括号内可以是一个字符组或字符范围。</li>
</ol>
</li>
<li><strong>数量修饰符：</strong>一个标识符可以出现一次、多次或是不出现：<ol>
<li>?：匹配之前的项1次或0次；</li>
<li>+：匹配之前的项一次或多次；</li>
<li>*：匹配之前的项0次货多次；</li>
<li>{n}：匹配之前的项n次；</li>
<li>{n, }：之前的项至少匹配n次；</li>
<li>{n,m}：之前的项必须匹配最小n次，最大m次，m&gt;n。</li>
</ol>
</li>
<li><strong>其他匹配符：</strong><ol>
<li>()：将括号中的内容视为一个整体；</li>
<li>|：指定了一种选择结构，可以匹配|两边的任意一项；</li>
<li>\：转义字符可以转义之前介绍的特殊字符。</li>
</ol>
</li>
<li>样例：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按照模式匹配ip地址格式，但是不验证ip的合法性</span></span><br><span class="line">echo "hello 999.168.2.3 nice" |egrep -e "[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;" -o</span><br><span class="line">echo "hello 999.168.2.3 nice" |egrep -e "[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;\.[[:digit:]]&#123;1,3&#125;" -o</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>grep命令默认使用基础正则表达式，选项-E可以使grep使用扩展正则表达式；</li>
<li>默认启用扩展正则表达式的egrep命令；</li>
<li>选项-o可以只输出匹配到的文本；</li>
<li>选项-v可以打印出不匹配match_pattern的所有行；</li>
<li>选项-c能够统计出匹配模式的文本行数，并不是匹配的次数；</li>
<li>如果需要在多级目录中对文本进行递归搜索，可以使用命令：grep “text” . -R -n；</li>
<li>选项-i可以在匹配模式时不考虑字符的大小写；</li>
<li>选项-e可以指定多个匹配模式；</li>
<li>选项-f可以读取文件并使用其中的模式（一个模式一行）；</li>
<li><strong>grep可以在搜索过程中使用通配符指定（include）或排除（exclude）某些文件；</strong></li>
</ol>
<h2 id="cut命令切分文件"><a href="#cut命令切分文件" class="headerlink" title="cut命令切分文件"></a>cut命令切分文件</h2><ol>
<li>cut命令可以按列，而不是按行来切分文件；</li>
<li>cut命令能够提取指定位置或列之间的字符，可以指定每列的分隔符；<ol>
<li>选项-f可以指定要提取的字段，由列号组成，彼此之间用逗号分隔：cut -f 2,3 filename；</li>
<li>选项-d能够设置分隔符；</li>
<li>–complement选项显示出没有被-f指定的那些字段(mac上没有);</li>
<li>选项–output-delimiter可以指定输出分隔符(mac上没有)。</li>
</ol>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以：为分隔符，取出第7段</span></span><br><span class="line">cat /etc/passwd |cut -f 7 -d ":"</span><br></pre></td></tr></table></figure>

<h2 id="sed流编辑器"><a href="#sed流编辑器" class="headerlink" title="sed流编辑器"></a>sed流编辑器</h2><ol>
<li>sed是stream editor（流编辑器）的缩写，最常见的用法是进行文本替换；</li>
<li>sed可以使用另一个字符串来替换匹配模式，模式可以是简单的字符串或正则表达式：sed ‘s/pattern/replace_string/‘ file；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -d : -f 1,3|sed 's/:/ -UID:/'</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>g标记可以使sed执行全局替换:sed ‘s/pattern/replace_string/g’ file;</li>
<li>/#g标记可以使sed替换第N次出现的匹配;</li>
<li>sed命令会将s之后的字符视为命令分隔符:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面的操作是相同的</span></span><br><span class="line">cat /etc/passwd | cut -d : -f 1,3|sed 's/:/ -UID:/g'</span><br><span class="line">cat /etc/passwd | cut -d : -f 1,3|sed 's:\:: -UID\::g'</span><br><span class="line">cat /etc/passwd | cut -d : -f 1,3|sed 's|:| -UID:|g'</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>空行可以用正则表达式 ^$ 进行匹配,sed可以移除空行：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed '/^$/d' file</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>就地（in place）修改文件内容，可以使用选项-i：sed ‘s/PATTERN/replacement/‘ -i filename；</li>
<li>在sed中，我们可以用&amp;指代模式所匹配到的字符串：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is an example | sed 's/\w\+/[&amp;]/g'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出：[this] [is] [an] [example]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式\w\+匹配每一个单词</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>可以使用# 来指代出现在括号中的部分正则表达式所匹配到的内容：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出： this is 7 <span class="keyword">in</span> a number</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> \(pattern\)用于匹配子串</span></span><br><span class="line"></span><br><span class="line">echo seven EIGHT | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出： EIGHT seven</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> \1和\2分别用来引用这两个单词</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>可以利用管道组合多个sed命令，多个模式之间可以用分号分隔，或是使用选项-e PATTERN:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 'expression' | sed 'expression'</span><br><span class="line">sed 'expression; expression'</span><br><span class="line">sed -e 'expression' -e 'expression'</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>sed表达式通常用单引号来引用,也可以使用双引号,shell会在调用sed前先扩展双引号中的内容;</li>
</ol>
<h2 id="高级文本处理awk"><a href="#高级文本处理awk" class="headerlink" title="高级文本处理awk"></a>高级文本处理awk</h2><ol>
<li>awk命令可以处理数据流。它支持关联数组、递归函数、条件语句等功能；</li>
<li>awk脚本的结构：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk 'BEGIN&#123;print "start" &#125; pattern &#123; commands &#125; END&#123; print "end" &#125;' file</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>awk脚本通常由3部分组成：BEGIN、END和带模式匹配选项的公共语句块,这3个部分都是可选的，可以不用出现在脚本中;</li>
<li>处理规则：<strong>awk以逐行的形式处理文件。BEGIN之后的命令会先于公共语句块执行。对于匹配PATTERN的行，awk会对其执行PATTERN之后的命令。最后，在处理完整个文件之后，awk会执行END之后的命令；</strong></li>
<li>统计文件的行数：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk 'BEGIN &#123; i=0 &#125; &#123; i++ &#125; END &#123; print i&#125;' filename</span><br><span class="line">awk "BEGIN &#123; i=0 &#125; &#123; i++ &#125; END &#123; print i &#125;" filename</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>模式本身可以是正则表达式、条件语句以及行范围等。如果当前行匹配该模式，则执行{ }中的语句。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "line1\nline2" | awk 'BEGIN &#123; print "Start" &#125; &#123; print &#125; END &#123; print "End" &#125; '</span><br><span class="line"><span class="meta">#</span><span class="bash">输出：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> line1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> line2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> End</span></span><br></pre></td></tr></table></figure>

<h2 id="awk的补充"><a href="#awk的补充" class="headerlink" title="awk的补充"></a>awk的补充</h2><ol>
<li><strong>特殊变量：</strong><ol>
<li>NR：表示记录编号，当awk将行作为记录时，该变量相当于当前行号；</li>
<li>NF：表示字段数量，在处理当前记录时，相当于字段数量，默认的字段分隔符是空格；</li>
<li>$0：该变量包含当前记录的文本内容；</li>
<li>$1：该变量包含第一个字段的文本内容；</li>
<li>$2：该变量包含第二个字段的文本内容；</li>
</ol>
</li>
<li>选项-v，我们可以将外部值（并非来自stdin）传递给awk;</li>
<li>awk默认读取文件中的所有行,如果只想读取某一行，可以使用getline函数:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读取第一行</span></span><br><span class="line">seq 5 | awk 'BEGIN &#123; getline; print "Read ahead first line", $0 &#125; &#123;print $0&#125;'</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>选项-F指定不同的分隔符，可以在BEGIN中使用 FS指定，在BEGIN语句块中可以用OFS=”delimiter”设置输出字段分隔符；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按照：进行分割，<span class="variable">$0</span> 输出全部，<span class="variable">$1</span> 第一个</span></span><br><span class="line">cat /etc/passwd|awk -F: '&#123;print $0&#125;'</span><br><span class="line">awk 'BEGIN &#123; FS=":" &#125; &#123; print $0 &#125;' /etc/passwd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>除了数字和字符串类型的变量，awk还支持关联数组,关联数组是一种使用字符串作为索引的数组,可以通过中括号中索引的形式来分辨出关联数组；</li>
<li>在awk中可以使用for循环，其格式与C语言中的差不多，awk还支持列表形式的for循环:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 循环输出</span></span><br><span class="line">echo | awk '&#123;for(i=0;i&lt;10;i++)&#123;print i;&#125;&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从/etc/password中读取文本行，以:作为分隔符将行分割成字段，然后创建一个关联数组</span></span><br><span class="line">awk 'BEGIN &#123;FS=":"&#125; &#123;nam[$1]=$5&#125; END &#123;for (i in nam) &#123;print i,nam[i]&#125;&#125;' /etc/passwd</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>awk内建的字符串处理函数:</strong><ol>
<li>length(string)：返回字符串string的长度;</li>
<li>index(string, search_string)：返回search_string在字符串string中出现的位置;</li>
<li>split(string, array, delimiter)：以delimiter作为分隔符，分割字符串string，将生成的字符串存入数组array;</li>
<li>substr(string, start-position, end-position) ： 返回字符串 string 中以start-position和end-position作为起止位置的子串;</li>
<li>sub(regex, replacement_str, string)：将正则表达式regex匹配到的第一处内容替换成replacment_str;</li>
<li>gsub(regex, replacement_str, string)：和sub()类似,不过该函数会替换正则表达式regex匹配到的所有内容;</li>
<li>match(regex, string)：检查正则表达式regex是否能够在字符串string中找到匹配,如果能够找到，返回非0值；否则，返回0。match()有两个相关的特殊变量，分别是RSTART和RLENGTH。变量RSTART包含了匹配内容的起始位置，而变量RLENGTH包含了匹配内容的长度;</li>
</ol>
</li>
</ol>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol>
<li>统计词频(模式\b[[:alpha:]]+\b能够匹配每个单词并去除空白字符和标点符号)：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件名：word_freq.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用途: 计算文件中单词的词频</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ]; </span><br><span class="line">then</span><br><span class="line">	echo "Usage: $0 filename";</span><br><span class="line">	exit -1 </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">filename=$1 </span><br><span class="line">egrep -o "\b[[:alpha:]]+\b" $filename | awk '&#123; count[$0]++ &#125; END&#123;printf("%-14s%s\n","Word","Count") ; for(ind in count) &#123; printf("%-14s%d\n",ind,count[ind]); &#125; &#125;' | sort</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可以用paste命令实现按列合并；</li>
<li>打印从M行到N行之间的文本: awk ‘NR==M, NR==N’ filename;</li>
<li>能够匹配电子邮件地址的正则表达式: [A-Za-z0-9._]+@[A-Za-z0-9.]+.[a-zA-Z]{2,4}</li>
<li>匹配HTTP URL与匹配电子邮件地址类似，只是不需要匹配name@部分: http://[a-zA-Z0-9.]+.[a-zA-Z]{2,3}</li>
</ol>
<p></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会使用Linux三剑客，基本上就能写出很多符合一定规则的脚本来处理特定的问题，这部分还需要多多练习，然后才能根据文本的特点写出可以的脚本，最终简化自己的日常办公。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Lua 使用填坑</title>
    <url>/2020/06/03/Lua-%E4%BD%BF%E7%94%A8%E5%A1%AB%E5%9D%91/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua 是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的，该小组成员有：Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="在文件中指定搜索路径"><a href="#在文件中指定搜索路径" class="headerlink" title="在文件中指定搜索路径"></a>在文件中指定搜索路径</h2><ol>
<li><p>如果使用到了自己写的C库或者第三方库，想让lua编译到自己指定的目录下寻找*.lua或*.so文件的时候，可以在自己的Lua代码指定require搜索的路径；</p>
</li>
<li><p>搜索lua模块：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">path</span> = <span class="string">'/Volumes/Daily/Project/nlu2luajson/LUA-File/DB/?.lua;/Volumes/Daily/Project/nlu2luajson/LUA-File/basefile/?.lua;'</span> <span class="comment">--搜索lua模块</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索so模块：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">cpath</span> = <span class="string">'/usr/local/lib/lua/5.1/?.so;'</span>        <span class="comment">--搜索so模块</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="Mac安装luarocks"><a href="#Mac安装luarocks" class="headerlink" title="Mac安装luarocks"></a>Mac安装luarocks</h2><ol>
<li><p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install luarocks</span><br></pre></td></tr></table></figure>
</li>
<li><p>luarocks<a href="https://luarocks.org/" target="_blank" rel="noopener">官方网址</a>：可以看到最新的安装包，以及最热下载等</p>
</li>
<li><p>安装命令示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">luarocks install lua-resty-http</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="安装数据库驱动以及使用"><a href="#安装数据库驱动以及使用" class="headerlink" title="安装数据库驱动以及使用"></a>安装数据库驱动以及使用</h2><ol>
<li><p>安装不同类型的数据库驱动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">luarocks install luasql-sqlite3</span><br><span class="line">luarocks install luasql-postgres</span><br><span class="line">luarocks install luasql-mysql</span><br><span class="line">luarocks install luasql-sqlite</span><br><span class="line">luarocks install luasql-odbc</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接mysql数据库：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"></span><br><span class="line">luasql=<span class="built_in">require</span>(<span class="string">"luasql.mysql"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建环境对象</span></span><br><span class="line">env = luasql.mysql()</span><br><span class="line"></span><br><span class="line"><span class="comment">--连接数据库</span></span><br><span class="line"><span class="comment">--conn = env:connect("数据库名","用户名","密码","IP地址",端口)</span></span><br><span class="line">conn = env:connect(<span class="string">"ota"</span>,<span class="string">"root"</span>,<span class="string">"helloworld"</span>,<span class="string">"localhost"</span>,<span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置数据库的编码格式</span></span><br><span class="line">conn:<span class="built_in">execute</span><span class="string">"SET NAMES UTF8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--执行数据库操作</span></span><br><span class="line">cur = conn:<span class="built_in">execute</span>(<span class="string">"select * from device_da"</span>)</span><br><span class="line"></span><br><span class="line">row = cur:fetch(&#123;&#125;,<span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--文件对象的创建</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"role.txt"</span>,<span class="string">"w+"</span>);</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(row) <span class="keyword">do</span></span><br><span class="line">	var = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%s %s\n"</span>, k, v)</span><br><span class="line">	<span class="built_in">print</span>(var)</span><br><span class="line">	file:<span class="built_in">write</span>(var)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file:<span class="built_in">close</span>()  <span class="comment">--关闭文件对象</span></span><br><span class="line">conn:<span class="built_in">close</span>()  <span class="comment">--关闭数据库连接</span></span><br><span class="line">env:<span class="built_in">close</span>()   <span class="comment">--关闭数据库环境</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">updated 2020-05-10 01:07:14</span><br><span class="line">city_name 北京市</span><br><span class="line">province_id 10000</span><br><span class="line">device_package_name DA_12345_display_1.png</span><br><span class="line">province_name 北京市</span><br><span class="line">device_model 11111</span><br><span class="line">device_name OTT</span><br><span class="line">platform display</span><br><span class="line">device_type DA</span><br><span class="line">created 2020-05-10 01:07:14</span><br><span class="line">city_id 101010100</span><br><span class="line">sn 0000D911377778888203206688770000</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="cjson安装及使用"><a href="#cjson安装及使用" class="headerlink" title="cjson安装及使用"></a>cjson安装及使用</h2><ol>
<li><p>使用luarocks安装cjson：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果你是lua5.3以上 去除旧安装的</span></span><br><span class="line">luarocks remove lua-cjson</span><br><span class="line">luarocks install lua-cjson 2.1.0-1</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不换版本，可能会出现下面的问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error loading module 'cjson' from file '/usr/local/lib/lua/5.3/cjson.so':</span><br><span class="line">    dlopen(/usr/local/lib/lua/5.3/cjson.so, 6): Symbol not found: _lua_objlen</span><br><span class="line">  Referenced from: /usr/local/lib/lua/5.3/cjson.so</span><br><span class="line">  Expected in: flat namespace</span><br><span class="line"> in /usr/local/lib/lua/5.3/cjson.so</span><br><span class="line">stack traceback:</span><br><span class="line">    [C]: in ?</span><br><span class="line">    [C]: in function 'require'</span><br><span class="line">    stdin:1: in main chunk</span><br><span class="line">    [C]: in ?</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line">json = cjson.new()</span><br><span class="line">json_text = <span class="string">'&#123; "foo": "bar" &#125;'</span></span><br><span class="line">value = json.decode(json_text)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(value) <span class="keyword">do</span> </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"json"</span>, k, v) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">json	foo	bar</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Lua的基础语法入门还是非常快的，毕竟是轻量级的脚本语言！这部分主要是记录下在使用Lua过程中踩过的坑，以及解决办法，后续如果有深坑，还是需要持续记录的！未完待续… …</p>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB Quick Start</title>
    <url>/2020/06/26/MongoDB-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MongoDB是一个高性能、开源、无模式的文档型数据库，是当前NoSQL数据库产品中比较热门的一种。在许多场景下可用于替代传统的关系型数据库或键/值存储方式！应用有模式自由、简易复制、简单的 API、最终的一致性（非 ACID）、大容量数据等。NoSQL 被我们用得最多的当数 key-value 存储，当然还有其他的文档型的、列存储、图型数据库、xml 数据库等。 <strong>推荐书籍：《MongoDB实战》· [中]  王文龙 著</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="为什么需要NoSQL"><a href="#为什么需要NoSQL" class="headerlink" title="为什么需要NoSQL"></a>为什么需要NoSQL</h2><ol>
<li>High performance - 对数据库高并发读写的需求</li>
<li>Huge Storage - 对海量数据的高效率存储和访问的需求</li>
<li>High Scalability &amp;&amp; High Availability - 对数据库的高可扩展性和高可用性的需求</li>
<li>关系数据库在这些越来越多的应用场景下显得不那么合适了，为了解决这类问题的 NoSQL 数据库应运而生!</li>
<li>NoSQL特点：<ul>
<li>可以处理超大量的数据</li>
<li>运行在便宜的 PC 服务器集群上</li>
<li>击碎了性能瓶颈</li>
<li>没有过多的操作</li>
<li>支持它的支持者源于社区，开源</li>
</ul>
</li>
</ol>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><ol>
<li><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的非关系型数据库；</p>
</li>
<li><p>查询语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能， 而且还支持对数据建立索引；</p>
</li>
<li><p>数据被分组存储在数据集中， 被称为一个集合（Collenction)。每个集合在数据库中都有一个唯一的标识名， 并且可以包含无限数目的文档；</p>
</li>
<li><p>MongoDB特点：</p>
<ul>
<li>面向集合存储，易于存储对象类型的数据</li>
<li>模式自由</li>
<li>支持动态查询</li>
<li>支持完全索引，包含内部对象</li>
<li>支持查询</li>
<li>支持复制和故障恢复</li>
<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>
<li>自动处理碎片，以支持云计算层次的扩展性</li>
<li>支持 Python，PHP，Ruby，Java，C，C#，Javascript，Perl 及 C++语言的驱动程序</li>
<li>文件存储格式为 BSON（一种 JSON 的扩展）</li>
<li>可通过网络访问</li>
</ul>
</li>
<li><p>MongoDB适应场景：</p>
<ul>
<li>网站数据</li>
<li>缓存</li>
<li>大尺寸，低价值的数据</li>
<li>高伸缩性的场景</li>
<li>用于对象及 JSON 数据的存储</li>
</ul>
</li>
<li><p>MongoDB 是一个可移植的数据库，在流行的每一个平台上都可以使用，即所谓的跨平台特性！</p>
</li>
<li><p>MongoDB逻辑结构：</p>
<ul>
<li>MongoDB 的文档（document），相当于关系数据库中的一行记录</li>
<li>多个文档组成一个集合（collection），相当于关系数据库的表</li>
<li>多个集合（collection），逻辑上组织在一起，就是数据库（database）</li>
<li>一个 MongoDB 实例支持多个数据库（database）</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6fe3a7b6d60c95ebc59023ad3e806c87-992252" alt="关系图"></p>
</li>
<li><p>MongoDB 支持的数据类型中，_id 是其自有产物，存储在 MongoDB 集合中的每个文档（document）都有一个默认的主键_id，这个主键名称是 固定的，它可以是 MongoDB 支持的任何数据类型，默认是 ObjectId；</p>
</li>
<li><p>MongoDB shell 避免游标可能带来的开销, 提供一个 findOne() 函数. 这个函数和 find() 函数一样, 不过它返回的是游标里第一条数据, 或者返回 null，即空数据；</p>
</li>
<li><p>使用update()函数来修改记录；</p>
</li>
<li><p>使用remove()函数来删除记录；</p>
</li>
<li><p>MongoDB默认在bin目录下提供了一些有用的工具：</p>
<ul>
<li>bsondump: 将 bson 格式的文件转储为 json 格式的数据</li>
<li>mongo: 客户端命令行工具，其实也是一个 js 解释器，支持 js 语法</li>
<li>mongod: 数据库服务端，每个实例启动一个进程，可以 fork 为后台运行</li>
<li>mongodump/ mongorestore: 数据库备份和恢复工具</li>
<li>mongoexport/ mongoimport: 数据导出和导入工具</li>
<li>mongofiles: GridFS 管理工具，可实现二制文件的存取</li>
<li>mongos: 分片路由，如果使用了 sharding 功能，则应用程序连接的是 mongos 而不是mongod</li>
<li>mongosniff: 这一工具的作用类似于 tcpdump，不同的是他只监控 MongoDB 相关的包请求，并且是以指定的可读性的形式输出</li>
<li>mongostat: 实时性能监控工具</li>
</ul>
</li>
<li><p>可视化客户端：</p>
<ul>
<li>MongoVUE</li>
<li>RockMongo</li>
<li>MongoHub</li>
</ul>
</li>
</ol>
<h2 id="MongoDB高级查询"><a href="#MongoDB高级查询" class="headerlink" title="MongoDB高级查询"></a>MongoDB高级查询</h2><ol>
<li><p>条件操作符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gt</span>: value &#125; &#125; ); <span class="comment">// 大于: field &gt; value </span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$lt</span>: value &#125; &#125; ); <span class="comment">// 小于: field &lt; value </span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gte</span>: value &#125; &#125; ); <span class="comment">// 大于等于: field &gt;= value </span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$lte</span>: value &#125; &#125; ); <span class="comment">// 小于等于: field &lt;= value</span></span><br><span class="line">db.collection.find(&#123; <span class="string">"field"</span> : &#123; <span class="attr">$gt</span>: value1, <span class="attr">$lt</span>: value2 &#125; &#125; ); <span class="comment">// value1 &lt; field &lt; value</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>匹配所有:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;<span class="attr">age</span> : &#123;<span class="attr">$all</span> : [<span class="number">6</span>, <span class="number">8</span>]&#125;&#125;); <span class="comment">// 必须满足[]中所有值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断字段是否存在：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;<span class="attr">age</span>: &#123;<span class="attr">$exists</span>: <span class="literal">true</span>&#125;&#125;); <span class="comment">//查询所有存在age字段的记录</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取模运算：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.student.find( &#123; <span class="attr">age</span>: &#123; <span class="attr">$mod</span> : [ <span class="number">10</span> , <span class="number">1</span> ] &#125; &#125; ) <span class="comment">// 查询 age 取模 10 等于 1 的数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不等于:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.things.find( &#123; <span class="attr">x</span> : &#123; <span class="attr">$ne</span> : <span class="number">3</span> &#125; &#125; ); <span class="comment">// 查询 x 的值不等于 3 的数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>包含&amp;不包含：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.things.find(&#123;<span class="attr">x</span>:&#123;<span class="attr">$in</span>: [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]&#125;&#125;);<span class="comment">// 查询 x 的值在 2,4,6 范围内的数据</span></span><br><span class="line">db.things.find(&#123;<span class="attr">x</span>:&#123;<span class="attr">$nin</span>: [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]&#125;&#125;); <span class="comment">// 查询 x 的值在 2,4,6 范围外的数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组元素个数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;<span class="attr">favorite_number</span>: &#123;<span class="attr">$size</span>: <span class="number">3</span>&#125;&#125;); <span class="comment">// favorite_number数组长度必须3才匹配</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>支持正则表达式匹配！</p>
</li>
<li><p>MongoDB 用游标来循环处理每一条结果数据；</p>
</li>
</ol>
<h2 id="Capped-Collection"><a href="#Capped-Collection" class="headerlink" title="Capped Collection"></a>Capped Collection</h2><ol>
<li>capped collections 是性能出色的有着固定大小的集合，以 LRU(Least Recently Used 最近最少使用)规则和插入顺序进行 age-out(老化移出)处理，自动维护集合中对象的插入顺序，在创建时要预先指定大小！</li>
<li>可以插入及更新，但更新不能超出 collection 的大小，否则更新失败；</li>
<li>不允许删除，但是可以调用 drop() 删除集合中的所有行，但是 drop 后需要显式地重建集合；</li>
<li>用处：<ul>
<li>logging——MongoDB 中日志机制的首选，MongoDB 没有使用日志文件，而是把日志事件存储在数据库中</li>
<li>cache——缓存一些对象在数据库中，比如计算出来的统计信息</li>
<li>auto archiving——可以利用 capped collection 的 age-out 特性，省去了写 cron 脚本进行人工归档的工作</li>
</ul>
</li>
</ol>
<h2 id="GridFS"><a href="#GridFS" class="headerlink" title="GridFS"></a>GridFS</h2><ol>
<li>GridFS 是一种将大型文件存储在 MongoDB 数据库中的文件规范；</li>
<li>可以将一个大文件分割成为多个较小的文档，这样的机制允许我们有效的保存大文件对象，特别对于那些巨大的文件，比如视频、高清图片等；</li>
<li>GridFS 对 Java, Perl, PHP, Python, Ruby 等程序语言均支持，且提供了良好的 API 接口；</li>
<li>GridFS 使用两个表来存储数据：<ul>
<li>files 包含元数据对象  </li>
<li>chunks 包含其他一些相关信息的二进制块</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>只有在实战中才能感受到MongoDB的强大，海量数据的处理以及集群都没有进行详细介绍，在实际的集群配置时再记录！</p>
]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
  </entry>
  <entry>
    <title>Logstash Quick Start</title>
    <url>/2020/05/11/Logstash-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.elastic.co/cn/logstash" target="_blank" rel="noopener">Logstash</a>是一个非常强大的工具，可以进行解析、丰富、转换以及缓冲来自各种数据源的数据，ELK栈就是一种非常成熟的开源日志分析搜索引擎技术栈，其中的L就是Logstash的缩写，当然现在由于FileBeats的出现，现在的技术栈称为ELKB，Logstash可以帮利用它自己的Filter帮我们对数据进行解析，丰富，转换等！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ol>
<li>ELK版本：7.6.2</li>
<li>Docker版本：19.03.8</li>
<li>操作系统：macOS Catalina 10.15.4</li>
<li>处理器： i5 四核 3.3GHz</li>
<li>内存：8G DDR3</li>
</ol>
<h2 id="Logstash模块"><a href="#Logstash模块" class="headerlink" title="Logstash模块"></a>Logstash模块</h2><ol>
<li>Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程；</li>
<li><strong>输入（必须）</strong>：数据往往以各种各样的形式，或分散或集中地存在于很多系统中，可以在同一时间从众多常用来源捕捉事件、能够以连续的流式传输方式捕获日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据；<ul>
<li><img src="https://images.contentstack.io/v3/assets/bltefdd0b53724fa2ce/blt5939ba2e40ba0790/5d0d59d096d2d1b65a98422c/diagram-logstash-inputs.svg" alt="输入"></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html" target="_blank" rel="noopener">输入源格式</a></li>
</ul>
</li>
<li><strong>过滤器（可选）</strong>：解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值；<ul>
<li>利用 Grok 从非结构化数据中派生出结构</li>
<li>从 IP 地址破译出地理坐标</li>
<li>将 PII 数据匿名化，完全排除敏感字段</li>
<li>简化整体处理，不受数据源、格式或架构的影响</li>
<li><img src="https://images.contentstack.io/v3/assets/bltefdd0b53724fa2ce/bltd908f368097df15a/5d0d59ed970556dd5800ed8b/diagram-logstash-filters.svg" alt="过滤器"></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html" target="_blank" rel="noopener">过滤器库格式</a></li>
</ul>
</li>
<li><strong>输出（必须）</strong>：Elasticsearch 是我们的首选输出方向，但是也可以导出给其他的搜索引擎以及日志分析框架；<ul>
<li><img src="https://images.contentstack.io/v3/assets/bltefdd0b53724fa2ce/blt169c0535507b407e/5d0d5a0fb58121dc58ed6a40/diagram-logstash-outputs.svg" alt="输出"></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html" target="_blank" rel="noopener">输出选择</a></li>
</ul>
</li>
<li>插件：可插拔框架，拥有 200 多个插件（截止2020-05-11为止），可以将不同的输入选择、过滤器和输出选择混合搭配、精心安排，当然也可以去构建一个插件，官方提供了一个极好的插件开发 API 和插件生成器；</li>
</ol>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li>Logstash 可以很方便地和Beats一起合作</li>
<li>Logstash 可以和那些著名的云厂商的服务一起合作处理数据</li>
<li>Logstash 可以和信息消息队列类的数据分析以及存储服务，比如redis或kafka一起协作</li>
<li>Logstash 可以使用JDBC来访问RDMS数据</li>
<li>Logstash 可以和IoT设备一起处理它们的数据</li>
<li>Logstash 可以输出到很多其他目的地</li>
<li>Beats的数据可以有如下的三种方式导入到Elasticsearch中：<ul>
<li>Beats ==&gt; Elasticsearch</li>
<li><strong>Beats ==&gt; Logstash ==&gt; Elasticsearch</strong></li>
<li><strong>Beats ==&gt; Kafka ==&gt; Logstash ==&gt; Elasticsearch</strong></li>
</ul>
</li>
</ol>
<h2 id="安装-amp-运行"><a href="#安装-amp-运行" class="headerlink" title="安装&amp;运行"></a>安装&amp;运行</h2><ol>
<li><p>macOS上安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install logstash</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker下安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull logstash:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>基础运行：默认情况下，我们需要跟上一些选项才可以启动Logstash，否则它会退出，Logstash管道有两个必需元素，输入和输出，以及一个可选元素filter； 输入插件使用来自源的数据，过滤器插件在您指定时修改数据，输出插件将数据写入目标：</p>
<ol>
<li><p><img src="https://img-blog.csdnimg.cn/20190815211442347.png" alt="Logstash工作流程"></p>
</li>
<li><p>测试Logstash的使用，运行最基本的输入输出管道：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接从终端获取数据，然后直接输出</span></span><br><span class="line">logstash -e 'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sending Logstash logs to /usr/local/Cellar/logstash/7.6.2/libexec/logs which is now configured via log4j2.properties</span><br><span class="line">[2020-05-11T13:49:37,785][WARN ][logstash.config.source.multilocal] Ignoring the 'pipelines.yml' file because modules or command line options are specified</span><br><span class="line">[2020-05-11T13:49:37,899][INFO ][logstash.runner          ] Starting Logstash &#123;"logstash.version"=&gt;"7.6.2"&#125;</span><br><span class="line">[2020-05-11T13:49:39,301][INFO ][org.reflections.Reflections] Reflections took 45 ms to scan 1 urls, producing 20 keys and 40 values</span><br><span class="line">[2020-05-11T13:49:40,552][WARN ][org.logstash.instrument.metrics.gauge.LazyDelegatingGauge][main] A gauge metric of an unknown type (org.jruby.RubyArray) has been created for key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[2020-05-11T13:49:40,576][INFO ][logstash.javapipeline    ][main] Starting pipeline &#123;:pipeline_id=&gt;"main", "pipeline.workers"=&gt;4, "pipeline.batch.size"=&gt;125, "pipeline.batch.delay"=&gt;50, "pipeline.max_inflight"=&gt;500, "pipeline.sources"=&gt;["config string"], :thread=&gt;"#&lt;Thread:0x4378e094 run&gt;"&#125;</span><br><span class="line">[2020-05-11T13:49:41,463][INFO ][logstash.javapipeline    ][main] Pipeline started &#123;"pipeline.id"=&gt;"main"&#125;</span><br><span class="line">The stdin plugin is now waiting for input:</span><br><span class="line">[2020-05-11T13:49:41,517][INFO ][logstash.agent           ] Pipelines running &#123;:count=&gt;1, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[2020-05-11T13:49:41,747][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class="line">hello world</span><br><span class="line">/usr/local/Cellar/logstash/7.6.2/libexec/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; 2020-05-11T05:49:46.559Z,</span><br><span class="line">       "message" =&gt; "hello world",</span><br><span class="line">          "host" =&gt; "wanderROSdeiMac.local"</span><br><span class="line">&#125;</span><br><span class="line">This is a test</span><br><span class="line">&#123;</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; 2020-05-11T05:49:58.031Z,</span><br><span class="line">       "message" =&gt; "This is a test",</span><br><span class="line">          "host" =&gt; "wanderROSdeiMac.local"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用配置文件进行输出：</p>
<ol>
<li><p>heartbeat.conf</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">heartbeat</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">interval</span> <span class="string">=&gt;</span> <span class="number">1</span></span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"heartbeat"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash -f heartbeat.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出样式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          "host" =&gt; "wanderROSdeiMac.local",</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; 2020-05-11T06:04:23.424Z,</span><br><span class="line">       "message" =&gt; "ok",</span><br><span class="line">          "type" =&gt; "heartbeat"</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">          "host" =&gt; "wanderROSdeiMac.local",</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; 2020-05-11T06:04:24.420Z,</span><br><span class="line">       "message" =&gt; "ok",</span><br><span class="line">          "type" =&gt; "heartbeat"</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">          "host" =&gt; "wanderROSdeiMac.local",</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; 2020-05-11T06:04:25.422Z,</span><br><span class="line">       "message" =&gt; "ok",</span><br><span class="line">          "type" =&gt; "heartbeat"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>TCP input 日志监听：</p>
<ol>
<li><p>选择下载个日志文件，比如<a href="https://ela.st/weblog-sample" target="_blank" rel="noopener">日志</a>；</p>
</li>
<li><p>weblog.conf:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动logstash：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash -f weblog.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用管道等命令传输日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat   apache-daily-access.log |nc localhost 9900</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（部分）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:17:10.710Z,</span></span><br><span class="line">          <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">54756</span><span class="string">,</span></span><br><span class="line">      <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"192.99.67.25 - - [09/May/2020:23:59:50 +0000] \"GET /item/electronics/2232 HTTP/1.1\" 200 41 \"/search/?c=Electronics\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\""</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:17:10.710Z,</span></span><br><span class="line">          <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">54756</span><span class="string">,</span></span><br><span class="line">      <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84 - - [09/May/2020:23:59:55 +0000] \"GET /category/software HTTP/1.1\" 200 105 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\""</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>上述都是简单的logstash的数据输入与输出，想要需要进行数据格式的转换还需要过滤器进行处理，接下来部分介绍过滤器；</p>
</li>
</ol>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ol>
<li><p>在原来的配置文件中添加过滤器：</p>
<ol>
<li><p>修改原来的weblog.conf内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用该配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash -f weblog.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（一条）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">           <span class="string">"verb"</span> <span class="string">=&gt;</span> <span class="string">"GET"</span><span class="string">,</span></span><br><span class="line">     <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:28:36.603Z,</span></span><br><span class="line">       <span class="string">"clientip"</span> <span class="string">=&gt;</span> <span class="string">"192.99.67.25"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"response"</span> <span class="string">=&gt;</span> <span class="string">"200"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"httpversion"</span> <span class="string">=&gt;</span> <span class="string">"1.1"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="string">"41"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"referrer"</span> <span class="string">=&gt;</span> <span class="string">"\"/search/?c=Electronics\""</span><span class="string">,</span></span><br><span class="line">           <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"ident"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"auth"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"request"</span> <span class="string">=&gt;</span> <span class="string">"/item/electronics/2232"</span><span class="string">,</span></span><br><span class="line">      <span class="string">"timestamp"</span> <span class="string">=&gt;</span> <span class="string">"09/May/2020:23:59:50 +0000"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"192.99.67.25 - - [09/May/2020:23:59:50 +0000] \"GET /item/electronics/2232 HTTP/1.1\" 200 41 \"/search/?c=Electronics\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\""</span><span class="string">,</span></span><br><span class="line">          <span class="string">"agent"</span> <span class="string">=&gt;</span> <span class="string">"\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\""</span><span class="string">,</span></span><br><span class="line">           <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">55383</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过Grok这个filter，它通过正则表达式进行匹配，并把我们的输入的非结构化的数据变为一个结构化的数据</strong>，可以看到各种被提取的字段，比如clientip, port, host等；</p>
</li>
</ol>
</li>
<li><p>进一步优化：</p>
<ol>
<li><p><strong>需求：</strong>上面的数据从非结构化变为结构化数据比原来的非结构化的数据已经好了很多，但是还有可以改进的地方，比如clientip，还是不知道这个IP是从哪个地方来的，具体是哪个国家，哪个地理位置</p>
</li>
<li><p><strong>改进：</strong>需要使用geoip过滤器来对数据进行丰富，在filter部分加入geoip；</p>
</li>
<li><p>配置文件修改（weblog.conf）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">geoip</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"clientip"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行并查看输出（一条）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">           <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"clientip"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"verb"</span> <span class="string">=&gt;</span> <span class="string">"GET"</span><span class="string">,</span></span><br><span class="line">     <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:35:27.658Z,</span></span><br><span class="line">          <span class="string">"ident"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">      <span class="string">"timestamp"</span> <span class="string">=&gt;</span> <span class="string">"09/May/2020:23:59:55 +0000"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"request"</span> <span class="string">=&gt;</span> <span class="string">"/category/software"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"httpversion"</span> <span class="string">=&gt;</span> <span class="string">"1.1"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84 - - [09/May/2020:23:59:55 +0000] \"GET /category/software HTTP/1.1\" 200 105 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\""</span><span class="string">,</span></span><br><span class="line">       <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"response"</span> <span class="string">=&gt;</span> <span class="string">"200"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="string">"105"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"referrer"</span> <span class="string">=&gt;</span> <span class="string">"\"-\""</span><span class="string">,</span></span><br><span class="line">           <span class="string">"auth"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">55695</span><span class="string">,</span></span><br><span class="line">          <span class="string">"geoip"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">             <span class="string">"longitude"</span> <span class="string">=&gt;</span> <span class="number">-97.822</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code3"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code2"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"location"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">"lat"</span> <span class="string">=&gt;</span> <span class="number">37.751</span><span class="string">,</span></span><br><span class="line">            <span class="string">"lon"</span> <span class="string">=&gt;</span> <span class="number">-97.822</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">                    <span class="string">"ip"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"country_name"</span> <span class="string">=&gt;</span> <span class="string">"United States"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"latitude"</span> <span class="string">=&gt;</span> <span class="number">37.751</span><span class="string">,</span></span><br><span class="line">        <span class="string">"continent_code"</span> <span class="string">=&gt;</span> <span class="string">"NA"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"timezone"</span> <span class="string">=&gt;</span> <span class="string">"America/Chicago"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">          <span class="string">"agent"</span> <span class="string">=&gt;</span> <span class="string">"\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\""</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到除了clientip信息之外， 数据还多了一个新的叫做geoip的字段，它里面含有location位置信息，为我们在地图上进行显示这些数据提供了方便，从而可以利用Elastic所提供的地图清楚地查看到请求是来自哪里；</p>
</li>
</ol>
</li>
<li><p>再进一步优化：</p>
<ol>
<li><p><strong>需求：</strong>从信息中注意到agent这个字段，非常长，虽然大致能看到浏览器什么的，但是不太直观；</p>
</li>
<li><p><strong>处理：</strong> 添加useragent来处理，配置文件修改（weblog.conf）,当然也可以输出到文件，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">geoip</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"clientip"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">useragent&#123;</span></span><br><span class="line">  	<span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"agent"</span></span><br><span class="line">  	<span class="string">target</span> <span class="string">=&gt;</span> <span class="string">"useragent"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"> 	<span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">path</span> <span class="string">=&gt;</span> <span class="string">"/Users/wander/test/elk/logstash/output.log"</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>输出</strong>（一条）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84 - - [09/May/2020:23:59:55 +0000] \"GET /category/software HTTP/1.1\" 200 105 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\""</span><span class="string">,</span></span><br><span class="line">           <span class="string">"verb"</span> <span class="string">=&gt;</span> <span class="string">"GET"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"httpversion"</span> <span class="string">=&gt;</span> <span class="string">"1.1"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"clientip"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"geoip"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">"country_code2"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"location"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">"lat"</span> <span class="string">=&gt;</span> <span class="number">37.751</span><span class="string">,</span></span><br><span class="line">            <span class="string">"lon"</span> <span class="string">=&gt;</span> <span class="number">-97.822</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">                    <span class="string">"ip"</span> <span class="string">=&gt;</span> <span class="string">"44.114.32.84"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"latitude"</span> <span class="string">=&gt;</span> <span class="number">37.751</span><span class="string">,</span></span><br><span class="line">          <span class="string">"country_name"</span> <span class="string">=&gt;</span> <span class="string">"United States"</span><span class="string">,</span></span><br><span class="line">             <span class="string">"longitude"</span> <span class="string">=&gt;</span> <span class="number">-97.822</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code3"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"timezone"</span> <span class="string">=&gt;</span> <span class="string">"America/Chicago"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"continent_code"</span> <span class="string">=&gt;</span> <span class="string">"NA"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">     <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:43:02.194Z,</span></span><br><span class="line">           <span class="string">"auth"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"response"</span> <span class="string">=&gt;</span> <span class="string">"200"</span><span class="string">,</span></span><br><span class="line">      <span class="string">"useragent"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">           <span class="string">"major"</span> <span class="string">=&gt;</span> <span class="string">"9"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"os"</span> <span class="string">=&gt;</span> <span class="string">"Mac OS X"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"patch"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"os_minor"</span> <span class="string">=&gt;</span> <span class="string">"6"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"name"</span> <span class="string">=&gt;</span> <span class="string">"Firefox"</span><span class="string">,</span></span><br><span class="line">         <span class="string">"os_name"</span> <span class="string">=&gt;</span> <span class="string">"Mac OS X"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"minor"</span> <span class="string">=&gt;</span> <span class="string">"0"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"device"</span> <span class="string">=&gt;</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"build"</span> <span class="string">=&gt;</span> <span class="string">""</span><span class="string">,</span></span><br><span class="line">        <span class="string">"os_major"</span> <span class="string">=&gt;</span> <span class="string">"10"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">        <span class="string">"request"</span> <span class="string">=&gt;</span> <span class="string">"/category/software"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"agent"</span> <span class="string">=&gt;</span> <span class="string">"\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1\""</span><span class="string">,</span></span><br><span class="line">          <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="string">"105"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"ident"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">56095</span><span class="string">,</span></span><br><span class="line">      <span class="string">"timestamp"</span> <span class="string">=&gt;</span> <span class="string">"09/May/2020:23:59:55 +0000"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"referrer"</span> <span class="string">=&gt;</span> <span class="string">"\"-\""</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到多了一个<strong>useragent</strong>字段，现在关于浏览器的信息就非常直观了。</p>
</li>
</ol>
</li>
<li><p>转换：</p>
<ol>
<li><p><strong>需求：</strong>可以看出来bytes是一个字符串的类型，和我们实际的应用可能会有所不同；</p>
</li>
<li><p><strong>处理：</strong>可以使用mutate:convert过滤器进行转换；</p>
</li>
<li><p>修改配置文件weblog.conf：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">convert</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="string">"integer"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">geoip</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"clientip"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">useragent</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"agent"</span></span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">"useragent"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（一条）（可以看到”bytes”字段已经变成了整数形式了）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">          <span class="string">"ident"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"clientip"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"httpversion"</span> <span class="string">=&gt;</span> <span class="string">"1.1"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="number">79</span><span class="string">,</span></span><br><span class="line">       <span class="string">"referrer"</span> <span class="string">=&gt;</span> <span class="string">"\"-\""</span><span class="string">,</span></span><br><span class="line">          <span class="string">"geoip"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">             <span class="string">"longitude"</span> <span class="string">=&gt;</span> <span class="number">-77.4728</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code2"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"timezone"</span> <span class="string">=&gt;</span> <span class="string">"America/New_York"</span><span class="string">,</span></span><br><span class="line">                    <span class="string">"ip"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"location"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">"lon"</span> <span class="string">=&gt;</span> <span class="number">-77.4728</span><span class="string">,</span></span><br><span class="line">            <span class="string">"lat"</span> <span class="string">=&gt;</span> <span class="number">39.0481</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">           <span class="string">"postal_code"</span> <span class="string">=&gt;</span> <span class="string">"20149"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"continent_code"</span> <span class="string">=&gt;</span> <span class="string">"NA"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"country_name"</span> <span class="string">=&gt;</span> <span class="string">"United States"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"region_name"</span> <span class="string">=&gt;</span> <span class="string">"Virginia"</span><span class="string">,</span></span><br><span class="line">             <span class="string">"city_name"</span> <span class="string">=&gt;</span> <span class="string">"Ashburn"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"latitude"</span> <span class="string">=&gt;</span> <span class="number">39.0481</span><span class="string">,</span></span><br><span class="line">              <span class="string">"dma_code"</span> <span class="string">=&gt;</span> <span class="number">511</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code3"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"region_code"</span> <span class="string">=&gt;</span> <span class="string">"VA"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">           <span class="string">"auth"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144 - - [09/May/2020:00:00:05 +0000] \"GET /category/software HTTP/1.1\" 200 79 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7\""</span><span class="string">,</span></span><br><span class="line">      <span class="string">"useragent"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">             <span class="string">"os"</span> <span class="string">=&gt;</span> <span class="string">"Windows"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"patch"</span> <span class="string">=&gt;</span> <span class="string">"912"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"build"</span> <span class="string">=&gt;</span> <span class="string">""</span><span class="string">,</span></span><br><span class="line">          <span class="string">"major"</span> <span class="string">=&gt;</span> <span class="string">"16"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"name"</span> <span class="string">=&gt;</span> <span class="string">"Chrome"</span><span class="string">,</span></span><br><span class="line">         <span class="string">"device"</span> <span class="string">=&gt;</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"minor"</span> <span class="string">=&gt;</span> <span class="string">"0"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"os_name"</span> <span class="string">=&gt;</span> <span class="string">"Windows"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">       <span class="string">"response"</span> <span class="string">=&gt;</span> <span class="string">"200"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"agent"</span> <span class="string">=&gt;</span> <span class="string">"\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7\""</span><span class="string">,</span></span><br><span class="line">     <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T06:54:58.718Z,</span></span><br><span class="line">           <span class="string">"verb"</span> <span class="string">=&gt;</span> <span class="string">"GET"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">56680</span><span class="string">,</span></span><br><span class="line">       <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"request"</span> <span class="string">=&gt;</span> <span class="string">"/category/software"</span><span class="string">,</span></span><br><span class="line">      <span class="string">"timestamp"</span> <span class="string">=&gt;</span> <span class="string">"09/May/2020:00:00:05 +0000"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>时间处理：</p>
<ol>
<li><p><strong>需求：</strong>默认的时间格式如下，有点不太直观：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-09T00:00:05.000Z</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>处理：</strong>使用date过滤器进行处理，修改配置文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9900</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">convert</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="string">"integer"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">geoip</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"clientip"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">useragent</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"agent"</span></span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">"useragent"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> <span class="string">date</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">["timestamp",</span> <span class="string">"dd/MMM/yyyy:HH:mm:ss Z"</span><span class="string">]</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（一条）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">           <span class="string">"host"</span> <span class="string">=&gt;</span> <span class="string">"localhost"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"response"</span> <span class="string">=&gt;</span> <span class="string">"200"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"request"</span> <span class="string">=&gt;</span> <span class="string">"/category/software"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144 - - [09/May/2020:00:00:05 +0000] \"GET /category/software HTTP/1.1\" 200 79 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7\""</span><span class="string">,</span></span><br><span class="line">       <span class="string">"referrer"</span> <span class="string">=&gt;</span> <span class="string">"\"-\""</span><span class="string">,</span></span><br><span class="line">      <span class="string">"timestamp"</span> <span class="string">=&gt;</span> <span class="string">"09/May/2020:00:00:05 +0000"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"auth"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">     <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T07:00:49.618Z,</span></span><br><span class="line">       <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">       <span class="string">"clientip"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"verb"</span> <span class="string">=&gt;</span> <span class="string">"GET"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"ident"</span> <span class="string">=&gt;</span> <span class="string">"-"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"port"</span> <span class="string">=&gt;</span> <span class="number">57002</span><span class="string">,</span></span><br><span class="line">          <span class="string">"agent"</span> <span class="string">=&gt;</span> <span class="string">"\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7\""</span><span class="string">,</span></span><br><span class="line">          <span class="string">"bytes"</span> <span class="string">=&gt;</span> <span class="number">79</span><span class="string">,</span></span><br><span class="line">           <span class="string">"tags"</span> <span class="string">=&gt;</span> <span class="string">[</span></span><br><span class="line">        <span class="string">[0]</span> <span class="string">"_dateparsefailure"</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">          <span class="string">"geoip"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">"country_code3"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"postal_code"</span> <span class="string">=&gt;</span> <span class="string">"20149"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"timezone"</span> <span class="string">=&gt;</span> <span class="string">"America/New_York"</span><span class="string">,</span></span><br><span class="line">             <span class="string">"city_name"</span> <span class="string">=&gt;</span> <span class="string">"Ashburn"</span><span class="string">,</span></span><br><span class="line">         <span class="string">"country_code2"</span> <span class="string">=&gt;</span> <span class="string">"US"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"latitude"</span> <span class="string">=&gt;</span> <span class="number">39.0481</span><span class="string">,</span></span><br><span class="line">           <span class="string">"region_name"</span> <span class="string">=&gt;</span> <span class="string">"Virginia"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"region_code"</span> <span class="string">=&gt;</span> <span class="string">"VA"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"location"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">"lon"</span> <span class="string">=&gt;</span> <span class="number">-77.4728</span><span class="string">,</span></span><br><span class="line">            <span class="string">"lat"</span> <span class="string">=&gt;</span> <span class="number">39.0481</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line">                    <span class="string">"ip"</span> <span class="string">=&gt;</span> <span class="string">"44.210.52.144"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"continent_code"</span> <span class="string">=&gt;</span> <span class="string">"NA"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"country_name"</span> <span class="string">=&gt;</span> <span class="string">"United States"</span><span class="string">,</span></span><br><span class="line">             <span class="string">"longitude"</span> <span class="string">=&gt;</span> <span class="number">-77.4728</span><span class="string">,</span></span><br><span class="line">              <span class="string">"dma_code"</span> <span class="string">=&gt;</span> <span class="number">511</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">      <span class="string">"useragent"</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">          <span class="string">"major"</span> <span class="string">=&gt;</span> <span class="string">"16"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"minor"</span> <span class="string">=&gt;</span> <span class="string">"0"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"os_name"</span> <span class="string">=&gt;</span> <span class="string">"Windows"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"build"</span> <span class="string">=&gt;</span> <span class="string">""</span><span class="string">,</span></span><br><span class="line">         <span class="string">"device"</span> <span class="string">=&gt;</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">           <span class="string">"name"</span> <span class="string">=&gt;</span> <span class="string">"Chrome"</span><span class="string">,</span></span><br><span class="line">             <span class="string">"os"</span> <span class="string">=&gt;</span> <span class="string">"Windows"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"patch"</span> <span class="string">=&gt;</span> <span class="string">"912"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">"httpversion"</span> <span class="string">=&gt;</span> <span class="string">"1.1"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到多了一个timestamp字段；</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="输出到Elasticsearch"><a href="#输出到Elasticsearch" class="headerlink" title="输出到Elasticsearch"></a>输出到Elasticsearch</h2><ol>
<li><p>把处理后的数据输出到Elasticsearch，则在output的部分添加如下的Elasticsearch输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅仅展示输出</span></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["localhost:9200"]</span></span><br><span class="line">    <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"elastic"</span></span><br><span class="line">    <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"changeme"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同时保留两个输出：stdout及elasticsearch，事实上，<strong>可以定义很多个的输出</strong>，stdout输出对于初期的调试是非常有帮助的，等完善了所有的调试，可以把上面的stdout输出关掉；</p>
</li>
<li><p>上面的配置文件直接显示了配置文件的账户和密码，可以使用keystore 来保护自己的密码：</p>
<ol>
<li><p>启动创建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-keystore create</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入输出地址，添加Elasticsearch的地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-keystore add ES_HOST</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建账户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-keystore add LS_USER</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-keystore add LS_PWD</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅仅展示输出</span></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["$&#123;ES_HOST&#125;"]</span></span><br><span class="line">    <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"$&#123;LS_USER&#125;"</span></span><br><span class="line">    <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"$&#123;LS_PWD&#125;"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<h2 id="Grok入门"><a href="#Grok入门" class="headerlink" title="Grok入门"></a>Grok入门</h2><ol>
<li><p>什么是Grok：以一种格式修改信息并将其浸入另一种格式，一种将行与正则表达式匹配，将行的特定部分映射到专用字段中以及根据此映射执行操作的方法；</p>
</li>
<li><p>Logstash内置了超过200种Logstash模式，用于过滤AWS，Bacula，Bro，Linux-Syslog等中的单词，数字和日期等项目，如果找不到所需的模式，则可以编写自己的自定义模式，有多个匹配模式的选项，可简化表达式的编写以捕获日志数据；</p>
</li>
<li><p>Grok调试器：</p>
<ol>
<li><a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">专业网址</a></li>
<li><a href="http://localhost:5601/app/kibana#/dev_tools/grokdebugger" target="_blank" rel="noopener">Kibana自带</a></li>
</ol>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html" target="_blank" rel="noopener">官方说明网址</a>,<a href="https://github.com/logstash-plugins/logstash-patterns-core" target="_blank" rel="noopener">GitHub网址</a></p>
</li>
<li><p>参考配置文件1：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> <span class="string">["/var/log/apache2/access.log"]</span></span><br><span class="line">    <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">"beginning"</span></span><br><span class="line">    <span class="string">sincedb_path</span> <span class="string">=&gt;</span> <span class="string">"/dev/null"</span></span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"apache_access"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> <span class="string">["/var/log/apache2/error.log"]</span></span><br><span class="line">    <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">"beginning"</span></span><br><span class="line">    <span class="string">sincedb_path</span> <span class="string">=&gt;</span> <span class="string">"/dev/null"</span></span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"apache_error"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="string">if</span> <span class="string">[type]</span> <span class="string">in</span> <span class="string">[</span> <span class="string">"apache"</span> <span class="string">,</span> <span class="string">"apache_access"</span> <span class="string">,</span> <span class="string">"apache-access"</span> <span class="string">]</span>  <span class="string">&#123;</span></span><br><span class="line">      <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">[</span></span><br><span class="line">         <span class="string">"message"</span> <span class="string">,</span> <span class="string">"<span class="template-variable">%&#123;COMBINEDAPACHELOG&#125;</span>+<span class="template-variable">%&#123;GREEDYDATA:extra_fields&#125;</span>"</span><span class="string">,</span></span><br><span class="line">         <span class="string">"message"</span> <span class="string">,</span> <span class="string">"<span class="template-variable">%&#123;COMMONAPACHELOG&#125;</span>+<span class="template-variable">%&#123;GREEDYDATA:extra_fields&#125;</span>"</span></span><br><span class="line">         <span class="string">]</span></span><br><span class="line">         <span class="string">overwrite</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"message"</span> <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">convert</span> <span class="string">=&gt;</span> <span class="string">["response",</span> <span class="string">"integer"</span><span class="string">]</span></span><br><span class="line">         <span class="string">convert</span> <span class="string">=&gt;</span> <span class="string">["bytes",</span> <span class="string">"integer"</span><span class="string">]</span></span><br><span class="line">         <span class="string">convert</span> <span class="string">=&gt;</span> <span class="string">["responsetime",</span> <span class="string">"float"</span><span class="string">]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">geoip</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"clientip"</span></span><br><span class="line">         <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">"geoip"</span></span><br><span class="line">         <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"apache-geoip"</span> <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">date</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"timestamp"</span> <span class="string">,</span> <span class="string">"dd/MMM/YYYY:HH:mm:ss Z"</span> <span class="string">]</span></span><br><span class="line">         <span class="string">remove_field</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"timestamp"</span> <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">useragent</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">"agent"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line">   <span class="string">if</span> <span class="string">[type]</span> <span class="string">in</span> <span class="string">["apache_error","apache-error"]</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">["message",</span> <span class="string">"\[<span class="template-variable">%&#123;WORD:dayname&#125;</span> <span class="template-variable">%&#123;WORD:month&#125;</span> <span class="template-variable">%&#123;DATA:day&#125;</span> <span class="template-variable">%&#123;DATA:hour&#125;</span>:<span class="template-variable">%&#123;DATA:minute&#125;</span>:<span class="template-variable">%&#123;DATA:second&#125;</span> <span class="template-variable">%&#123;YEAR:year&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:loglevel&#125;</span>\] (?:\[client <span class="template-variable">%&#123;IPORHOST:clientip&#125;</span>\] )&#123;0,1&#125;<span class="template-variable">%&#123;GREEDYDATA:message&#125;</span>"</span><span class="string">]</span></span><br><span class="line">         <span class="string">overwrite</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"message"</span> <span class="string">]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">mutate</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line">         <span class="string">add_field</span> <span class="string">=&gt;</span></span><br><span class="line">         <span class="string">&#123;</span></span><br><span class="line">            <span class="string">"time_stamp"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;day&#125;</span>/<span class="template-variable">%&#123;month&#125;</span>/<span class="template-variable">%&#123;year&#125;</span>:<span class="template-variable">%&#123;hour&#125;</span>:<span class="template-variable">%&#123;minute&#125;</span>:<span class="template-variable">%&#123;second&#125;</span>"</span></span><br><span class="line">         <span class="string">&#125;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">date</span> <span class="string">&#123;</span></span><br><span class="line">         <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">["time_stamp",</span> <span class="string">"dd/MMM/YYYY:HH:mm:ss"</span><span class="string">]</span></span><br><span class="line">         <span class="string">remove_field</span> <span class="string">=&gt;</span> <span class="string">[</span> <span class="string">"time_stamp"</span><span class="string">,"day","dayname","month","hour","minute","second","year"]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line"> <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["http://localhost:9200"]</span></span><br><span class="line">   <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"YourUserName"</span></span><br><span class="line">   <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"YourPassword"</span></span><br><span class="line">   <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"apache-<span class="template-variable">%&#123;+YYYY.MM.dd&#125;</span>"</span></span><br><span class="line"> <span class="string">&#125;</span></span><br><span class="line"> <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参考配置文件2（email）：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-email.html" target="_blank" rel="noopener">参考官方</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span> </span><br><span class="line">  <span class="string">stdin</span> <span class="string">&#123;&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="string">if</span> <span class="string">"critical"</span> <span class="string">in</span> <span class="string">[message]</span> <span class="string">&#123;</span></span><br><span class="line">     <span class="string">mutate</span> <span class="string">&#123;</span> <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">"critical"</span> <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line">   <span class="string">else</span> <span class="string">if</span> <span class="string">"error"</span> <span class="string">in</span> <span class="string">[message]</span> <span class="string">&#123;</span></span><br><span class="line">     <span class="string">mutate</span> <span class="string">&#123;</span> <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">"error"</span> <span class="string">&#125;</span></span><br><span class="line">   <span class="string">&#125;</span></span><br><span class="line"> <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">if</span> <span class="string">"critical"</span> <span class="string">in</span> <span class="string">[tags]</span> <span class="string">or</span> <span class="string">"error"</span> <span class="string">in</span> <span class="string">[tags]</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">codec</span> <span class="string">=&gt;</span>  <span class="string">"rubydebug"</span> <span class="string">&#125;</span> </span><br><span class="line"> </span><br><span class="line">    <span class="string">email</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">from</span> <span class="string">=&gt;</span> <span class="string">"liu_xiao_guo@hotmail.com"</span></span><br><span class="line">      <span class="string">subject</span> <span class="string">=&gt;</span> <span class="string">"Ignore (test run)"</span></span><br><span class="line">      <span class="string">body</span> <span class="string">=&gt;</span> <span class="string">"log-message: <span class="template-variable">%&#123;message&#125;</span>"</span></span><br><span class="line">      <span class="string">to</span> <span class="string">=&gt;</span> <span class="string">"YourEmailAccount@yahoo.com"</span></span><br><span class="line">      <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">"plain"</span></span><br><span class="line">      <span class="string">contenttype</span> <span class="string">=&gt;</span> <span class="string">"text/plain; charset=UTF-8"</span></span><br><span class="line">      <span class="string">address</span> <span class="string">=&gt;</span> <span class="string">"smtp-mail.outlook.com"</span></span><br><span class="line">      <span class="string">port</span> <span class="string">=&gt;</span> <span class="string">"587"</span></span><br><span class="line">      <span class="string">authentication</span> <span class="string">=&gt;</span> <span class="string">"plain"</span></span><br><span class="line">      <span class="string">via</span> <span class="string">=&gt;</span> <span class="string">"sendmail"</span></span><br><span class="line">      <span class="string">username</span> <span class="string">=&gt;</span> <span class="string">"YourMailAccount@hotmail.com"</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"YourPassword"</span></span><br><span class="line">      <span class="string">use_tls</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">debug</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参考配置文件（多输入）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> <span class="string">"/Users/liuxg/data/multi-input/apache.log"</span></span><br><span class="line">    <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">"beginning"</span></span><br><span class="line">    <span class="string">sincedb_path</span> <span class="string">=&gt;</span> <span class="string">"/dev/null"</span></span><br><span class="line">    <span class="comment"># ignore_older =&gt; 100000</span></span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"apache"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> <span class="string">"/Users/liuxg/data/multi-input/apache-daily-access.log"</span></span><br><span class="line">    <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">"beginning"</span></span><br><span class="line">    <span class="string">sincedb_path</span> <span class="string">=&gt;</span> <span class="string">"/dev/null"</span></span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"daily"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">grok</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">match</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">          <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">'<span class="template-variable">%&#123;IPORHOST:clientip&#125;</span> <span class="template-variable">%&#123;USER:ident&#125;</span> <span class="template-variable">%&#123;USER:auth&#125;</span> \[<span class="template-variable">%&#123;HTTPDATE:timestamp&#125;</span>\] "<span class="template-variable">%&#123;WORD:verb&#125;</span> <span class="template-variable">%&#123;DATA:request&#125;</span> HTTP/<span class="template-variable">%&#123;NUMBER:httpversion&#125;</span>" <span class="template-variable">%&#123;NUMBER:response:int&#125;</span> (?:-|<span class="template-variable">%&#123;NUMBER:bytes:int&#125;</span>) <span class="template-variable">%&#123;QS:referrer&#125;</span> <span class="template-variable">%&#123;QS:agent&#125;</span>'</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">if[type]</span> <span class="string">==</span> <span class="string">"apache"</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">["apache"]</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">if</span> <span class="string">[type]</span> <span class="string">==</span> <span class="string">"daily"</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">mutate</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">["daily"]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">stdout</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">if</span> <span class="string">"apache"</span> <span class="string">in</span> <span class="string">[tags]</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"apache_log"</span></span><br><span class="line">        <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">"/Users/liuxg/data/apache_template.json"</span></span><br><span class="line">        <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">"apache_elastic_example"</span></span><br><span class="line">        <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span> </span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">if</span> <span class="string">"daily"</span> <span class="string">in</span> <span class="string">[tags]</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"apache_daily"</span></span><br><span class="line">        <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">"/Users/liuxg/data/apache_template.json"</span></span><br><span class="line">        <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">"apache_elastic_example"</span></span><br><span class="line">        <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span> </span><br><span class="line">  <span class="string">&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="再看插件"><a href="#再看插件" class="headerlink" title="再看插件"></a>再看插件</h2><ol>
<li><p>Logstash附带了许多input，codec，filter和output插件，可用于从各种应用程序，服务器和网络通道中检索，转换，过滤和发送日志和事件；<a href="http://localhost:9600/_node/plugins?pretty" target="_blank" rel="noopener">本地logstash看安装的插件</a>，目前提供的超过200多个plugin</p>
</li>
<li><p><strong>input插件：</strong></p>
<ol>
<li><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-plugin list --group input</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（2020/05/11之前默认安装）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-input-azure_event_hubs</span><br><span class="line">logstash-input-beats</span><br><span class="line">logstash-input-couchdb_changes</span><br><span class="line">logstash-input-elasticsearch</span><br><span class="line">logstash-input-exec</span><br><span class="line">logstash-input-file</span><br><span class="line">logstash-input-ganglia</span><br><span class="line">logstash-input-gelf</span><br><span class="line">logstash-input-generator</span><br><span class="line">logstash-input-graphite</span><br><span class="line">logstash-input-heartbeat</span><br><span class="line">logstash-input-http</span><br><span class="line">logstash-input-http_poller</span><br><span class="line">logstash-input-imap</span><br><span class="line">logstash-input-jms</span><br><span class="line">logstash-input-pipe</span><br><span class="line">logstash-input-redis</span><br><span class="line">logstash-input-s3</span><br><span class="line">logstash-input-snmp</span><br><span class="line">logstash-input-snmptrap</span><br><span class="line">logstash-input-sqs</span><br><span class="line">logstash-input-stdin</span><br><span class="line">logstash-input-syslog</span><br><span class="line">logstash-input-tcp</span><br><span class="line">logstash-input-twitter</span><br><span class="line">logstash-input-udp</span><br><span class="line">logstash-input-unix</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置输入源时直接使用logstash-input-*后面的*即可，比如beats；</p>
</li>
<li><p>默认没有安装的输入插件可以使用命令进行安装，比如websocket插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-plugin install logstash-input-websocket</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/sitepoint-editors/websocket-demo.git</span><br><span class="line">cd websocket-demo</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line"> 	<span class="string">websocket</span> <span class="string">&#123;</span></span><br><span class="line"> 		<span class="string">mode</span> <span class="string">=&gt;</span> <span class="string">"client"</span></span><br><span class="line"> 	    <span class="string">url</span> <span class="string">=&gt;</span> <span class="string">"ws://127.0.0.1:8081/"</span></span><br><span class="line"> 	    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"string"</span></span><br><span class="line"> 	<span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">	<span class="string">stdout</span> <span class="string">&#123;</span> </span><br><span class="line">    	<span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span> </span><br><span class="line">  	<span class="string">&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html" target="_blank" rel="noopener">其他输入插件</a>（默认未安装）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">logstash-input-google_pubsub</span></span><br><span class="line"><span class="string">logstash-input-kafka</span></span><br><span class="line"><span class="string">logstash-input-cloudwatch</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>过滤插件：</strong></p>
<ol>
<li><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-plugin list --group filter</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（2020/05/11之前默认安装）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-filter-aggregate</span><br><span class="line">logstash-filter-anonymize</span><br><span class="line">logstash-filter-cidr</span><br><span class="line">logstash-filter-clone</span><br><span class="line">logstash-filter-csv</span><br><span class="line">logstash-filter-date</span><br><span class="line">logstash-filter-de_dot</span><br><span class="line">logstash-filter-dissect</span><br><span class="line">logstash-filter-dns</span><br><span class="line">logstash-filter-drop</span><br><span class="line">logstash-filter-elasticsearch</span><br><span class="line">logstash-filter-fingerprint</span><br><span class="line">logstash-filter-geoip</span><br><span class="line">logstash-filter-grok</span><br><span class="line">logstash-filter-http</span><br><span class="line">logstash-filter-json</span><br><span class="line">logstash-filter-kv</span><br><span class="line">logstash-filter-memcached</span><br><span class="line">logstash-filter-metrics</span><br><span class="line">logstash-filter-mutate</span><br><span class="line">logstash-filter-prune</span><br><span class="line">logstash-filter-ruby</span><br><span class="line">logstash-filter-sleep</span><br><span class="line">logstash-filter-split</span><br><span class="line">logstash-filter-syslog_pri</span><br><span class="line">logstash-filter-throttle</span><br><span class="line">logstash-filter-translate</span><br><span class="line">logstash-filter-truncate</span><br><span class="line">logstash-filter-urldecode</span><br><span class="line">logstash-filter-useragent</span><br><span class="line">logstash-filter-uuid</span><br><span class="line">logstash-filter-xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置过滤源时直接使用logstash-filter-*后面的*即可，比如csv；</p>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html" target="_blank" rel="noopener">官方过滤插件</a></p>
</li>
</ol>
</li>
<li><p><strong>输出插件：</strong></p>
<ol>
<li><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-plugin list --group output</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（2020/05/11之前默认安装）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-output-cloudwatch</span><br><span class="line">logstash-output-csv</span><br><span class="line">logstash-output-elastic_app_search</span><br><span class="line">logstash-output-elasticsearch</span><br><span class="line">logstash-output-email</span><br><span class="line">logstash-output-file</span><br><span class="line">logstash-output-graphite</span><br><span class="line">logstash-output-http</span><br><span class="line">logstash-output-lumberjack</span><br><span class="line">logstash-output-nagios</span><br><span class="line">logstash-output-null</span><br><span class="line">logstash-output-pipe</span><br><span class="line">logstash-output-redis</span><br><span class="line">logstash-output-s3</span><br><span class="line">logstash-output-sns</span><br><span class="line">logstash-output-sqs</span><br><span class="line">logstash-output-stdout</span><br><span class="line">logstash-output-tcp</span><br><span class="line">logstash-output-udp</span><br><span class="line">logstash-output-webhdfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置过滤源时直接使用logstash-output-*后面的*即可，比如csv；</p>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html" target="_blank" rel="noopener">官方输出插件</a></p>
</li>
</ol>
</li>
<li><p><strong>Codec插件：</strong></p>
<ol>
<li><p>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-plugin list  --group codec</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（2020/05/11之前默认安装）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">logstash-codec-avro</span><br><span class="line">logstash-codec-cef</span><br><span class="line">logstash-codec-collectd</span><br><span class="line">logstash-codec-dots</span><br><span class="line">logstash-codec-edn</span><br><span class="line">logstash-codec-edn_lines</span><br><span class="line">logstash-codec-es_bulk</span><br><span class="line">logstash-codec-fluent</span><br><span class="line">logstash-codec-graphite</span><br><span class="line">logstash-codec-json</span><br><span class="line">logstash-codec-json_lines</span><br><span class="line">logstash-codec-line</span><br><span class="line">logstash-codec-msgpack</span><br><span class="line">logstash-codec-multiline</span><br><span class="line">logstash-codec-netflow</span><br><span class="line">logstash-codec-plain</span><br><span class="line">logstash-codec-rubydebug</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/codec-plugins.html" target="_blank" rel="noopener">官方codec插件</a></p>
</li>
<li><p>常用codec：</p>
<ol>
<li>line：使用“message”中的数据将每行转换为logstash事件</li>
<li>multiline：允许您为“message”构成任意边界</li>
<li>json_lines： 解析换行符分隔的JSON数据</li>
<li>json：解析所有JSON</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Logstash多配置文件"><a href="#Logstash多配置文件" class="headerlink" title="Logstash多配置文件"></a>Logstash多配置文件</h2><ol>
<li><p>一个pipeline含有一个逻辑的数据流，它从input接收数据，并把它们传入到队列里，经过worker的处理，最后输出到output；</p>
</li>
<li><p>logstash使用pipeline来处理多个配置文件；</p>
</li>
<li><p>需要修改安装文件下的配置文件pipelines.yml，本机测试环境使用brew进行安装的，因此配置目录为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/Cellar/logstash/7.6.2/libexec/config</span><br></pre></td></tr></table></figure>

<ul>
<li><p>样例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">daily</span></span><br><span class="line">   <span class="attr">pipeline.workers:</span> <span class="number">1</span></span><br><span class="line">   <span class="attr">pipeline.batch.size:</span> <span class="number">1</span></span><br><span class="line">   <span class="attr">path.config:</span> <span class="string">"/Users/wander/data/multi-pipeline/daily.conf"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">apache</span></span><br><span class="line">   <span class="attr">queue.type:</span> <span class="string">persisted</span></span><br><span class="line">   <span class="attr">path.config:</span> <span class="string">"/Users/wander/data/multi-pipeline/apache.conf"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上述样例就可以读取daily.conf以及apache.conf供logstash使用；</p>
</li>
</ul>
</li>
<li><p>直接处理一个文件夹下的配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">my_logs</span></span><br><span class="line">   <span class="attr">queue.type:</span> <span class="string">persisted</span></span><br><span class="line">   <span class="attr">path.config:</span> <span class="string">"/Users/wander/data/multi-pipeline/*.conf"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试邮件Logstash"><a href="#测试邮件Logstash" class="headerlink" title="测试邮件Logstash"></a>测试邮件Logstash</h2><ol>
<li><p>首先确认是否安装了logstash-input-imap，默认是安装的；然后配置输入文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">	<span class="string">imap</span> <span class="string">&#123;</span></span><br><span class="line">	 	<span class="string">host</span> <span class="string">=&gt;</span> <span class="string">"imap.qq.com"</span></span><br><span class="line">	 	<span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"qq邮箱@qq.com"</span></span><br><span class="line">	 	<span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"密码"</span></span><br><span class="line">	 	<span class="string">content_type</span> <span class="string">=&gt;</span> <span class="string">"text/plain"</span></span><br><span class="line">	 	<span class="string">secure</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">	 	<span class="string">port</span> <span class="string">=&gt;</span> <span class="number">993</span></span><br><span class="line">	 	<span class="string">check_interval</span> <span class="string">=&gt;</span> <span class="number">10</span></span><br><span class="line">	 	<span class="string">folder</span> <span class="string">=&gt;</span> <span class="string">"Inbox"</span></span><br><span class="line">	<span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">	<span class="string">stdout</span> <span class="string">&#123;</span> <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后运行logstash加载配置文件，向邮箱发送邮件；</p>
</li>
<li><p>确保邮箱开启了imap，否则是无法进行读取邮件的；</p>
</li>
<li><p>输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">                      <span class="string">"x-bq-mailer"</span> <span class="string">=&gt;</span> <span class="string">"QQMail 2.x"</span><span class="string">,</span></span><br><span class="line">                         <span class="string">"x-qq-mid"</span> <span class="string">=&gt;</span> <span class="string">"mxszc46t1589197905tg6wlfm63"</span><span class="string">,</span></span><br><span class="line">                     <span class="string">"x-cm-transid"</span> <span class="string">=&gt;</span> <span class="string">"KAcSCgBXnwtNPLle9rfbAA--.31638S2"</span><span class="string">,</span></span><br><span class="line">                 <span class="string">"x-originating-ip"</span> <span class="string">=&gt;</span> <span class="string">"[49.94.67.169]"</span><span class="string">,</span></span><br><span class="line">                             <span class="string">"date"</span> <span class="string">=&gt;</span> <span class="string">"Mon, 11 May 2020 19:51:41 +0800"</span><span class="string">,</span></span><br><span class="line">                         <span class="string">"received"</span> <span class="string">=&gt;</span> <span class="string">[</span></span><br><span class="line">        <span class="string">[0]</span> <span class="string">"from 218.13.19.13 (unknown [218.13.19.13]) by newmx36.qq.com (NewMx) with SMTP id for &lt;1194409532@qq.com&gt;; Mon, 11 May 2020 19:51:45 +0800"</span><span class="string">,</span></span><br><span class="line">        <span class="string">[1]</span> <span class="string">"from iPhone (unknown [49.94.67.169]) by nanhaia6 (Coremail) with SMTP id KAcSCgBXnwtNPLle9rfbAA--.31638S2; Mon, 11 May 2020 19:51:43 +0800"</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">                   <span class="string">"x-qq-orgsender"</span> <span class="string">=&gt;</span> <span class="string">"wangsp14@midea.com"</span><span class="string">,</span></span><br><span class="line">                        <span class="string">"x-bq-mime"</span> <span class="string">=&gt;</span> <span class="string">"TCMime 1.0 by Tencent"</span><span class="string">,</span></span><br><span class="line">                    <span class="string">"ironport-phdr"</span> <span class="string">=&gt;</span> <span class="string">"9a23:eQWNCBabkxDEQt9aARwe8nD/LSx+4OfEezUN459isYplN5qZr8+/bnLW6fgltlLVR4KTs6sC17OL9fG4Ejdfqb+681k6OKRWUBEEjchE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i764jEdAAjwOhRoLerpBIHSk9631+ev8JHPfglEnjWwba5yIRmsqQjdqsYajIVgJ60s1hbHv3xEdvhMy2h1P1yThRH85smx/J5n7Stdvu8q+tBDX6vnYak2VKRUAzs6PW874s3rrgTDQhCU5nQASGUWkwFHDBbD4RrnQ5r+qCr6tu562CmHIc37SK0/VDq+46t3ThLjlSEKPCM7/m7KkMx9lKJVrgy8qRNw34Hab4+bOvl5cKPcZt4aRXFOU9xNWyFbHo+xbY0CBPcBM+ZCqIn9okMDoRWwBAa2AuPvxSRIhmfr0aA1yOkhFADG0xE+EN0UqnjbsNL1NKIcXe2ywqjH1zPDb/xN2Tfl9YTFfQssofSNXb1tb8Xe01MjGB/CjlWVsIHoOS6e2esRvWaB9eVgSf6vhHA9qwF3ujWiycghhpTGiI8bxF7J9zh1zJgoKNC7S0N1bt6pHpVTuiyUK4Z6X8IvTmJmtSskxLMLp4C3cSYUxJg5yBDSZeCLfo6V6RzgTOacOSp0iG5/dL6ihBu+60qtxvfzW8WoyFpHoS5InsPIu30CzRDe68qKRuFg8kqg3TuC0R3Y5PteLkAuj6XbLoYswrs3lpUOr0vOBjT2mEDqjK+OcUUk5/So5/znYrr4op+cMJd5igD4MqQygMywG+I4PRYSX2SB/OS81aDs8lPjT7lQkvI2lazZvIjbJcQduKG5HxdY3ps/5xqlEjur084UkHsdIF9KZB6Ll43pNEvPIPD8A/e/mVOskDJzyvHIJLLhBJrNLmPbkLv8crtw8EtcyAsuwt9B/Z1YEK0OIPX2WkPprtzXEgc5MxCow+bgENhxy54SVGaAD6KWLK/ftV+F6+wxL+SXfY8VoSzxJOQi5/7r3jcFngpXJPD4gcdPOS3jRL4yehzIPSa004paS08Tp0w1S+m823OYVjsGLWm7Wa0n/mhnIIenAYrKAIuqhfbVwy69EYZOPzxuD1GAHH6ufIKBDaRfIBmOK9Nsx2RXHYOqTJUsgEmj"</span><span class="string">,</span></span><br><span class="line">                    <span class="string">"x-ironport-av"</span> <span class="string">=&gt;</span> <span class="string">[</span></span><br><span class="line">        <span class="string">[0]</span> <span class="string">"E=McAfee;i=\"6000,8403,9617\"; a=\"107122629\""</span><span class="string">,</span></span><br><span class="line">        <span class="string">[1]</span> <span class="string">"E=Sophos;i=\"5.73,379,1583164800\"; d=\"scan'208,217\";a=\"107122629\""</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">    <span class="string">"x-ironport-anti-spam-filtered"</span> <span class="string">=&gt;</span> <span class="string">"true"</span><span class="string">,</span></span><br><span class="line">                           <span class="string">"x-guid"</span> <span class="string">=&gt;</span> <span class="string">"D4E19ED0-E6A4-D528-5441-737CCCEBCC7A"</span><span class="string">,</span></span><br><span class="line">                        <span class="string">"x-qq-feat"</span> <span class="string">=&gt;</span> <span class="string">"4YfUFR6LTbWPT7g1J7q36dJc1luWQvZZ42LpyavBzJq/+9+kOq8Wl37lBEL9a rIftUJPR8kXgobTJ7k1Km4xH4KqqeFq82PX6IlyuIvqPNMANlXbeKNiNmliRU6clwTfCB4m 2W7So113X8hvY2tO/fK242xWE8bKLsmOAN2STroD5kdsgS4p01CheWFzXcwTK5an1go21Ev mj1zxt6gPfYXlSt0ZZvlxSp83qGLDCkTqOdHkMzkUKaMkYZk7eFawndCWyBa6+Vzgbyw3Kv cicES+e6x1OSAOdkq1LbO1KcjmEl4s2GHRiw=="</span><span class="string">,</span></span><br><span class="line">        <span class="string">"content-transfer-encoding"</span> <span class="string">=&gt;</span> <span class="string">"base64"</span><span class="string">,</span></span><br><span class="line">                             <span class="string">"from"</span> <span class="string">=&gt;</span> <span class="string">"\"wangsp14@midea.com\" &lt;wangsp14@midea.com&gt;"</span><span class="string">,</span></span><br><span class="line">                     <span class="string">"content-type"</span> <span class="string">=&gt;</span> <span class="string">"text/html; charset=utf-8"</span><span class="string">,</span></span><br><span class="line">                   <span class="string">"x-qq-xmailinfo"</span> <span class="string">=&gt;</span> <span class="string">"OKPacIQk4dZohzUdVHaQFxpvV6gUIWeBmViOiZ51jOAIaFX+D5qPmAoXbSQbve UnUj8s7elPv8+69QwDL3Cf1xvUZ8rjHPGVAN/A5flZz3+p2mKp4zgTRTDgymurOUv4bQvZFfgwyi kndyrfPe0xeq4/IbxHhqKWhlmLSS2p5ZfwNXJ4vQCV8ExQbA9UeqL8MfwteM0VoTRoEuLoYqlzfT OvQ/QI6Kk1n22z4YB0nrk66RjU6nGPjqiT4Frm0UacDZ/SvsNAgWPOW4XgAu6BItFltS+gD4RZd3 vjh0hTwSdRZjKt6fHXVOq+2WxqZaxYLOQncDI4IwvgKF10aOhcuK6tYrKyBV4XKijR4MUwP0MzeD ZcfVecwQS2F97Da7gKGn7JCD6qkzWkWkLMkWG7G1ezZtK0twyNAiUEgb8SP03tX+5rjQkZguWgBL h67+BPpg5XQgaFDFRS2g4dCep/kRlzmJQa0j940oLDv+3+kYixV5hTEBb39Rgtl8gKmGX7zX5hdk aoW3805Y8s34lWYwbNONpBVu9ws/7W2P4qYpckBFj3G05GfKvpmFAcfKvr3P5TaLg9PWHbTn30wu ZtUNaJxRK5R9NbvKi9Xg3JP/vQkiDAebom42cfjotOeD2c2+OQd7P0uza0SdVAQ3qSxYg+6HgT2S 9OsA=="</span><span class="string">,</span></span><br><span class="line">                          <span class="string">"subject"</span> <span class="string">=&gt;</span> <span class="string">"ceshi"</span><span class="string">,</span></span><br><span class="line">                    <span class="string">"x-ipas-result"</span> <span class="string">=&gt;</span> <span class="string">"A2Es8AAUO7le/ygHEgpmGgEBAQEBKwEJAQYBAQEBAgIBAQEBAgEBAQEDAQEBAYFeTGgKAgEBAQEBAWKBGykyNoQamx1jhRcKgQ4DgmWHQRILAQEBAQEBAQEBGxkBAgQBAYRAAgIZBy4BCIE6JEsCEAEBBgEBAQEBBQQBAQJphQpYgikSIoQJChEpNAEFAQIHDQImAgQ6DAkEBgIbhhqRdJt5gTKJNySBBYEOKAIBAQEBAQEBAYdVgh+DIYFBiVUlgkczgi0EgUEBAZALiBGZCwEGAQECgjKYXRaCNQGabhFAg0lcqE2COIFWcIFuB3cBAUxPGJ5VTTRzCAQJVQEeCBMKAYxZAYEPAQE"</span><span class="string">,</span></span><br><span class="line">      <span class="string">"x-ironport-anti-spam-result"</span> <span class="string">=&gt;</span> <span class="string">"A2Es8AAUO7le/ygHEgpmGgEBAQEBKwEJAQYBAQEBAgIBAQEBAgEBAQEDAQEBAYFeTGgKAgEBAQEBAWKBGykyNoQamx1jhRcKgQ4DgmWHQRILAQEBAQEBAQEBGxkBAgQBAYRAAgIZBy4BCIE6JEsCEAEBBgEBAQEBBQQBAQJphQpYgikSIoQJChEpNAEFAQIHDQImAgQ6DAkEBgIbhhqRdJt5gTKJNySBBYEOKAIBAQEBAQEBAYdVgh+DIYFBiVUlgkczgi0EgUEBAZALiBGZCwEGAQECgjKYXRaCNQGabhFAg0lcqE2COIFWcIFuB3cBAUxPGJ5VTTRzCAQJVQEeCBMKAYxZAYEPAQE"</span><span class="string">,</span></span><br><span class="line">                          <span class="string">"message"</span> <span class="string">=&gt;</span> <span class="string">"&lt;div style=\"min-height:22px;margin-bottom:8px;\"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=\"min-height:22px;margin-bottom:8px;\"&gt;dhhhdd&lt;/div&gt;&lt;div id=\"QQMailSignature\" class=\"mail-footer\" aria-hidden=\"true\"&gt;&lt;hr style=\"margin: 0 0 10px 0;border: 0;border-bottom:1px solid #E6E8EB;height:0;line-height:0;font-size:0;padding: 20px 0 0 0;width: 50px;\"&gt;发自我的iPhone&lt;/div&gt;&lt;div id=\"original-content\"&gt;&lt;/div&gt;"</span><span class="string">,</span></span><br><span class="line">                  <span class="string">"x-cm-senderinfo"</span> <span class="string">=&gt;</span> <span class="string">"5zdqw2rsruqxpqwut01hwozxxghdhulrpou0/"</span><span class="string">,</span></span><br><span class="line">                         <span class="string">"@version"</span> <span class="string">=&gt;</span> <span class="string">"1"</span><span class="string">,</span></span><br><span class="line">                       <span class="string">"@timestamp"</span> <span class="string">=&gt;</span> <span class="number">2020</span><span class="number">-05</span><span class="string">-11T11:51:41.000Z,</span></span><br><span class="line">                       <span class="string">"message-id"</span> <span class="string">=&gt;</span> <span class="string">"&lt;tencent_7B8A0157FA3E8FE6ADB9CFBD@qq.com&gt;"</span><span class="string">,</span></span><br><span class="line">              <span class="string">"x-coremail-antispam"</span> <span class="string">=&gt;</span> <span class="string">"1UD129KBjDUn29KB7ZKAUJUUUUU529EdanIXcx71UUUUU7v73 VFW2AGmfu7bjvjm3AaLaJ3UjIYCTnIWjp_UUUrp7k0a2IF6ryUM7kC6x804xWl1xkIjI8I 6I8E6xAIw20EY4v20xvaj40_Wr0E3s1l1IIY67AEw4v_Jr0_Jr4l8cAvFVAK0II2c7xJM2 8CjxkF64kEwVA0rcxSw2x7M28EF7xvwVC0I7IYx2IY67AKxVWDJVCq3wA2z4x0Y4vE2Ix0 cI8IcVCY1x0267AKxVW0oVCq3wA2z4x0Y4vEx4A2jsIE14v26rxl6s0DM28EF7xvwVC2z2 80aVCY1x0267AKxVW0oVCq3wAa7VA2z4x0Y4vE2Ix0cI8IcVCY1x0267AKxVW0oVCq3VA2 z4x0Y4vE2Ix0cI8IcVAFwI0_tr0E3s0EFcxC0VAqx4xG64AKrs4lnx0E84ACjcxK6xIIjx v20xvEc7CjxVAFwI0_GcCE3s0EFcxC0VAqx4xG64AKrs4lnxkEFVAIw20F6cxK64vIFxWl nxkEFVAqjxCEFcIq020EwIxC4wAS0I0E0xvYzxvE52x082IY62kv0487Mc02F40EFcxC0V AKzVAqx4xG6I80ewAv7VC0I7IYx2IY67AKxVWUJVWUGwAv7VC2z280aVAFwI0_Jr0_Gr1l Ox8S6xCaFVCjc4AY6r1j6r4UM4x0Y48IcxkI7VAKI48JM4xvF2IEb7IF0Fy264kE64k0F2 4lFcxC0VAqx4xG64AKrs4lw4CE7480Y4vE14AKx2xKxVC2ax8xM4kE6xkIj40Ew7xC0wCF 04k20xvY0x0EwIxGrwCF04k20xvE74AGY7Cv6cx26r48WwCFx2IqxVCFs4IE7xkEbVWUJV W8JwC20s026c02F40E14v26r106r1rMI8I3I0E7480Y4vE14v26r1j6r18MI8E67AF67kF 1VAFwI0_Jr0_JrylIxkGc2Ij64vIr41lIxAIcVC0I7IYx2IY67AKxVWUJVWUCwCI42IY6x IIjxv20xvEc7CjxVAFwI0_Jr0_Gr1lIxAIcVCF04k26cxKx2IYs7xG6rW3Jr0E3s1lIxAI cVC2z280aVAFwI0_Jr0_Gr1lIxAIcVC2z280aVCY1x0267AKxVWUJVW8JwCE64xvF2IEb7 IF0Fy7YxBIdaVFxhVjvjDU0xZFpf9x07Una93UUUUU="</span><span class="string">,</span></span><br><span class="line">                               <span class="string">"to"</span> <span class="string">=&gt;</span> <span class="string">"1194409532 &lt;1194409532@qq.com&gt;"</span><span class="string">,</span></span><br><span class="line">                    <span class="string">"x-qq-mailinfo"</span> <span class="string">=&gt;</span> <span class="string">"NbUxUzKtP+7YNW2lRqIrst/oPaUXovn7ftT5zLA6Y5xQ0r1Kbr3Z21V/c It7P3O0ON4RghKM9wG9h+qnsa0Jr/z5TNHI4VPYm9xo7oaYtuVpQm6W9cw52ncO9iRGRGhX WW9FiYo3WocFf8zXV80V7aE="</span><span class="string">,</span></span><br><span class="line">                         <span class="string">"x-mailer"</span> <span class="string">=&gt;</span> <span class="string">"QQMail 2.x"</span><span class="string">,</span></span><br><span class="line">                     <span class="string">"mime-version"</span> <span class="string">=&gt;</span> <span class="string">"1.0"</span><span class="string">,</span></span><br><span class="line">                  <span class="string">"x-outbound-spam"</span> <span class="string">=&gt;</span> <span class="string">"2"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-imap.html" target="_blank" rel="noopener">imap官方说明</a></p>
</li>
<li><p>添加过滤：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅仅过滤条件</span></span><br><span class="line"><span class="string">filter</span> <span class="string">&#123;</span></span><br><span class="line">	<span class="string">if</span> <span class="string">"critical"</span> <span class="string">in</span> <span class="string">[subject]</span> <span class="string">&#123;</span></span><br><span class="line">		<span class="string">mutate</span> <span class="string">&#123;</span> <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">"critical"</span> <span class="string">&#125;</span></span><br><span class="line">	<span class="string">&#125;</span></span><br><span class="line">	<span class="string">else</span> <span class="string">if</span> <span class="string">"error"</span> <span class="string">in</span> <span class="string">[subject]</span> <span class="string">&#123;</span></span><br><span class="line">		<span class="string">mutate</span> <span class="string">&#123;</span> <span class="string">add_tag</span> <span class="string">=&gt;</span> <span class="string">"error"</span> <span class="string">&#125;</span></span><br><span class="line">	<span class="string">&#125;</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将电子邮件添加到ELK堆栈中的数据分析管道中肯定有一定的价值存在的！</p>
</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>为什么有数据方案：Beats ==&gt; Kafka ==&gt; Logstash ==&gt; Elasticsearch这种流程呢？<ul>
<li>日志是不可预测的，在发生生产事件后，恰恰在您最需要它们时，日志可能突然激增并淹没您的日志记录基础结构</li>
<li><strong>为了保护Logstash和Elasticsearch免受此类数据突发攻击，用户部署了缓冲机制以充当消息代理</strong></li>
</ul>
</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.elastic.co/cn/logstash" target="_blank" rel="noopener">官方网站</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener">官方文档</a></li>
<li><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">Elastic官方指导</a></li>
<li><a href="https://www.elastic.co/cn/blog" target="_blank" rel="noopener">官方博客</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate" target="_blank" rel="noopener">转换插件</a></li>
<li><a href="https://blog.csdn.net/ubuntutouch/category_9335275.html" target="_blank" rel="noopener">CSDN官方社区博客</a></li>
<li><a href="https://blog.csdn.net/UbuntuTouch/article/details/100606857" target="_blank" rel="noopener">一个经典案例</a></li>
<li><a href="https://blog.csdn.net/UbuntuTouch/article/details/104865306" target="_blank" rel="noopener">Geo搜索</a></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Logstash是ELKB中非常重要的组件，其中的filter插件又为其数据的处理贡献了太多，需要长期的积累，以及参考官方文档才能配置出比较适合的filter，这部分需要大量的练习，才能使得分析数据工作变得更加轻松，后续还需要进行一些filter的编写！</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL Qucik Start</title>
    <url>/2020/04/30/MySQL-Qucik-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MySQL 是世界上最受欢迎的数据库管理系统之一，不论是什么类型的项目上都或多或少的使用了MySQL。数据库是一个以某种有组织的方式存储的数据集合。 <strong>推荐书籍：《MySQL Crash Course MySQL必知必会》· [英]  Ben Forta著 刘晓霞 钟鸣译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h2><ol>
<li><p><strong>数据库（database）</strong>：一个以某种有组织的方式存储的数据集合；</p>
</li>
<li><p><strong>表（table）</strong>：一种结构化的文件，可用来存储某种特定类型的数据，可以保存顾客清单、产品目录，或者其他信息清单；数据库中的每个表都有一个名字，用来标识自己，此名字是唯一的；</p>
</li>
<li><p><strong>模式（schema）</strong>：关于数据库和表的布局及特性的信息；</p>
</li>
<li><p><strong>列（column）</strong>：表中的一个字段，所有表都是由一个或多个列组成的；</p>
<ul>
<li>正确地将数据分解为多个列极为重要</li>
<li>根据具体需求来决定把数据分解到何种程度</li>
</ul>
</li>
<li><p><strong>数据类型（datatype）</strong>：所容许的数据的类型，每个表列都有相应的数据类型，限制（或容许）该列中存储的数据；</p>
</li>
<li><p><strong>行（row）</strong>：表中的一个记录；</p>
</li>
<li><p>主键（primary key）：一列（或一组列），其值能够唯一区分表中每个行；表中的任何列都可以作为主键，只要它满足以下条件：</p>
<ul>
<li>任意两行都不具有相同的主键值</li>
<li>每个行都必须具有一个主键值</li>
</ul>
</li>
<li><p>在使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）；</p>
</li>
<li><p>SQL是结构化查询语言（Structured Query Language）的缩写，专门用来与数据库通信的语言；</p>
</li>
<li><p>MySQL、Oracle以及Microsoft SQL Server等数据库是基于客户机—服务器的数据库，服务器部分是负责所有数据访问和处理的一个软件；</p>
</li>
<li><p><strong>关键字(key word)</strong>：作为MySQL语言组成部分的一个保留字，不要用关键字命名一个表或列；</p>
</li>
</ol>
<h2 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h2><ol>
<li><p>使用下面的命令连接数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"># Enter password:</span><br><span class="line"># Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"># Your MySQL connection id is 9</span><br><span class="line"># Server version: 8.0.19 Homebrew</span><br><span class="line"></span><br><span class="line"># Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line"># Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line"># affiliates. Other names may be trademarks of their respective</span><br><span class="line"># owners.</span><br><span class="line"></span><br><span class="line"># Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库crashcourse，以后都在这个数据库里面进行操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE crashcourse;</span><br><span class="line"># Query OK, 1 row affected (0.04 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用crashcourse数据库:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE crashcourse</span><br><span class="line"># Database changed &#x3D;&gt;mysql命令行实用程序在数据库选择成功后显示的</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示所有的数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line"># 返回可用数据库的一个列表</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了获得一个数据库内的表的列表，使用<strong>SHOW TABLES;</strong> ；</p>
</li>
<li><p>可以使用<strong>SHOW命令来显示表的列</strong>，比如 SHOW COLUMNS FROM customers；</p>
</li>
<li><p>DESCRIBE 语句：MySQL支持用 DESCRIBE 作为 SHOW COLUMNS FROM的一种快捷方式；</p>
</li>
<li><p>其他SHOW语句：</p>
<ol>
<li>SHOW STATUS，用于显示广泛的服务器状态信息</li>
<li>SHOW CREATE DATABASE和SHOW CREATE TABLE，分别用来显示创建特定数据库或表的MySQL语句</li>
<li>SHOW GRANTS，用来显示授予用户（所有用户或特定用户）的安全权限</li>
<li>SHOW ERRORS和SHOW WARNINGS，用来显示服务器错误或警告消息</li>
<li>HELP SHOW，显示允许的SHOW语句</li>
</ol>
</li>
</ol>
<h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h2><ol>
<li><p><strong>SELECT语句</strong>：从一个或多个表中检索信息；</p>
</li>
<li><p>检索一个列,所需的列名在SELECT关键字之后给出，FROM关键字指出从其中检索数据的表名，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT age FROM girl;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：即使不一定需要，但加上分号肯定没有坏处；对所有SQL关键字使用大写，而对所有列和表名使用小写，这样做使代码更易于阅读和调试；</strong></p>
</li>
<li><p>检索多个列，必须在SELECT关键字后给出多个列名，列名之间必须以逗号分隔；用星号（*）通配符来检索所有的列（建议不要使用，会降低检索和应用程序的性能）；</p>
</li>
<li><p>注释使用– （两个连字符）嵌在行内，– 之后的文本就是注释；</p>
</li>
<li><p>使用DISTINCT关键字只返回不同的值,<strong><em>DISTINCT 关键字应用于所有列而不仅是前置它的列</em></strong>,比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT age as herage FROM girl ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了返回第一行或前几行，可使用LIMIT子句,不会多于指定的行数，也可以指定检索的起始行（函数从0开始），替代语法 LIMIT 4 OFFSET 3意为从行3开始取4行，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 最多返回3行数据</span><br><span class="line">SELECT age FROM girl LIMIT 3;</span><br><span class="line"># 从第二行开始，返回三行</span><br><span class="line">SELECT age FROM girl LIMIT 2,3;</span><br><span class="line">SELECT age FROM girl LIMIT 3 OFFSET 2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用完全限定的名字来引用列（同时使用表名和列字）也是一种不错的选择；</p>
</li>
</ol>
<h2 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h2><ol>
<li><strong>子句（clause）</strong>：SQL语句由子句构成，有些子句是必需的，而有的是可选的；</li>
<li>排序用SELECT语句检索出的数据，可使用ORDER BY子句；</li>
<li>为了按多个列排序，只要指定列名，列名之间用逗号分开即可,在按多个列排序时，排序完全按所规定的顺序进行;</li>
<li>数据排序不限于升序排序（默认），为了进行降序排序，必须指定DESC关键字，<strong>DESC关键字只应用到直接位于其前面的列名；</strong>与DESC相反的关键字是ASC（ASCENDING），在升序排序时可以指定它；</li>
<li>注意：<ul>
<li><strong>在给出ORDER BY子句时，应该保证它位于 FROM 子句之后；</strong></li>
<li><strong>如果使用 LIMIT，它必须位于 ORDER BY之后；</strong></li>
<li>使用子句的次序不对将产生错误消息。</li>
</ul>
</li>
</ol>
<h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><ol>
<li>只检索所需数据需要指定搜索条件（search criteria）也称为过滤条件（filter condition）；</li>
<li>在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤，<strong>WHERE子句在表名（FROM子句）之后给出</strong>；</li>
<li><strong>在同时使用ORDER BY和WHERE子句时，应该让ORDER BY位于WHERE之后，否则将会产生错误；</strong></li>
<li>WHERE子句操作符：</li>
</ol>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>BETWEEN   AND</td>
<td>在指定的两个值之间</td>
</tr>
</tbody></table>
<ol start="5">
<li><p>SELECT语句有一个特殊的WHERE子句，可用来检查具有NULL值的列，IS NULL子句；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name FROM products WHERE prod_price IS NULL;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="WHERE子句高级用法"><a href="#WHERE子句高级用法" class="headerlink" title="WHERE子句高级用法"></a>WHERE子句高级用法</h2><ol>
<li><p>MySQL允许给出多个WHERE子句，可以两种方式使用：以<strong>AND子句</strong>的方式或<strong>OR子句</strong>的方式使用；</p>
</li>
<li><p><strong>操作符（operator）</strong>：用来联结或改变WHERE子句中的子句的关键字，也称为逻辑操作符（logical operator）；</p>
</li>
<li><p>可以添加多个过滤条件，每添加一条就要使用一个AND；</p>
</li>
<li><p>OR操作符与AND操作符不同，指示MySQL检索匹配任一条件的行；</p>
</li>
<li><p>WHERE可包含任意数目的AND和OR操作符，允许两者结合以进行复杂和高级的过滤：</p>
<ol>
<li><strong>SQL在处理OR操作符前，优先处理AND操作符</strong></li>
<li><strong>使用圆括号明确地分组相应的操作符</strong></li>
<li><strong>任何时候使用具有AND和 OR操作符的WHERE子句，都应该使用圆括号明确地分组操作符</strong></li>
</ol>
</li>
<li><p>IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配，IN取合法值的由逗号分隔的清单，全都括在圆括号中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT age as herage FROM girl WHERE age IN(27,45);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>IN操作符</strong>的优势：</p>
<ol>
<li>在使用长的合法选项清单时，IN操作符的语法更清楚且更直观</li>
<li>在使用IN时，计算的次序更容易管理</li>
<li>IN操作符一般比OR操作符清单执行更快</li>
<li>IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句</li>
</ol>
</li>
<li><p>WHERE子句中的<strong>NOT操作符</strong>有且只有一个功能，那就是否定它之后所跟的任何条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT age as herage FROM girl WHERE age NOT IN(27,45);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h2><ol>
<li><p>利用通配符可创建比较特定数据的搜索模式；</p>
</li>
<li><p><strong>通配符（wildcard）</strong>：用来匹配值的一部分的特殊字符；</p>
</li>
<li><p><strong>搜索模式（search pattern）</strong>：由字面值、通配符或两者组合构成的搜索条件；</p>
</li>
<li><p>为在搜索子句中使用通配符，必须使用LIKE操作符，指示MySQL后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较；</p>
</li>
<li><p>通配符可在搜索模式中任意位置使用，并且可以使用多个通配符；</p>
</li>
<li><p>通配符<strong>百分号（%）</strong>：%表示任何字符出现任意次数，除了一个或多个字符外，%还能匹配0个字符，但是不能匹配NULL；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM girl WHERE age LIKE &#39;4%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通配符<strong>下划线（_）</strong>：只匹配单个字符而不是多个字符;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM girl WHERE age LIKE &#39;2_&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通配符使用技巧：</p>
<ol>
<li><strong><em>不要过度使用通配符</em></strong></li>
<li><strong><em>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处</em></strong></li>
<li><strong><em>仔细注意通配符的位置</em></strong></li>
</ol>
</li>
</ol>
<h2 id="正则表达式高级搜索"><a href="#正则表达式高级搜索" class="headerlink" title="正则表达式高级搜索"></a>正则表达式高级搜索</h2><ol>
<li>MySQL用WHERE子句对正则表达式提供了<strong>初步的支持</strong>，允许你指定正则表达式过滤SELECT检索出的数据；</li>
<li>关键字 LIKE 被 REGEXP替代，来匹配基础正则表达式；</li>
<li>MySQL中的正则表达式匹配不区分大小写，为区分大小写， 可使用 BINARY 关键字， 如 WHERE prod_name REGEXP BINARY ‘JetPack .000’；</li>
<li>为搜索两个串之一（或者为这个串，或者为另一个串），使用|；</li>
<li>如果你只想匹配特定的字符可通过指定一组用[和]括起来的字符来完成；</li>
<li>集合可用来定义要匹配的一个或多个字符，比如：[0123456789]或者[0-9]匹配数字0到9；</li>
<li>为了匹配特殊字符，必须用\为前导,\-表示查找-，\.表示查找. ；</li>
<li>可以使用预定义的字符集， 称为字符类（character class）：</li>
</ol>
<table>
<thead>
<tr>
<th>字符类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[:alnum:]</td>
<td>任意字母和数字（同[a-zA-Z0-9]）</td>
</tr>
<tr>
<td>[:alpha:]</td>
<td>任意字符（同[a-zA-Z]）</td>
</tr>
<tr>
<td>[:blank:]</td>
<td>空格和制表（同[\t]）</td>
</tr>
<tr>
<td>[:cntrl:]</td>
<td>ASCII控制字符（ASCII 0到31和127）</td>
</tr>
<tr>
<td>[:digit:]</td>
<td>任意数字（同[0-9]）</td>
</tr>
<tr>
<td>[:graph:]</td>
<td>与[:print:]相同，但不包括空格</td>
</tr>
<tr>
<td>[:lower:]</td>
<td>任意小写字母（同[a-z]）</td>
</tr>
<tr>
<td>[:print:]</td>
<td>任意可打印字符</td>
</tr>
<tr>
<td>[:punct:]</td>
<td>既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>
</tr>
<tr>
<td>[:space:]</td>
<td>包括空格在内的任意空白字符（同[\f\n\r\t\v]）</td>
</tr>
<tr>
<td>[:upper:]</td>
<td>任意大写字母（同[A-Z]）</td>
</tr>
<tr>
<td>[:xdigit:]</td>
<td>任意十六进制数字（同[a-fA-F0-9]）</td>
</tr>
</tbody></table>
<ol start="9">
<li>重复元字符匹配：</li>
</ol>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>0个或多个匹配</td>
</tr>
<tr>
<td>+</td>
<td>1个或多个匹配（等于{1,}）</td>
</tr>
<tr>
<td>?</td>
<td>0个或1个匹配（等于{0,1}）</td>
</tr>
<tr>
<td>{n}</td>
<td>指定数目的匹配</td>
</tr>
<tr>
<td>{n,}</td>
<td>不少于指定数目的匹配</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配数目的范围（m不超过255）</td>
</tr>
</tbody></table>
<ol start="10">
<li>定位符：</li>
</ol>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>文本的开始</td>
</tr>
<tr>
<td>$</td>
<td>文本的结尾</td>
</tr>
<tr>
<td>[[:&lt;:]]</td>
<td>词的开始</td>
</tr>
<tr>
<td>[[:&gt;:]]</td>
<td>词的结尾</td>
</tr>
</tbody></table>
<h2 id="创建和操作表"><a href="#创建和操作表" class="headerlink" title="创建和操作表"></a>创建和操作表</h2><ol>
<li><p>一般有两种创建表的方法：</p>
<ul>
<li>使用具有交互式创建和管理表的工具（实际上也是用MySQL语句操纵）</li>
<li>直接用MySQL语句操纵</li>
</ul>
</li>
<li><p>为了用程序创建表，可使用SQL的CREATE TABLE语句，必须给出下列信息：</p>
<ul>
<li><strong>（必须）</strong>新表的名字，在关键字CREATE TABLE之后给出</li>
<li><strong>（必须）</strong>表列的名字和定义，用逗号分隔</li>
<li><strong>（可选）</strong>可以包括其他关键字或选项</li>
</ul>
</li>
<li><p>创建表必须先选择一个数据库，这里使用crashcourse数据库，然后创建表的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE customers( cust_id int NOT NULL AUTO_INCREMENT, cust_name char(50) NOT NULL,cust_address char(50)  NULL,cust_city char(50)  NULL,cust_state char(5)  NULL,cust_zip char(50)  NULL,cust_country char(50)  NULL,cust_contact char(50)  NULL,cust_email char(255)  NULL,PRIMARY KEY (cust_id))ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在创建新表时，指定的表名必须不存在，否则将出错；如果仅想在一个表不存在时创建它，应该在表名前给出IF NOT EXISTS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS customers ( cust_id int NOT NULL AUTO_INCREMENT, cust_name char(50) NOT NULL,cust_address char(50)  NULL,cust_city char(50)  NULL,cust_state char(5)  NULL,cust_zip char(50)  NULL,cust_country char(50)  NULL,cust_contact char(50)  NULL,cust_email char(255)  NULL,PRIMARY KEY (cust_id))ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>NULL值就是没有值或缺值，允许NULL值的列也允许在插入行时不给出该列的值，不允许NULL值的列不接受该列没有值的行；</p>
</li>
<li><p>创建成功后，可以使用DESC customers; 来查看表的列属性；</p>
</li>
<li><p>再次强调，<strong>主键值必须唯一</strong>；主键可以在创建表时定义，或者在创建表之后定义，而且只有不允许NULL值的列可以作为主键；</p>
</li>
<li><p>在使用AUTO_INCREMENT列时，可使用last_insert_id()函数获得这个值；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT last_insert_id();</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在插入行时没有给出值，MySQL允许指定此时使用的默认值,<strong>默认值用CREATE TABLE语句的列定义中的DEFAULT关键字指定;</strong></p>
</li>
<li><p>MySQL有一个具体管理和处理数据的内部引擎，打包了多个引擎，需要了解的引擎：</p>
<ul>
<li>InnoDB是一个可靠的事务处理引擎,不支持全文本搜索；</li>
<li>MEMORY在功能等同于MyISAM，由于数据存储在内存中，速度很快（特别适合于临时表）；</li>
<li>MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理；</li>
</ul>
</li>
<li><p><strong>为更新表定义，可使用ALTER TABLE语句</strong>，必须给出下面的信息：</p>
<ul>
<li>在ALTER TABLE之后给出要更改的表名</li>
<li>所做更改的列表</li>
</ul>
</li>
<li><p>复杂的表结构更改一般需要手动删除过程，涉及以下步骤：</p>
<ul>
<li>用新的列布局创建一个新表</li>
<li>使用INSERT SELECT语句</li>
<li>检验包含所需数据的新表</li>
<li>重命名旧表</li>
<li>用旧表原来的名字重命名新表</li>
<li>根据需要，重新创建触发器、存储过程、索引和外键</li>
</ul>
</li>
<li><p><strong><em>注意：必须特别小心使用ALTER TABLE！</em></strong></p>
</li>
<li><p>删除表非常简单，使用DROP TABLE语句即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE customers2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用RENAME TABLE语句可以重命名一个表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENAME TABLE customers2 TO customers;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ol>
<li><p>INSERT是用来插入（或添加）行到数据库表的，插入可以用几种方式使用：</p>
<ul>
<li>插入完整的行</li>
<li>插入行的一部分</li>
<li>插入多行</li>
<li>插入某些查询的结果</li>
</ul>
</li>
<li><p>使用基本的INSERT语法指定表名和被插入到新行中的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers VALUES(NULL, &#39;Pep E. LaPew&#39;,&#39;100 Main Street&#39;,&#39;Los Angles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,NULL,NULL);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写INSERT语句的更安全的方法是说明插入字段的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_name,cust_address,cust_city,cust_state,cust_zip,cust_country,cust_contact,cust_email) VALUES(&#39;Pep E. LaPew&#39;,&#39;100 Main Street&#39;,&#39;Los Angles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,NULL,NULL);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果表的定义允许，则可以在INSERT操作中省略某些列，省略的列必须满足以下某个条件：</p>
<ul>
<li>该列定义为允许NULL值（无值或空值）</li>
<li>在表定义中给出默认值</li>
</ul>
</li>
<li><p>插入多个行，只要每条INSERT语句中的列名（和次序）相同，可以组合各语句，分别用逗号隔开，最后加分号<strong>(可以提高数据库处理的性能)</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_name,cust_address,cust_city,cust_state,cust_zip,cust_country,cust_contact,cust_email) VALUES(&#39;Pep E. LaPew&#39;,&#39;100 Main Street&#39;,&#39;Los Angles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,NULL,NULL),(&#39;Polar&#39;,&#39;102 Main Street&#39;,&#39;Los Angles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,NULL,NULL),(&#39;Nice Pew&#39;,&#39;120 Main Street&#39;,&#39;Los Angles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,NULL,NULL);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以利用它将一条SELECT语句的结果插入表中；</p>
</li>
<li><p>不要使用没有明确给出列的 INSERT 语句！给出列能使 SQL 代码继续发挥作用，即使表结构发生了变化；</p>
</li>
<li><p>要将一个表的内容复制到一个全 新的表（运行中创建的表），可以使用 SELECT INTO 语句；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> CustCopy <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><ol>
<li><p>更新（修改）表中的数据，可使用UPDATE语句：</p>
<ul>
<li>更新表中特定行</li>
<li>更新表中所有行</li>
</ul>
</li>
<li><p>基本的UPDATE语句由3部分组成，分别是：</p>
<ul>
<li>要更新的表</li>
<li>列名和它们的新值</li>
<li>确定要更新行的过滤条件</li>
</ul>
</li>
<li><p>UPDATE 示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE customers SET cust_name&#x3D;&#39;Peter&#39;,cust_email&#x3D;&#39;hello@gmail.com&#39; WHERE cust_id&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为即使是发生错误，也继续进行更新，可使用IGNORE关键字:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE IGNORE customers SET cust_name&#x3D;&#39;Peter&#39;,cust_email&#x3D;&#39;hello@gmail.com&#39; WHERE cust_id&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了从一个表中删除（去掉）数据，使用DELETE语句:</p>
<ul>
<li>从表中删除特定的行</li>
<li>从表中删除所有行</li>
</ul>
</li>
<li><p>DELETE 示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM customers WHERE cust_id&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用UPDATE或DELETE时所遵循的习惯：</p>
<ul>
<li>除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE子句的UPDATE或DELETE语句</li>
<li>保证每个表都有主键，尽可能像WHERE子句那样使用它（可以指定各主键、多个值或值的范围）</li>
<li>在对UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试，保证它过滤的是正确的记录</li>
<li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行</li>
</ul>
</li>
<li><p>DELETE 删除整行而不是删除列，要删除指定的列，请使用 UPDATE 语句；DELETE 语句从表中删除行，甚至是删除表中所有行，但DELETE不删除表本身；</p>
</li>
<li><p>若是 SQL 没有撤销（undo）按钮，应该非常小心地使用 UPDATE 和 DELETE，否则你会发现自己更新或删除了错误的数据，而无法撤销！</p>
</li>
</ol>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol>
<li><p>SQL 允许创建子查询（subquery），即<strong>嵌套在其他查询中的查询</strong>；</p>
</li>
<li><p>可以把一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id <span class="keyword">FROM</span> Orders <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> OrderItems <span class="keyword">WHERE</span> prod_id = <span class="string">'RGAN01'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 SELECT 语句中，子查询总是从内向外处理，而且作为子查询的 SELECT 语句只能查询单个列；</p>
</li>
<li><p><strong>对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多的子查询！</strong></p>
</li>
</ol>
<h2 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h2><ol>
<li><p>与 SQL 语句不一样，SQL 函数不是可移植的；</p>
</li>
<li><p>决定使用函数，应该保证做好代码注释，以便以后你（或其他人）能确切地知道所编写的 SQL 代码的含义；</p>
</li>
<li><p>大多数SQL实现支持的函数类型：</p>
<ul>
<li>用于处理文本字符串（如删除或填充值，转换值为大写或小写）的文本函数</li>
<li>用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数</li>
<li>用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差，检查日期有效性）的日期和时间函数</li>
<li>返回 DBMS 正使用的特殊信息（如返回用户登录信息）的系统函数</li>
</ul>
</li>
<li><p>文本处理函数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4e43e8181babf6697507f6326c32ba97-95140" alt="常用的文本处理函数"></p>
</li>
<li><p>日期和时间值以特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间，而且可移植性很差；</p>
</li>
<li><p>大多数 DBMS 具有比较日期、执行基于日期的运算、选择日期格式等的函数，可能不尽相同，需要查询相关的文档；</p>
</li>
<li><p>数值处理函数仅处理数值数据，主要用于代数、三角或几 何运算：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12efa107a8a1418fdfd7118cb7bfef36-61842" alt="数值处理函数"></p>
</li>
<li><p>SQL算术操作符：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/39cbc9063dea351b645bf22bc1608d34-15817" alt="SQL算术操作符"></p>
</li>
<li><p>聚集函数：对某些行运行的函数，计算并返回一个值</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ac7e53c1b458a20a046ad0656cf7d92e-45288" alt="SQL聚集函数"></p>
<ul>
<li>聚集函数用来汇总数据</li>
<li>可以用多种方法使用它们，返回所需的结果</li>
</ul>
</li>
</ol>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><ol>
<li><p>分组是使用 SELECT 语句的 GROUP BY 子句建立的；</p>
</li>
<li><p>分组子句使用规定：</p>
<ul>
<li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组</li>
<li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总</li>
<li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式</li>
<li>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型</li>
<li>除聚集计算语句外， SELECT 语句中的每一列都必须在 GROUP BY 子句中给出</li>
<li><strong>GROUP BY 子句必须出现在 WHERE 子句之后， ORDER BY 子句之前</strong></li>
</ul>
</li>
<li><p>目前为止所学过的所有类型的 WHERE 子句都可以用 HAVING 来替代，唯一的差别是，WHERE 过滤行，而 HAVING 过滤分组；</p>
</li>
<li><p>SELECT子句顺序：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9541bd58603c9ca26051902722961332-65722" alt="SELECT子句顺序"></p>
</li>
</ol>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><ol>
<li><p>关系表的设计就是要把信息分解成多个表，一类数据一个表，各表通过某些共同的值互相关联；</p>
</li>
<li><p>关系数据可以有效地存储，方便地处理；</p>
</li>
<li><p>联结是一种机制，用来在一条 SELECT 语句中关联表，因此称为联结；</p>
</li>
<li><p>创建联结非常简单，指定要联结的所有表以及关联它们的方式即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price <span class="keyword">FROM</span> Vendors, Products <span class="keyword">WHERE</span> Vendors.vend_id = Products.vend_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要保证所有联结都有 WHERE 子句，否则 DBMS 将返回比想要的数据多得多的数据；</p>
</li>
<li><p>SQL 不限制一条 SELECT 语句中可以联结的表的数目；</p>
</li>
<li><p>SQL允许给表名起别名：</p>
<ul>
<li>缩短 SQL 语句</li>
<li>允许在一条 SELECT语句中多次使用相同的表</li>
</ul>
</li>
<li><p>在使用 OUTER JOIN 语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表（RIGHT 指出的是 OUTER JOIN 右边的表，而 LEFT 指出的是 OUTER JOIN 左边的表）；</p>
</li>
<li><p>与左外联结或右外联结包含一个表的不关联的行不同，全外联结包含两个表的不关联的行；</p>
</li>
<li><p>联结使用要点：</p>
<ul>
<li>注意所使用的联结类型</li>
<li>关于确切的联结语法，应该查看具体的文档，看相应的 DBMS 支持何种语法</li>
<li>保证使用正确的联结条件（不管采用哪种语法），否则会返回不正确的数据</li>
<li>应该总是提供联结条件，否则会得出笛卡儿积</li>
<li>在一个联结中可以包含多个表，甚至可以对每个联结采用不同的联结类型</li>
</ul>
</li>
</ol>
<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><ol>
<li>有两种情况需要使用组合查询：<ul>
<li>在一个查询中从不同的表返回结构数据</li>
<li>对一个表执行多个查询，按一个查询返回数据</li>
</ul>
</li>
<li>可用 UNION 操作符来组合数条 SQL 查询，只是给出每条 SELECT 语句，在各条语句 之间放上关键字 UNION；</li>
<li>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔；</li>
</ol>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ol>
<li><p>视图是虚拟的表，只包含使用时动态检索数据的查询；</p>
</li>
<li><p>视图的应用：</p>
<ul>
<li>重用SQL语句</li>
<li>简化复杂的 SQL 操作</li>
<li>使用表的一部分而不是整个表</li>
<li>保护数据！可以授予用户访问表的特定部分的权限，而不是整个表的访问权限</li>
<li>更改数据格式和表示</li>
</ul>
</li>
<li><p>创建视图之后，可以用与表基本相同的方式使用它们；</p>
</li>
<li><p>视图本身不包含数据，因此返回的数据是从其他表中检索出来的，在添加或更改这些表中的数据时，视图将返回改变过的数据；</p>
</li>
<li><p>视图用 CREATE VIEW 语句来创建，只能用于创建不存在的视图；</p>
</li>
<li><p>删除视图，可以使用 DROP 语句，其语法为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> viewname;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><ol>
<li>游标（cursor）是一个存储在 DBMS 服务器上的数据库查询， 它不是一条 SELECT 语句，而是被该语句检索出来的结果集；</li>
<li>在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据；</li>
<li>游标常见的一些选项和特性：<ul>
<li>能够标记游标为只读，使数据能读取，但不能更新和删除</li>
<li>能控制可以执行的定向操作（向前、向后、第一、最后、绝对位置、相对位置等）</li>
<li>能标记某些列为可编辑的，某些列为不可编辑的</li>
<li>规定范围，使游标对创建它的特定请求（如存储过程）或对所有请求可访问</li>
<li>指示 DBMS 对检索出的数据（而不是指出表中活动数据）进行复制，使数据在游标打开和访问期间不变化</li>
</ul>
</li>
</ol>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ol>
<li>存储过程就是为以后使用而保存的一条或多条 SQL 语句；</li>
<li>使用存储过程有三个主要的好处，即简单、安全、高性能；</li>
<li>执行存储过程的 SQL 语句很简单，即 EXECUTE；</li>
</ol>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol>
<li>使用事务处理（transaction processing），通过确保成批的 SQL 操作要么完全执行，要么完全不执行，来维护数据库的完整性；</li>
<li>事务处理是一种机制， 用来管理必须成批执行的 SQL 操作，保证数据库不包含不完整的操作结果；</li>
<li>事务（transaction）指一组 SQL 语句；</li>
<li>回退（rollback）指撤销指定 SQL 语句的过程；</li>
<li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li>
<li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），可以对它发布回退（与回退整个事务处理不同）！</li>
</ol>
<hr>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li>数据库管理员通常使用关系图来说明数据库表的关联方式;</li>
<li>数据类型是定义列中可以存储什么数据以及该数据实际怎样存储的基本规则；</li>
<li>在设计表时，应该特别重视所用的数据类型。使用错误的数据类型可能会严重影响应用程序的功能和性能；</li>
<li>外键是表中的一列，其值必须列在另一表的主键中，外键是保证引用完 整性的极其重要部分；</li>
<li>索引用来排序数据以加快搜索和排序操作的速度；</li>
<li>任何安全系统的基础都是用户授权和身份确认，安全性使用 SQL 的 GRANT 和 REVOKE 语句来管理；</li>
<li>一般来说需要保护的操作有：<ul>
<li>对数据库管理功能（创建表、更改或删除已存在的表等）的访问</li>
<li>对特定数据库或表的访问</li>
<li>访问的类型（只读、对特定列的访问等）</li>
<li>仅通过视图或存储过程对表进行访问</li>
<li>创建多层次的安全措施，从而允许多种基于登录的访问和控制</li>
<li>限制管理用户账号的能力</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL基础强化</title>
    <url>/2020/06/22/MySQL%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> 近年来，和其他系统领域一样，数据库领域也实现了飞速发展，应用范围不断扩大， 不但出现了具有新功能的数据库，而且操作的数据量也大幅增长！为了追求更高的大规模数据处理的性能，内存数据库和面向列数据库的技术也取得了长足的进步，并逐渐投入到实际应用当中。 <strong>推荐书籍：《MySQL 基础教程（第2版）·资深数据库工程师写给初学者的实用指南》· [日]  MICK 著 孙淼 罗勇译    《MySQL 进阶教程》· [日]  MICK 著 吴炎昌 译     《MySQL 与MariaDB学习指南》· [美]  Russel J.T. Dyer 著 袁志鹏译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>RDBMS常见的系统结构是客户端/服务器类型（C/S类型）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2ede615f0582020a25fbc0fe39b989dc-93303" alt="RDBMS系统结构"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ba332c00c7d39f00e4d5c9e6eb8247f7-87765" alt="多客户端结构"></p>
</li>
<li><p>数据库和表的关系：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f0872b4cd3aa9be7999c577792105a47-101767" alt="数据库和表的关系"></p>
</li>
<li><p>SQL语句及其种类：</p>
<ul>
<li>DDL（Data Definition Language，数据定义语言） 用来创建或者删除存储数据用的数据库以及数据库中的表等对象</li>
<li>DML（Data Manipulation Language，数据操纵语言） 用来查询或者变更表中的记录</li>
<li>DCL（Data Control Language，数据控制语言） 用来确认或者取消对数据库中的数据进行的变更</li>
</ul>
</li>
<li><p><strong>只能使用半角英文字母、数字、下划线（_）作为数据库、表和列的名称；</strong></p>
</li>
<li><p>运算符：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/51395f70253f4b1d9cec8773ab8c45ee-90369" alt="AND运算符"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c73001bb08782e5ca58b43a4e5404fc7-91983" alt="OR运算符"></p>
</li>
<li><p>ACID 特性：</p>
<ul>
<li>原子性（Atomicity）</li>
<li>一致性（Consistency）</li>
<li>隔离性（Isolation）</li>
<li>持久性（Durability）</li>
</ul>
</li>
<li><p>视图和表：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cf90c7dfb3a58fec35193c90ad64874a-102665" alt="视图和表"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c78696fb958c8412d1a86aa37de7ce6a-74535" alt="视图基础上创建视图"></p>
<ul>
<li>在实际的业务中数据量往往非常大，这时使用视图所节省的容量就会非常可观了</li>
<li>表中存储的是实际数据，而视图中保存的是从表中取出数据所使用的 SELECT 语句</li>
</ul>
</li>
<li><p>CASE 表达式的语法分为简单 CASE 表达式和搜索 CASE 表达式两种（较为复杂）：</p>
<ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CASE WHEN &lt; 求值表达式 &gt; THEN &lt; 表达式 &gt;</span><br><span class="line">		 WHEN &lt; 求值表达式 &gt; THEN &lt; 表达式 &gt;</span><br><span class="line">     WHEN &lt; 求值表达式 &gt; THEN &lt; 表达式 &gt;</span><br><span class="line"> 		 ELSE &lt;表达式 &gt;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数据库应用系统：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12148c2c797cab28957d7ff41d60561a-66256" alt="数据库应用系统"></p>
</li>
</ol>
<h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="灵活的CASE"><a href="#灵活的CASE" class="headerlink" title="灵活的CASE"></a>灵活的CASE</h2><ol>
<li><p>CASE 表达式是不依赖于具体数据库的技术，因此可以提高 SQL 代码的可移植性；</p>
</li>
<li><p>CASE 表达式有简单 CASE 表达式 （simple case expression） 和搜索 CASE 表达式（searched case expression） 两种写法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 简单 CASE 表达式</span></span><br><span class="line">CASE sex</span><br><span class="line">	WHEN '1' THEN '男'</span><br><span class="line">	WHEN '2' THEN '女'</span><br><span class="line">ELSE '其他' <span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 搜索 CASE 表达式</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'1'</span> <span class="keyword">THEN</span> <span class="string">'男'</span></span><br><span class="line">		 <span class="keyword">WHEN</span> sex = <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'女'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>简单 CASE 表达式能写的条件，搜索 CASE 表达式也能写，因此基本上采用搜索 CASE 表达式的写法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 简单CASE 使用</span></span><br><span class="line"><span class="keyword">SELECT</span> Customers.cust_id ,<span class="keyword">CASE</span> Customers.cust_country <span class="keyword">WHEN</span> <span class="string">'USA'</span> <span class="keyword">THEN</span> <span class="string">'美国'</span> <span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span>  <span class="keyword">AS</span> country <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ac9c91c5626686cacb2123310747a3a1-46194" alt="简单CASE使用"></p>
<ul>
<li><strong>为了避免引起不必要的混乱，使用 WHEN 子句时要注意条件的排他性！</strong></li>
<li>使用 CASE 表达式的时候，最容易出现的语法错误是忘记写 END</li>
<li>不写 ELSE 子句时， CASE 表达式的执行结果是 NULL，因此养成写 ELSE 子句的习惯</li>
</ul>
</li>
<li><p>经常会遇到将已有编号方式转换为另外一种便于分析的方式并进行统计的需求，这个时候CASE就能派上用场了；</p>
</li>
<li><p>必须在 SELECT 子句和 GROUP BY 子句这 两处写一样的 CASE 表达式，这有点儿麻烦，可以使用AS来改变：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 把县编号转换成地区编号 (2) ：将 CASE 表达式归纳到一处</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> pref_name</span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'德岛'</span> <span class="keyword">THEN</span> <span class="string">'四国'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'香川'</span> <span class="keyword">THEN</span> <span class="string">'四国'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'爱媛'</span> <span class="keyword">THEN</span> <span class="string">'四国'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'高知'</span> <span class="keyword">THEN</span> <span class="string">'四国'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'福冈'</span> <span class="keyword">THEN</span> <span class="string">'九州'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'佐贺'</span> <span class="keyword">THEN</span> <span class="string">'九州'</span></span><br><span class="line">						<span class="keyword">WHEN</span> <span class="string">'长崎'</span> <span class="keyword">THEN</span> <span class="string">'九州'</span></span><br><span class="line">			<span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span> <span class="keyword">AS</span> district,</span><br><span class="line">			<span class="keyword">SUM</span>(population)</span><br><span class="line"><span class="keyword">FROM</span> PopTbl</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> district;</span><br></pre></td></tr></table></figure>

<ul>
<li>虽然MySQL支持，但是不推荐使用！</li>
</ul>
</li>
<li><p><strong>新手用 WHERE 子句进行条件分支， 高手用 SELECT 子句进行条件分支</strong></p>
</li>
<li><p>在 GROUP BY 子句里使用 CASE 表达式，可以灵活地选择作为聚合的单位的编号或等级；</p>
</li>
<li><p>在聚合函数中使用 CASE 表达式，可以轻松地将行结构的数据转换成列结构的数据；</p>
</li>
<li><p>聚合函数可以嵌套进 CASE 表达式里使用；</p>
</li>
<li><p>相比依赖于具体数据库的函数， CASE 表达式有更强大的表达能力和更好的可移植性；</p>
</li>
</ol>
<h2 id="自连接运算"><a href="#自连接运算" class="headerlink" title="自连接运算"></a>自连接运算</h2><ol>
<li><p>SQL 的连接运算根据其特征的不同，有着不同的名称，如内连接、外连接、交叉连接等；</p>
</li>
<li><p>针对相同的表进行的连接被称为“自连接”（self join）；</p>
</li>
<li><p>用 SQL 生成有序对非常简单，像下面这样通过交叉连接生成笛卡 积（直积），就可以得到有序对：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用于获取可重排列的 SQL 语句</span></span><br><span class="line"><span class="keyword">SELECT</span> P1.name <span class="keyword">AS</span> name_1, P2.name <span class="keyword">AS</span> name_2 <span class="keyword">FROM</span> Products P1, Products P2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>去重：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用于获取排列的 SQL 语句</span></span><br><span class="line"><span class="keyword">SELECT</span> P1.name <span class="keyword">AS</span> name_1, P2.name <span class="keyword">AS</span> name_2</span><br><span class="line"><span class="keyword">FROM</span> Products P1, Products P2</span><br><span class="line"><span class="keyword">WHERE</span> P1.name &lt;&gt; P2.name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用等号“＝”以外的比较运算符，如“&lt;、&gt;、&lt;&gt;” 进行的连接称为“非等值连接”，将非等值连接与自连接结合使用，就称为“非等值自连接”；</p>
</li>
<li><p>与多表之间进行的普通连接相比，自连接的性能开销更大；</p>
</li>
<li><p>自连接和 GROUP BY 结合使用可以生成递归集合；</p>
</li>
<li><p>将自连接看作不同表之间的连接更容易理解；</p>
</li>
<li><p>自连接的性能开销更大，应尽量给用于连接的列建立索引！</p>
</li>
</ol>
<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><ol>
<li><p>标准 SQL 里定义了外连接的三种类型：</p>
<ul>
<li>左外连接（LEFT OUTER JOIN）</li>
<li>右外连接（RIGHT OUTER JOIN）</li>
<li>全外连接（FULL OUTER JOIN）</li>
</ul>
</li>
<li><p>左外连接和右外连接没有功能上的区别，<strong>用作主表的表</strong>写在运算符左边时用左外连接，写在运算符右边时用右外连接；</p>
</li>
<li><p>全外连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全外连接保留全部信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COALESCE</span>(A.id, B.id) <span class="keyword">AS</span> <span class="keyword">id</span>,A.name <span class="keyword">AS</span> A_name,B.name <span class="keyword">AS</span> B_name</span><br><span class="line"><span class="keyword">FROM</span> Class_A A <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Class_B B <span class="keyword">ON</span> A.id = B.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果所用的数据库不支持全外连接，可以分别进行左外连接和右外连接，再把两个结果通过 UNION 合并起来，也能达到同样的目的；</p>
</li>
<li><p>内外连接的区别：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/780293237f69de6764df298d53c5de72-22370" alt="内连接"></p>
<ul>
<li>内连接</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3d22fd36ff938addc82262e52dfcca17-21760" alt="外连接"></p>
<ul>
<li><p>外连接</p>
</li>
<li><p>内连接相当于求集合的积（INTERSECT）</p>
</li>
<li><p>外连接相当于求集合的和（UNION）</p>
</li>
</ul>
</li>
<li><p>SQL 没有定义求异或集的运算符，如果用集合运算符，可以有两种方法：</p>
<ul>
<li>一种是 (A UNION B) EXCEPT (A INTERSECT B) </li>
<li>另一种是 (A EXCEPT B) UNION (B EXCEPT A) </li>
</ul>
</li>
<li><p><strong>建议：</strong></p>
<ul>
<li>OUTER 也是可以省略的，所以我们也可以写成 LEFT JOIN 和 FULL JOIN （标准 SQL 也是允许的），但是为了区分是内连接和外连接， 最好还是写上</li>
<li>SQL 不是用来生成报表的语言，因此不建议用它来进行格式转换</li>
<li>必要时考虑用外连接或 CASE 表达式来解决问题</li>
<li>外连接的思想和集合运算很像，使用外连接可以实现各种集合运算</li>
</ul>
</li>
</ol>
<h2 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h2><ol>
<li><p>将表看作抽象度较高的集合，以集合为单位进行操作；</p>
</li>
<li><p>HAVING 子句是可以单独使用的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果有查询结果，说明存在缺失的编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'存在缺失的编号'</span> <span class="keyword">AS</span> gap</span><br><span class="line">	<span class="keyword">FROM</span> SeqTbl</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &lt;&gt; <span class="keyword">MAX</span>(seq);</span><br></pre></td></tr></table></figure>
</li>
<li><p>求众数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 求众数的 SQL 语句 (1)：使用谓词 </span></span><br><span class="line"><span class="keyword">SELECT</span> income, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> Graduates <span class="keyword">GROUP</span> <span class="keyword">BY</span> income <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="keyword">ALL</span> ( <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> Graduates <span class="keyword">GROUP</span> <span class="keyword">BY</span> income);</span><br></pre></td></tr></table></figure>
</li>
<li><p>表不是文件，记录也没有顺序，所以 SQL 不进行排序;</p>
</li>
<li><p>SQL 不像面向过程语言那样通过画流程图来思考问题，而是通过画集合的关系图来思考；</p>
</li>
<li><p>GROUP BY 子句可以用来生成子集；</p>
</li>
<li><p>WHERE 子句用来调查集合元素的性质，而 HAVING 子句用来调查集合本身的性质；</p>
</li>
</ol>
<h2 id="SQL性能优化"><a href="#SQL性能优化" class="headerlink" title="SQL性能优化"></a>SQL性能优化</h2><ol>
<li>SQL 的性能优化是数据库工程师在实际工作中必须面对的重要课题之一！</li>
<li>查询速度慢并不只是因为 SQL 语句本身，还可能是因为内存分配不佳、文件结构不合理等其他原因；</li>
<li>参数是子查询时，使用 EXISTS 代替 IN；</li>
<li>参数是子查询时，使用连接代替 IN；</li>
<li>如果没有经过深入思考就定义复杂的视图，可能会带来巨大的性能问题；</li>
<li>… …</li>
</ol>
<h1 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h1><h2 id="用户账号和权限"><a href="#用户账号和权限" class="headerlink" title="用户账号和权限"></a>用户账号和权限</h2><ol>
<li><p>访问和权限基于用户和主机的组合，这个组合也叫用户账号；</p>
</li>
<li><p>作为 root 用户，可以用 CREATE USER 语句来创建用户账号；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'wanderros'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看用户权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'wanderros'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="" alt="查看用户权限"></p>
<ul>
<li>授权使用所有数据库和所有表</li>
</ul>
</li>
<li><p>赋权：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> learnmysql.* <span class="keyword">TO</span> <span class="string">'wanderros'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> learnmysql.* <span class="keyword">TO</span> <span class="string">'wanderros'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="" alt="GRANT与REVOKE可以使用的权限"></p>
</li>
<li><p>恢复数据：</p>
<ul>
<li>将数据从 dump 文件恢复到表中时，用户账号至少需要 INSERT 权限</li>
<li>在插入数据时，还需要 LOCK TABLES 权限来锁住表</li>
<li>需要 CREATE 和 INDEX 权限来分别创建表和索引</li>
<li>因为 dump 文件可能包含设置校对集的语句，所以需要 ALTER 权限</li>
<li>将数据恢复到临时表需要 CREATE TEMPORARY TABLES 权限</li>
<li>如果数据库有视图或触发器，则需要 CREATE VIEW 和 TRIGGER 权限</li>
</ul>
</li>
<li><p>DROP USER 语句可用于删除用户账号；</p>
</li>
<li><p>修改密码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'admin_granter'</span>@<span class="string">'localhost'</span>=<span class="string">'new_passwd'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RENAME USER 用于修改用户名，可以用它来改用户账号的用户名和主机；</p>
</li>
</ol>
<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><ol>
<li><p>mysqldump是MySQL 和 MariaDB 上最好的备份工具之一，无需关闭服务器就能做备份；</p>
</li>
<li><p>备份所有数据库、所有表，以及其中的数据，是最简单的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --user=admin_backup --password --lock-all-tables --all-databases &gt; /data/backups/all-dbs.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>–user= admin_backup，让 mysqldump 以 admin_backup 账号与 MySQL 服务器进行交互</li>
<li>–password，让 mysqldump 在下一行弹出输入密码的提示符</li>
<li>–lock-all-tables，在做备份前，先让 MySQL 锁住所有表，然后直到备份完成才解锁</li>
<li>–all-databases，导出所有数据库</li>
</ul>
</li>
<li><p>备份指定的数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --user=admin_backup --password --lock-tables  --verbose --databases learnmysql &gt; learnmysql.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份指定的表:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --user=admin_backup --password --lock-tables --databases birdwatchers --tables humans &gt; birdwatchers-humans.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --user=admin_restore --password &lt; learnmysql.sql</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><h2 id="关系型的由来"><a href="#关系型的由来" class="headerlink" title="关系型的由来"></a>关系型的由来</h2><ol>
<li>关系数据库从诞生至今已经有四十多年，现在依然拥有着巨大的市场规模，一直以来都在日常工作和生活中使用着；</li>
<li>关系型数据库之父Codd的贡献：<ul>
<li>定义了关系运算（relational calculus）</li>
<li>定义了关系代数（relational algebra）</li>
<li>采用谓词逻辑作为数据库操作的基础</li>
</ul>
</li>
<li>由于关系数据库以谓词逻辑作为基础，逻辑学的研究成果才可以直接应用于数据管理系统；</li>
</ol>
<h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><ol>
<li>数据库采用了关系模型，因此才被称为关系数据库；</li>
<li>关系和表的区别：<ul>
<li>关系是通常说的不允许存在重复元素的集合， 而表是多重集合</li>
<li>关系中的元组没有从上往下的顺序，而表中的行有从上往下的顺序</li>
<li>关系中的属性没有从左往右的顺序，而表中的列有从左往右的顺序</li>
<li>关系中所有的属性的值都是不可分割的，而表中列的值是可以分割的</li>
</ul>
</li>
<li>关系模型是以数学中的集合论为基础的，因此沿用了集合论的一些术语；</li>
<li>真正的关系系统就是支持关系值等全部复合型数据的系统。也许十年以后，真的会出现能够定义高阶关系的 DBMS！</li>
<li>在关系模型中， 关系对关系运算符也是封闭的；</li>
<li>集合分类：<ul>
<li>群（group）：对加法和减法（或者乘法和除法）封闭</li>
<li>环（ring）：对加法、减法、乘法封闭</li>
<li>域（filed）：对加法、减法、乘法、除法封闭，即可以自由进行四则运算</li>
</ul>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>消灭 NULL：</p>
<ul>
<li>在进行 SQL 编码时，必须考虑违反人类直觉的三值逻辑</li>
<li>在指定 IS NULL 、 IS NOT NULL 的时候，不会用到索引，因而SQL 语句执行起来性能低下</li>
<li>如果四则运算以及 SQL 函数的参数中包含 NULL，会引起“ NULL的传播”</li>
<li>在接收SQL查询结果的宿主语言中，NULL的处理方法没有统一的标准</li>
<li>与一般列的值不同， NULL 是通过在数据行的某处加上多余的位 （bit）来实现的，因为占据更多的内存</li>
</ul>
</li>
<li><p>如果四则运算中包含 NULL ，那么运算结果也肯定都是 NULL；</p>
</li>
<li><p><strong>NULL 最恐怖的地方就在于即使你认为自己已经完全驾驭它了，但还是一不小心就会被它在背后捅一刀！</strong></p>
</li>
<li><p>消除NULL的方法：</p>
<ul>
<li>首先分析能不能设置默认值</li>
<li>仅在无论如何都无法设置默认值时允许使用 NULL</li>
</ul>
</li>
<li><p>MariaDB 比 MySQL 更加遵守开源规则，更加贴近多数人的想法，是MySQL的可选替代品！</p>
</li>
<li><p><strong>事实上越是遮遮掩掩的政府和组织，越应该喜欢开源软件，因为开源软件的仇家比商业软件的要少，更不容易遭受攻击和破解！</strong></p>
</li>
<li><p>改变root密码的方法有多种。其中一种是使用管理工具 mysqladmin ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p flush-privileges password "new_pwd"</span><br></pre></td></tr></table></figure>
</li>
<li><p>在建表时，我们需要规划好方案，即需要建什么域（或列）!</p>
</li>
<li><p>在改表之前，尤其是改含有数据的表之前，应该做好数据备份，使用 musqldump 工具来备份你要改的表， 或备份整个数据库。</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个世界没有一天是无聊的，只不过是你懒惰已久的感官无法发现眼前事物的乐趣而已！<strong>河水流动经久不息，然而已经不是原来的水。</strong>由于 MySQL 称霸已久， 无法撼动， 而且人们总是习惯使用熟悉的东西， 所以就算有更好的东西出现， 可能也难以取而代之！若真要取代 MySQL 开源数据库的霸主地位，除了要有更好的功能， 还要允许用户运用现有的知识轻松地迁移数据。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>NoSQL Qucik Start</title>
    <url>/2020/06/25/NoSQL-Qucik-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>NoSQL和高性能、分布式、海量数据等热词有着千丝万缕的联系！随着用户内容的增长，所生成、处理、分析和归档的数据的规模快速增大，类型也快速增多，这些大数据集通常被称为大数据。 *<em>推荐书籍：《深入NoSQL》· [印] Shashank Tiwari著 巨成 译 *</em></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>NoSQL并不单指一个产品或一种技术，代表一族产品，以及一系列不同的、有时相互关联的、有关数据存储以及处理的概念；</li>
<li>金无足赤，SQL虽好，但是面对大量稀疏数据时就很鸡肋，这个时候NoSQL就发挥作用了！</li>
<li>NoSQL缓解了RDBMS引发的问题并降低了处理海量稀疏数据的难度，但是反过来也被夺去了事务完整性的力量和灵活的索引以及查询能力；</li>
<li>可扩展性：<ul>
<li>配置一个大而强的资源来满足额外的需求</li>
<li>依靠普通机器组成的集群</li>
</ul>
</li>
<li>每个数据单元可以看作一组键/值对集合，单元本身通过主标识符（primary identifier）标识，主标识符又叫主键；</li>
<li>每条数据中只有合法的键/值对才会被存储；</li>
<li>哈希表或关联数组是可以容纳键值对的最简数据结构；</li>
<li>EHCache是一个开源分布式缓存系统广泛应用于各类Java应用中；</li>
<li>Memcached在Web应用中非常流行 ，是开源的高性能对象缓存系统；</li>
<li>文档数据库中的文档一词意指文档中松散结构的键值对集合，通常是JSON,而非一般意义的文档或表格；</li>
<li>当今为数不多的开源文档数据库中，声明远扬的数MongoDB和CouchDB；</li>
<li>图形数据库和XML数据存储，也可以算作NoSQL数据库，图形数据库有：Neo4j和FlockDB！</li>
</ol>
<h2 id="大数据产品"><a href="#大数据产品" class="headerlink" title="大数据产品"></a>大数据产品</h2><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><ol>
<li>在线资源：<a href="http://hbase.apache.org/" target="_blank" rel="noopener">http://hbase.apache.org/</a></li>
<li>历史：创建于Powerset，微软收购Powerset前HBase被捐赠给了Apache基金会</li>
<li>技术和语言：Java实现</li>
<li>访问方法：JRuby的shell支持命令行访问，有Thrift、Avro、REST和protobuf客户端</li>
<li>查询语言：无原生查询语言，由Hive提供类SQL接口</li>
<li>开源许可证：Apache License版本2</li>
<li>使用者：Facebook、StumbleUpon、Hulu、Ning、Mahalo、Yahoo！等</li>
</ol>
<h3 id="Hypertable"><a href="#Hypertable" class="headerlink" title="Hypertable"></a>Hypertable</h3><ol>
<li>在线资源：<a href="http://www.hypertable.org" target="_blank" rel="noopener">http://www.hypertable.org</a>  </li>
<li>历史：创建于Zvents，现在是独立开源项目</li>
<li>技术和语言：C++实现，使用Google RE2正则表达式类库</li>
<li>访问方法：支持命令行，支持Thrift接口</li>
<li>查询语言：HQL（Hypertable Query Language， Hypertable查询语言）是一种用于查询Hypertable数据的类SQL抽象</li>
<li>开源许可证：GNU GPL版本2</li>
<li>使用者：Zvents、百度和Rediff</li>
</ol>
<h3 id="Cloudata"><a href="#Cloudata" class="headerlink" title="Cloudata"></a>Cloudata</h3><ol>
<li>在线资源：<a href="http://www.cloudata.org" target="_blank" rel="noopener">http://www.cloudata.org</a>  </li>
<li>历史：由韩国开发者YK Kwon创建，没有太多有关其起源的公开信息</li>
<li>技术和语言：Java实现</li>
<li>访问方法：支持命令行，支持Thrift、REST和Java API</li>
<li>查询语言：CQL（Cloudata Query Language， Cloudata 查询语言）是一种用于查询Cloudata数据的类SQL抽象</li>
<li>开源许可证：Apache License版本2</li>
<li>使用者：不详</li>
</ol>
<h2 id="NoSQL初体验（MongoDB）"><a href="#NoSQL初体验（MongoDB）" class="headerlink" title="NoSQL初体验（MongoDB）"></a>NoSQL初体验（MongoDB）</h2><ol>
<li><p>市面上有很多的NoSQL产品，而且都提供了引人注目的功能和优势，要决定使用哪款或者哪几款产品并不是件容易的事！</p>
</li>
<li><p>在MongoDB中创建数据库以及集合的步骤如下：</p>
<ul>
<li>切换到指定数据库，比如prefs；</li>
<li>定义要存储的数据集；</li>
<li>将定义好的数据集保存到集合中，比如集合location。</li>
</ul>
</li>
<li><p><strong>在MongoDB中，数据库和集合都是在插入数据时才创建！</strong></p>
</li>
<li><p>在MongoDB中ObjectId.ObjectId用来唯一标识每条记录或每个文档；</p>
</li>
<li><p>调用find方法如果不带参数则返回集合中的所有元素，但是某些情况下可能只需要集合的部分子集；</p>
</li>
<li><p>MongoDB支持许多高级查询机制，包括借助了正则表达式的模式；</p>
</li>
<li><p>MongoDB中，集合是弱结构的，因此可以在同一个集合中允许存储不同的文档类型；</p>
</li>
<li><p>MongoDB样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用数据库</span><br><span class="line">use prefs</span><br><span class="line">&#x2F;&#x2F; 记录</span><br><span class="line">w&#x3D;&#123;name:&quot;wanderros&quot;,zip:10086&#125;;</span><br><span class="line">x&#x3D;&#123;name:&quot;world&quot;,zip:12316&#125;;</span><br><span class="line">&#x2F;&#x2F; 存储记录</span><br><span class="line">db.location.save(w);</span><br><span class="line">db.location.save(x);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全查询</span><br><span class="line">db.location.find()</span><br><span class="line">&#x2F;&#x2F; 输出</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5ef593575c8ff3af476fed3b&quot;), &quot;name&quot; : &quot;wanderros&quot;, &quot;zip&quot; : 10086 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5ef593645c8ff3af476fed3c&quot;), &quot;name&quot; : &quot;world&quot;, &quot;zip&quot; : 12316 &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定查询</span><br><span class="line">db.location.find(&#123;zip:12316&#125;)</span><br><span class="line">&#x2F;&#x2F; 输出</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5ef593645c8ff3af476fed3c&quot;), &quot;name&quot; : &quot;world&quot;, &quot;zip&quot; : 12316 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要把NoSQL嵌入应用程序栈里,必须使用最流行的语言访问和操作这些存储，MongoDB可以使用Java、PHP、Ruby和Python等主流语言来开发应用;</p>
</li>
<li><p>在SpringBoot中可以快速集成MongoDB，只要在配置的时候勾选上对应的插件即可；</p>
</li>
<li><p>SpringBoot中使用</p>
<ul>
<li><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">client.setWriteConcern(WriteConcern.SAFE);</span><br><span class="line">MongoDatabase mongoDatabase = client.getDatabase(<span class="string">"project"</span>);</span><br><span class="line">MongoCollection&lt;Document&gt; spit = mongoDatabase.getCollection(<span class="string">"location"</span>);</span><br><span class="line"><span class="comment">//获取集合</span></span><br><span class="line">FindIterable&lt;Document&gt; documents = spit.find();</span><br><span class="line"><span class="comment">//查询记录获取文档集合</span></span><br><span class="line"><span class="keyword">for</span>(Document document:documents)&#123;</span><br><span class="line">  System.out.println(<span class="string">"姓名："</span>+ document.getString(<span class="string">"name"</span>));</span><br><span class="line">  System.out.println(<span class="string">"zip:"</span>+document.getDouble(<span class="string">"zip"</span>));</span><br><span class="line">&#125;</span><br><span class="line">client.close();<span class="comment">//关闭连接</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">姓名：wanderros</span><br><span class="line">zip:10086.0</span><br><span class="line">姓名：world</span><br><span class="line">zip:12316.0</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>插入数据到集合中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">client.setWriteConcern(WriteConcern.SAFE);</span><br><span class="line">MongoDatabase mongoDatabase = client.getDatabase(<span class="string">"project"</span>);</span><br><span class="line">MongoCollection&lt;Document&gt; spit = mongoDatabase.getCollection(<span class="string">"location"</span>);</span><br><span class="line">Document documenttest = <span class="keyword">new</span> Document(<span class="string">"title"</span>, <span class="string">"MongoDB"</span>).</span><br><span class="line">        append(<span class="string">"description"</span>, <span class="string">"database"</span>).</span><br><span class="line">        append(<span class="string">"likes"</span>, <span class="number">100</span>).</span><br><span class="line">        append(<span class="string">"by"</span>, <span class="string">"Fly"</span>);</span><br><span class="line">spit.insertOne(documenttest);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Thrift是跨语言服务开发框架，由一套软件和一个代码生成引擎组成，能无缝连接多种语言，可以创建许多不同的语言绑定；</p>
</li>
</ol>
<h2 id="NoSQL区分"><a href="#NoSQL区分" class="headerlink" title="NoSQL区分"></a>NoSQL区分</h2><ol>
<li><p>NoSQL分类：</p>
<ul>
<li>文档存储——MonogoDB和CouchDB</li>
<li>键值存储——Redis和BerkeleyDB</li>
<li>列族存储——HBase和Hypertable</li>
<li>最终一致的键值存储——Apache Cassandra和Voldermot</li>
</ul>
</li>
<li><p>作为文档存储的一种，MongoDB可以存储任意数据集合，只要数据可以用JSON式的对象层次结构表示就可以；</p>
</li>
<li><p>MongoDB支持的不仅仅是JSON，还有BSON（二进制编码序列化JSON结构）；</p>
</li>
<li><p>Redis是持久化键值存储，为了保持高效，它把数据库放在内存里，然后利用异步线程将其写入磁盘；</p>
</li>
<li><p>HBase和列数据库按列存储数据，空值不需要存储，因此非常有利于保存稀疏数据集；</p>
</li>
<li><p>Apache Thrift是开源的跨语言的服务开发框架，是代码生成引擎，用来创建能够与多种编程语言交互的服务，使用步骤如下：</p>
<ol>
<li>下载Thrift</li>
<li>解压源码</li>
<li>构建和安装Thrift</li>
<li>编写Thrift服务定义，这是最重要的部分，用来生成代码的底层定义</li>
<li>使用Thrift编译器生成特定语言的代码</li>
</ol>
</li>
<li><p>HBase集群架构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/dfd191a183b19d008f96dbc0c3694c14-549937" alt="HBase集群"></p>
</li>
<li><p>HBase使数据的结构扁平化,只有列族和它包含的列之间才有层次关系；</p>
</li>
<li><p>MonogoDB查询文档是数据类型敏感的；</p>
</li>
<li><p>MapReduce是Google申请了专利的软件框架，支持在大型分布式集群上进行分布式计算；</p>
</li>
<li><p>Google和MonogoDB的MapReduce功能也从函数式编程世界的类似结构中得到了启发；</p>
</li>
<li><p>MapReduce可以帮助我们在分布式的数据集合上执行大规模计算！</p>
</li>
</ol>
<h2 id="Hive-amp-大数据"><a href="#Hive-amp-大数据" class="headerlink" title="Hive&amp;大数据"></a>Hive&amp;大数据</h2><ol>
<li>Apache Hive是建立在Hadoop基础上的数据仓库，Apache Pig是大数据分析的高级语言！</li>
<li>Hive在Hadoop上提供了优雅的类SQL查询框架，有很好的扩展性，能处理海量的分布式数据集，但是不是实时查询系统；</li>
<li>Hive中不存在查询缓存,因此重复查询耗时和第一次查询一样!</li>
<li>Hive支持非常全面的过滤和聚合查询，可以用WHERE子句来过滤数据，也可以使用GROUP BY分组；</li>
<li>Hive支持内连接、外连接和左外连接；</li>
<li>Hive基于Hadoop并利用MapReduce,Hive里的计划解释可以揭示查询背后的MapReduce！</li>
<li>表分区可以将数据分到多个命名空间中去，并基于命名空间标识符对数据进行过滤和查询；</li>
<li>Hive开源并作为Hadoop的一个子项目，现在已经是顶级项目，而且继续处于快速发展中，填补着SQL和NoSQL之间的空白！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要介绍的还是MonogoDB！NoSQL泛指非关系型数据库，之前看过书籍介绍Redis，这部分学习了MonogODB以及了解了NoSQL相关的基础知识，大数据相关的知识也有所介绍，但是远远不够！之前听过一本书名《左手MonogoDB右手Redis》，现在是摸着两种技术的边了，后续可以继续深入学习！</p>
]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs-Express</title>
    <url>/2020/04/28/Nodejs-Express/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript、Node和Express 的组合是Web团队的理想选择，可快速部署的技术栈得到了开发社区和大公司的广泛认可，Express 提供了较低的总体拥有成本和较快的上市时间！Node 生态系统提供的框架、库和工具改变了这种状况，它们可以加速开发，鼓励良好的编程习惯！Express是精简的、灵活的 Node.js Web 程序框架，为构建单页、多页及混合的 Web 程序提供了一系列健壮的功能特性！<strong><em>推荐书籍：《Node与Express开发》· Ethan Brown著 吴海星 苏文译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="新技术的衍生"><a href="#新技术的衍生" class="headerlink" title="新技术的衍生"></a>新技术的衍生</h2><ol>
<li>Node 开发的出现带动了一种新式的数据库存储方式，这种方式被称为“NoSQL 数据库”；</li>
<li>构建一个功能性网站要借助很多种技术，因此衍生了一种用来描述网站构建基础“技术栈”的缩略语；</li>
</ol>
<ul>
<li>Linux、Apache、MySQL 和 PHP 被称为 <strong>LAMP</strong> 栈</li>
<li>Mongo、Express、Angular 和Node 被称为 <strong>MEAN</strong> 栈</li>
<li>Node、Express 和 MongoDB 被称为 <strong>JavaScript技术</strong> 栈</li>
</ul>
<h2 id="平台搭建"><a href="#平台搭建" class="headerlink" title="平台搭建"></a>平台搭建</h2><ol>
<li>Mac上：brew install nodejs</li>
<li>npm 是 Node 开发包管理器，主要负责安装开发包和管理依赖项；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装grunt编译方式</span></span><br><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Node 所提供的范式跟传统的 Web 服务器不同,只是提供了一个构建 Web 服务器的框架;</li>
<li>第一个Hello World程序：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">	res.write(<span class="string">'&lt;h1&gt;大标题&lt;/h1&gt;'</span>);<span class="comment">//会出现乱码</span></span><br><span class="line">	res.end(<span class="string">'Hello World,NodeJs'</span>);</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is listening on localhost:80,press ctrl-c to terminate ... ...'</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>路由是指向客户端提供它所发出的请求内容的机制，客户端在 URL 中指明它想要的内容， 具体来说就是路径和查询字符串；修改案例,用 Node 提供静态资源只适用于初期的小型项目（适合练习）：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> path=req.url.replace(<span class="regexp">/\/?(?:\?.*)?$/</span>,<span class="string">''</span>).toLowerCase();</span><br><span class="line">	<span class="keyword">switch</span>(path)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">''</span>:</span><br><span class="line">			res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Conten-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">			res.end(<span class="string">'HomePage'</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/about'</span>:</span><br><span class="line">			res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Conten-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">			res.end(<span class="string">'About Page'</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			res.writeHead(<span class="number">404</span>,&#123;<span class="string">'Conten-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">			res.end(<span class="string">'Not found!'</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is listening on localhost:80,press ctrl-c to terminate ... ...'</span>);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Node处理Web的原理：必须打开文件，读取其中的内容，然后将这些内容发送给浏览器；</li>
<li>简单的html网页读取：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 异步读取html页面内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serverStaticFile</span>(<span class="params">res,path,contentType,responseCode</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!responseCode) responseCode=<span class="number">200</span>;</span><br><span class="line">	fs.readFile(__dirname+path,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)</span><br><span class="line">		&#123;</span><br><span class="line">			res.writeHead(<span class="number">500</span>,&#123;<span class="string">'ContentType'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">			res.end(<span class="string">'&lt;h1&gt;500-Internal Error&lt;/h1&gt;'</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			res.writeHead(responseCode,&#123;<span class="string">'ContentType'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">			res.end(data);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> path=req.url.replace(<span class="regexp">/\/?(?:\?.*)?$/</span>,<span class="string">''</span>).toLowerCase();</span><br><span class="line">	<span class="keyword">switch</span>(path)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">''</span>:</span><br><span class="line">			serverStaticFile(res,<span class="string">'/public/home.html'</span>,<span class="string">'text/html'</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/about'</span>:</span><br><span class="line">			serverStaticFile(res,<span class="string">'/public/about.html'</span>,<span class="string">'text/html'</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			serverStaticFile(res,<span class="string">'/public/notfound.html'</span>,<span class="string">'text/html'</span>,<span class="number">404</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is listening on localhost:80,press ctrl-c to terminate ... ...'</span>);</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>上述的内容都明白的话，说明已经有了基础的Nodejs开发基础了，那么接下来就是Expres的表现了！</li>
</ol>
<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><ol>
<li>创建一个通用的项目骨架，每次开始新项目时，只需复制这个骨架，那么开发就可以减少很多重复性劳动；</li>
<li>创建一个文件夹，用于学习express，使用<strong>npm init</strong>引导，然后下载express包，使用命令<strong>npm install –save express</strong>；</li>
<li>示例代码：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT||<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定制化404</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.type(<span class="string">'text/html'</span>);</span><br><span class="line">	res.status(<span class="number">404</span>);</span><br><span class="line">	res.send(<span class="string">'404-Not Found'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.error(err.stack);</span><br><span class="line">	res.type(<span class="string">'text/html'</span>);</span><br><span class="line">	res.status(<span class="number">500</span>);</span><br><span class="line">	res.send(<span class="string">'500-Internal Error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'express started on http://localhost:'</span>+app.get(<span class="string">'port'</span>)+<span class="string">';press ctrl c to terminate... ... '</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>不幸的事就是访问对应的port却没有任何路由信息，因为没有提供对应的资源给express去管理；</li>
<li>添加路由：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.get 是我们添加路由的方法 </span></span><br><span class="line"><span class="comment">// 在 Express 文档中写的是 app.VERB ; VERB 用来指代 HTTP 动词的</span></span><br><span class="line"><span class="comment">// 参数：一个路径和一个函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.type(<span class="string">'text/html'</span>);</span><br><span class="line">	res.send(<span class="string">'&lt;h1&gt;Home Page&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/about'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.type(<span class="string">'text/html'</span>);</span><br><span class="line">	res.send(<span class="string">'&lt;h1&gt;About Page&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>app.VERB 帮我们做了很多工作：它默认忽略了大小写或反斜杠， 并且在进行匹配时也不考虑查询字符串，因此对于 /about、/About、/about/、/about?foo=bar、/about/?foo=bar 等路径都适用；路由匹配上之后就会调用你提供的函数， 并把请求和响应对象作为参数传给这个函数；</li>
<li>Express 提供了一个 res.type 方法， 可以方便地设置响应头 Content-Type，用res.set 和 res.status 替换了 Node 的 res.writeHead，app.use 是 Express 添加 <strong>中间件</strong> 的一种方法；</li>
<li><strong><em>在 Express 中，路由和中间件的添加顺序至关重要</em></strong>，如果我们把404 处理器放在所有路由上面， 那首页和关于页面就不能用了， 访问这些 URL 得到的都是 404；</li>
<li>在 Express 中,<strong>路由支持通配符，这会导致顺序上的问题,</strong>在使用上要注意点；</li>
<li>熟悉MVC（模型 - 视图 - 控制器）的话，就能更好理解Express中的<strong>视图引擎</strong>，Express 比较偏好的视图引擎是 Jade；Handlebars（基于与语言无关的流行模板语言Mustache）不会试图对 HTML 进行抽象，为了支持 Handlebars， 要用到 Eric Ferraiuolo 的 express-handlebars 包，执行命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save express-handlebars</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>创建模板文件：views/layouts/main.handlebars</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Learn Nodejs <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123;&#123;body&#125;&#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="12">
<li>创建视图页面：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.handlebars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">Welcome to Learn Nodejs</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--about.handlebars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">About Learn Nodejs</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--404.handlebars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">404 - Not Found </span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--500.handlebars--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">500 - Server Error</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="13">
<li>修改路由设置：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"><span class="keyword">var</span> handlebars=<span class="built_in">require</span>(<span class="string">'express-handlebars'</span>).create(&#123;<span class="attr">defaultLayout</span>:<span class="string">'main'</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT||<span class="number">8080</span>);</span><br><span class="line">app.engine(<span class="string">'handlebars'</span>,handlebars.engine);</span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'handlebars'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.render(<span class="string">'home'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/about*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/about/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定制化404</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.status(<span class="number">404</span>);</span><br><span class="line">	res.render(<span class="string">'404'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.error(err.stack);</span><br><span class="line">	res.status(<span class="number">500</span>);</span><br><span class="line">	res.render(<span class="string">'500'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'express started on http://localhost:'</span>+app.get(<span class="string">'port'</span>)+<span class="string">';press ctrl c to terminate... ... '</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>Express 靠中间件处理静态文件和视图，<strong>static 中间件可以将一个或多个目录指派为包含静态资源的目录，其中的资源不经过任何特殊处理直接发送到客户端</strong>，可以在其中放图片、CSS 文件、客户端 JavaScript 文件之类的资源；要把 static 中间件加在所有路由之前：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static中间件相当于给你想要发送的所有静态文件创建了一个路由，渲染文件并发送给客户端</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</span><br></pre></td></tr></table></figure>

<ol start="15">
<li>在 public 下面创建一个子目录 img， 并把 logo.jpg 文件放在其中，然后修改模板文件<strong>main.handlebars</strong>就可以做到在所有页面出现logo：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Learn Nodejs <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/img/logo.jpg"</span> <span class="attr">alt</span>=<span class="string">"Learn Nodejs Logo"</span> &gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">&#123;&#123;&#123;body&#125;&#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="16">
<li><p>视图真正的强大之处在于它可以包含动态信息，比如下面的示例：</p>
<ol>
<li>在 about.handlebars中修改如下:</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Learn Nodejs<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Your fortune for the day: <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> &#123;&#123;fortune&#125;&#125; <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在index.js中添加数组fortunes，以及修改about的处理：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fortunes = [</span><br><span class="line"><span class="string">"Conquer your fears or they will conquer you."</span>, </span><br><span class="line"><span class="string">"Rivers need springs."</span>, </span><br><span class="line"><span class="string">"Do not fear what you don't know."</span>, </span><br><span class="line"><span class="string">"You will have a pleasant surprise."</span>,</span><br><span class="line"><span class="string">"Whenever possible, keep it simple."</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/about'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> randomFortune=fortunes[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*fortunes.length)];</span><br><span class="line">	<span class="comment">//console.log('value: ' + randomFortune);</span></span><br><span class="line">	res.render(<span class="string">'about'</span>,&#123;<span class="attr">fortune</span> : randomFortune&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用curl命令，curl <a href="http://localhost:8080/about，可以看到每次的返回的信息都不太一样：" target="_blank" rel="noopener">http://localhost:8080/about，可以看到每次的返回的信息都不太一样：</a></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一种可能的返回 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Learn Nodejs <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/img/logo.jpg"</span> <span class="attr">alt</span>=<span class="string">"Learn Nodejs Logo"</span> &gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">About Learn Nodejs</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Your fortune for the day: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> You will have a pleasant surprise. <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>%</span><br></pre></td></tr></table></figure>

<h2 id="Node项目"><a href="#Node项目" class="headerlink" title="Node项目"></a>Node项目</h2><ol>
<li>package.json 文件作用之一是存放项目的元数据,比如项目名称、作者、授权信息等,可以使用npm init来创建package.json文件;</li>
<li>Node 模块和 npm 包是两个相互关联但又彼此不同的概念，Node 模块提供了一个模块化和封装的机制，npm 包则提供了一种存储、版本化和引用项目（不限于模块）的标准范式；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>*<em>require *</em>是一个用来引入模块的Node 函数，默认会在目录 node_modules中寻找这些模块；</li>
<li>创建一个用来保存模块的目录，一般称为lib，在这个目录下面创建自己的js文件，比如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib/fortune.js</span></span><br><span class="line"><span class="keyword">var</span> fortunes = [</span><br><span class="line"><span class="string">"Conquer your fears or they will conquer you."</span>, </span><br><span class="line"><span class="string">"Rivers need springs."</span>, </span><br><span class="line"><span class="string">"Do not fear what you don't know."</span>, </span><br><span class="line"><span class="string">"You will have a pleasant surprise."</span>,</span><br><span class="line"><span class="string">"Whenever possible, keep it simple."</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">exports.getFortune=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> idx=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*fortunes.length);</span><br><span class="line">	<span class="keyword">return</span> fortunes[idx];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>如果想让一个东西在模块外可见，必须把它加到exports 上,然后修改index.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 修改的require</span></span><br><span class="line"><span class="keyword">var</span> fortune=<span class="built_in">require</span>(<span class="string">'./lib/fortune.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"><span class="keyword">var</span> handlebars=<span class="built_in">require</span>(<span class="string">'express-handlebars'</span>).create(&#123;<span class="attr">defaultLayout</span>:<span class="string">'main'</span>&#125;);</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT||<span class="number">8080</span>);</span><br><span class="line">app.engine(<span class="string">'handlebars'</span>,handlebars.engine);</span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'handlebars'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.render(<span class="string">'home'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//直接使用外部的js函数</span></span><br><span class="line">app.get(<span class="string">'/about*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> randomFortune=fortune.getFortune();</span><br><span class="line">	res.render(<span class="string">'about'</span>,&#123;<span class="attr">fortune</span> : randomFortune&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/about/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.render(<span class="string">'about'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定制化404</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.status(<span class="number">404</span>);</span><br><span class="line">	res.render(<span class="string">'404'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.error(err.stack);</span><br><span class="line">	res.status(<span class="number">500</span>);</span><br><span class="line">	res.render(<span class="string">'500'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'express started on http://localhost:'</span>+app.get(<span class="string">'port'</span>)+<span class="string">';press ctrl c to terminate... ... '</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="质量保证（QA）"><a href="#质量保证（QA）" class="headerlink" title="质量保证（QA）"></a>质量保证（QA）</h2><ol>
<li>页面测试：用来测试页面的表示和前端功能，可以使用Mocha 进行页面测试；</li>
<li>跨页测试：对从一个页面转到另一个页面的功能的测试，测试用的是 Zombie.js、Selenium、PhantomJS；</li>
<li>逻辑测试：测试 JavaScript，跟所有表示功能分开；</li>
<li>去毛：找出潜在的错误，用 JSHint 做去毛；</li>
<li>链接检查：确保你的网站上没有破损的链接，用 LinkChecker 做链接检查</li>
</ol>
<h2 id="页面测试"><a href="#页面测试" class="headerlink" title="页面测试"></a>页面测试</h2><ol>
<li>安装测试框架Mocha：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用的是 --save-dev 而不是 --save,要把这个包放在开发依赖项中 </span></span><br><span class="line">npm install --save-dev mocha</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将测试资源放在public/vendor目录下：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把用到的第三方库放在一个特殊的目录中,比较容易分清哪些代码是需要负责测试和修改的， 哪些代码不应该触碰</span></span><br><span class="line">mkdir public/vendor </span><br><span class="line">cp node_modules/mocha/mocha.js public/vendor </span><br><span class="line">cp node_modules/mocha/mocha.css public/vendor</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试通常需要一个 assert （或 expect ）函数，浏览器中没有，可以安装Chai断言库：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev chai</span><br><span class="line">cp node_modules/chai/chai.js public/vendor</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在定义的所有路由之前添加中间件检测查询字符串中的test=1：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果test=1 出现在任何页面的查询字符串中（并且不是运行在生产服务器上）， 属性 res.locals.showTests 就会被设为 true</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123; </span><br><span class="line">	res.locals.showTests = app.get(<span class="string">'env'</span>) !== <span class="string">'production'</span> &amp;&amp; req.query.test === <span class="string">'1'</span>; </span><br><span class="line">	next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改模板文件<strong><em>views/layouts/main.handlebars</em></strong>，引入测试框架：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Learn Nodejs <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">&#123;&#123;#if showTests&#125;&#125; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/vendor/mocha.css"</span> &gt;</span> &#123;&#123;/if&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//code.jquery.com/jquery-2.0.2.min.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/img/logo.jpg"</span> <span class="attr">alt</span>=<span class="string">"Learn Nodejs Logo"</span> &gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">&#123;&#123;&#123;body&#125;&#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#123;#if showTests&#125;&#125; </span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mocha"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/vendor/mocha.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/vendor/chai.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"> mocha.ui(<span class="string">'tdd'</span>); <span class="keyword">var</span> assert = chai.assert; </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/qa/tests-global.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	&#123;&#123;#if pageTestScript&#125;&#125; </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;pageTestScript&#125;&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">	&#123;&#123;/if&#125;&#125; </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span> mocha.run(); <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>添加目录 public/qa， 然后在其中创建文件 tests-global.js，tests-about.js：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tests-global.js</span></span><br><span class="line">suite(<span class="string">'Global Tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">	test(<span class="string">'page has a valid title'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">		assert(<span class="built_in">document</span>.title &amp;&amp; <span class="built_in">document</span>.title.match(<span class="regexp">/\S/</span>) &amp;&amp; <span class="built_in">document</span>.title.toUpperCase() !== <span class="string">'TODO'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// tests-about.js</span></span><br><span class="line">suite(<span class="string">'"About" Page Tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	test(<span class="string">'page should contain link to contact page'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		assert($(<span class="string">'a[href="/contact"]'</span>).length);</span><br><span class="line"></span><br><span class="line">	&#125;);</span><br><span class="line">	 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>修改index.js中about路由的测试脚本：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/about*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> randomFortune=fortune.getFortune();</span><br><span class="line"></span><br><span class="line">	res.render(<span class="string">'about'</span>,&#123;<span class="attr">fortune</span> : randomFortune,<span class="attr">pageTestScript</span>: <span class="string">'/qa/tests-about.js'</span>&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>访问<a href="http://localhost:8080/about?test=1；" target="_blank" rel="noopener">http://localhost:8080/about?test=1；</a></li>
<li>创建跨页面测试（qa/tests-crosspage.js）:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Browser = <span class="built_in">require</span>(<span class="string">'zombie'</span>), assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"><span class="keyword">var</span> browser;</span><br><span class="line"></span><br><span class="line">suite(<span class="string">'Cross-page tests'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		browser=<span class="keyword">new</span> Browser();</span><br><span class="line">	&#125;);</span><br><span class="line">	test(<span class="string">'require a group'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> reffer=<span class="string">'http:localhost:8080'</span>;</span><br><span class="line">		browser.visit(reffer,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			done();</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>依赖全局mocha，执行下面的命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mocha -u tdd -R spec qa/tests-crosspage.js 2&gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出：</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Cross-page tests</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    ✓ require a group (41ms)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  1 passing (46ms)</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li><p>Mocha 单元测试：</p>
<ol>
<li>创建qa/tests-unit.js:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fortune = <span class="built_in">require</span>(<span class="string">'../lib/fortune.js'</span>);</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"></span><br><span class="line">suite(<span class="string">'Fortune cookie tests'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	test(<span class="string">'getFortune() should return a fortune'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">		expect(<span class="keyword">typeof</span> fortune.getFortune() === <span class="string">'string'</span>);</span><br><span class="line">		 &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mocha -u tdd -R spec qa/tests-unit.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Fortune cookie tests</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   ✓ getFortune() should <span class="built_in">return</span> a fortune</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 passing (5ms)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>grunt实现这些任务的自动化：</strong></p>
<ol>
<li>安装grunt：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br><span class="line">npm install --save-dev grunt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>插件安装：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev grunt-cafe-mocha </span><br><span class="line">npm install --save-dev grunt-contrib-jshint </span><br><span class="line">npm install --save-dev grunt-exec</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在项目下创建一个Gruntfile.js:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	[</span><br><span class="line">		<span class="string">'grunt-cafe-mocha'</span>,</span><br><span class="line">		<span class="string">'grunt-contrib-jshint'</span>,</span><br><span class="line">		<span class="string">'grunt-exec'</span></span><br><span class="line">	].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">task</span>)</span>&#123;</span><br><span class="line">		grunt.loadNpmTasks(task);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	grunt.initConfig(&#123;<span class="attr">cafemocha</span>:&#123;<span class="attr">all</span>:&#123;<span class="attr">src</span>:<span class="string">'qa/tests-*.js'</span>,<span class="attr">option</span>:&#123;<span class="attr">ui</span>:<span class="string">'tdd'</span>&#125;&#125;&#125;,</span><br><span class="line">		jshint:&#123;</span><br><span class="line">			app: [<span class="string">'index.js'</span>,<span class="string">'public/js/**/*.js'</span>,<span class="string">'lib/**/*.js'</span>],</span><br><span class="line">			qa:[<span class="string">'Gruntfile.js'</span>,<span class="string">'publi/qa/**/*.js'</span>,<span class="string">'qa/**/**.js'</span>],</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">&#125;);</span><br><span class="line">	grunt.registerTask(<span class="string">'default'</span>,[<span class="string">'cafemocha'</span>,<span class="string">'jshint'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>项目里运行grunt。</li>
</ol>
</li>
</ol>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><ol>
<li>URL组成部分：<a href="http://localhost:8080/search?test=1#history" target="_blank" rel="noopener">http://localhost:8080/search?test=1#history</a><ol>
<li>协议：确定如何传输请求，比如http</li>
<li>主机名： 标识服务器，比如本地服务器localhost</li>
<li>端口：8080</li>
<li>路径：/search</li>
<li>查询字符串：一种键值对集合，是可选的。它以问号（?）开头，键值对则以与号（&amp;）分隔开</li>
<li>信息片段：信息片段 （或 散列 ）被严格限制在浏览器中使用，不会传递到服务器，如#history</li>
</ol>
</li>
<li>HTTP协议确定了客户端与服务器通信的 <strong>请求方法</strong> 集合（HTTP verbs）；</li>
<li>请求报头：服务器因请求得知优先响应哪种语言的页面，所有能够确保你了解请求对象头文件属性的信息都将会作为请求报头发送；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/header'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	res.set(<span class="string">'Content-Type'</span>,<span class="string">'text/plain'</span>);</span><br><span class="line">	<span class="keyword">var</span> s=<span class="string">''</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> req.headers)&#123;</span><br><span class="line">		s += name + <span class="string">': '</span> + req.headers[name] + <span class="string">'\n'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	res.send(s);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 浏览器访问输出：</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">host: localhost:8080</span></span><br><span class="line"><span class="comment"> connection: keep-alive</span></span><br><span class="line"><span class="comment">upgrade-insecure-requests: 1</span></span><br><span class="line"><span class="comment">user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>响应报头：当服务器响应时，会回传一些浏览器没必要渲染和显示的信息，通常是元数据和服务器信息：</p>
<ol>
<li>告诉浏览器正在被传输的内容类型（网页、图片、样式表、客户端脚本等）</li>
<li>根据内容类型报头处理信息</li>
<li>指出响应信息是否被压缩，以及使用的是哪种编码</li>
<li>可以包含关于浏览器对资源缓存时长的提示</li>
<li>包含一些关于服务器的信息</li>
</ol>
</li>
<li><p>查看报头信息：</p>
<ol>
<li>打开开发者工具</li>
<li>选择Network，然后刷新页面</li>
<li>选择header可以看到报头信息</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">host: localhost:8080</span><br><span class="line">connection: keep-alive</span><br><span class="line">cache-control: max-age=0</span><br><span class="line">upgrade-insecure-requests: 1</span><br><span class="line">user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36</span><br><span class="line">accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>请求对象，通常命名为 req：</strong></p>
<ol>
<li>req.params：一个数组，包含命名过的路由参数</li>
<li><del>req.param(name)：返回命名的路由参数，或者 GET 请求或 POST 请求参数</del></li>
<li>req.query：一个对象，包含以键值对存放的查询字符串参数（请求中的?后面带的内容）</li>
<li>req.body：一个对象， 包含 POST 请求参数</li>
<li><strong><em>req.route：关于当前匹配路由的信息，主要用于路由调试</em></strong></li>
<li>req.cookies/req.singnedCookies：一个对象，包含从客户端传递过来的cookies值</li>
<li>req.headers：从客户端接收到的请求报头</li>
<li>req.accepts([types])：一个简便的方法， 用来确定客户端是否接受一个或一组指定的类型</li>
<li>req.ip：客户端的 IP 地址</li>
<li>req.path：请求路径（不包含协议、主机、端口或查询字符串）</li>
<li>req.host：一个简便的方法，用来返回客户端所报告的主机名</li>
<li>req.xhr：一个简便属性，如果请求由 Ajax 发起将会返回true</li>
<li>req.protocol：用于标识请求的协议（ http 或 https）</li>
<li>req.secure：一个简便属性，如果连接是安全的，将返回 true 。等同于 req.protocol===’https’</li>
<li>req.url/req.originalUrl：返回了路径和查询字符串</li>
<li>req.acceptedLanguages：一个简便方法，用来返回客户端首选的一组（人类的）语言</li>
</ol>
</li>
<li><p><strong>响应对象，通常命名为res：</strong></p>
<ol>
<li>res.status(code)：设置HTTP状态码，Express 默认为 200（成功）</li>
<li>res.set(name,value)：设置响应头。这通常不需要手动设置</li>
<li>res.cookie（name,vaue,[options]）,res.clearCookie(name,[options])：设置或清除客户端cookies值，需要中间件支持</li>
<li>res.redirect([status],url)：重定向浏览器。默认重定向代码是 302 （建立），应尽量减少重定向，除非永久移动一个页面，这种情况应当使用代码 301 （永久移动）</li>
<li>res.send(body),res.send(status,body)：向客户端发送响应及可选的状态码</li>
<li>res.json(json),res.json(status,json)：向客户端发送 JSON 以及可选的状态码</li>
<li>res.jsonp(json),req.jsonp(status,json)：向客户端发送 JSONP 及可选的状态码</li>
<li>res.type(type)：用于设置 Content-Type 头信息</li>
<li><strong><em>res.format(object)：允许根据接收请求报头发送不同的内容</em></strong></li>
<li>res.attachment([filename]),res.download(path,[filename],[callback])：将响应报头 Content-Disposition 设为 attachment ， 这样浏览器就会选择下载而不是展现内容</li>
<li>res.sendFile(path,[option],[callback])：根据路径读取指定文件并将内容发送到客户端</li>
<li>res.links(links)：设置链接响应报头，这是一个专用的报头，在大多数应用程序中几乎没有用处</li>
<li>res.locals,res.render(view,[locals],callback)：res.locals 是一个对象， 包含用于渲染视图的 默认上下文，res.render使用配置的模板引擎渲染视图</li>
</ol>
</li>
</ol>
<h2 id="Handlebars模板引擎"><a href="#Handlebars模板引擎" class="headerlink" title="Handlebars模板引擎"></a>Handlebars模板引擎</h2><ol>
<li>模板解决了在目标语言中编写代码的问题， 同时也让插入动态数据成为了可能；</li>
<li>模板引擎的选择标准：<ol>
<li>性能</li>
<li>客户端、服务端或兼而有之？</li>
<li>抽象</li>
</ol>
</li>
<li>Jade 就以抽象 HTML 细节而引人注目，依赖缩进和一些常识性规则， 从而更容易表达出自己想要的；</li>
<li>当渲染一个模板时，便会传递给模板引擎一个对象，叫作 上下文对象 ，它能让替换标识运行。<strong>使用三重大括号关闭 HTML 转义的功能具有一些重要用途；</strong></li>
<li>Handlebars 的注释:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;! This comment will not be <span class="keyword">in</span> the output &#125;&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><strong>块级表达式提供了流程控制、条件执行和可扩展性</strong>,需要使用上下文来解释，相对来说比较复杂；</li>
<li>服务器端模板会在 HTML 发送到客户端之前渲染它，除了隐藏实现细节，还支持模板缓存，视图缓存会在开发模式下禁用，在生产模式下启用。如果想显式地启用视图缓存，app.set(‘view cache’, true);</li>
<li><strong><em>扩展名改成同样常见的 .hbs；</em></strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'express-handlebars'</span>).create(&#123; <span class="attr">extname</span>: <span class="string">'.hbs'</span> &#125;)</span><br></pre></td></tr></table></figure>



<ol start="10">
<li><strong>视图</strong> 通常表现为网站上的各个页面，默认情况下， Express 会在 views 子目录中查找视图；</li>
<li>布局** 是一种特殊的视图,是一个用于模板的模板,比如上面使用的views/layouts/main.hadlebars；<strong><em>模板里的 body在哪里放置并没有限制</em></strong></li>
<li>视图首先被渲染， 之后是布局，它允许视图本身进一步自定义布局；***</li>
<li>默认情况下， Express 会在 views 子目录中查找视图，在 views/layouts 下查找布局；当然可以在视图中指定使用的layout，比如不使用：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用布局，那么必须在视图中拥有样板文件</span></span><br><span class="line">app.get(<span class="string">'/foo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'foo'</span>, &#123; <span class="attr">layout</span>: <span class="literal">null</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定布局,会使用布局views/layouts/another.handlebars来渲染视图</span></span><br><span class="line">app.get(<span class="string">'/foo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.render(<span class="string">'foor'</span>,&#123;<span class="attr">layout</span>:<span class="string">'another'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>有些组成部分需要在不同的页面重复使用，默认情况下局部文件放在views/partials子目录下，不想让个别的视图干扰指定的上下文，于是将所有的局部文件上下文都放在 partials 对象中；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">语法 &#123;&#123;&gt; partial_name&#125;&#125; 可以让你在视图中包含一个局部文件，express-handlebars 会在 views/partials 中寻找一个叫作 partial_name.handle-bars 的视图，支持子目录，可以将它们放在 views/partials/social目录下面，然后使用 &#123;&#123;&gt; social/partial_name&#125;&#125;；</span><br></pre></td></tr></table></figure>

<ol start="15">
<li><p>实例化 Handlebars 对象时， 会添加一个叫作section 的辅助方法；</p>
</li>
<li><p>模板加主题可以使得网站的一致性以及美观性大大提高，但是注意不是模板越多越好，需要去权衡！</p>
</li>
</ol>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ol>
<li><p><strong>HTTPS访问：</strong></p>
<ol>
<li>生成自己的证书：brew install openssl （如果没有安装的话）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout meadowlark.pem -out meadowlark.crt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将生成的公钥和私钥移动到目录的ssl目录下；</li>
<li>修改index.js:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//"use strict";</span></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> fortune=<span class="built_in">require</span>(<span class="string">'./lib/fortune.js'</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">	key: fs.readFileSync(__dirname + <span class="string">'/ssl/meadowlark.pem'</span>),</span><br><span class="line">	cert: fs.readFileSync(__dirname + <span class="string">'/ssl/meadowlark.crt'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT||<span class="number">443</span>);</span><br><span class="line"><span class="comment">// 省略其他部分</span></span><br><span class="line">https.createServer(options, app).listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'Express started in '</span> + app.get(<span class="string">'env'</span>) + <span class="string">' mode on port '</span> + app.get(<span class="string">'port'</span>) + <span class="string">'.'</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用Safari浏览器访问：<a href="https://localhost；注意谷歌浏览器是没法让你访问的，可以申请认证机构的证书去访问，但这里只是学习！" target="_blank" rel="noopener">https://localhost；注意谷歌浏览器是没法让你访问的，可以申请认证机构的证书去访问，但这里只是学习！</a></li>
</ol>
</li>
<li><p><strong>跨站请求伪造：</strong></p>
<ol>
<li><p>跨站请求伪造（CSRF）攻击利用了用户一般都会相信浏览器并且在同一个会话中访问多个网站这样的事实；</p>
</li>
<li><p>要防范 CSRF 攻击， 必须想办法确保请求合法地来自自己的网站，可以给浏览器传一个唯一的令牌；</p>
</li>
<li><p>csurf中间件可以产生令牌以及验证令牌：</p>
<ol>
<li>安装：npm install –save csurf</li>
<li>引入：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个必须放在 cookie-parser 和 connect-session 的引入之后 </span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'csurf'</span>)()); </span><br><span class="line">app.use( <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">	res.locals._csrfToken = req.csrfToken();</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>csurf 中间件添加了 csurfToken 方法到请求对象上,不一定非要把它赋给 res.locals ，可以将 req.csurfToken() 直接传给需要它的视图，但这个工作量一般更小</li>
<li>如果 body 中的域没有有效的 _csrf 域，它会引发一个错误（确保你的中间件里有错误路由！）</li>
</ol>
</li>
<li><p>Passport 是为 Node/Express 做的认证模块，非常健壮；</p>
<ol>
<li>安装：npm install –save passport</li>
<li>第三方认证：<strong>TODO</strong></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Express和MVC"><a href="#Express和MVC" class="headerlink" title="Express和MVC"></a>Express和MVC</h2><ol>
<li>模型 - 视图 - 控制器（MVC）最大的优势之一是它减少了项目的学习时间！在 MVC 中， 模型 是“纯粹”的数据和逻辑，根本不关心自己跟用户之间的交互；视图将模型传递给用户，而控制器则接受用户输入，处理模型，选择要显示哪个（些）视图；</li>
<li>变体：微软的“模型 - 视图 - 视图模型”（MVVM），视图模型的想法是说它是模型的转化，可以“保护”模型；</li>
<li>模型绝对是最最重要的组件，模型是项目的基石；模型中的逻辑严重依赖于持久性，把这两层分开可能得不偿失；</li>
<li><strong>建议在项目中创建一个叫 models 的子目录来存放模型，只要有要实现的逻辑，或要存储的数据，都应该在 models 目录下的文件里完成；</strong></li>
<li>视图模型是保持模型抽象性的办法，同时还能为视图提供有意义的数据;</li>
<li>控制器负责处理用户交互，并根据用户交互选择恰当的视图来显示，控制器和路由器之间唯一的区别是控制器一般会把相关功能归组；</li>
<li>能限制选择的只有想象力了，如果想把控制器从路由中完全剥离出来，肯定可以那么做！</li>
</ol>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ol>
<li>从用户那里收集信息的常用方法就是使用 HTML 表单 ；</li>
<li>向服务器发送客户端数据有两种方式： 查询字符串和请求正文</li>
</ol>
<ul>
<li>使用查询字符串， 就发起了一个 GET 请求  </li>
<li>使用请求正文， 就发起了一个 POST 请求  </li>
</ul>
<ol start="3">
<li>从服务器的角度来看， 最重要的属性是 <input> 域中的 name 属性， 这样服务器才能识别字段；name 属性与 id 属性是截然不同的， 后者只适用于样式和前端功能，id是不会发送到服务端的；    </li>
<li>注意隐藏域： 它不会呈现在浏览器中。 但是， 你不能使用它存放秘密和敏感信息： 用户只要查看页面源文件， 隐藏域就会暴露出来；   </li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/process"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"hush"</span> <span class="attr">val</span>=<span class="string">"hidden, but not secret!"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fieldColor"</span>&gt;</span>Your favorite color: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fieldColor"</span> <span class="attr">name</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>HTML 并不会限制在同一个页面上有多个表单 ,一个表单应该只包含你想要提交的字段；如果一个页面上有两个不同的 action， 请使用两个不同的表单 ；</li>
<li>当表单被提交时， 某种程度上它必须被编码；处理表单时有两件事需要考虑：   </li>
</ol>
<ul>
<li>处理表单是哪个路径（action）  </li>
<li>向浏览器发出怎样的响应  </li>
<li>如果你的表单使用的是 method=”POST”（推荐使用）， 那么展现表单和处理表单通常使用相同的路径，采用这种方法， 就可以省略表单上的 action 属性  ；</li>
<li>使用一个单独的路径处理表单 ，则要使用路径来处理表单；</li>
</ul>
<ol start="7">
<li>响应浏览器：</li>
</ol>
<ul>
<li>直接响应HTML  </li>
<li><del>302重定向</del>  </li>
<li>303重定向  ：<ul>
<li>重定向到专用的成功/失败页面  </li>
<li>运用flash消息重定向到原位置  </li>
<li>运用flash消息重定向到新位置  </li>
</ul>
</li>
</ul>
<h2 id="Express表单处理"><a href="#Express表单处理" class="headerlink" title="Express表单处理"></a>Express表单处理</h2><ol>
<li>如果使用 GET 进行表单处理， 表单域在 req.query 对象中，例如， 如果有一个名称属性为email 的 HTML 输入字段， 它的值会以 req.query.email 的形式传递到处理程序  ； </li>
<li>如果使用 POST（推荐使用的）， 需要引入中间件来解析 URL 编码体，首先， 安装 body-parser中间件（npm install –save body-parser）， 然后引入：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'body-parser'</span>)());</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>一旦引入了 body-parser，  req.body将变为可用， 这样所有的表单字段将可用  </li>
<li>为用户提供真正别出心裁的文件上传， 可拖拽， 可以看到上传文件缩略图， 并查看进度条， 那我向你推荐 Sebastian Tschan 的 jQuery File Upload；</li>
<li>要显示文件缩略图， jquery-file-upload-middleware 使 用 ImageMagick；</li>
<li>安装 jquery-file-upload-middleware 包（npm install  –save jquery-file-upload-middleware），然后在你的应用文件中添加以下代码：  </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jqupload = <span class="built_in">require</span>(<span class="string">'jquery-file-upload-middleware'</span>);</span><br><span class="line">app.use(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">jqupload.fileHandler(&#123;</span><br><span class="line">uploadDir: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> __dirname + <span class="string">'/public/uploads/'</span> + now;</span><br><span class="line">&#125;,</span><br><span class="line">uploadUrl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'/uploads/'</span> + now;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)(req, res, next);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><ol>
<li>REST 表示“表述性状态传输”（Representational State Transfer），来形容满足 REST 原则的 Web 服务，REST 基本上就是客户端和服务器端的无状态连接；</li>
<li>在实现REST之前， 需要先把 API 规划好，比如景点型网站：</li>
</ol>
<ul>
<li>GET /api/attractions    获取景点 ，以lat、 lng 和 radius 为查询字符串参数， 返回一个景点列表  </li>
<li>GET /api/attraction/:id  根据 ID 返回一处景点  </li>
<li>POST /api/attraction   以 lat、 lng、 name、 description 和 email 为请求体添加新的景点  </li>
<li>PUT /api/attraction/:id   更新一处已有的景点 ， 参数为景点的 ID、 lat、 lng、 name、 description 和 email  </li>
<li>DEL /api/attraction/:id   删除景点，参数为景点 ID、 email 和 reason  </li>
</ul>
<ol start="3">
<li>用 HTTP 方法和路径的组合来区分 API 调用， 并用查询字符串和请求主体参数混合的方式传递数据；</li>
<li>跨域资源共享（CORS）通过 Access-Control-Allow-Origin 响应头实现，在 Express 程序中最容易的实现方式是用 cors 包（npm install –save cors） ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'cors'</span>)());</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>需要一种实际调用 REST API 的办法 ,要用到 Node 包 restler：  </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev restler</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在 qa/tests-api.js 中实现对 API 的测试：  </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> rest = <span class="built_in">require</span>(<span class="string">'restler'</span>);</span><br><span class="line">suite(<span class="string">'API tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> attraction = &#123;</span><br><span class="line">lat: <span class="number">45.516011</span>,</span><br><span class="line">lng: <span class="number">-122.682062</span>,</span><br><span class="line">name: <span class="string">'Portland Art Museum'</span>,</span><br><span class="line">description: <span class="string">'Founded in 1892, the Portland Art Museum\'s colleciton '</span> +</span><br><span class="line"><span class="string">'of native art is not to be missed. If modern art is more to your '</span> +</span><br><span class="line"><span class="string">'liking, there are six stories of modern art for your enjoyment.'</span>,</span><br><span class="line">email: <span class="string">'test@meadowlarktravel.com'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> base = <span class="string">'http://localhost:3000'</span>;</span><br><span class="line">test(<span class="string">'should be able to add an attraction'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">rest.post(base+<span class="string">'/api/attraction'</span>, &#123;<span class="attr">data</span>:attraction&#125;).on(<span class="string">'success'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">assert.match(data.id, /\w/, <span class="string">'id must be set'</span>);</span><br><span class="line">done();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">'should be able to retrieve an attraction'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">rest.post(base+<span class="string">'/api/attraction'</span>, &#123;<span class="attr">data</span>:attraction&#125;).on(<span class="string">'success'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">rest.get(base+<span class="string">'/api/attraction/'</span>+data.id).on(<span class="string">'success'</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">assert(data.name===attraction.name);</span><br><span class="line">assert(data.description===attraction.description);</span><br><span class="line">done();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>connect-rest 模块会检查每一个请求， 向请求对象中添加属性， 还会做额外的日志记录（npm install –save connect-rest  ）（var rest = require(‘connect-rest’);  ）；    </li>
</ol>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ol>
<li><p>中间件是一种功能的封装方式，封装在程序中处理 HTTP 请求的功能 ；</p>
</li>
<li><p>如果不调用 next()， 请求就在那个中间件中终止了；</p>
</li>
<li><p>重点知识：</p>
<ol>
<li>路由处理器（app.get、 app.post 等， 经常被统称为 app.VERB） 可以被看作只处理特定HTTP 谓词（GET、 POST 等） 的中间件；</li>
<li>路由处理器的第一个参数必须是路径，如果你想让某个路由匹配所有路径， 只需用 /*； </li>
<li>路由处理器和中间件的参数中都有回调函数， 这个函数有 2 个、 3 个或 4 个参数；   </li>
<li>如果不调用 next()， 管道就会被终止， 也不会再有处理器或中间件做后续处理；</li>
<li>如果调用了 next()， 一般不宜再发送响应到客户端 ；  </li>
</ol>
</li>
<li><p>Connect通常把它和 Express 一起安装（npm install –save connect）， 并使它在你的程序中可以访问到（var connect = require(connect);）</p>
</li>
</ol>
<ul>
<li>basicAuth （app.use(connect.basicAuth)();）  提供基本的访问授权  </li>
<li>body-parser（npm install –save body-parser, app.use(require(body- parser)());）  只连入 json 和 urlencoded 的便利中间件  </li>
<li>json（参见body-parser）  解析 JSON 编码的请求体  </li>
<li>urlencoded（参见body-parser）  解析互联网媒体类型为 application/x-www-form-urlencoded 的请求体  </li>
<li><del>multipart（已废弃）  解析互联网媒体类型为 multipart/form-data 的请求体</del>  </li>
<li>compress（app.use(connect.compress);）  用 gzip 压缩响应数据  </li>
<li>cookie-parser（npm install –save cookie-parser, app.use(require(cookie-parser)   提供对 cookie 的支持  </li>
<li>cookie-session（npm install –save cookie-session, app.use(require(cookiesession)()); ）  提供 cookie 存储的会话支持   </li>
<li>express-session（npm install –save express-session, app.use(require(expresssession)());）  提供会话 ID（ 存在 cookie 里） 的会话支持  </li>
<li>csurf（npm install –save csurf, app.use(require(csurf)());）   防范跨域请求伪造（CSRF） 攻击  </li>
<li>directory（app.use(connect.directory());）  提供静态文件的目录清单支持  </li>
<li>errorhandler（npm install –save errorhandler, app.use(require(errorhandler)());）   为客户端提供栈追踪和错误消息  </li>
<li>static-favicon（npm install –save static-favicon, app.use(require(staticfavicon)(path_to_favicon));）   提供 favicon（出现在浏览器标题栏上的图标）  </li>
<li>morgan（之前的logger, npm install –save morgan, app.use(require(morgan)());）   提供自动日志记录支持： 所有请求都会被记录  </li>
<li>method-override（npm install –save method-override, app.use(require(methodoverride)());）   提供对 x-http-method-override 请求头的支持， 允许浏览器“假装” 使用除 GET 和 POST之外的 HTTP 方法  </li>
<li>query      解析查询字符串， 并将其变成请求对象上的 query 属性  </li>
<li>response-time（npm install –save response-time, app.use(require(response-time)<br>());）    向响应中添加 X-Response-Time 头， 提供以毫秒为单位的响应时间  </li>
<li>static（app.use(express.static(path_to_static_files)());）  提供对静态（public） 文件的支持  </li>
<li>vhost（npm install –save vhost, var vhost = require(vhost);）    虚拟主机（vhost）， 这个术语是从 Apache 借来的， 它可使子域名在 Express 中更容易管理  </li>
</ul>
<ol start="5">
<li>用Node 模块 loadtest 做压力测试（npm install –save loadtest  ） ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// qa/tests-stress.js</span></span><br><span class="line"><span class="keyword">var</span> loadtest = <span class="built_in">require</span>(<span class="string">'loadtest'</span>);</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line">suite(<span class="string">'Stress tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">test(<span class="string">'Homepage should handle 100 requests in a second'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">url: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">concurrency: <span class="number">4</span>,</span><br><span class="line">maxRequests: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line">loadtest.loadTest(options, <span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">expect(!err);</span><br><span class="line">expect(result.totalTimeSeconds &lt; <span class="number">1</span>);</span><br><span class="line">done();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>邮箱插件Nodemailer（npm install –save nodemailer  ）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodemailer = <span class="built_in">require</span>(<span class="string">'nodemailer'</span>);</span><br><span class="line"><span class="keyword">var</span> mailTransport = nodemailer.createTransport(<span class="string">'SMTP'</span>,&#123;</span><br><span class="line">service: <span class="string">'Gmail'</span>,</span><br><span class="line">auth: &#123;</span><br><span class="line">user: credentials.gmail.user,</span><br><span class="line">pass: credentials.gmail.password,</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SMTP 服务器</span></span><br><span class="line"><span class="keyword">var</span> mailTransport = nodemailer.createTransport(<span class="string">'SMTP'</span>,&#123;</span><br><span class="line">host: <span class="string">'smtp.meadowlarktravel.com'</span>,</span><br><span class="line">secureConnection: <span class="literal">true</span>, <span class="comment">// 用 SSL 端口 : 465</span></span><br><span class="line">auth: &#123;</span><br><span class="line">user: credentials.meadowlarkSmtp.user,</span><br><span class="line">pass: credentials.meadowlarkSmtp.password,</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line">mailTransport.sendMail(&#123;</span><br><span class="line"><span class="keyword">from</span>: <span class="string">'"Meadowlark Travel" &lt;info@meadowlarktravel.com&gt;'</span>,</span><br><span class="line">to: <span class="string">'joecustomer@gmail.com'</span>,</span><br><span class="line">subject: <span class="string">'Your Meadowlark Travel Tour'</span>,</span><br><span class="line">text: <span class="string">'Thank you for booking your trip with Meadowlark Travel.'</span>+</span><br><span class="line"><span class="string">'We look forward to your visit!'</span>,</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="built_in">console</span>.error( <span class="string">'Unable to send email: '</span> + error );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>将邮件作为网站监测工具 ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">email.sendError(<span class="string">'the widget broke down!'</span>, __filename);</span><br><span class="line"><span class="comment">// ……给用户显示错误消息</span></span><br><span class="line">&#125; /</span><br><span class="line">/ 或者</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 在这里做些不确定的事情……</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">email.sendError(<span class="string">'the widget broke down!'</span>, __filename, ex);</span><br><span class="line"><span class="comment">// ……给用户显示错误消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cookie与会话"><a href="#Cookie与会话" class="headerlink" title="Cookie与会话"></a>Cookie与会话</h2><ol>
<li>Web 工作的方式就是在每个 HTTP 请求中都要包含所有必要的信息， 服务器才能满足这个请求；    </li>
<li>cookie的了解：</li>
</ol>
<ul>
<li>cookie对用户来说不是加密的  </li>
<li>用户可以删除或禁用cookie  </li>
<li>一般的cookie可以被篡改  </li>
<li>cookie可以用于攻击  </li>
<li>如果你滥用cookie， 用户会注意到  </li>
<li>如果可以选择， 会话要优于cookie  </li>
</ul>
<ol start="3">
<li>在程序中开始设置和访问 cookie 之前， 需要先引入中间件 cookie-parser<ol>
<li>首先 npm  install –save cookie-parser：</li>
<li>准备写入文件内容；</li>
<li>cookie：</li>
</ol>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件credentials.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	cookieSecret: <span class="string">' 把你的 cookie 秘钥放在这里 '</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> credentials = <span class="built_in">require</span>(<span class="string">'./credentials.js'</span>);</span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)(credentials.cookieSecret));	</span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie</span></span><br><span class="line">res.cookie(<span class="string">'monster'</span>, <span class="string">'nom nom'</span>);</span><br><span class="line">res.cookie(<span class="string">'signed_monster'</span>, <span class="string">'nom nom'</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 cookie</span></span><br><span class="line">res.clearCookie(<span class="string">'monster'</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>cookie选项：</li>
</ol>
<ul>
<li>domain：控制跟 cookie 关联的域名，可以将 cookie 分配给特定的子域名  ；</li>
<li>path：控制应用这个 cookie 的路径；</li>
<li>maxAge：指定客户端应该保存 cookie 多长时间， 单位是毫秒 ； </li>
<li>secure：指定该 cookie 只通过安全（HTTPS） 连接发送 ；  </li>
<li>httpOnly ：将这个选项设为 true 表明这个 cookie 只能由服务器修改 ；</li>
<li>signed ：设为 true 会对这个 cookie 签名， 这样就需要用 res.signedCookies 而不是 res.cookies访问它  </li>
</ul>
<ol start="5">
<li>会话实际上只是更方便的状态维护方法，要实现会话， 必须在客户端存些东西 ，通常的做法是用一个包含唯一标识的 cookie， 然后服务器用这个标识获取相应的会话信息；</li>
</ol>
<ul>
<li>安 装 express-session（npm install –save express-session）；</li>
<li>在 链 入cookie-parser 之后链入 express-session  ：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)(credentials.cookieSecret));</span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'express-session'</span>)());</span><br></pre></td></tr></table></figure>

<ul>
<li>中间件 express-session 接受带有如下选项的配置对象 :<ul>
<li>key     存放唯一会话标识的 cookie 名称  </li>
<li>store     会话存储的实例  </li>
<li>cookie     会话 cookie 的 cookie 设置（path、 domain、 secure 等）  </li>
</ul>
</li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>路由是将请求（由 URL 和 HTTP 方法指定） 路由到处理它们的代码去的一种机制；</li>
<li>建议：</li>
</ol>
<ul>
<li>绝不在 URL 中暴露技术细节  </li>
<li>避免在 URL 中出现无意义的信息  </li>
<li>避免无谓的长 URL  </li>
<li>单词分隔符要保持一致  </li>
<li>绝不要用空格或不可录入的字符  </li>
<li>在 URL 中用小写字母  </li>
</ul>
<ol start="3">
<li>路由中指定的路径（比如 /foo） 最终会被 Express 转换成一个正则表达式， 某些正则表达式中的元字符可以用在路由路径中： +、 ?、 *、 ( 和 )  </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> staff = &#123;</span><br><span class="line">portland: &#123;</span><br><span class="line">mitch: &#123; <span class="attr">bio</span>: <span class="string">'Mitch is the man to have at your back.'</span> &#125;,</span><br><span class="line">madeline: &#123; <span class="attr">bio</span>: <span class="string">'Madeline is our Oregon expert.'</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">bend: &#123;</span><br><span class="line">walt: &#123; <span class="attr">bio</span>: <span class="string">'Walt is our Oregon Coast expert.'</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">app.get(<span class="string">'/staff/:city/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> info = staff[req.params.city][req.params.name];</span><br><span class="line"><span class="keyword">if</span>(!info) <span class="keyword">return</span> next(); <span class="comment">// 最终将会落入 404</span></span><br><span class="line">res.render(<span class="string">'staffer'</span>, info);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>路由的指导原则 :  </li>
</ol>
<ul>
<li>给路由处理器用命名函数  </li>
<li>路由不应该神秘  </li>
<li>路由组织应该是可扩展的  </li>
<li>不要忽视自动化的基于视图的路由处理器  </li>
</ul>
<ol start="5">
<li>最流行的两种路由组织方式是命名空间路由（namespaced routing） 和随机应变路由（resourceful routing）;</li>
</ol>
<ul>
<li>随机应变路由基于一个对象中的方法自动添加路由，express-resource 包是如何实现这种路由组织风格的范例      </li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol>
<li>Node 有个内置的调试器，允许你逐步执行程序，只需要在启动程序时加上 debug 参数就可以开始调试了，会开启调试端口；</li>
<li>node探查器：npm install -g node-inspector</li>
<li>只需要用 –debug-brk 代替 –debug，调试器会在程序的第一行停住，然后你就可以单步执行，或者设置合适的断点；</li>
<li>调试是一个逐渐积累的过程，也是评估你是不是个优秀的程序员的重点之一，不是那种人肉执行机器，那你还是好好的调试你的代码！</li>
</ol>
<h2 id="管理自己的npm库（私库）"><a href="#管理自己的npm库（私库）" class="headerlink" title="管理自己的npm库（私库）"></a>管理自己的npm库（私库）</h2><ol>
<li>对公共包的请求转发到公众库，而私有包从它自己的数据库中提供：</li>
</ol>
<ol start="2">
<li><p>Sinopia 的安装极其容易，除了支持私有包，它还为你的组织提供了一个方便的缓存；</p>
</li>
<li><p>npm 的配置只能支持一个存储库，一旦“切换到”Sinopia（用 npm set registry 和npm adduser），切换回npm公库使用npm set registry <a href="https://registry.npmjs.org/" target="_blank" rel="noopener">https://registry.npmjs.org/</a> ，或者直接删掉 ~/.npmjs；</p>
</li>
</ol>
<h2 id="创建中间件"><a href="#创建中间件" class="headerlink" title="创建中间件"></a>创建中间件</h2><ol>
<li><p>编写中间件不是什么巨大的、可怕的、复杂的事情；</p>
</li>
<li><p>构造模块的方式可以创建私有功能， 让调用者无法访问；</p>
</li>
<li><p>模块直接输出中间件函数：</p>
<ol>
<li>如果中间件不需要配置对象，用这个方法：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 中间件在这里……记得调用 next() 或 next('route') </span></span><br><span class="line">  <span class="comment">// 除非这个中间件是终点 </span></span><br><span class="line">  next(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用这个中间件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stuff = <span class="built_in">require</span>(<span class="string">'meadowlark-stuff'</span>);</span><br><span class="line">app.use(stuff);</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块输出返回中间件的函数:</p>
<ol>
<li>如果中间件需要配置对象或者其他信息，用这个方法：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 如果没有传入配置对象 </span></span><br><span class="line">  <span class="comment">// 一般会创建一个： </span></span><br><span class="line">  <span class="keyword">if</span> (!config) config = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 中间件在这里……记得调用 next() 或 next('route')</span></span><br><span class="line">    <span class="comment">// 除非这个中间件是终点 </span></span><br><span class="line">    next();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用这个中间件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stuff = <span class="built_in">require</span>(<span class="string">'meadowlark-stuff'</span>)(&#123; <span class="attr">option</span>: <span class="string">'my choice'</span> &#125;);</span><br><span class="line">app.use(stuff);</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块输出包含中间件的对象:</p>
<ol>
<li>如果要输出多个相互关联的中间件，用这个办法：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 如果没有传入配置对象 </span></span><br><span class="line">  <span class="comment">// 一般会创建一个： </span></span><br><span class="line">  <span class="keyword">if</span> (!config) config = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  m1: <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 中间件在这里……记得调用 next() 或 next('route')</span></span><br><span class="line">    <span class="comment">// 除非这个中间件是终点</span></span><br><span class="line">    next(); &#125;, </span><br><span class="line">  m2: <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">		next(); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用这个中间件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stuff = <span class="built_in">require</span>(<span class="string">'meadowlark-stuff'</span>)(&#123; <span class="attr">option</span>: <span class="string">'my choice'</span> &#125;);</span><br><span class="line">app.use(stuff.m1); </span><br><span class="line">app.use(stuff.m2);</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块输出对象构造器:</p>
<ol>
<li>如果中间件非常适合用面向对象的方式实现，这个方法就比较好用:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Stuff</span>(<span class="params">config</span>)</span>&#123; <span class="keyword">this</span> .config = config || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stuff.prototype.m1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 注意：'this' 不是你想要的实例；不要用它</span></span><br><span class="line">  next();</span><br><span class="line"></span><br><span class="line">&#125;; Stuff.prototype.m2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们用 Function.prototype.bind 将这个实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联到 'this' 属性上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 现在 'this' 是 Stuff 实例了 </span></span><br><span class="line">  next();</span><br><span class="line">&#125;).bind( <span class="keyword">this</span> ); );</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Stuff;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用这个中间件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Stuff = <span class="built_in">require</span>(<span class="string">'meadowlark-stuff'</span>); </span><br><span class="line"><span class="keyword">var</span> stuff = <span class="keyword">new</span> Stuff(&#123; <span class="attr">option</span>: <span class="string">'my choice'</span> &#125;);</span><br><span class="line">app.use(stuff.m1); </span><br><span class="line">app.use(stuff.m2());</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以直接在中间件 m1 中链接，但我们必须调用 m2;</li>
</ol>
</li>
</ol>
<h2 id="XaaS"><a href="#XaaS" class="headerlink" title="XaaS"></a>XaaS</h2><ol>
<li>软件即服务（ SaaS ）：用来描述提供给你的软件（网站、应用）;</li>
<li>平台即服务（ PaaS ）：提供了所有的基础设施（操作系统、网络，所有都弄好了）,只需要编写应用程序；</li>
<li>架构即服务（ IaaS ）：只是提供虚拟机和基本的网络连接，需要安装和维护操作系统、数据库和网络策略；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>业界有一种将 QA（质量保证） 和开发岗位融合的趋势，让开发人员负责 QA。 在这种范式下，由擅长 QA 的软件工程师担任开发人员的顾问，帮他们将 QA 植入到开发流程中！</strong></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs Web</title>
    <url>/2020/04/27/Nodejs-Web/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开发一个可维护的应用则需要规划，要知道怎么把脑海中设想的功能组织在一起，甚至还要考虑到不久之后可能会添加的功能!后端服务通常都有专门的架构，专门用于规划、设计和概览这些服务,前端开发同样需要规划架构，像后端开发一样去设计应用!设计应用时如果不考虑可维护性，随着功能的不断增加，应用就会像叠叠乐搭出的积木塔一样慢慢倾斜。衡量代码的质量是向编写结构良好的应用迈出的第一步。<strong><em>推荐书籍：《全端Web开发》· [美] Casimir Saternos著 王群锋 杜欢译 《JavaScript Web应用开发》· [阿根廷] Nicolas Bevacqua著 安道 译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="自动化构建Grunt"><a href="#自动化构建Grunt" class="headerlink" title="自动化构建Grunt"></a>自动化构建Grunt</h2><ol>
<li><strong>Grunt</strong>是一种工具，使用它能轻易实现构建过程，<strong>lint</strong>程序是检查代码质量的工具，特别适合用来检查使用解释型语言编写的程序；</li>
<li>npm install -g jshint 安装jshint，如果想使用JSHint检查代码，可以使用cd命令进入项目的根目录，然后输入jshint .加上–exclude node_modules选项忽略通过npm install安装的第三方代码；</li>
<li>对JavaScript来说，Grunt是最受欢迎的构建工具之一；</li>
<li>Grunt是一个任务运行程序，能执行命令、运行JavaScript代码，还能使用完全由JavaScript编写的代码配置各个任务。</li>
<li>安装grunt的cli：npm install -g grunt-cli；</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>移动应用的行为动作与普通网站相同，只不过原生应用取代了浏览器;</li>
<li>HTML 是一组用来描述内容结构和格式的标记,HTML 标签由一对尖括号以及括号内的标签名组成;</li>
<li>HTML属性:<ol>
<li>class：定义了一个类，以便于使用 CSS 给元素添加样式或者进行 DOM 操作</li>
<li>id：定义了元素的 ID，作用有点像 class，但是必须是唯一的</li>
<li>style ：定义了一个元素的内联 CSS</li>
<li>title ：为元素指定了一些额外信息，在大多数浏览器里这些信息均是以小提示条的形式呈现的</li>
<li>data-name ：可以用来在 DOM 中存储一些元数据</li>
<li>onclick ：在点击事件发生时，内联的 JavaScript 代码将运行</li>
<li>onmouseover：由鼠标悬停事件触发，内联的 JavaScript 代码将运行</li>
<li>onfocus：当浏览器的焦点聚集在某个元素上时触发</li>
<li>onblur：当浏览器的焦点离开一个元素时触发</li>
<li>onkeydown：用户按下键盘上的键时触发</li>
<li>ondblclick：用户双击鼠标时触发</li>
<li>onmousedown：用户按下鼠标时触发</li>
<li>onmouseup：用户释放鼠标时触发</li>
<li>onmouseout：用户将鼠标移开元素区域时触发</li>
<li>oncontextmenu：用户点击鼠标右键时触发</li>
</ol>
</li>
<li>CSS 是一种控制内容呈现和格式的方式，HTML 文档可以通过一个 link 标签引入外部的CSS 文件，也可以直接通过 style 标签内联 CSS 代码；</li>
<li>把 JS 代码放进 HTML 文档的 script 标签里是使用 JavaScript 的最简单方式；</li>
<li>结对编程是两个开发者在同一个环境里一起工作的技术；</li>
<li>ECMAScript 5中的严格模式（strict mode）能够产生更清晰的代码，该模式减少了一些不安全的特性，增加了更多的警告信息，代码行为也更符合逻辑；</li>
<li>只有当 API 满足相应程度的约束时才可称为 REST式。 REST 将客户端 - 服务器端架构、动词的使用和 URL 的命名规范也作为其约束；</li>
<li>Ajax 是“asynchronous JavaScript and XML”的缩写， 但是对各种 Web 页面和服务器进行通信的技术也都适用；</li>
</ol>
<h2 id="LESS"><a href="#LESS" class="headerlink" title="LESS"></a>LESS</h2><ol>
<li>LESS 是动态样式语言，浏览器并不会直接解析 LESS 语法，LESS 源代码必须编译成 CSS 代码：<ol>
<li>在浏览器里使用 LESS JavaScript library</li>
<li>在服务器端使用特定的库</li>
<li>在你自己的电脑上使用诸如 LESS App、SimpLESS或者类似的应用</li>
</ol>
</li>
<li>LESS有自己的语法规则；</li>
</ol>
<h2 id="JavaScript高级特性"><a href="#JavaScript高级特性" class="headerlink" title="JavaScript高级特性"></a>JavaScript高级特性</h2><ol>
<li>函数：<ol>
<li>通过字面形式创建</li>
<li>可以赋值给变量、数组元素以及其他对象的属性</li>
<li>可以作为函数参数传递</li>
<li>可以作为函数值返回</li>
<li>可以拥有能动态创建和赋值的属性</li>
</ol>
</li>
<li>JavaScript函数可以使用函数的字面形式来声明，由四部分组成：</li>
</ol>
<ul>
<li>function关键字</li>
<li>可选的函数名称，如果指定的话，这个名称必须是一个有效的JavaScript标识符</li>
<li>放在括号中的参数名列表。就算没有参数，也得给出一个空括号</li>
<li>函数体是包含在大括号中的一系列JavaScript语句</li>
</ul>
<ol start="3">
<li>可以利用函数表达式（function expression）来声明函数，<strong>在JavaScript中，函数可以赋给变量，变量被视为数据；</strong></li>
<li>在JavaScript中，作用域指的是代码当前的上下文，一个变量的作用域就是该变量所在的上下文；</li>
<li>在JavaScript中，声明的所有变量默认都是定义在全局作用域中，会造成干扰并有可能导致程序运行失败，被称为命名空间冲突（namespace clash）；</li>
<li>在函数中声明的变量是局部变量，只能够在该函数中或是由该函数中的函数来访问；</li>
<li><strong>(function foo(){ /* 代码 */ })();</strong>这种模式很常见，叫作<strong>IIFE（Immediately Invoked Function Expression，立即调用的函数表达式）；</strong></li>
<li>闭包是在函数声明时所创建的作用域，它使得函数能够访问并处理函数的外部变量。换句话说，闭包可以让函数访问到在函数声明时处于作用域中的所有变量以及其他函数；</li>
<li>map是一个简单的键值映射，可以依据元素的插入顺序进行迭代；</li>
<li>set是值的集合，可以依据其插入顺序进行迭代；</li>
<li>核心 JavaScript 语言需要结合两个不同的 API 来理解： 浏览器对象模型 （BOM）和文档对象模型 （DOM）：<ol>
<li>浏览器对象模型包含 window 对象及其子对象： navigator 、 history 、screen 、 location 和 document ；</li>
<li>document 对象是文档对象模型的根节点，是页面内容结构的一个树状表示。</li>
</ol>
</li>
<li><strong>一个函数返回一个内部函数时，就形成了 闭包 。返回的对象既包含了函数本身，也包含创建函数时的环境；</strong></li>
<li>可以在函数中定义其他函数，内部的函数可以访问外部函数的变量；</li>
<li><strong>立即执行函数 （immediate function）将代码限定在函数的局部作用域内，避免了污染全局作用域；</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> val=<span class="string">"I'm in outer space"</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> alien=outer();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> alien);</span><br><span class="line"><span class="built_in">console</span>.log(alien());</span><br><span class="line"></span><br><span class="line">( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'in an immediate function'</span>)&#125;());</span><br></pre></td></tr></table></figure>

<ol start="15">
<li><p>调用函数的方法：</p>
<ol>
<li>函数      在非严格模式下， this指全局上下文；在严格模式下，返回 undefined 或者在执行上下文中得到的值</li>
<li>方法     调用和对象关联的函数</li>
<li>构造函数    调用构造函数会创建一个新对象</li>
<li>使用 call() 或 apply()    允许在调用一个函数时，显式指定上下文</li>
</ol>
</li>
<li><p>有一个特殊的变量 arguments ，它保存了所有传入函数的参数，不管是有名的还是没名的，函数通过签名中声明的命名参数接收参数：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">	<span class="keyword">var</span> sum=<span class="number">0</span>; </span><br><span class="line">	<span class="comment">//console.log(arguments);</span></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; <span class="built_in">arguments</span>.length; i++)&#123; </span><br><span class="line">		sum+=<span class="built_in">arguments</span>[i];  </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add.apply( <span class="literal">null</span> , [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(add.call( <span class="literal">null</span> ,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<ol start="17">
<li>注意上面的如果有一个带有参数，那么默认使用带有参数的函数，然后，默认参数可以添加默认值；</li>
<li>如果在全局作用域，关键字 var 并不是必需的，去掉它程序行为没有任何不同，如果是在一个函数里调用， var 会创建一个局部变量；</li>
<li>javascript允许使用prototype进行继承操作，具体操作看下面的代码就可以理解了：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cat继承自Animal</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'call animal constructor'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.constructor=Animal;</span><br><span class="line">Animal.prototype.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'Animal is speaking!'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Animal.prototype.run=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'animal is running'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'call cat constructor'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很关键的地方</span></span><br><span class="line">Cat.prototype=<span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'cat is speaking'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Cat.prototype.constructor=Cat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat=<span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.speak);</span><br><span class="line"><span class="built_in">console</span>.log(cat.run());</span><br></pre></td></tr></table></figure>

<ol start="20">
<li>可以安装docco来为javascript产生文档（npm install -g docco），然后运行docco *.js即可生成对应的html文件，对于代码特别有用；</li>
</ol>
<h2 id="客户端框架"><a href="#客户端框架" class="headerlink" title="客户端框架"></a>客户端框架</h2><ol>
<li>浏览器兼容性：</li>
</ol>
<table>
<thead>
<tr>
<th>库</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>jQuery</td>
<td>DOM遍历和操作</td>
</tr>
<tr>
<td>Modernizr</td>
<td>浏览器特征检测</td>
</tr>
<tr>
<td>Underscore</td>
<td>包括了对象和数组操作的工具函数</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>MVC变体：模型 - 视图、表现器（Model-View Presenter，MVP）、模型视图、视图模型（Model-View View Model，MVVM）等；</p>
</li>
<li><p><strong>Github仓库有名的代码：</strong></p>
<ol>
<li>响应式设计资源：</li>
</ol>
<ul>
<li>Modernizr（<a href="https://github.com/Modernizr/Modernizr）" target="_blank" rel="noopener">https://github.com/Modernizr/Modernizr）</a></li>
<li>Normalize CSS（<a href="https://github.com/necolas/normalize.css）" target="_blank" rel="noopener">https://github.com/necolas/normalize.css）</a></li>
</ul>
<ol start="2">
<li>起始项目：</li>
</ol>
<ul>
<li>Bootstrap（<a href="https://github.com/twbs/bootstrap）" target="_blank" rel="noopener">https://github.com/twbs/bootstrap）</a></li>
<li>HTML5 Boilerplate（<a href="https://github.com/h5bp/html5-boilerplate）" target="_blank" rel="noopener">https://github.com/h5bp/html5-boilerplate）</a></li>
</ul>
<ol start="3">
<li>JavaScript 库：</li>
</ol>
<ul>
<li>jQuery（<a href="https://github.com/jquery/jquery）" target="_blank" rel="noopener">https://github.com/jquery/jquery）</a></li>
<li>Backbone（<a href="https://github.com/documentcloud/backbone）" target="_blank" rel="noopener">https://github.com/documentcloud/backbone）</a></li>
<li>Foundation（<a href="https://github.com/zurb/foundation）" target="_blank" rel="noopener">https://github.com/zurb/foundation）</a></li>
<li>Angular（<a href="https://github.com/angular/angular.js）" target="_blank" rel="noopener">https://github.com/angular/angular.js）</a></li>
<li>Underscore（<a href="https://github.com/jashkenas/underscore）" target="_blank" rel="noopener">https://github.com/jashkenas/underscore）</a></li>
<li>Ember（<a href="https://github.com/emberjs/ember.js）" target="_blank" rel="noopener">https://github.com/emberjs/ember.js）</a></li>
<li>jQuery UI（<a href="https://github.com/jquery/jquery-ui）" target="_blank" rel="noopener">https://github.com/jquery/jquery-ui）</a></li>
<li>Knockout（<a href="https://github.com/knockout/knockout）" target="_blank" rel="noopener">https://github.com/knockout/knockout）</a></li>
</ul>
</li>
</ol>
<h2 id="HTTP-1-1-请求方法"><a href="#HTTP-1-1-请求方法" class="headerlink" title="HTTP 1.1 请求方法"></a>HTTP 1.1 请求方法</h2><table>
<thead>
<tr>
<th>HTTP动词</th>
<th>对资源采取的动作</th>
<th>REST动作</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>检索</td>
<td>类似 SQL SELECT</td>
</tr>
<tr>
<td>HEAD</td>
<td>不带响应体的检索</td>
<td>类似 SQL SELECT 1</td>
</tr>
<tr>
<td>POST</td>
<td>创建或者追加</td>
<td>类似 SQL INSERT</td>
</tr>
<tr>
<td>PUT</td>
<td>更新或者创建完整资源</td>
<td>类似 SQL UPDATE （或不存在时的 INSERT ）</td>
</tr>
<tr>
<td>PATCH</td>
<td>部分更新</td>
<td>类似 SQL UPDATE（部分资源）</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除</td>
<td>类似 SQL DELETE</td>
</tr>
<tr>
<td>TRACE</td>
<td>Echo请求</td>
<td>确定中间服务器修改的诊断</td>
</tr>
<tr>
<td>OPTION</td>
<td>返回支持的方法</td>
<td>确定资源允许的 HTTP 方法</td>
</tr>
<tr>
<td>CONNECT</td>
<td>支持HTTP隧道</td>
<td>支持HTTP隧道技术</td>
</tr>
</tbody></table>
<h2 id="HTTP-1-1-响应码"><a href="#HTTP-1-1-响应码" class="headerlink" title="HTTP 1.1 响应码"></a>HTTP 1.1 响应码</h2><ol>
<li>信息类状态码1xx：</li>
</ol>
<table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>继续</td>
<td>指示请求已经收到（而且没有被服务器拒绝）期间的中间响应</td>
</tr>
<tr>
<td>101</td>
<td>切换协议</td>
<td>服务器切换到由UPgrade请求头定义的协议</td>
</tr>
</tbody></table>
<ol start="2">
<li>成功状态码2xx：</li>
</ol>
<table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>被接受</td>
</tr>
<tr>
<td>201</td>
<td>被创建</td>
<td>正在创建一个新的资源</td>
</tr>
<tr>
<td>202</td>
<td>被接受</td>
<td>已接受，但是处理还未完成</td>
</tr>
<tr>
<td>203</td>
<td>非权威信息</td>
<td>实体头返回元数据的子集或超集</td>
</tr>
<tr>
<td>204</td>
<td>无内容</td>
<td>不包含响应体</td>
</tr>
<tr>
<td>205</td>
<td>重置内容</td>
<td>客户端应该发起一个请求来查看与初始请求相关联的资源</td>
</tr>
<tr>
<td>206</td>
<td>部分内容</td>
<td>一个包含了一个 range 请求头的响应</td>
</tr>
</tbody></table>
<ol start="3">
<li>重定向状态码3xx：</li>
</ol>
<table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>300</td>
<td>多个选项</td>
<td>资源在不同位置有多种展现</td>
</tr>
<tr>
<td>301</td>
<td>永久移动</td>
<td>资源已经分配了一个新的永久 URI</td>
</tr>
<tr>
<td>302</td>
<td>找到</td>
<td>资源已经分配了一个新的临时 URI</td>
</tr>
<tr>
<td>303</td>
<td>参考其他</td>
<td>请求的响应在一个不同的 URI 下可用</td>
</tr>
<tr>
<td>304</td>
<td>未修改</td>
<td>文档未修改的条件请求的响应</td>
</tr>
<tr>
<td>305</td>
<td>使用代理</td>
<td>请求的资源可以通过返回的代理 URI 访问</td>
</tr>
<tr>
<td>306</td>
<td>（未使用）</td>
<td></td>
</tr>
<tr>
<td>307</td>
<td>临时重定向</td>
<td>请求的资源临时存在于一个不同的 URI 下</td>
</tr>
</tbody></table>
<ol start="4">
<li>客户端错误状态码4xx：</li>
</ol>
<table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>坏请求</td>
<td>请求无法理解</td>
</tr>
<tr>
<td>401</td>
<td>未授权</td>
<td>请求没有授权</td>
</tr>
<tr>
<td>402</td>
<td>需要支付</td>
<td>保留以后使用</td>
</tr>
<tr>
<td>403</td>
<td>禁止</td>
<td>请求不允许（即使有附加授权）</td>
</tr>
<tr>
<td>404</td>
<td>未找到</td>
<td>资源未找到</td>
</tr>
<tr>
<td>405</td>
<td>方法不允许</td>
<td>指定 URL 的 HTTP 方法无效</td>
</tr>
<tr>
<td>406</td>
<td>不可接受</td>
<td>可以使用accept请求头中的内容来生成资源</td>
</tr>
<tr>
<td>407</td>
<td>需要代理验证</td>
<td>请求未验证（需要通过代理授权）</td>
</tr>
<tr>
<td>408</td>
<td>请求超时</td>
<td>客户端没有在服务器指定的时间里发送请求</td>
</tr>
<tr>
<td>409</td>
<td>冲突</td>
<td>因为当前资源的状态无法完成请求</td>
</tr>
<tr>
<td>410</td>
<td>丢失</td>
<td>资源不可用</td>
</tr>
<tr>
<td>411</td>
<td>需要长度</td>
<td>需要内容长度头部</td>
</tr>
<tr>
<td>412</td>
<td>前置条件失败</td>
<td>请求头部的前置条件值为 false</td>
</tr>
<tr>
<td>413</td>
<td>请求实体太大</td>
<td>请求实体比服务器指定的阈值大</td>
</tr>
<tr>
<td>414</td>
<td>请求 URI 过长</td>
<td>请求 URI 比服务器指定的阈值长</td>
</tr>
<tr>
<td>415</td>
<td>不支持的媒体类型</td>
<td>格式不支持</td>
</tr>
<tr>
<td>416</td>
<td>请求范围不满足</td>
<td>头部指定的内容范围无法处理</td>
</tr>
<tr>
<td>417</td>
<td>期望失败</td>
<td>请求头部域的期望不满足</td>
</tr>
</tbody></table>
<ol start="5">
<li>服务器端错误状态码5xx：</li>
</ol>
<table>
<thead>
<tr>
<th>状态码</th>
<th>意义</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>500</td>
<td>服务器内部错误</td>
<td>服务器未预期的错误情况</td>
</tr>
<tr>
<td>501</td>
<td>未实现</td>
<td></td>
</tr>
<tr>
<td>502</td>
<td>坏网关</td>
<td>作为代理的服务器收到了来自上游服务器的无效响应</td>
</tr>
<tr>
<td>503</td>
<td>服务不可用</td>
<td>服务器临时不可用</td>
</tr>
<tr>
<td>504</td>
<td>网关超时</td>
<td>代理服务器未收到上游服务器的及时响应</td>
</tr>
<tr>
<td>505</td>
<td>HTTP 版本不支持</td>
<td>请求信息中的 HTTP 协议版本不支持</td>
</tr>
</tbody></table>
<h2 id="Curl实用选项"><a href="#Curl实用选项" class="headerlink" title="Curl实用选项"></a>Curl实用选项</h2><table>
<thead>
<tr>
<th>选项</th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-H</td>
<td>头部</td>
<td>指定一个HTTP头部</td>
</tr>
<tr>
<td>-d</td>
<td>数据</td>
<td>发送指定的字符串数据到服务器</td>
</tr>
<tr>
<td>-s</td>
<td>静默选项</td>
<td>不显示进度表和错误信息</td>
</tr>
<tr>
<td>-L</td>
<td>位置</td>
<td>如果服务器响应带有位置头部和 3xx 响应状态码，则在新位置上重新发送请求</td>
</tr>
<tr>
<td>-X</td>
<td>执行选项</td>
<td>指定 HTTP 请求方法</td>
</tr>
<tr>
<td>-A</td>
<td>代理</td>
<td>指定用户代理</td>
</tr>
<tr>
<td>-b</td>
<td>Cookie</td>
<td>指定cookie（–cookie 比 -b 更容易记忆）</td>
</tr>
<tr>
<td>-o</td>
<td>输出</td>
<td>输出到一个文件</td>
</tr>
</tbody></table>
<ul>
<li>示例：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> curl -s -H "Accept: application/json" \</span><br><span class="line">-H "Content-Type: application/json" http://localhost:443/about \</span><br><span class="line">-X PUT -d '&#123;"hello": "world"&#125;'</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Web里的知识真的非常的多，能够提供Web服务的功能也特别多，还需要深入学习！</p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>OMV Quick Start</title>
    <url>/2020/05/14/OMV-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>OpenMediaVault是基于Debian GNU/Linux的网络连接存储（NAS）解决方案，包含SSH、(S)FTP、SMB/CIFS、DAAP媒体服务器、rsync、 BitTorrent等很多种服务，可以通过插件来扩展。OpenMediaVault主要被设计用于家用环境或小型家庭办公室， 但却不局限于此类，它是一份简单和易于使用的、开箱即用的解决方案，能让所有人无需很深的知识就能安装并管理一套网络连接存储！</p>
<p><img src="http://static.oschina.net/uploads/space/2013/0826/075803_2srd_12.png" alt=""></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>odroid xu4支持openmediavault，非常方便数据存储，在<a href="http://sourceforge.mirrorservice.org/o/op/openmediavault/" target="_blank" rel="noopener">sourceforge</a>中下载镜像，然后烧录到sd卡就可以了，可以使用hdmi查看ip地址，然后htpp访问80端口的服务，账户和密码如下：</li>
</ol>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200326205324727-165103639.png" alt=""></p>
<ol start="2">
<li>进入的页面如下：</li>
</ol>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200326205806868-55263505.png" alt=""></p>
<ol start="3">
<li><p><a href="https://openmediavault.readthedocs.io/en/latest/installation/index.html" target="_blank" rel="noopener">官方安装说明</a></p>
</li>
<li><p>修改web管理员密码：点击侧边栏 <strong>“系统 -&gt; 常规设置 -&gt; Web 管理员密码”</strong> ，修改管理员密码，<strong>“保存 -&gt; 应用”</strong></p>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200327160127331-985996990.png" alt=""></p>
</li>
</ol>
<h2 id="配置E-mail通告"><a href="#配置E-mail通告" class="headerlink" title="配置E-mail通告"></a>配置E-mail通告</h2><ol>
<li><p>点击侧边栏 <strong>“系统 -&gt; 通告 -&gt; 设置”</strong>，进行发送 E-mail 邮件设置。</p>
<ol>
<li><p>常规设置 -&gt; 启用</p>
</li>
<li><p>SMTP 设置，以 QQ 邮箱为例：</p>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200327160208672-1841234006.png" alt=""></p>
</li>
</ol>
</li>
<li><p>点击侧边栏 “系统 -&gt; 通告 -&gt; 通告” ，可选择要通告的项目，“保存 -&gt; 应用”；</p>
</li>
<li><p>可以发送测试邮件，需要注意的是密码是申请的授权码，不是邮箱登陆密码；</p>
</li>
<li><p>这个发送与接收有点缓慢，配置了很久之后才可以接收到测试邮件的通知。</p>
</li>
</ol>
<h2 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h2><ol>
<li><p>插入硬盘</p>
</li>
<li><p>点击侧边栏 “存储器 -&gt; 硬盘 -&gt; 扫描” ，可以看到已经连接的硬盘</p>
</li>
<li><p>通过 型号、序号、供应商、容量等 可以判断出要初始化的硬盘</p>
</li>
<li><p>选中要初始化的硬盘，使其高亮，点击 “擦除”</p>
</li>
<li><p>选择 “快速” 擦除即可：</p>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200328000345990-1898730751.png" alt=""></p>
</li>
<li><p>等待擦除完成后，关闭即可：</p>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200328000348026-482769181.png" alt=""></p>
</li>
<li><p>点击侧边栏 “存储器 -&gt; 文件系统 -&gt; 创建”，创建文件系统，选择ext4格式，支持比较好；</p>
</li>
<li><p>等待文件系统创建成功，关闭即可：</p>
<p><img src="https://img2020.cnblogs.com/blog/1591904/202003/1591904-20200328000417871-2003691499.png" alt=""></p>
</li>
<li><p>在侧边栏 “存储器 -&gt; 文件系统” 中，选中要挂载的硬盘 使之高亮，点击 “挂载”就可以挂载成功。</p>
</li>
</ol>
<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ol>
<li>Debian Linux(Squeeze)系统(i386 or x64)</li>
<li>基于Web方式的系统管理</li>
<li>通过Debian软件包简单的系统升级</li>
<li>用户管理</li>
<li>计划任务</li>
<li>多语言支持（0.4.18版支持繁体中文）</li>
<li>基于DNS-SD(Apple’s protocol)的服务公告</li>
<li>插件系统</li>
</ol>
<h2 id="OMV配置Kodi"><a href="#OMV配置Kodi" class="headerlink" title="OMV配置Kodi"></a>OMV配置Kodi</h2><ol>
<li><p>OMV可以配置Kodi，直接视频播放，可以使用Xshell进入Debian系统进行安装各类东西，Kodi媒体中心是一个屡获殊荣的自由和开源的跨平台媒体播放器和用于HTPC（Home theater PC，家庭影院PC）的数字媒体娱乐中心软件，Kodi的图形用户界面让用户轻按遥控，就能方便地从硬盘、光盘、局域网和互联网浏览和观看视频、图片，收听广播和音乐。</p>
<p><img src="http://www.kodiplayer.cn/UploadFiles/2017-11/2017111915094623408.png" alt=""></p>
</li>
<li><p>首先安装可视化桌面Xfce4：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xorg xinit xfce4 lightdm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中lightdm是登录管理，之后需要用lightdm来控制账号自动登录</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来安装Kodi：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install kodi</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启并添加Kodi用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br><span class="line">useradd –m –s /bin/bash kodi</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器打开OMV网址，在最右上方选择默认登录布局为Kodi，先输入账号密码再选择布局:</p>
<p><img src="http://www.kodiplayer.cn/UploadFiles/2020-02/2020020911454915821.png" alt=""></p>
</li>
<li><p>修改lightdm.conf:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>屏蔽/etc/pam.d/gdm-autologin中的配置选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">auth   required        pam_succeed_if.so user != root quiet_success</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Kodi需要一个3D GPU图形硬件控制器来支持渲染，此类3D GPU芯片现在已是计算机的标配，很多机顶盒也都配有，Kodi能够在OpenGL 1.3（具备GLSL支持）、OpenGL ES 2.0或Direct3D (DirectX) 9.0兼容的IA-32/x86、x86-64或基于ARM CPU的系统上良好运行。</p>
</li>
<li><p>实际测试，在odroid上运行IOMV以及Kodi之后，Kodi非常的卡顿，可能是没有使用EMMC，直接使用SD卡的原因，具体有待研究！</p>
</li>
</ol>
<h2 id="配置OMV日期和时间"><a href="#配置OMV日期和时间" class="headerlink" title="配置OMV日期和时间"></a>配置OMV日期和时间</h2><ol>
<li><p>登陆OMV的http主页，然后打开系统的日期和时间；</p>
</li>
<li><p>配置时区为亚洲/上海（Asia/Shanghai）;</p>
</li>
<li><p>修改NTP服务器地址，默认的没法使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ntp1.aliyun.com</span><br><span class="line">ntp2.aliyun.com</span><br><span class="line">ntp3.aliyun.com</span><br><span class="line">ntp4.aliyun.com</span><br><span class="line">ntp5.aliyun.com</span><br><span class="line">ntp6.aliyun.com</span><br><span class="line">ntp7.aliyun.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后保存即可。</p>
</li>
</ol>
<h2 id="配置用户和用户组"><a href="#配置用户和用户组" class="headerlink" title="配置用户和用户组"></a>配置用户和用户组</h2><ol>
<li>在访问权限里可以添加用户和用户组，主要用于权限管理，然后共享文件夹主要用于服务里的文件共享；</li>
<li>可以在用户里添加用户，配置用户的用户组，只有配置了用户的用户组才能实现访问，比如只有sudo用户组才可以进行sudo命令；</li>
<li>共享文件夹可以选中分享的文件夹，然后可以配置特权以及ACL限制用户的读写权限；</li>
<li>在存储器中的文件系统中可以对用户进行配额。</li>
</ol>
<h2 id="OMV的本质"><a href="#OMV的本质" class="headerlink" title="OMV的本质"></a>OMV的本质</h2><ol>
<li><p>OMV的本质，就是建构在Nginx、PHP、Python等底层系统应用上的大型Web服务程序，类似于高知名度的宝塔平台；</p>
</li>
<li><p>只要目标架构支持Debian、Dpkg，以及OMV的依赖程序，OMV就能在任意架构上的操作系统运行；</p>
</li>
<li><p>OMV基于Debian而构建，它的源代码编译后生成的是跨平台、无架构（noarch）的Deb程序包，整个编译过程并不会调用编译器生成平台专用的二进制文件；</p>
<p><img src="https://cdn.jsdelivr.net/gh/plumlis/plumzme/static/loading.gif" alt=""></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OMV是家庭型开源的NAS存储解决方案，可以用于远程下载等操作，当然可以使用一些开发技术，进行更高级的操作，还有反向代理将OMV挂载在外网，远程访问存储，保存文件！这部分只能算是OMV的基础，还需要深入学习！后续再补<del>~</del></p>
]]></content>
      <categories>
        <category>OMV</category>
      </categories>
  </entry>
  <entry>
    <title>OTA 调研</title>
    <url>/2020/05/26/OTA-%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>公司设备需要设备的OTA升级功能，而这部分之前虽然有过了解，做自己的升级策略还是需要参考下各个公司大厂的升级方案，然后总结出公司平台的OTA升级应该怎么干，具备什么功能，以及能够比其他的大厂能做的更好的地方！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="百度OTA"><a href="#百度OTA" class="headerlink" title="百度OTA"></a>百度OTA</h2><ol>
<li>针对的痛点：OTA服务屡被爆出安全问题，可引发影响设备使用、泄露隐私、甚至危害用户生命财产安全等一系列问题！</li>
<li>宣传点：保障OTA的安全性，提出安全OTA,为智能设备提供安全、稳定的OTA服务。</li>
<li>提供的功能：<ul>
<li><strong>适配主流系统及芯片，支持全设备接入（这部分吹的厉害）</strong></li>
<li><strong>同步支持系统升级、应用升级、数据及配置更新</strong></li>
<li><strong>自研在线差分技术（在线制作差分包可大幅压缩源文件体积，减少流量成本消耗及升级耗时）</strong></li>
<li><strong>灵活的策略配置（可对升级时间、升级范围、升级版本、升级地域、升级渠道等二十余项下发升级配置进行精细组合）</strong></li>
<li><strong>实时数据分析（设备级的精细化升级状态追踪，还原设备群及用户日常行为模式）</strong></li>
</ul>
</li>
<li>可能的优势：<ul>
<li><strong>便捷性：接入简单，实现全流程可视化简易操作</strong></li>
<li><strong>安全性：从云到端，全方位守护设备安全</strong></li>
<li><strong>全方位安全能力守护（设备认证、防劫持、防破解、防篡改，云端及设备双向身份认证，保证设备唯一性不受篡改，全面杜绝伪造设备发送请求）</strong></li>
<li><strong>稳定性：滴水不漏，全链路保障升级任务（断点续传、低电量保护、防降级等升级防护机制，每台设备均可追溯升级历史，漏升错升零容忍，高速CDN服务，提供多线程、高并发的升级包分发能力，保证版本快速收敛，安全漏洞极速修复）</strong></li>
</ul>
</li>
<li><strong><em>百度的升级策略中有个任务优先级，可以考虑应用场景！升级类型选择也是一种比较好的策略，线上模式测试分组升级策略，升级计划添加分组，升级时间也可以进行配置（立即生效，延迟生效）、升级完成后的附加操作、流量保护（可以选择任意网络，或者仅wifi，信号强度等（idea））回滚配置（升级失败之后进入回滚任务）、线上升级灰度测试（随机选择一部分机型进行升级测试，防止升级包问题导致全量升级后的售后刷固件问题）</em></strong></li>
<li>数据分析提供活跃设备统计、版本分布及地域分布等数据查询模式。其中活跃设备统计提供累计活跃设备数、日新增设备数、日活跃设备数及月活跃设备数四种数据展示，您可以按需求选择对应的数据进行分析。您也可点击界面左上角“下载激活设备列表”，下载产品线下所有激活设备ID详情；</li>
<li>百度OTA<a href="https://ota.baidu.com/platform/document" target="_blank" rel="noopener">官方文档</a></li>
</ol>
<h2 id="OneNET-中国移动"><a href="#OneNET-中国移动" class="headerlink" title="OneNET(中国移动)"></a>OneNET(中国移动)</h2><ol>
<li><p>功能：OneNET平台的通用OTA服务提供升级包版本管理和差分生成、设备分组管理、升级包任务策略配置、升级任务状态修改、设备升级状态查看等功能</p>
</li>
<li><p>优势：</p>
<ul>
<li><strong>简单便捷的标准化使用流程</strong></li>
<li><strong>增强的安全能力（提供增强签名算法、升级token过期、防篡改等全方位安全升级能力）</strong></li>
<li><strong>服务稳定可追溯（提供断点续传、低电量保护、防降级等升级防护机制，可查看每台设备升级详情）</strong></li>
<li><strong>海量设备同时升级（提供多线程、高并发的升级包分发能 力，轻松完成百万设备升级，保证版 本升级快速完成，安全漏洞极速修复）</strong></li>
</ul>
</li>
<li><p>升级流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/728c27496f2af3f5146391ef76fc5af8-68492" alt="OneNET升级流程"></p>
</li>
<li><p>升级策略：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c908f6de85f9ea0095e201f9b12e7607-17822" alt="OneNET升级策略"></p>
</li>
<li><p>升级任务推送流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/33a220f9ae82d48f5f969dbc73aba117-49179" alt="升级任务推送"></p>
</li>
<li><p>上报状态码定义：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">101:升级包下载成功</span><br><span class="line">102:下载失败,空间不足</span><br><span class="line">103:下载失败,内存溢出</span><br><span class="line">104:下载失败,下载请求超时</span><br><span class="line">105:下载失败,电量不足</span><br><span class="line">106:下载失败,信号不良</span><br><span class="line">107:下载失败,未知异常</span><br><span class="line">201:升级成功</span><br><span class="line">202:升级失败,电量不足</span><br><span class="line">203:升级失败,内存溢出</span><br><span class="line">204:升级失败,版本不一致</span><br><span class="line">205:升级失败,md5校验失败</span><br><span class="line">206:升级失败,未知异常</span><br></pre></td></tr></table></figure>
</li>
<li><p>升级参数定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">default_device_id（设备ID）</span><br><span class="line">default_manuf（设备模组厂商编号）</span><br><span class="line">default_model（设备模组编号）</span><br><span class="line">default_type（升级类型）</span><br><span class="line">default_fota_version（设备固件版本号）</span><br><span class="line">default_sota_version（设备应用程序版本号）</span><br><span class="line">default_res（资源及资源实体ID）</span><br><span class="line">default_access_key（产品access_key）</span><br></pre></td></tr></table></figure>
</li>
<li><p>官方<a href="https://open.iot.10086.cn/doc/ota/" target="_blank" rel="noopener">OTA文档</a></p>
</li>
</ol>
<h2 id="米家"><a href="#米家" class="headerlink" title="米家"></a>米家</h2><ol>
<li><p>开发者<a href="https://iot.mi.com/new/doc/introduction/main.html" target="_blank" rel="noopener">文档</a></p>
</li>
<li><p>升级模式：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d01487daf0556676f64bff5ab69d5087-108039" alt="IOT设备升级流程"></p>
</li>
<li><p>说明：平台面向已接入小米IoT的智能设备开放设备升级能力，供开发者对已售设备进行远程升级。用户在米家APP上控制其所购买的设备是否开始升级，并可在米家APP上看到设备的升级进程和状态。</p>
</li>
<li><p>OTA的详细说明并未在开发者文档中体现</p>
</li>
<li><p><strong>小米IoT开发者平台现阶段暂仅面向智能家居、智能家电、健康可穿戴、出行车载等领域的企业开放（而且需要企业认证）</strong></p>
</li>
</ol>
<h2 id="AliOS-Things"><a href="#AliOS-Things" class="headerlink" title="AliOS Things"></a>AliOS Things</h2><ol>
<li><p>OTA升级软件框架：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/297227769e7b6178c8cc2320d0d084dd-61181" alt="OTA升级框架"></p>
</li>
<li><p>AliOS Things官方<a href="https://github.com/alibaba/AliOS-Things/wiki/OTA-Tutorial.zh" target="_blank" rel="noopener">OTA说明文档</a></p>
</li>
<li><p>阿里升级云端固件相关参数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4f28789c5bb932b58949534b3c3b539b-10086" alt="云端固件参数"></p>
</li>
<li><p>阿里升级策略参数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b5ac8aa0dc0803a4e945607dd656e662-49881" alt="阿里升级参数"></p>
</li>
<li><p>生活物联网平台<a href="https://living.aliyun.com/doc#fxvw5z.html" target="_blank" rel="noopener">OTA官方文档</a></p>
</li>
<li><p>阿里云设备OTA升级流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c373473b7733e9c286bff6578b54d7ff-31488" alt="设备OTA升级流程"></p>
</li>
<li><p>云端一体化：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f58695fb8ba4423bdc81ec4c880e4c20-92284" alt="云端一体化"></p>
</li>
<li><p>差分升级：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cc0c048ce37812b59f2a53ae452e2716-41695" alt="流程"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5706744c9d81970546105dbc113e5c6e-28705" alt="过程"></p>
</li>
<li><p>压缩升级：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8975ec7c7b42d6efc9c7ea944bafecb8-35461" alt="过程"></p>
</li>
<li><p>物联网平台<a href="https://help.aliyun.com/document_detail/58328.html?spm=a2c4g.11186623.6.724.72774422Y17ISH" target="_blank" rel="noopener">OTA官方文档</a></p>
</li>
</ol>
<h2 id="京东（小京鱼）"><a href="#京东（小京鱼）" class="headerlink" title="京东（小京鱼）"></a>京东（小京鱼）</h2><ol>
<li><p>升级方式：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/44da6b913941f2a3b3b09a2fda30e1d1-18526" alt="京东OTA"></p>
</li>
<li><p>升级策略：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c1c386fa89be5b5cb79d6268e6c4ba22-35024" alt="升级策略"></p>
</li>
<li><p>京东物联网<a href="https://docs.jdcloud.com/cn/iot-core/ota" target="_blank" rel="noopener">OTA官方文档</a></p>
</li>
</ol>
<h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><ol>
<li><p>QQ物联智能硬件开发（<a href="https://iot.open.qq.com/introduction" target="_blank" rel="noopener">固件OTA升级能力暂时缺失</a>）</p>
</li>
<li><p>物联网智能视频服务OTA升级：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/602ce4190e37b6a856f6212cff495af2-30811" alt="智能视频OTA"></p>
</li>
<li><p><a href="https://cloud.tencent.com/document/product/1131/42402" target="_blank" rel="noopener">OTA固件管理接口参考文档</a></p>
</li>
</ol>
<h2 id="艾拉比"><a href="#艾拉比" class="headerlink" title="艾拉比"></a>艾拉比</h2><ol>
<li><p>物联网OTA方案：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e252845175d50b02534ac7593abe7afb-174837" alt="物联网OTA"></p>
</li>
<li><p>优势：</p>
<ul>
<li>优异的差分算法，最大差分效率可以实现差分包仅为整包的1%</li>
<li>全自动的打包、做包、签名、上传、下载、还原、升级的过程，最大程度的提升了效率</li>
<li>丰富的平台适配，精准的编译链，让客户使用更安心、更便捷</li>
<li>多策略的配置管理，允许客户可以根据不同的分组、时间、地点、设备号和升级方式来实现针对性升级配置</li>
<li>面对巨量设备升级时，具备智能纠错能力、断点续传和防变砖机制</li>
</ul>
</li>
<li><p>设备能力：网络连接、最新版本检测、升级包下载、安全校验、<strong>差分还原</strong>、写入升级</p>
</li>
<li><p><a href="http://www.abupdate.com/" target="_blank" rel="noopener">公司网址</a></p>
</li>
</ol>
<h2 id="其他厂商"><a href="#其他厂商" class="headerlink" title="其他厂商"></a>其他厂商</h2><ol>
<li><a href="http://docs.gizwits.com/zh-cn/UserManual/OTA.html" target="_blank" rel="noopener">机智云OTA</a></li>
<li>等待持续更新加入… …</li>
</ol>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>OpenResty Quick Start</title>
    <url>/2020/08/12/OpenResty-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Nginx和Lua能够结合使用，才深有体会Nginx的强大。以前只知道Nginx是一个开源的轻量级的Web服务软件，真的是井底之蛙！搜索之后才知道还有OpenResty，这部分主要记录在Mac上的环境配置以及简单测试，项目中怎么用慢慢探索吧！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项；</li>
<li>功能：用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关；</li>
<li>效果：Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统；</li>
<li>官方教程：<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></li>
<li>Nginx解决的是<strong>高并发</strong>的痛点，处理几万的请求很轻松，内存占用也不高。OpenResty的出现解决了享受Nginx高并发优势的拦路虎，可以用传统的同步编程思想上，在Nginx请求接进来后使用Lua处理稍复杂的逻辑；</li>
<li>Nginx 是俄罗斯人发明的， Lua 是巴西几个教授发明的，中国人章亦春把 LuaJIT VM 嵌入到 Nginx 中，实现了 OpenResty 这个高性能服务端解决方案；</li>
<li>在请求真正到达上游服务之前：<ul>
<li>Lua 可以随心所欲的做复杂的访问控制和安全检测</li>
<li>Lua 可以随心所欲的操控响应头里面的信息</li>
<li>Lua 可以从外部存储服务（比如 Redis，Memcached，MySQL，Postgres）中获取后端信息，并用这些信息来实时选择哪一个后端来完成业务访问</li>
</ul>
</li>
<li>nginScript是Nginx 官方推出的一个新的配置语言，把 JavaScript VM 嵌入到 nginx 中，提供简单的 nginx 配置功能。技术是不断迭代的，nginScript 只是想提供一种更方便配置 nginx 的方法，并不想取代 ngx_lua；</li>
<li>OpenResty®解决了高并发问题，但是并不是特效药，还是需要结合整体去分析，去取舍！</li>
</ol>
<h2 id="Mac安装并测试（brew）"><a href="#Mac安装并测试（brew）" class="headerlink" title="Mac安装并测试（brew）"></a>Mac安装并测试（brew）</h2><ol>
<li><p>使用命令安装OpenResty®：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install openresty/brew/openresty</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加zsh路径(~/.zshrc)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=/usr/local/Cellar/openresty/1.17.8.2_1/nginx/sbin:$PATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openresty -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx version: openresty/1.17.8.2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Lua5.1（如果版本一致则安装这个Lua版本）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install lua@5.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载luarocks源码，网址：<a href="http://luarocks.org/releases/luarocks-3.3.1.tar.gz，然后带OpenResty®的Lua环境地址编译，安装：" target="_blank" rel="noopener">http://luarocks.org/releases/luarocks-3.3.1.tar.gz，然后带OpenResty®的Lua环境地址编译，安装：</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zvxf luarocks-3.3.1.tar.gz</span><br><span class="line">cd luarocks-3.3.1</span><br><span class="line">./configure --with-lua-include=/usr/local/Cellar/openresty/1.17.8.2_1/luajit/include/luajit-2.1/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成luarocks就可使用luarocks安装模块，然后在OpenResty®上使用，新建一个工作目录work，在工作目录下创建logs、conf目录，并添加如下配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">worker_processes</span>  <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">error_log</span> <span class="string">logs/error.log;</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">worker_connections</span> <span class="number">1024</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">lua_code_cache</span> <span class="string">off;</span></span><br><span class="line">  <span class="comment">#  lua_package_path 'conf/?.lua;;';</span></span><br><span class="line">    <span class="string">access_log</span> <span class="string">logs/access.log;</span></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span> <span class="number">8080</span><span class="string">;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">default_type</span> <span class="string">text/html;</span></span><br><span class="line">            <span class="string">content_by_lua_block</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="string">ngx.say("&lt;p&gt;hello,</span> <span class="string">world&lt;/p&gt;")</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/luarocks</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">default_type</span> <span class="string">"text/html"</span><span class="string">;</span></span><br><span class="line">            <span class="string">content_by_lua_file</span> <span class="string">conf/staticitem.lua;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>lua_code_cache off;是关闭lua缓存，这样修改lua文件就能实时刷新了，但是会影响性能，正式环境需要关闭</li>
</ul>
</li>
<li><p>在conf目录下创建staticitem.lua，内容如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ngx.say(<span class="string">"&lt;h1&gt;staticitem.lua.loaded&lt;/h1&gt;"</span>)</span><br><span class="line"><span class="keyword">local</span> bar= <span class="built_in">require</span> <span class="string">"conf/bar"</span></span><br><span class="line">bar.say(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line"><span class="keyword">local</span> json = cjson.encode(&#123;</span><br><span class="line">    foo = <span class="string">"bar"</span>,</span><br><span class="line">    some_object = &#123;&#125;,</span><br><span class="line">    some_array = cjson.empty_array</span><br><span class="line">&#125;)</span><br><span class="line">ngx.say(json)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在conf目录下创建bar.lua：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- conf/bar.lua</span></span><br><span class="line">_M=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> rocks = <span class="built_in">require</span> <span class="string">"luarocks.loader"</span></span><br><span class="line"><span class="keyword">local</span> md5 = <span class="built_in">require</span> <span class="string">"md5"</span></span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">"rocks and md5 loaded"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.say</span> <span class="params">(a)</span></span></span><br><span class="line">    ngx.say(md5.sumhexa(a))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _M</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这里加载了md5模块，需要使用命令安装md5模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo luarocks install md5</span><br></pre></td></tr></table></figure>
</li>
<li><p>推荐使用bar.lua这种方式书写自定义模块</p>
</li>
</ul>
</li>
<li><p>在work目录下启动服务，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -p `pwd`/ -c conf/nginx.conf</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改了配置可以使用如下命令进行重启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>访问网址：<a href="http://localhost:8080/luarocks，进行测试" target="_blank" rel="noopener">http://localhost:8080/luarocks，进行测试</a></p>
</li>
<li><p>可以使用下面的命令进行性能测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -c10 -n10000 http://127.0.0.1:8080/luarocks</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="适用的场景"><a href="#适用的场景" class="headerlink" title="适用的场景"></a>适用的场景</h2><ol>
<li>高访问下的应用及官网的主页</li>
<li>商城类的秒杀功能</li>
<li>ip限流</li>
<li>APP灰度升级发布</li>
<li>… …</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OpenResty®的环境还是很好搭建的，主要还是应用场景以及设计方案，这个需要好好去研究了！</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Python Data Analysis</title>
    <url>/2020/05/22/Python-Data-Analysis/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>NumPy（Numeric Python）是一个优秀的开源科学计算库，并已经成为Python科学计算生态系统的重要组成部分。NumPy与SciPy、Matplotlib、SciKits等其他众多Python科学计算库很好地结合在一起，共同构建了一个完整的科学计算生态系统！使用NumPy，就可以很自然地使用数组和矩阵。<strong>推荐书籍：《Python数据分析基础教程 NumPy学习指南（第2版）》· [印尼] Ivan Idris 著 张驭宇 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>NumPy包含很多实用的数学函数，涵盖线性代数运算、傅里叶变换和随机数生成等功能；</li>
<li>NumPy能够直接对数组和矩阵进行操作，可以省略很多循环语句，其众多的数学函数也会让编写代码的工作轻松许多；</li>
<li>NumPy中数组的存储效率和输入输出性能均远远优于Python中等价的基本数据结构；</li>
<li>NumPy是开源的，这意味着使用NumPy可以享受到开源带来的所有益处；</li>
</ol>
<h2 id="NumPy基础"><a href="#NumPy基础" class="headerlink" title="NumPy基础"></a>NumPy基础</h2><ol>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python Network Quick Start</title>
    <url>/2020/05/17/Python-Network-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python功能强大且具交互性，用它来开发解决实际问题的脚本是一种享受，比如处理网络和系统管理操作、开发Web应用、与本地和远程网络交互、捕获并分析低层网络数据包，等等。<strong>推荐书籍：《Python 网络编程攻略》· [英] Dr. M. O. Faruque Sarker 著 安道 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><ol>
<li><p>Python的socket模块提供了类方法和实例方法，二者的区别在于使用类方法时不需要创建套接字对象实例；</p>
</li>
<li><p>推荐文件中使用__name__:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"Self run!"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>import socket 语句导入Python提供的一个核心网络库；</p>
</li>
<li><p>调用socket库提供的gethostname()方法，把结果保存在一个变量中,可以获取到主机名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">hostname=socket.gethostname()</span><br><span class="line">print(hostname)</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://docs.python.org/3/library/socket.html" target="_blank" rel="noopener">官方帮助文档</a></p>
</li>
<li><p>Python的socket库提供了很多用来处理不同IP地址格式的函数,inet_aton()和inet_ntoa()是其中常用的两个；</p>
</li>
<li><p>如果知道网络服务使用的端口，可以调用socket库中的getservbyport()函数来获取服务的名字；</p>
</li>
<li><p>Python的socket库提供了将数据在网络字节序和主机字节序之间相互转换的函数，例如ntohl()和htonl()，函数名中的n表示网络；h表示主机；l表示长整形；s表示短整形，即16位；</p>
</li>
<li><p>可以创建一个套接字对象实例， 调用 gettimeout() 方法获取默认的超时时间， 调用settimeout()方法设定一个超时时间；</p>
</li>
<li><p>Python的socket库提供了一个方法，能通过socket.error异常优雅地处理套接字错误；</p>
</li>
<li><p>在Python中，套接字可以被设置为阻塞模式或者非阻塞模式，调用setblocking(1)把套接字设为阻塞模式，或者调用setblocking(0)把套接字设为非阻塞模式；</p>
</li>
<li><p>创建套接字对象之后， 我们可以查询地址重用的状态，调用 setsockopt()方法，修改地址重用状态的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable the SO_REUSEADDR option </span></span><br><span class="line">sock.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span> ) new_state = sock.getsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR )</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过“网络时间协议”（Network Time Protocol，简称NTP）处理客户端 和服务器之间的通信,使用ntplib库进行与网络时间服务器同步的操作；</p>
</li>
</ol>
<h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><ol>
<li>如果某个客户端接收或处理数据时花了很长时间，服务器无需等待处理完成，可以使用另外的线程或进程和其他客户端通信；</li>
<li>Python的select模块中有很多针对特定平台的网络事件管理函数，在Linux设备中可以使用epoll；</li>
</ol>
<h2 id="高级网络编程"><a href="#高级网络编程" class="headerlink" title="高级网络编程"></a>高级网络编程</h2><ol>
<li>有时需要创建一个本地端口转发器，把本地端口发送的流量全部重定向到特定的远程主机上，利用这个功能，可以让用户只能访问特定的网站，而不能访问其他网站；</li>
<li>以一种更友好、更简洁的方式处理HTTP请求的requests库在Python中被频繁使用，比如使用POST请求提交网页表单、处理首部信息和使用压缩等，该模块提供了便利的包装方法get()和post()，能正确编码URL中的数据并提交表单；</li>
<li>想在不下载HTML内容的前提下检查网页是否存在,要使用浏览器客户端发送GET HEAD请求；</li>
<li>在Python代码中，可能想假装成在使用Mozilla Firefox访问Web服务器，可以在HTTP请求首部中发送自己定制的用户代理值；</li>
<li>压缩HTTP数据能提升伺服网页内容的速度；</li>
<li>Python内置的telnetlib网络库创建telnet会话,为了创建telnet会话，需要实例化Telnet类，初始化时要指定主机名参数;</li>
<li>需要通过SSH在远程设备中运行一个简单的命令,例如，查询远程设备的CPU或RAM信息，可以使用paramiko第三方库；</li>
<li>XML-RPC使用HTTP作为传输媒介，使用XML格式的内容通信；</li>
<li>Supervisor广泛用于启动和管理可执行程序，Supervisor可以作为后台守护进程运行，能监控子进程，且子进程意外退出后能重启子进程；</li>
<li>pcap（packet capture，数据包捕获）是保存网络数据常用的一种文件格式，Scapy库中的实用函数sniff()和wrpacp()捕获所有网络数据包！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分只是网络相关的基础知识，需要实战来添加自己在Python中使用第三方库的基础能力！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python Quick Start</title>
    <url>/2020/05/08/Python-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前学习过Python的编程，经历过Python从2到3的升级过程，经历过Python2停止维护的时刻，最开始的时候接受，然后排斥，再到现在的凡是能解决问题的编程语言都可以去学习的过程，是思想转变的过程！也是我的意识流编程的开始！Now is better than never!有一天也许会有人站在你后面惊呼：“哇，代码编写得真是漂亮！” <strong><em>推荐书籍：《Python编程 从入门到实践》· [美] Eric Maththes著 袁国忠 译 《Python程序设计（第3版）》· [美] John Zelle 著 王海鹏 译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Mac上安装Python3（安装的时候版本已经是3.7.7了）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install python</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用的时候可以在终端中输入python3进入命令行环境；</p>
</li>
<li><p>Python解释器读取整个程序，确定其中每个单词的含义，程序存在严重的错误时，Python将显示traceback；</p>
</li>
<li><p>变量存储了一个与变量相关联的信息，在程序中可随时修改变量的值，而Python将始终记录变量的最新值；</p>
<ul>
<li>变量名只能包含字母、数字和下划线</li>
<li>变量名不能包含空格，但可使用下划线来分隔其中的单词</li>
<li>不要将Python关键字和函数名用作变量名</li>
<li>变量名应既简短又具有描述性</li>
<li>慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0</li>
</ul>
</li>
<li><p>在Python中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号；</p>
</li>
<li><p>方法是Python可对数据执行的操作,每个方法后面都跟着一对括号,因为方法通常需要额外的信息来完成其工作;</p>
</li>
<li><p>Python使用加号（+）来合并字符串,称为拼接，可使用存储在变量中的信息来创建完整的消息；</p>
</li>
<li><p>空白泛指任何非打印字符，如空格、制表符和换行符；</p>
</li>
<li><p>Python能够找出字符串开头和末尾多余的空白，要确保字符串末尾没有空白，可使用方法rstrip()，还可以剔除字符串开头的空白，或同时剔除字符串两端的空白，分别使用方法lstrip()和strip()，要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中；</p>
</li>
<li><p>如果需要在一个函数内修改全局变量，就使用 global 语句</p>
</li>
<li><p>在Python中，可对<strong>整数</strong>执行加（+）减（-）乘（<em>）除（/）运算，将带小数点的数字都称为*</em>浮点数**，调用函数str()将非字符串值表示为字符串；</p>
</li>
<li><p>在Python中，注释用井号（#）标识，井号后面的内容都会被Python解释器忽略；</p>
</li>
<li><p>列表由一系列按特定顺序排列的元素组成，在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素，列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可，<strong>通过将索引指定为-1，可让Python返回最后一个列表元素，也适用于其他负数索引，例如，索引-2返回倒数第二个列表元素</strong>；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycle = [<span class="string">"trek"</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycle[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<ol>
<li><p>方法append()将元素添加到了列表末尾，而不影响列表中的其他所有元素</p>
</li>
<li><p>方法insert()可在列表的任何位置添加新元素，需要指定新元素的索引和值</p>
</li>
<li><p>知道要删除的元素在列表中的位置，可使用del语句删除元素</p>
</li>
<li><p>方法pop()可删除列表末尾的元素，并让你能够接着使用它，可以使用pop()来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycle = [<span class="string">"trek"</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">bicycle.insert(<span class="number">0</span>,<span class="string">'hello'</span>)</span><br><span class="line">bicycle.append(<span class="number">2</span>)</span><br><span class="line">bicycle.append(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">del</span> bicycle[<span class="number">1</span>]</span><br><span class="line">bicycle.pop()</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法remove()可以只知道要删除的元素的值便可删除元素，只删除第一个指定的值</p>
</li>
</ol>
</li>
<li><p>Python方法sort()让你能够较为轻松地对列表进行永久性排序，可以按与字母顺序相反的顺序排列列表元素，只需向 sort() 方法传递参数reverse=True；</p>
</li>
<li><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()，也可向函数sorted()传递参数reverse=True；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycle.sort()</span><br><span class="line">print(sorted(bicycle))</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法reverse()反转列表元素的排列顺序,注意也是永久性的修改列表中元素的排列顺序，想要恢复再次reverse()；</p>
</li>
<li><p>使用函数len()可快速获悉列表的长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(bicycle)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用for循环处理数据是一种对数据集执行整体操作的不错的方式，Python根据缩进来判断代码行与前一个代码行的关系，for语句末尾的冒号告诉Python，下一行是循环的第一行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    print(magician)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python函数 range() 让你能够轻松地生成一系列的数字，从指定的第一个值开始数，并在到达你指定的第二个值后停止生成数字列表，可使用函数list()将range()的结果直接转换为列表，允许指定步长，默认是1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">print(arr)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    print(num)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 指定步长</span></span><br><span class="line">arr = list(range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line">print(arr)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Python中，两个星号（**）表示乘方运算:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    print(num**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以轻松地找出数字列表的最大值、最小值和总和，分别使用max、min、sum函数；</p>
</li>
<li><p><strong>列表解析</strong>将for循环和创建新元素的代码合并成一行，并自动附加新元素，要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [ value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) ]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理列表的部分元素——Python称之为<strong>切片</strong>，要创建切片，可指定要使用的第一个元素和最后一个元素的索引，注意指定的是第几个元素开始，索引结束之前的元素为止，没有指定第一个索引，Python将自动从列表开头开始，要让切片终止于列表末尾，也可使用类似的语法，省略终止索引，都不指定类似于不使用[]，负数索引返回离列表末尾相应距离的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=list(range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line">print(arr)</span><br><span class="line">print(arr[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [3, 5]</span></span><br><span class="line">print(arr[:])</span><br><span class="line"><span class="comment"># 等同于print(arr)</span></span><br><span class="line">print(arr[<span class="number">-3</span>:])</span><br></pre></td></tr></table></figure>
</li>
<li><p>要<strong>复制列表</strong>，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=list(range(<span class="number">1</span>,<span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line">print(arr)</span><br><span class="line">print(arr[:])</span><br><span class="line"><span class="comment"># 和arr2=arr是不同的</span></span><br><span class="line">arr2=arr[:]</span><br><span class="line">arr2[<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">print(arr)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ol>
<li>Python将不能修改的值称为不可变的，而不可变的列表被称为<strong>元组</strong>；</li>
<li>元组看起来犹如列表，但使用圆括号而不是方括号来标识，可以使用索引来访问其元素，就像访问列表元素一样；</li>
<li>像列表一样，可以使用for循环来遍历元组中的所有值；</li>
<li>虽然不能修改元组的元素，但可以给存储元组的变量赋值；</li>
<li>为什么单独列出元组，因为元组可以作为函数的返回值！</li>
</ol>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ol>
<li><p>if语句让你能够检查程序的当前状态，并据此采取相应的措施；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">        print(car.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(car.title())</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Python中检查是否相等时区分大小写，如果大小写无关紧要，而只想检查变量的值，可将变量的值转换为小写，再进行比较；</p>
</li>
<li><p>要判断两个值是否不等，可结合使用惊叹号和等号（!=），其中的惊叹号表示不，使用两个等号（==）判断两个值是否相等；</p>
</li>
<li><p>使用and检查多个条件，使用or检查多个条件，前者必须全部都符合，后者只需要有一个通过就符合；</p>
</li>
<li><p>关键字 in 判断特定的值是否已包含在列表中，关键字not in 判断是否不在列表中；</p>
</li>
<li><p>Python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试；</p>
</li>
</ol>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol>
<li><p>在Python中，字典是一系列键—值对，每个键都与一个值相关联，可以使用键来访问与之相关联的值，字典用放在花括号{}中的一系列键—值对表示，键和值之间用冒号分隔，而键—值对之间用逗号分隔：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">print(alien_0[<span class="string">'color'</span>])</span><br><span class="line">print(alien_0[<span class="string">'points'</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>字典是一种动态结构，可随时在其中添加键—值对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">'x'</span>]=<span class="number">123</span>;</span><br><span class="line">alien_0[<span class="string">'y'</span>]=<span class="number">234</span>;</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在空字典中添加键—值对是为了方便,直接使用{}可以创建空字典；</p>
</li>
<li><p>字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除，使用del语句时，必须指定字典名和要删除的键；</p>
</li>
<li><p>用于遍历字典的for循环，可声明两个变量，用于存储键—值对中的键和值，对于这两个变量，可使用任何名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> alien_0.items():</span><br><span class="line">    print(key+<span class="string">" : "</span>+str(value))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python不关心键—值对的存储顺序，而只跟踪键和值之间的关联关系；</p>
</li>
<li><p>方法keys()返回字典中的所有键；</p>
</li>
<li><p>方法values()返回一个值列表；</p>
</li>
<li><p>将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为<strong>嵌套</strong>；</p>
</li>
</ol>
<h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><ol>
<li><p>函数input()让程序暂停运行，等待用户输入一些文本，获取用户输入后，Python将其存储在一个变量中,使用函数input()时，Python将用户输入解读为字符串；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = input(<span class="string">"Tell me something, and I will repeat it back to you: "</span>)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数int()将数字的字符串表示转换为数值表示;</p>
</li>
<li><p>求模运算符（%）将两个数相除并返回余数;</p>
</li>
</ol>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ol>
<li><p>while循环不断地运行，直到指定的条件不满足为止:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    print(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码;</p>
</li>
<li><p>continue的作用学过C语言的知道什么意思；</p>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol>
<li><p>函数是带名字的代码块，用于完成具体的工作；</p>
</li>
<li><p>使用关键字def来告诉Python你要定义一个函数；</p>
</li>
<li><p>文档字符串用三引号括起，Python使用它们来生成有关程序中函数的文档；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">'hamster'</span>, <span class="string">'harry'</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">'hamster'</span>, pet_name=<span class="string">'harry'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字实参是传递给函数的名称—值对,向函数传递实参时不会混淆；</p>
</li>
<li><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值，否则，将使用形参的默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type=<span class="string">'dk'</span>, pet_name=<span class="string">'ds'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">'hamster'</span>, <span class="string">'harry'</span>)</span><br><span class="line">describe_pet()</span><br></pre></td></tr></table></figure>
</li>
<li><p>在函数中，可使用return语句将值返回到调用函数的代码行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type=<span class="string">'dk'</span>, pet_name=<span class="string">'ds'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line">message=describe_pet()</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>
</li>
<li><p>要将列表的副本传递给函数，可以像下面这样做:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python允许函数从调用语句中收集任意数量的实参，在定义函数的参数的时候添加*：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">  <span class="string">"""打印顾客点的所有配料"""</span></span><br><span class="line">  print(toppings)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可将函数编写成能够接受任意数量的键—值对,变量使用**开头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span>, <span class="string">'einstein'</span>, location=<span class="string">'princeton'</span>, field=<span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以将函数存储在被称为模块的独立文件中，再将模块导入到主程序中，import语句允许在当前运行的程序文件中使用模块中的代码；</p>
</li>
<li><p>使用这种import语句导入了名为module_name.py的整个模块，就可使用下面的语法来使用其中任何一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">module_name.function_name()</span><br><span class="line"><span class="comment"># 导入模块中的特定函数</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br><span class="line"><span class="comment"># 通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名,可以使用as来做到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> new_name</span><br><span class="line"><span class="comment"># 给模块起个别名</span></span><br><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用星号（*）运算符可让Python导入模块中的所有函数；</p>
</li>
</ol>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ol>
<li><p>在Python中，首字母大写的名称指的是类（约定）；</p>
</li>
<li><p>方法<strong>init</strong>()是一个特殊的方法  ，每当你根据类名创建新实例时， Python都会自动运行它 ，在这个方法的名称中，开头和末尾各有两个下划线，自动传入实参self ，每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法；</p>
</li>
<li><p>根据类名创建实例后，就可以使用句点表示法来调用类中定义的任何方法；  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        print(<span class="string">"默认创建就自启动"</span>)</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name +<span class="string">",Hello!"</span>)</span><br><span class="line">        </span><br><span class="line">dog=Dog(<span class="string">'Tidy'</span>)</span><br><span class="line">dog.printHello()</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类 ;</p>
</li>
<li><p>子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法 ;</p>
</li>
<li><p>创建子类的实例时， Python首先需要完成的任务是给父类的所有属性赋值，子类的方法<strong>init</strong>()需要父类施以援手；</p>
</li>
<li><p>super()是一个特殊函数，帮助Python将父类和子类关联起来，父类也称为超类（ superclass），名称super因此而得名 ；   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'This is execute by create instance!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">",Hello !"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal Eat'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">        print(<span class="string">'Dog __init__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">"Eat meat!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">dog=Dog(<span class="string">'Tidy'</span>)</span><br><span class="line">dog.SayHello();</span><br><span class="line">dog.Eat();</span><br><span class="line">cat=Cat(<span class="string">'Kitty'</span>)</span><br><span class="line">cat.Eat()</span><br></pre></td></tr></table></figure>

<p>​     </p>
</li>
<li><p>通过将类移到一个模块中，并导入该模块，你依然可以使用其所有功能；    </p>
</li>
<li><p>要导入模块中的每个类 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不推荐使用</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python标准库是一组模块，安装的Python都包含它 ；</p>
</li>
</ol>
<h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><ol>
<li><p>函数open()接受一个参数，要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字with在不再需要访问文件后将其关闭，只管打开文件，并在需要时使用它， Python自会在合适的时候自动将其关闭 ;</p>
</li>
<li><p>写入文件内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误，每当发生让Python不知所措的错误时，它都会创建一个异常对象；</p>
</li>
<li><p>try-except代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">	print(<span class="string">'always execute'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要，通过将可能引发错误的代码放在try-except代码块中，可提高这个程序抵御错误的能力，依赖于try代码块成功执行的代码都应放到else代码块中 ；   </p>
</li>
<li><p>Python有一个pass语句，可在代码块中使用它来让Python什么都不要做 ;</p>
</li>
</ol>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><ol>
<li><p>Python标准库中的模块unittest提供了代码测试工具；</p>
</li>
<li><p>单元测试用于核实函数的某个方面没有问题； 测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求； </p>
</li>
<li><p>要为函数编写测试用例，可先导入模块unittest以及要测试的函数，再创建一个继承unittest.TestCase的类，并编写一系列方法对函数行为的不同方面进行测试 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""测试name_function.py"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'test case'</span>)</span><br><span class="line">        self.assertEqual(<span class="string">'Janis Joplin'</span>, <span class="string">'Janis Joplin'</span>)</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 代码行unittest.main()让Python运行这个文件中的测试</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Python在unittest.TestCase类中提供了很多断言方法 ; </p>
</li>
<li><p>参与工作量较大的项目时，应对自己编写的函数和类的重要行为进行测试!  </p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Python语言的基础部分基本上就能让我们可以编写Python代码了，但是Python的高级特性还没有介绍，以及一些机器学习算法结合Python编程语言的学习，想要深入Python还有很长的一段路要走！需要加油学习！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 测试驱动开发</title>
    <url>/2020/05/15/Python-%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>不管从事什么工作，都要历经从新手到熟手的过程，最终有可能成为大师！测试驱动开发（Test-Driven Development，TDD）是一个非常合理的方案， 一个需要养成的非常好的习惯。项目不断变大，系统的不同部分之间要开始相互依赖，代码就变得像一团麻，丑陋不堪，开发新功能变得很痛苦！功能测试能揭示我们可能永远都无法预测的回归，单元测试能让我避免犯很愚蠢的逻辑错误！<strong><em>推荐书籍：《Python测试驱动开发 使用Django、Selenium和javaScript进行Web编程》· [英] 哈利·J.W. 帕西瓦尔 著 安道 译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ol>
<li>OS：MacOS 10.15.4</li>
<li>内存：8G DDR3</li>
<li>Python版本：3.7.7</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Python使用selenium以及geckodriver、chromedriver可以进行Firefox、谷歌浏览器的模拟，进行自动化测试工作；在Mac上安装只要使用如下的命令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install geckodriver</span><br><span class="line">geckodriver --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> geckodriver 0.26.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The <span class="built_in">source</span> code of this program is available from</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> testing/geckodriver <span class="keyword">in</span> https://hg.mozilla.org/mozilla-central.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This program is subject to the terms of the Mozilla Public License 2.0.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can obtain a copy of the license at https://mozilla.org/MPL/2.0/.</span></span><br><span class="line"></span><br><span class="line">brew cask reinstall chromedriver</span><br><span class="line">chromedriver --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> ChromeDriver 81.0.4044.138 (8c6c7ba89cc9453625af54f11fd83179e23450fa-refs/branch-heads/4044@&#123;<span class="comment">#999&#125;)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Python模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install django</span><br><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django（或许）是 Python 领域之中最受欢迎的 Web 框架;</p>
</li>
<li><p><strong>遵从测试山羊的教诲 ， 没有测试什么也别做!</strong>像山羊一样专注，咩咩地叫着：“先测试，先测试！”</p>
</li>
<li><p>功能测试 （Functional Test，FT）：跟踪用户故事 （User Story） ，模拟用户使用某个功能的过程，以及应用应该如何响应用户的操作（功能测试=验收测试=端到端测试）；</p>
</li>
<li><p>编写新功能测试时，可以先写注释，勾勒出用户故事的重点，这样写出的测试人类可读，甚至可以作为一种讨论应用需求和功能的方式分享给非程序员看；</p>
</li>
<li><p>版本控制系统 （Version Control System，VCS）</p>
</li>
<li><p>功能测试站在用户的角度从外部测试应用，单元测试则站在程序员的角度从内部测试应用；</p>
</li>
<li><p>Selenium的核心Selenium Core基于JsUnit，完全由JavaScript编写，因此可以用于任何支持JavaScript的浏览器上。selenium可以模拟真实浏览器，自动化测试工具，支持多种浏览器；</p>
</li>
<li><p>python安装selenium：<a href="https://selenium-python.readthedocs.io/installation.html" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/installation.html</a></p>
</li>
</ol>
<h2 id="Django-amp-Selenium起步"><a href="#Django-amp-Selenium起步" class="headerlink" title="Django&amp;Selenium起步"></a>Django&amp;Selenium起步</h2><ol>
<li><p>在安装了django以及selenium的基础上，使用如下命令创建一个django项目:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> django-admin.py startproject 项目名称</span></span><br><span class="line">django-admin.py startproject superlists</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个命令会创建一个名为 superlists 的文件夹，并在其中创建一些文件和子文件夹,实际上是创建一个django项目</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进行项目文件夹中，启动项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> Watching <span class="keyword">for</span> file changes with StatReloader</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Performing system checks...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> System check identified no issues (0 silenced).</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run <span class="string">'python manage.py migrate'</span> to apply them.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> May 15, 2020 - 09:56:08</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django version 3.0.6, using settings <span class="string">'superlists.settings'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Starting development server at http://127.0.0.1:8000/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Quit the server with CONTROL-C.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写功能测试脚本(django.py)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line"><span class="comment"># 最大化窗口</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 等待3秒</span></span><br><span class="line">browser.implicitly_wait(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 请求页面</span></span><br><span class="line">browser.get(<span class="string">"http://localhost:8000"</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">'Django'</span> <span class="keyword">in</span> browser.title</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行功能测试脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./django.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django常用的命令：</p>
<ol>
<li><p>启动 Django 的开发服务器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行单元测试:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py test</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Django单元测试"><a href="#Django单元测试" class="headerlink" title="Django单元测试"></a>Django单元测试</h2><ol>
<li><p>首先在创建的项目下创建一个应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp lists</span><br><span class="line"><span class="comment"># 命令会在 superlists 文件夹中创建子文件夹 lists,创建一些占位文件，用来保存模型、视图以及目前最关注的测试</span></span><br><span class="line"><span class="comment"># lists</span></span><br><span class="line"><span class="comment"># ├── __init__.py</span></span><br><span class="line"><span class="comment"># ├── admin.py</span></span><br><span class="line"><span class="comment"># ├── apps.py</span></span><br><span class="line"><span class="comment"># ├── migrations</span></span><br><span class="line"><span class="comment"># │   └── __init__.py</span></span><br><span class="line"><span class="comment"># ├── models.py</span></span><br><span class="line"><span class="comment"># ├── tests.py</span></span><br><span class="line"><span class="comment"># └── views.py</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在文件下有一个tests.py文件，可以进行unittest.TestCase增强型的测试，添加了Django专用的功能；</p>
</li>
<li><p>可以在lists文件下编辑tests.py，添加一个错误的测试案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmokeTest</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_bad_math</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(<span class="number">1</span>+<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Selenium提供了几个用来查找网页内容的方法：find_element_by_tag_name、find_element_by_id 和 find_element s _by_tag_name，send_keys是 Selenium 在输入框中输入内容的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line">browser.find_element_by_tag_name(<span class="string">'h1'</span>).text</span><br><span class="line">inputbox = self.browser.find_element_by_id(<span class="string">'id_new_item'</span>)</span><br><span class="line">inputbox.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure>
</li>
<li><p>单元测试的规则之一是<strong>不测试常量</strong>,单元测试要测试的其实是逻辑、流程控制和配置;</p>
</li>
<li><p>重构的首要原则是不能没有测试!重构时，修改代码或者测试，但不能同时修改；</p>
</li>
<li><p>Django 中的 render 函数第一个参数是请求对象,第二个参数是渲染的模板名,会自动在所有的应用目录中搜索名为 templates 的文件夹， 然后根据模板中的内容构建一个HttpResponse 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home_page</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 startapp 命令以及在项目文件夹中存放一个应用还不够，还要告诉 Django 确实 要开发一个应用， 并把这个应用添加到文件settings.py 中；</p>
</li>
</ol>
<h2 id="测试数据库"><a href="#测试数据库" class="headerlink" title="测试数据库"></a>测试数据库</h2><ol>
<li>对象关系映射器（Object-Relational Mapper， ORM）是一个数据抽象层，描述存储在数据库中的表、行和列，处理数据库时，可以使用熟悉的面向对象方式，写出更好的代码，类对应数据库中的表，属性对应列，类的单个实例表示数据库中的一行数据；      </li>
<li>良好的单元测试实践方法要求，一个测试只能测试一件事，一个测试中有多个断言，一旦前面的断言导致测试失败，就无法得知后面的断言情况如何；   </li>
<li>为了保持文件结构清晰，要新建一个文件夹保存功能测试，让它看起来就像一个应用；</li>
<li>只要发现功能测试遇到奇怪的问题，就可以升级 Selenium 试试 ；</li>
</ol>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol>
<li>隔离测试（纯粹的单元测试）与整合测试：<ul>
<li>单元测试的主要作用应该是验证应用的逻辑是否正确  </li>
<li>隔离测试只能测试一部分代码，测试是否通过与其他任何外部代码都没有关系  </li>
</ul>
</li>
<li>集成测试 ：用于检查被你控制的代码是否能和你无法控制的外部系统完好集成；</li>
<li>系统测试：检查应用内部多个系统之间的集成情况；</li>
<li>功能测试和验收测试：验收测试的作用是从用户的角度检查系统是否能正常运行！  </li>
</ol>
<h2 id="没什么用处的测试脚本"><a href="#没什么用处的测试脚本" class="headerlink" title="没什么用处的测试脚本"></a>没什么用处的测试脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Chrome()</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 最大化窗口</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求页面</span></span><br><span class="line">browser.get(<span class="string">"http://test2.zhinengxiyifang.cn:3050/#/login?msg=notLogin"</span>)</span><br><span class="line"><span class="comment"># 等待3秒</span></span><br><span class="line">browser.implicitly_wait(<span class="number">3</span>)</span><br><span class="line">username= browser.find_elements_by_class_name(<span class="string">'el-input__inner'</span>)</span><br><span class="line"><span class="comment">#print(username)</span></span><br><span class="line">username[<span class="number">0</span>].send_keys(<span class="string">'littleswan'</span>)</span><br><span class="line">username[<span class="number">1</span>].send_keys(<span class="string">'123456'</span>)</span><br><span class="line">button=browser.find_element_by_tag_name(<span class="string">"button"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(button)</span></span><br><span class="line">button.send_keys(Keys.ENTER)</span><br><span class="line"><span class="comment"># 等待3秒</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>





<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在不受影响的可控环境中才能让技能变成肌肉记忆！先为简单的函数写好测试，当函数变复杂后，这道心理障碍就容易迈过去。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 深入学习第一阶段</title>
    <url>/2020/05/09/Python-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当今世界中存在着几百种编程语言，没有哪一门语言是最好的，术业有专攻，每种语言都有自己的用武之地！ <strong><em>推荐书籍：《Python编程导论（第2版）》· [美] Jhon V. Guttag 著 陈光欣 译 《Python基础教程（第3版）》· [挪] Magnus Lie Hetland 著 袁国忠 译   《Python高性能编程》· [美] Micha Gorelick Ian Ozsvald著 胡世杰 徐旭彬 译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>希望能够像执行其他程序一样执行Python脚本，而无需显式地使用Python解释器，让脚本的第一行以字符序列#!（称为pound bang或shebang）开始，并在它后面指定用于对脚本进行解释的程序的绝对路径；</p>
</li>
<li><p>要表示很长的字符串（跨越多行的字符串），可使用三引号（而不是普通引号）；  </p>
</li>
<li><p>原始字符串让字符串包含的每个字符都保持原样，原始字符串用前缀r表示，原始字符串不能以单个反斜杠结尾；                       </p>
</li>
<li><p>使用函数dict 从其他映射（如其他字典）或键-值对序列创建字典；</p>
</li>
<li><p>序列解包（或可迭代对象解包）在使用返回元组（或其他序列或可迭代对象）的函数或方法时很有用；</p>
</li>
<li><p>eval是一个类似于exec的内置函数。 exec执行一系列Python语句，而eval计算用字符串表示的Python表达式的值，并返回结果；</p>
</li>
<li><p>在定义和调用函数时都使用*或**，将只传递元组或字典；</p>
</li>
<li><p>Python函数可以嵌套，即可将一个函数放在另一个函数内;  </p>
</li>
<li><p><strong>要让方法或属性成为私有的（不能从外部访问），只需让其名称以两个下划线打头即可;</strong>     </p>
</li>
<li><p>要确定一个类是否是另一个类的子类，可使用内置方法issubclass，如果你有一个类，并想知道它的基类，可访问其特殊属性__bases__，要确定对象是否是特定类的实例，可使用isinstance，如果你要获悉对象属于哪个类，可使用属性__class__； </p>
</li>
<li><p>Python支持多重继承，除非万不得已，否则应避免使用多重继承，如果多个超类以不同的方式实现了同一个方法，必须在class语句中小心排列这些超类 ，因为会出现覆盖问题；</p>
</li>
<li><p>Python通过引入模块abc提供了官方解决方案，这个模块为所谓的抽象基类提供了支持；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Talker</span><span class="params">(ABC)</span>:</span></span><br><span class="line"><span class="meta">	@abstractmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类相关的常用函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">callable(object)     判断对象是否是可调用的（如是否是函数或方法）</span><br><span class="line">getattr(object,name[,default])    获取属性的值，还可提供默认值</span><br><span class="line">hasattr(object, name)     确定对象是否有指定的属性</span><br><span class="line">isinstance(object, <span class="class"><span class="keyword">class</span>)     确定对象是否是指定类的实例</span></span><br><span class="line"><span class="class"><span class="title">issubclass</span><span class="params">(A, B)</span>     确定<span class="title">A</span>是否是<span class="title">B</span>的子类</span></span><br><span class="line"><span class="class"><span class="title">random</span>.<span class="title">choice</span><span class="params">(sequence)</span>     从一个非空序列中随机地选择一个元素</span></span><br><span class="line"><span class="class"><span class="title">setattr</span><span class="params">(object, name, value)</span>     将对象的指定属性设置为指定的值</span></span><br><span class="line"><span class="class"><span class="title">type</span><span class="params">(object)</span>     返回对象的类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Python中，有些名称很特别，开头和结尾都是两个下划线，很大一部分都是魔法方法的名称，在Python中，创建构造函数很容易，只需将方法init的名称从普通的init改为魔法版__init__即可，Python提供了魔法方法__del__，也称作析构函数（ destructor），在对象被销毁前被调用，尽量不使用； </p>
</li>
<li><p>序列和映射基本上是元素（ item）的集合，要实现它们的基本行为（协议），不可变对象需要实现2个方法，而可变对象需要实现4个：</p>
<ul>
<li>__len__(self)：这个方法应返回集合包含的项数，对序列来说为元素个数，对映射来说为键-值对数</li>
<li>__getitem__(self, key)：这个方法应返回与指定键相关联的值        </li>
<li>__setitem__(self, key, value)：这个方法应以与键相关联的方式存储值，以便以后能够使用__getitem__(self, key)来获取</li>
<li>__delitem__(self, key)：这个方法在对对象的组成部分使用__del__语句时被调用，应删除与key相关联的值  </li>
</ul>
</li>
<li><p>要在属性被访问时执行一段代码，必须使用一些魔法方法:</p>
<ul>
<li>__getattribute__(self, name)：在属性被访问时自动调用（只适用于新式类）  </li>
<li>__getattr__(self, name)：在属性被访问而对象没有这样的属性时自动调用    </li>
<li>__setattr__(self, name, value)：试图给属性赋值时自动调用  </li>
<li>__delattr__(self, name)：试图删除属性时自动调用  </li>
</ul>
</li>
<li><p>方法__iter__返回一个迭代器，它是包含方法__next__的对象，而调用这个方法时可不提供任何参数，当你调用方法__next__时，迭代器应返回其下一个值； </p>
</li>
<li><p><strong>TODO：</strong>包含yield语句的函数都被称为<strong>生成器</strong> ，生成器不是使用return返回一个值，而是可以生成多个值，每次一个，每次使用yield生成一个值后，函数都将冻结，即在此停止执行，等待被重新唤醒，被重新唤醒后，函数将从停止的地方开始继续执行；</p>
</li>
<li><p>为组织模块，可将其编组为<strong>包（ package）</strong>，包其实就是另一种模块，但有趣的是它们可包含其他模块，要被Python视为包，目录必须包含文件__init__.py，要将模块加入包中，只需将模块文件放在包目录中即可；</p>
</li>
<li><p>Python 3中的保留字包括 and 、 as 、 assert 、 break 、 class 、continue、def、del、elif、else、except、False、finally、for、from、global、if、import、in、is、lambda、nonlocal、None、not、or、pass、raise、return、True、try、while、with和 yield</p>
</li>
<li><p>系统自带模块：</p>
<ul>
<li>模块sys让你能够访问与Python解释器紧密相关的变量和函数  </li>
<li>模块os让你能够访问多个操作系统服务</li>
<li>模块fileinput让你能够轻松地迭代一系列文本文件中的所有行  </li>
<li>Python支持一些较常用的，其中的字典（散列表）和列表（动态数组）是Python语言的有机组成部分  </li>
<li>模块time包含用于获取当前时间、操作时间和日期、从字符串中读取日期、将日期格式化为字符串的函数  </li>
<li>模块random包含生成伪随机数的函数，有助于编写模拟程序或生成随机输出的程序  </li>
<li>模块shelve可以进行简单的数据库操作</li>
<li>模块re提供了对正则表达式的支持  </li>
<li>模块cmd能够编写类似于Python交互式解释器的命令行解释器   </li>
<li>模块csv让你能够轻松地读写CSV文件，它还以非常透明的方式处理CSV格式的一些棘手部分        </li>
<li>模块datetime支持特殊的日期和时间对象，并让你能够以各种方式创建和合并这些对象  </li>
<li>模块difflib  让你能够确定两个序列的相似程度，还让你能够从很多序列中找出与指定序列最为相似的序列  </li>
<li>模块enum 使得Python支持枚举类型</li>
<li>模块functools 能够在调用函数时只提供部分参数，以后再填充其他的参数  </li>
<li>模块hashlib  可计算字符串的小型“签名”    </li>
<li>模块itertools  包含大量用于创建和合并迭代器      </li>
<li>模块timeit（和配套的命令行脚本）是一个测量代码段执行时间的工具  </li>
</ul>
</li>
</ol>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ol>
<li><p>网络编程中的一个基本组件是套接字（ socket），套接字分为两类：服务器套接字和客户端套接字；</p>
</li>
<li><p>为传输数据，套接字提供了两个方法： send和recv（表示receive）；</p>
</li>
<li><p>简单服务器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line"></span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">1234</span></span><br><span class="line">s.bind((host, port))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	c, addr = s.accept()</span><br><span class="line">	print(<span class="string">'Got connection from'</span>, addr)</span><br><span class="line">	c.send(<span class="string">'Thank you for connecting'</span>)</span><br><span class="line">	c.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>简单客户端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">1234</span></span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络库urllib和urllib2让你能够通过网络访问文件，就像这些文件位于你的计算机中一样,urlopen返回的类似于文件的对象支持方法close、 read、 readline和readlines，还支持迭代等  ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">webpage = urlopen(<span class="string">'http://www.python.org'</span>)</span><br><span class="line">text = webpage.read()</span><br><span class="line">m = re.search(<span class="string">b'&lt;a href="([^"]+)" .*?&gt;about&lt;/a&gt;'</span>, text, re.IGNORECASE)</span><br><span class="line">m.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数urlretrieve 下载文件并将其副本存储在一个本地文件中，返回一个格式为(filename, headers)的元组，其中filename是本地文件的名称，headers包含一些有关远程文件的信息；</p>
</li>
<li><p>处理多个连接的主要方式有三种：分叉（ forking）、线程化和异步I/O ；</p>
</li>
</ol>
<h2 id="功能性介绍"><a href="#功能性介绍" class="headerlink" title="功能性介绍"></a>功能性介绍</h2><ol>
<li><p>在程序的第一行或第二行插入一条注释告诉Python使用何种编码方式,多数Python实现会默认使用UTF-8：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: encoding name -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>无论何时导入模块， Python 都会在该模块内部创建一个特殊的变量__name__，并为其分配一个表示模块名称的字符串，如果直接运行 Python 代码（不导入）， Python 会将__name__的值设置为’__main__‘ ，可以改变程序的最后一行,保证在直接调用程序时自动运行 main，但如果导入模块，就不会运行 : </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == ’__main__’:</span><br><span class="line">	函数体</span><br></pre></td></tr></table></figure>
</li>
<li><p>虽然 Python 简单地忽略了常规注释，但文档字符串实际在执行时被放在一个特殊属性中，名为__doc__   </p>
</li>
</ol>
<h2 id="外部库"><a href="#外部库" class="headerlink" title="外部库"></a>外部库</h2><ol>
<li>numpy：一个 Python 数字库（矩阵运算的基石库）</li>
<li>scipy：大量可信的科学库的集合，通常包含了广受尊重的C和Fortran库</li>
<li>pandas：一个数据分析库，类似于R语言的数据框或Excel表格，基于 scipy 和 numpy</li>
<li>scikit-learn：正在快速成为默认的机器学习库，基于scipy</li>
<li>biopython：一个生物信息学库，类似于 bioperl</li>
<li>tornado：一个提供了并发机制的库</li>
<li>各类数据库封装：为了跟基本上所有的数据库通信，包括 Redis、MongoDB、HDF5以及SQL</li>
<li>各类网站开发框架：用于创建网站的各种高性能系统，如 django、pyramid、flask和tornado</li>
<li>OpenCV：计算机视觉的封装</li>
</ol>
<h2 id="矩阵和矢量计算"><a href="#矩阵和矢量计算" class="headerlink" title="矩阵和矢量计算"></a>矩阵和矢量计算</h2><ol>
<li>矢量计算是计算机工作原理不可或缺的部分，也是在芯片层次上对程序运行时间进行加速所必须了解的内容；</li>
<li>现代计算机所使用的层次化的内存架构会导致 CPU 和内存之间的带宽受到限制，称之为“冯诺依曼瓶颈”；</li>
<li>任何我们对 numpy 数组的数学操作都能自动矢量化而无须我们显式遍历每一个元素，使得矩阵计算更简单，而且也更快；</li>
<li>由于 CPU 必须等待从较慢的内存中读取数据而不是从缓存中直接使用， 缓存失效降低了计算速度，内存问题才是代码效率低下的决定性因素；  </li>
<li>numexpr 模块可以将整个矢量表达式编译成非常高效的代码，可以将缓存失效以及临时变量的数量最小化，还能利用多个 CPU 核心以及 Intel 芯片专用的指令集来将速度最大化；</li>
<li>优化使用的两种方法：减少 CPU 获得数据的时间和减少 CPU 需要干的工作；</li>
<li>理解了缓存的工作方式很重要！</li>
</ol>
<h2 id="编译成C"><a href="#编译成C" class="headerlink" title="编译成C"></a>编译成C</h2><ol>
<li>Cython 是一个能把类型注解的 Python 转换为一个扩展编译模块的编译器；</li>
<li>能够像一个常规 Python 模块那样使用 import 来导入扩展模块；</li>
<li>Cython 有一个注解选项能输出一个可以让我们在浏览器上查看的 HTML 文件；</li>
<li>OpenMP（Open Multi-Processing）是一个定义良好的跨平台 API， 支持并行执行， 以及与 C、C++和 Fortran 的内存共享；</li>
<li>Pythran 是一个把 Python 转换成 C++的编译器， 作用于包含对部分 numpy 支持的 Python 子集！</li>
</ol>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ol>
<li>并发允许我们在等待一个 I/O 操作完成的时候执行其他操作，从而帮助我们把这个浪费的时间利用起来；</li>
<li>使用事件循环编程能采取两种方式：回调或者 future；</li>
<li>在回调模式中，使用一个通 常称之为回调的函数作为输入参数来调用函数。它会使用值来调用回调函数，而不是把值返回出去！</li>
</ol>
<h2 id="multiprocessing-模块"><a href="#multiprocessing-模块" class="headerlink" title="multiprocessing 模块"></a>multiprocessing 模块</h2><ol>
<li>multiprocessing 模块有一些典型的工作：<ul>
<li>用进程或池对象来并行化一个 CPU 密集型任务</li>
<li>用哑元模块（奇怪的称呼）在线程池中并行化一个I/O密集型任务</li>
<li>由队列来共享捎带的工作</li>
<li>在并行工作者之间共享状态，包括字节、原生数据类型、字典和列表</li>
</ul>
</li>
<li>通过使用进程，我们并行运行了一定数量的 Python 解释器，每一个进程都有私有的内存空间，有自己的 GIL， 并且每一个都串行运行；</li>
<li>multiprocessing 模块在 Python 2.6 中被引入，通过采用已经存在的块，把它合入 Python 的内置库集合中！</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 深入学习第二阶段</title>
    <url>/2020/05/11/Python-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> 这部分是Python的进阶学习第二阶段，主要是一些深入的Python技巧，还有一些之前没有介绍的库。学习这部分能带来什么，看完就知道了！*<em>推荐书籍：《Python 核心编程（第3版）》· [美] Wesley Chun 著 孙波翔 李斌 李晗 译 *</em></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol>
<li><p>操作文本或者数据是非常频率高的过程，比如文字处理、网页表单的填写、来自数据库转储的信息流、股票报价信息、新闻源，而且这个清单还会不断增长；</p>
</li>
<li><p>正则表达式为高级的文本模式匹配、抽取、与/或文本形式的搜索和替换功能提供了基础；</p>
</li>
<li><p>Python 通过标准库中的 re 模块来支持正则表达式，建议阅读一些官方帮助文档和与此主题相关的文档：</p>
<ul>
<li>“搜索”（searching），即在字符串任意部分中搜索匹配的模式</li>
<li>“匹配”（matching）是指判断部分地匹配某个模式</li>
</ul>
</li>
<li><p>正则表达式是包含文本和特殊字符的字符串，该字符串描述一个可以识别各种字符串的模式；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/da8be6e815e95e66f2b1ede9c9711c9a-108643" alt="正则表达式特殊字符1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/92388579014a70f811c4cfd87956cbcb-166935" alt="正则表达式特殊字符2"></p>
</li>
<li><p>表示择一匹配的管道符号（|），也就是键盘上的竖线，表示一个“从多个模式中选择其一”的操作，择一匹配有时候也称作并（union）或者逻辑或（logical OR）；</p>
</li>
<li><p>点号或者句点（.）符号匹配除了换行符\n 以外的任何字符；</p>
</li>
<li><p>如果要匹配字符串的开始位置，就必须使用脱字符（^）或者特殊字符\A（反斜线和大写字母A）；</p>
</li>
<li><p>美元符号（$）或者\Z 将用于匹配字符串的末尾位置；</p>
</li>
<li><p>方括号中两个符号中间用连字符（-）连接，用于指定一个字符的范围，如果脱字符（^）紧跟在左方括号后面，这个符号就表示不匹配给定字符集中的任何一个字符；</p>
</li>
<li><p>星号或者星号操作符（*）将匹配其左边的正则表达式出现零次或者多次的情况；</p>
</li>
<li><p>加号（+）操作符将匹配一次或者多次出现的正则表达式，问号（？）操作符将匹配零次或者一次出现的正则表达式；</p>
</li>
<li><p>大括号操作符（{}），里面或者是单个值或者是一对由逗号分隔的值，最终精确地匹配前面的正则表达式 N 次（如果是{N}）或者一定范围的次数；</p>
</li>
<li><p>re 模块支持更强大而且更通用的 Perl 风格（Perl 5 风格）的正则表达式，该模块允许多个线程共享同一个已编译的正则表达式对象，也支持命名子组；</p>
</li>
</ol>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ol>
<li><p>服务器就是一系列硬件或软件，为一个或多个客户端（服务的用户）提供所需的“服务”，目的就是等待客户端的请求，并响应它们（提供服务），然后等待更多请求；</p>
</li>
<li><p>客户端因特定的请求而联系服务器，并发送必要的数据，然后等待服务器的回应，最后完成请求或给出故障的原因；</p>
</li>
<li><p>套接字是计算机网络数据结构，在任何类型的通信开始之前，网络应用程序必须创建套接字；</p>
</li>
<li><p>有两种类型的套接字：基于文件的和面向网络的</p>
<ul>
<li>AF_UNIX、AF_LOCAL，表示地址家族（address family）：UNIX</li>
<li>AF_INET，或者地址家族： 因特网</li>
</ul>
</li>
<li><p>Python 只(目前)支持 AF_UNIX、AF_NETLINK、AF_TIPC 和 AF_INET 家族；</p>
</li>
<li><p>面向连接的通信提供序列化的、可靠的和不重复的数据交付，而没有记录边界，实现这种连接类型的主要协议是传输控制协议（TCP）；</p>
</li>
<li><p>数据报类型的套接字是一种无连接的套接字，在通信开始之前并不需要建立连接，实现这种连接类型的主要协议是用户数据报协议（UDP）；</p>
</li>
<li><p>Python中提供了网络通信模块socket，在这个模块中可以找到 socket()函数，该函数用于创建套接字对象；</p>
</li>
<li><p>为了创建 TCP/IP 套接字以及UDP套接字，可以用下面的方式调用 socket.socket()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>
</li>
<li><p>套接字常用属性和方法：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e1a5d7f143d82ca00bf3721e26481a71-57377" alt="常见属性和方法1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/70276f51afe3295dea6b6f6a0d602917-110375" alt="常见属性和方法2"></p>
</li>
<li><p>创建TCP服务器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = socket()            <span class="comment"># 创建服务器套接字</span></span><br><span class="line">ss.bind()                <span class="comment"># 套接字与地址绑定</span></span><br><span class="line">ss.listen()              <span class="comment"># 监听连接</span></span><br><span class="line">inf_loop:                <span class="comment"># 服务器无限循环</span></span><br><span class="line">	cs = ss.accept()       <span class="comment"># 接受客户端连接</span></span><br><span class="line">	comm_loop:             <span class="comment"># 通信循环</span></span><br><span class="line">		cs.recv()/cs.send()  <span class="comment"># 对话（接收/发送）</span></span><br><span class="line">	cs.close()             <span class="comment"># 关闭客户端套接字</span></span><br><span class="line">ss.close()               <span class="comment"># 关闭服务器套接字#（可选）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>UDP 服务器不需要 TCP 服务器那么多的设置，因为它们不是面向连接的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = socket()                       <span class="comment"># 创建服务器套接字</span></span><br><span class="line">ss.bind()                           <span class="comment"># 绑定服务器套接字</span></span><br><span class="line">inf_loop:                           <span class="comment"># 服务器无限循环</span></span><br><span class="line">	cs = ss.recvfrom()/ss.sendto()    <span class="comment"># 关闭（接收/发送）</span></span><br><span class="line">ss.close()                          <span class="comment"># 关闭服务器套接字</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="客户端编程"><a href="#客户端编程" class="headerlink" title="客户端编程"></a>客户端编程</h2><ol>
<li>网络协议常用于文件传输（FTP、SCP 等）、阅读 Usenet新闻组（NNTP）、发送电子邮件（SMTP）、从服务器上下载电子邮件（POP3、IMAP）等；</li>
<li>文件传输协议（File Transfer Protocol，FTP）由已故的 Jon Postel 和 Joyce Reynolds 开发，记录在 RFC（Request for Comment）959 号文档中，于 1985 年 10 月发布；</li>
<li>用户使用网络新闻传输协议（NNTP）在新闻组中下载或发表帖子；</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 网络数据</title>
    <url>/2020/05/20/Python-%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>每时每刻，搜索引擎和网站都在采集大量信息，非原创即采集，采集信息的程序被称为网络爬虫（Web crawler） 、网络铲、网络蜘蛛（Web spider）。网络数据采集是一种通过多种手段收集网络数据的方式，不光是通过与 API 交互的方式。<strong>推荐书籍：《Python 网络数据采集》· [英] Ryan Mitchell 著 陶俊杰 陈小莉 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>数据收集的难点：<ol>
<li>要收集的数据来自不同的网站，没有一个综合多个网站数据的API</li>
<li>想要的数据非常小众，网站不会为你单独做一个API</li>
<li>一些网站没有基础设施或技术能力去建立API</li>
</ol>
</li>
<li>即使 API 已经存在，可能还会有请求内容和次数限制，API能够提供的数据类型或者数据格式可能也无法满足你的需求!</li>
<li>数据应用场景：<ul>
<li>市场预测</li>
<li>机器语言翻译</li>
<li>医疗诊断领域</li>
<li>艺术领域</li>
<li>… …</li>
</ul>
</li>
</ol>
<h2 id="爬虫初识"><a href="#爬虫初识" class="headerlink" title="爬虫初识"></a>爬虫初识</h2><ol>
<li><p>一般人（也包括技术达人）在思考“网络爬虫”时通常的想法：  </p>
<ul>
<li>通过网站域名获取 HTML 数据  </li>
<li>根据目标信息解析数据  </li>
<li>存储目标信息  </li>
<li>如果有必要，移动到另一个网页重复这个过程  </li>
</ul>
</li>
<li><p>网络数据采集需要抛开一些接口的遮挡，不仅是在浏览器层，有时也包括网络连接层；</p>
</li>
<li><p><a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">urllib</a> 是 Python 的标准库，包含了从网络请求数据， 处理 cookie，甚至改变像请求头和用户代理这些元数据的函数；</p>
</li>
<li><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">BeautifulSoup</a>通过定位 HTML 标签来格式化和组织复杂的网络信息，用简单易用的 Python 对象为我们展现 XML 结构信息,需要独立安装；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install beautifulsoup4</span><br></pre></td></tr></table></figure>
</li>
<li><p>urllib和BeautifulSoup简单的样例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line">bsObj = BeautifulSoup(html.read())</span><br><span class="line">print(bsObj.h1)</span><br></pre></td></tr></table></figure>

<ul>
<li>任何 HTML文件的任意节点信息都可以被提取出来，只要目标信息的旁边或附近有标记就行    </li>
</ul>
</li>
<li><p>处理异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网络连接异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	html = urlopen(<span class="string">"http://www.pythonscraping.com/pages/page1.html"</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">	print(e)</span><br><span class="line">	<span class="comment"># 返回空值，中断程序， 或者执行另一个方案</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="comment"># 程序继续。注意： 如果你已经在上面异常捕捉那一段代码里返回或中断（break），</span></span><br><span class="line">	<span class="comment"># 那么就不需要使用else语句了，这段代码也不会执行</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 内容异常    </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	badContent = bsObj.nonExistingTag.anotherTag</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">	print(<span class="string">"Tag was not found"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">if</span> badContent == <span class="literal">None</span>:</span><br><span class="line">		<span class="keyword">print</span> (<span class="string">"Tag was not found"</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(badContent)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在写爬虫的时候， 思考代码的总体格局，让代码既可以捕捉异常又容易阅读，如果还希望能够很大程度地重用代码， 那么拥有像 getSiteHTML 和 getTitle 这样的通用函数（具有周密的异常处理功能）会让快速稳定地网络数据采集变得简单易行；    </p>
</li>
<li><p>在找到目标信息之前，需要很多技巧帮忙“敲掉”网页上那些不需要的信息：</p>
<ul>
<li>寻找“打印此页”的链接，看看网站有没有 HTML 样式更友好的移动版  </li>
<li>寻找隐藏在 JavaScript 文件里的信息  </li>
<li>如果存在其他数据源，可以找找其他数据源</li>
</ul>
</li>
<li><p>CSS 的发明是网络爬虫的福音， 网络爬虫可以通过 class 属性的值，轻松地区分出两种不同的标签，大多数新式网站上的 class 和 id 属性资源都非常丰富 ；</p>
</li>
<li><p>通过 BeautifulSoup 对象，我们可以用 findAll 函数抽取只包含在 &lt;span class=”green”&gt;&lt;/span&gt; 标签里的文字，这样就会得到一个人物名称的 Python 列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nameList = bsObj.findAll(<span class="string">"span"</span>, &#123;<span class="string">"class"</span>:<span class="string">"green"</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">	print(name.get_text())</span><br></pre></td></tr></table></figure>
</li>
<li><p>BeautifulSoup库里的对象 :</p>
<ul>
<li>BeautifulSoup 对象  </li>
<li>标签 Tag 对象  </li>
<li>NavigableString 对象  </li>
<li>Comment 对象  </li>
</ul>
</li>
<li><p>其他类似BeautifulSoup的库：</p>
<ul>
<li>lxml  </li>
<li>HTML parser  </li>
</ul>
</li>
</ol>
<h2 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h2><ol>
<li>网络爬虫（Web crawler）可以沿着网络爬行，本质是一种递归方式。为了找到 URL 链接，它们必须首先获取网页内容，检查这个页面的内容，再寻找另一个 URL， 然后获取 URL 对应的网页内容，不断循环这一过程！</li>
<li>遍历整个网站的网络数据采集有许多好处：<ul>
<li>生成网站地图</li>
<li>收集数据</li>
</ul>
</li>
<li>为了避免一个页面被采集两次，链接去重是非常重要的！</li>
<li>Scrapy 是一个帮你大幅度降低网页链接查找和识别工作复杂度的 Python 库， 它可以让你轻松地采集一个或多个域名的信息；</li>
<li>Scrapy 支持用不同的输出格式来保存这些信息，比如 CSV、JSON 或 XML 文件格式；</li>
<li>CSV（Comma-Separated Values， 逗号分隔值）是存储表格数据的常用文件格式；</li>
<li>很多开源的库可以用来与 MySQL 做交互，最有名的一个库就是 PyMySQL；</li>
<li>Python 有两个包可以发送邮件：smtplib和email；smtplib 模块用来设置服务器连接的相关信息；</li>
</ol>
<h2 id="高级数据采集"><a href="#高级数据采集" class="headerlink" title="高级数据采集"></a>高级数据采集</h2><ol>
<li>由于错误的标点符号、大小写字母不一致、断行和拼写错误等问题， 零乱的数据（dirty data）是网络中的大问题；</li>
<li>OpenReﬁne虽然它的界面是一个浏览器， 但实际上是一个桌面应用， 必须下载并安装；</li>
<li>只有当数据一开始就比较干净时，数据筛选才可以直接快速地完成；</li>
<li>自然语言工具包（Natural Language Toolkit，NLTK）用于识别和标记英语文本中各个词的词性（parts of speech）；</li>
<li>NLTK很擅长生成一些统计信息，包括对一段文字的单词数量、单词频率和单词词性的统计；</li>
<li>自然语言中的许多歧义问题都可以用 NLTK 的 pos_tag 解决， 不只是搜索目标单词或短语，而是搜索带标记的目标单词或短语，这样可以大大提高爬虫搜索的准确率和效率；</li>
<li>Requests库（<a href="http://www.python-requests.org/）是一个擅长处理那些复杂的" target="_blank" rel="noopener">http://www.python-requests.org/）是一个擅长处理那些复杂的</a> HTTP 请求、cookie、header（响应头和请求头）等内容的 Python 第三方库；</li>
<li>表单是网络恶意机器人（malicious bots）酷爱的网站切入点。 当然不希望机器人创建垃圾账号，占用昂贵的服务器资源，或者在博客上提交垃圾评论。因此，新式的网站经常在HTML 中使用很多安全措施，让表单不能被快速穿越；</li>
<li>到目前为止， JavaScript 是网络上最常用也是支持者最多的客户端脚本语言；</li>
<li>将图像翻译成文字一般被称为 光学文字识别 （Optical Character Recognition，OCR）；</li>
<li>用 Pillow 完成图片的预处理， 让机器可以更方便地读取图片，Tesseract 是一个 OCR 库；</li>
<li>洋葱路由（The Onion Router）网络，常用缩写为 Tor， 是一种 IP 地址匿名手段，由网络志愿者服务器构建的洋葱路由器网络，通过不同服务器构成多个层（就像洋葱）把客户端包 在最里面；</li>
<li>PySocks 是一个非常简单的 Python 代理服务器通信模块，它可以和 Tor 配合使用！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>网络数据采集使用Python爬虫还需要实战才能说会了，而且只有实际操作才会出现各种问题，编程能力都是在出现问题之后逐渐解决问题成长的，网络爬虫还是需要点HTML以及JavaScript知识的，不能看个教程文档就说自己会了，当出现需求时能独立使用网络爬虫技术解决问题才算会了！简而言之就是实战！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 繁琐事务自动化</title>
    <url>/2020/05/09/Python-%E7%B9%81%E7%90%90%E4%BA%8B%E5%8A%A1%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前面的部分已经介绍了Python的基础语法了，这一部分注重实际操作，希望通过Python解决一些实际问题，当然也会去记录一些之前没有记录的知识点！<strong><em>推荐书籍：《Python编程快速上手–让繁琐工作自动化》· [美] AI Sweigart 著 王海鹏 译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="模式匹配和正则表达式"><a href="#模式匹配和正则表达式" class="headerlink" title="模式匹配和正则表达式"></a>模式匹配和正则表达式</h2><ol>
<li><p>Python 中所有正则表达式的函数都在 re 模块中，在使用的时候需要导入模块；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>
</li>
<li><p>向 re.compile()传入一个字符串值，表示正则表达式，将返回一个Regex模式对象；</p>
</li>
<li><p>Regex 对象的 search()方法查找传入的字符串，寻找该正则表达式的所有匹配：</p>
<ul>
<li>没有找到匹配该正则表达式时返回None；</li>
<li>找到了则返回一个Match对象，Match对象有一个group()方法，返回被查找字符串中实际匹配的文本；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">phoneNumRegex = re.compile(<span class="string">r'\d\d\d-\d\d\d-\d\d\d\d'</span>)</span><br><span class="line">mo = phoneNumRegex.search(<span class="string">'My number is 415-555-4242.'</span>)</span><br><span class="line">print(<span class="string">'Phone number found: '</span> + mo.group())</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加括号将在正则表达式中创建“分组”,想要一次就获取所有的分组，请使用 groups()方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">phoneNumRegex = re.compile(<span class="string">r'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span>)</span><br><span class="line">mo = phoneNumRegex.search(<span class="string">'My number is 415-555-4242.'</span>)</span><br><span class="line">print(<span class="string">'Phone number found: '</span> + mo.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符|称为“管道”，希望匹配许多表达式中的一个时，就可以使用它；</p>
</li>
<li><p>字符?表明它前面的分组在这个模式中是可选的，即可以出现零次或者一次；</p>
</li>
<li><p>*（称为星号）意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出现任意次；</p>
</li>
<li><p>+（加号）意味着“匹配一次或多次”；</p>
</li>
<li><p>如果想要一个分组重复特定次数，就在正则表达式中该分组的后面，跟上花括号包围的数字，比如(Ha){3,5}；</p>
</li>
<li><p>Python 的正则表达式默认是“贪心”的，这表示在有二义的情况下，会尽可能匹配最长的字符串；</p>
</li>
<li><p>常用字符分类的缩写代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\d              <span class="number">0</span> 到 <span class="number">9</span> 的任何数字</span><br><span class="line">\D              除 <span class="number">0</span> 到 <span class="number">9</span> 的数字以外的任何字符</span><br><span class="line">\w              任何字母、数字或下划线字符（可以认为是匹配“单词”字符）</span><br><span class="line">\W              除字母、数字和下划线以外的任何字符</span><br><span class="line">\s              空格、制表符或换行符（可以认为是匹配“空白”字符）</span><br><span class="line">\S              除空格、制表符和换行符以外的任何字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过在字符分类的左方括号后加上一个插入字符（^），就可以得到“非字符类”;</p>
</li>
<li><p>在正则表达式的开始处使用插入符号（^），表明匹配必须发生在被查找文本开始处，在正则表达式的末尾加上美元符号（$），表示该字符串必须以这个正则表达式的模式结束；</p>
</li>
<li><p>在正则表达式中，.（句点）字符称为“通配符”，匹配除了换行之外的所有字符；</p>
</li>
<li><p>用点-星（.*）表示“任意文本”；</p>
</li>
<li><p>总览：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">? 匹配零次或一次前面的分组。</span><br><span class="line">* 匹配零次或多次前面的分组。</span><br><span class="line">+ 匹配一次或多次前面的分组。</span><br><span class="line">&#123;n&#125; 匹配 n 次前面的分组。</span><br><span class="line">&#123;n,&#125; 匹配 n 次或更多前面的分组。</span><br><span class="line">&#123;,m&#125; 匹配零次到 m 次前面的分组。</span><br><span class="line">&#123;n,m&#125; 匹配至少 n 次、至多 m 次前面的分组。</span><br><span class="line">&#123;n,m&#125;?或*?或+?对前面的分组进行非贪心匹配。</span><br><span class="line">^spam  意味着字符串必须以 spam 开始。</span><br><span class="line">spam$ 意味着字符串必须以 spam 结束。</span><br><span class="line">. 匹配所有字符，换行符除外。</span><br><span class="line">\d、\w 和\s 分别匹配数字、单词和空格。</span><br><span class="line">\D、\W 和\S 分别匹配出数字、单词和空格外的所有字符。</span><br><span class="line">[abc] 匹配方括号内的任意字符（诸如 a、b 或 c）。</span><br><span class="line">[^abc] 匹配不在方括号内的任意字符。</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ol>
<li>每个运行在计算机上的程序，都有一个“当前工作目录”，或 cwd，导入os，使用os.getcwd()函数可以取得当前工作路径的字符串，并可以利用 os.chdir()改变它；</li>
<li>用 os.makedirs()函数创建新文件夹（目录）；</li>
<li>os.path 模块包含了许多与文件名和文件路径相关的有用函数：<ul>
<li>调用 os.path.abspath(path)将返回参数的绝对路径的字符串</li>
<li>调用 os.path.isabs(path)，如果参数是一个绝对路径，就返回 True，否则返回False</li>
<li>调用 os.path.relpath(path, start)将返回从 start 路径到 path 的相对路径的字符串</li>
<li>调用 os.path.split()获得一个路径的目录名称和基本名称的元组</li>
<li>可以调用 os.path.dirname()和 os.path.basename()获取一个路径的目录名称和基本名称</li>
<li>调用 os.path.getsize(path)将返回 path 参数中文件的字节数</li>
<li>调用 os.listdir(path)将返回文件名字符串的列表，包含 path 参数中的每个文件</li>
<li>如果 path 参数所指的文件或文件夹存在，调用 os.path.exists(path)将返回 True</li>
<li>如果 path 参数存在，并且是一个文件，调用 os.path.isfile(path)将返回 True</li>
<li>如果 path 参数存在，并且是一个文件夹，调用 os.path.isdir(path)将返回 True</li>
</ul>
</li>
<li>shutil（或称为 shell 工具）模块中包含一些函数，让你在 Python 程序中复制、移动、改名和删除文件。要使用 shutil 的函数，首先需要 import shutil；</li>
<li>调用 shutil.copy(source, destination)，将路径 source 处的文件复制到路径 destination处的文件夹（source 和 destination 都是字符串）；</li>
<li>调用 shutil.move(source, destination)， 将路径 source 处的文件夹移动到路径 destination，并返回新位置的绝对路径的字符串；</li>
<li>用 os.unlink(path)将删除 path 处的文件，调用 os.rmdir(path)将删除 path 处的文件夹，要求文件夹必须为空；</li>
<li>调用 shutil.rmtree(path)将删除 path 处的文件夹，它包含的所有文件和文件夹都会被删除；</li>
<li>os.walk()函数被传入一个字符串值，即一个文件夹的路径，可以在一个 for循环语句中使用 os.walk()函数，遍历目录树；</li>
<li>zipfile 模块提供了一种方法，用 Python 压缩和解压 ZIP 归档文件</li>
</ol>
<h2 id="Python-amp-Excel"><a href="#Python-amp-Excel" class="headerlink" title="Python&amp;Excel"></a>Python&amp;Excel</h2><ol>
<li>openpyxl 模块让 Python 程序能读取和修改 Excel 电子表格文件，要想在Python中使用openpyxl，需要安装并导入模块，使用命令import openpyxl</li>
<li>使用 openpyxl.load_workbook()函数接受文件名，返回一个 workbook 数据类型的值；</li>
<li>调用 get_sheet_names()方法可以取得工作簿中所有表名的列表 ；</li>
<li>调用 Workbook 对象的 get_active_sheet()方法，取得工作簿的活动表；</li>
<li>调用 openpyxl.cell.column_index_from_string()函数从字母转换到数字，要从数字转换到字母则调用openpyxl.cell.get_column_letter()函数；</li>
<li>调用 openpyxl.charts.BarChart()，创建一个条形图，调用openpyxl.charts.LineChart()、 openpyxl.charts.ScatterChart()和 openpyxl.charts.PieChart()， 创建折线图、散点图和饼图；                          </li>
</ol>
<h2 id="PDF以及Word处理"><a href="#PDF以及Word处理" class="headerlink" title="PDF以及Word处理"></a>PDF以及Word处理</h2><ol>
<li>用于处理PDF的模块是PyPDF2，使用需要安装模块，然后导入import   PyPDF2<ol>
<li>导入 PyPDF2 模块  :  import   PyPDF2</li>
<li>以读二进制模式打开 name.pdf,保存在 pdfFileObj 中    </li>
<li>调用 PyPDF2 .PdfFileReader()并向它传入 pdfFileObj ，保存返回对象在 pdfReader 中  </li>
</ol>
</li>
<li>调用 PdfFileReader 对象的 getPage()方法，传入感兴趣的页码，从而取得 Page 对象；</li>
<li>取得 Page 对象后，调用它的 extractText()方法，返回该页文本的字符串；</li>
<li>所有 PdfFileReader 对象都有一个 isEncrypted 属性，如果 PDF 是加密的，它就是 True；</li>
<li>要读取加密的 PDF，就调用 decrypt()函数，传入口令字符串；</li>
<li>*<em>PyPDF2 写入 PDF 的能力，仅限于从其他 PDF 中拷贝页面、旋转页面、重叠页面和加密文件  *</em>   </li>
<li>调用PdfFileWriter 对象的write()方法会实际生成文件；</li>
<li>利用 rotateClockwise()和 rotateCounterClockwise()方法， PDF 文档的页面也可以旋转 90 度的整数倍，向这些方法传入整数 90、 180 或 270 就可以了；</li>
<li>用 python-docx 模块，在 Python 中打开了一个.docx 文件，调用 docx.Document() ；</li>
</ol>
<h2 id="CSV和JSON数据"><a href="#CSV和JSON数据" class="headerlink" title="CSV和JSON数据"></a>CSV和JSON数据</h2><ol>
<li>想要处理CSV文件，需要导入csv模块，import csv</li>
<li>要用 csv 模块从 CSV 文件中读取数据，需要创建一个 Reader 对象， Reader 对象可以遍历CSV中的每一行；<ol>
<li>用 open()函数打开它  </li>
<li>将它传递给 csv.reader()函数，返回一个 Reader 对象</li>
<li>要访问 Reader 对象中的值，最直接的方法，就是将它转换成一个普通 Python 列表， 即将它传递给 list()  </li>
</ol>
</li>
<li>Writer 对象可以将数据写入 CSV 文件，使用csv.writer()函数创建改对象；<ol>
<li>调用 open()并传入’w’，以写模式打开一个文件  </li>
<li>将它传递给 csv.writer() ，创建一个 Writer 对象   </li>
</ol>
</li>
<li>Writer 对象的 writerow()方法接受一个列表参数 ，列表中的每个词，放在输出的CSV 文件中的一个单元格中；</li>
<li>JSON处理需要导入模块，import json，要将包含 JSON 数据的字符串转换为 Python 的值，就将它传递给 json.loads()函数，json.dumps()函数将一个 Python 值转换成 JSON 格式的数据字符串；                 </li>
</ol>
<h2 id="图形处理"><a href="#图形处理" class="headerlink" title="图形处理"></a>图形处理</h2><ol>
<li><p>Pillow 是一个第三方 Python 模块， 用于处理图像文件，该模块包含一些函数，可以很容易地裁剪图像、调整图像大小，以及编辑图像的内容；</p>
</li>
<li><p>计算机程序通常将图像中的颜色表示为 RGBA 值，指定顔色中的红、绿、蓝和 alpha（透明度）的值；</p>
</li>
<li><p>像素是计算机屏幕上能显示一种顔色的最小点，像素的 RGB 设置准确地告诉它应该显示哪种颜色的色彩；</p>
</li>
<li><p>Pillow 提供 ImageColor.getcolor()函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageColor</span><br><span class="line">ImageColor.getcolor(<span class="string">'red'</span>, <span class="string">'RGBA'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>许多 Pillow 函数和方法需要一个矩形元组参数；</p>
</li>
<li><p>要加载图像，就从 Pillow 导入 Image 模块，并调用 Image.open()，传入图像的文件名，返回值是 Image 对象数据类型，通过 save()方法，对 Image 对象的所有更改都可以保存到图像文件中（也是任何格式）；</p>
</li>
<li><p>所有的旋转、调整大小、裁剪、绘画和其他图像操作，都通过这个 Image 对象上的方法调用来完成；</p>
</li>
<li><p>Image.new()返回的对象表示空白的图像，Image.new()的参数如下：</p>
<ul>
<li>字符串’RGBA’，将颜色模式设置为 RGBA</li>
<li>图像开始采用的背景颜色，是一个表示 RGBA 值的四整数元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.new(<span class="string">'RGBA'</span>, (<span class="number">100</span>, <span class="number">200</span>), <span class="string">'purple'</span>)</span><br><span class="line">im.save(<span class="string">'purpleImage.png'</span>)</span><br><span class="line">im2 = Image.new(<span class="string">'RGBA'</span>, (<span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">im2.save(<span class="string">'transparentImage.png'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Image 对象的 crop()方法接受一个矩形元组，返回一个 Image 对象，表示裁剪后的图像，裁剪不是在原图上发生的；</p>
</li>
<li><p>copy()方法返回一个新的 Image 对象，它和原来的 Image 对象具有一样的图像；</p>
</li>
<li><p>paste()方法在 Image 对象调用，将另一个图像粘贴在它上面；</p>
</li>
<li><p>resize()方法在 Image 对象上调用，返回指定宽度和高度的一个新 Image 对象，resize()方法不会在原图上修改 Image 对象，而是返回一个新的 Image 对象；</p>
</li>
<li><p>rotate()方法旋转，该方法返回旋转后的新 Image 对象，并保持原始Image 对象不变。rotate()的参数是一个整数或浮点数，表示图像逆时针旋转的度数；</p>
</li>
<li><p>transpose()方法，还可以得到图像的“镜像翻转”，必须向 transpose()方法传入 Image.FLIP_LEFT_RIGHT 或 Image.FLIP_TOP_BOTTOM；</p>
</li>
<li><p>单个像素的颜色可以通过 getpixel()和 putpixel()方法取得和设置；</p>
</li>
<li><p>ImageDraw 对象：</p>
<ol>
<li>text()方法，用于在图像上绘制文本</li>
<li>point(xy, fill)方法绘制单个像素。xy 参数表示要画的点的列表；</li>
<li>line(xy, fill, width)方法绘制一条线或一系列的线；</li>
<li>rectangle(xy, fill, outline)方法绘制一个矩形；</li>
<li>ellipse(xy, fill, outline)方法绘制一个椭圆；</li>
<li>polygon(xy, fill, outline)方法绘制任意的多边形；</li>
</ol>
</li>
</ol>
<h2 id="时间、计划任务"><a href="#时间、计划任务" class="headerlink" title="时间、计划任务"></a>时间、计划任务</h2><ol>
<li>内置的 time 模块让 Python程序能读取系统时钟的当前时间，在 time 模块中， time.time()和 time.sleep()函数是最有用的模块，使用模块时导入import time；  </li>
<li>需要让程序暂停一下，就调用 time.sleep()函数，并传入希望程序暂停的秒数；</li>
<li>datetime 模块有自己的 datetime 数据类型；</li>
<li>datetime 模块还提供了 timedelta 数据类型，它表示一段时间，而不是一个时刻；</li>
<li>利用内建的 subprocess 模块中的 Popen()函数， Python 程序可以启动计算机中的其他程序；</li>
<li>如果想在 Python 脚本中启动一个外部程序，就将该程序的文件名传递给subprocess.Popen() ；        </li>
</ol>
<h2 id="GUI模拟鼠标键盘"><a href="#GUI模拟鼠标键盘" class="headerlink" title="GUI模拟鼠标键盘"></a>GUI模拟鼠标键盘</h2><ol>
<li>pyautogui 模块包含了一些函数，可以模拟鼠标移动、按键和滚动鼠标滚轮；</li>
<li>pyautogui 的鼠标函数使用 x、 y 坐标，pyautogui.size() 函数返回两个整数的元组，包含屏幕的宽和高的像素数 ；    </li>
<li>pyautogui.moveTo() 函数将鼠标立即移动到屏幕的指定位置；</li>
<li>pyautogui.moveRel() 函数相对于当前的位置移动鼠标接受 3 个参数：向右水平移动多少个像素，向下垂直移动多少个像素，以及（可选的）花多少时间完成移动；</li>
<li>调用 pyautogui.position() 函数，可以确定鼠标当前的位置，返回函数调用时，鼠标 x、 y 坐标的元组；</li>
<li>要向计算机发送虚拟的鼠标点击，就调用 pyautogui.click() 方法，pyautogui.click（100， 150， button=’left’）；</li>
<li>pyautogui.doubleClick() 函数只执行双击鼠标左键，pyautogui.rightClick() 和 pyautogui.middleClick() 函数将分别执行双击右键和双击中键；</li>
<li>PyAutoGUI 提供了 pyautogui.dragTo() 和 pyautogui.dragRel() 函数，将鼠标拖动到一个新的位置，或相对当前位置的位置。 dragTo() 和 dragRel() 的参数与moveTo() 和 moveRel() 相同；    </li>
<li>scroll()是滚动鼠标函数，单位的意义在每个操作系统和应用上不一样；</li>
<li>pyautogui 拥有屏幕快照的功能，可以根据当前屏幕的内容创建图形文件，调用 pyautogui.screenshot() 函数                                获取屏幕快照；</li>
<li>pyautogui.typewrite() 函数向计算机发送虚拟按键，按键产生什么效果，取决于当前获得焦点的窗口和文本输入框；</li>
<li>pyautogui.keyDown() 和 pyautogui.keyUp() 将向计算发送虚拟的按键和释放，pyautogui 提供了pyautogui.press() 函数，它调用这两个函数，模拟完整的击键；</li>
<li>pyautogui.hotkey() 函数，它接受多个键字符串参数，按顺序按下，再按相反的顺序释放；  </li>
</ol>
<h2 id="Web相关"><a href="#Web相关" class="headerlink" title="Web相关"></a>Web相关</h2><ol>
<li><p>webbrowser：是 Python 自带的，打开浏览器获取指定页面</p>
</li>
<li><p>requests：从因特网上下载文件和网页  </p>
</li>
<li><p>Beautiful Soup：解析 HTML，即网页编写的格式  </p>
</li>
<li><p>selenium：启动并控制一个 Web 浏览器，selenium 能够填写表单，并模拟鼠标在这个浏览器中点击        </p>
</li>
<li><p>webbrowser 模块的 open()函数可以启动一个新浏览器，打开指定的 URL ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line">webbrowser.open(<span class="string">'https://www.hao123.com'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>requests 模块让你很容易从 Web 下载文件，不必担心一些复杂的问题，诸如网络错误、连接问题和数据压缩，需要安装，然后导入import requests；</p>
</li>
<li><p>requests.get()函数接受一个要下载的 URL 字符串 ，通过在 requests.get()的返回值上调用 type()，返回一个 Response 对象，其中包含了 Web 服务器对你的请求做出的响应；</p>
</li>
<li><p>下载并保存到文件的完整过程如下 ：</p>
<ol>
<li>调用 requests.get()下载该文件</li>
<li>用’wb’调用 open()，以写二进制的方式打开一个新文件  </li>
<li>利用 Respose 对象的 iter_content()方法做循环</li>
<li>在每次迭代中调用 write()，将内容写入该文件  </li>
<li>调用 close()关闭该文件  </li>
</ol>
</li>
<li><p>Beautiful Soup 是一个模块，用于从 HTML 页面中提取信息，模块的名称是 bs4，导入 import bs4  </p>
</li>
<li><p>bs4.BeautifulSoup()函数调用时需要一个字符串，其中包含将要解析的 HTML，返回一个 BeautifulSoup 对象 ；</p>
</li>
<li><p>常用 CSS 选择器的模式 ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">soup.select('div')                所有名为<span class="tag">&lt;<span class="name">div</span>&gt;</span>的元素</span><br><span class="line">soup.select('#author')            带有 id 属性为 author 的元素</span><br><span class="line">soup.select('.notice')            所有使用 CSS class 属性名为 notice 的元素</span><br><span class="line">soup.select('div span')           所有在<span class="tag">&lt;<span class="name">div</span>&gt;</span>元素之内的<span class="tag">&lt;<span class="name">span</span>&gt;</span>元素  </span><br><span class="line">soup.select('div &gt; span')         所有直接在<span class="tag">&lt;<span class="name">div</span>&gt;</span>元素之内的<span class="tag">&lt;<span class="name">span</span>&gt;</span>元素， 中间没有其他元素</span><br><span class="line">soup.select('input[name]')        所有名为<span class="tag">&lt;<span class="name">input</span>&gt;</span>，并有一个 name 属性，其值无所谓的元素    </span><br><span class="line">soup.select('input[type="button"]') 所有名为<span class="tag">&lt;<span class="name">input</span>&gt;</span>，并有一个 type 属性，其值为 button 的元素</span><br></pre></td></tr></table></figure>
</li>
<li><p>selenium 模块让 Python 直接控制浏览器，实际点击链接，填写登录信息，几乎就像是有一个人类用户在与页面交互；from selenium  import webdriver  </p>
</li>
<li><p>elenium 的 WebDriver 方法，用于寻找元素 ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">browser.find_element_by_class_name(name)</span><br><span class="line">browser.find_elements_by_class_name(name)         使用 CSS 类 name 的元素</span><br><span class="line"></span><br><span class="line">browser.find_element_by_css_selector(selector)</span><br><span class="line">browser.find_elements_by_css_selector(selector)   匹配 CSS selector 的元素</span><br><span class="line"></span><br><span class="line">browser.find_element_by_id(id)</span><br><span class="line">browser.find_elements_by_id(id)                   匹配 id 属性值的元素</span><br><span class="line"></span><br><span class="line">browser.find_element_by_link_text(text)</span><br><span class="line">browser.find_elements_by_link_text(text)          完全匹配提供的 text 的<span class="tag">&lt;<span class="name">a</span>&gt;</span>元素</span><br><span class="line">    </span><br><span class="line">browser.find_element_by_partial_link_text(text)</span><br><span class="line">browser.find_elements_by_partial_link_text(text)  包含提供的 text 的<span class="tag">&lt;<span class="name">a</span>&gt;</span>元素</span><br><span class="line">    </span><br><span class="line">browser.find_element_by_name(name)</span><br><span class="line">browser.find_elements_by_name(name)               匹配 name 属性值的元素</span><br><span class="line">    </span><br><span class="line">browser.find_element_by_tag_name(name)            匹配标签 name 的元素</span><br><span class="line">browser.find_elements_by_tag_name(name)           (大小写无关， <span class="tag">&lt;<span class="name">a</span>&gt;</span>元素匹配'a'和'A')</span><br></pre></td></tr></table></figure>
</li>
<li><p>find_element_<em>和 find_elements_</em>方法返回的 WebElement 对象有一个 click()方法，模拟鼠标在该元素上点击，可以用于链接跳转，选择单选按钮，点击提交按钮，或者触发该元素被鼠标点击时发生的任何事情；</p>
</li>
<li><p>向 Web 页面的文本字段发送击键，只要找到那个文本字段的&lt;input&gt;或&lt;textarea&gt;元素，然后调用 send_keys()方法；</p>
</li>
<li><p>selenium 可以模拟点击各种浏览器按钮：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.back()       点击“返回”按钮</span><br><span class="line">browser.forward()    点击“前进”按钮</span><br><span class="line">browser.refresh()    点击“刷新”按钮</span><br><span class="line">browser.quit()       点击“关闭窗口”按钮</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="第三方模块（可装）"><a href="#第三方模块（可装）" class="headerlink" title="第三方模块（可装）"></a>第三方模块（可装）</h2><ol>
<li><p>使用pip3进行安装第三方模块；</p>
</li>
<li><p>第三方模块名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install send2trash</span><br><span class="line">pip3 install requests</span><br><span class="line">pip3 install beautifulsoup4</span><br><span class="line">pip3 install selenium</span><br><span class="line">pip3 install openpyxl</span><br><span class="line">pip3 install PyPDF2</span><br><span class="line">pip3 install pillow</span><br><span class="line">pip3 install pyobjc-core</span><br><span class="line">pip3 install pyobjc</span><br></pre></td></tr></table></figure>


</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Python第三方模块能够帮助干很多事，但是这部分需要多多练习，根据需求编写脚本，完成日常的工作。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Redis快速入门</title>
    <url>/2020/04/22/Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Redis在Web开发社区中是最火热的内存数据库之一，在初创企业乃至新浪微博这样的大公司都能看到Redis的使用，足以看到Redis的火热。Redis是一个开源的、高性能的、基于键值对的缓存与存储系统，通过提供多种键值数据类型来适应不同场景下的缓存与存储需求。Redis还可以胜任消息队列、任务队列等不同的角色。接下来开始学习Redis吧！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><ol>
<li>字典（映射、关联数组）：一种数据结构，在字典中可以获取或设置键名对应的键值，也可以删除一个键值对；</li>
<li>Redis是REmote DIctionary Server（远程字典服务器）的缩写，以字典结构存储数据，并允许其他应用通过TCP协议读写字典中的内容；</li>
<li>支持的键值数据类型：<ol>
<li>字符串类型</li>
<li>散列类型</li>
<li>列表类型</li>
<li>集合类型</li>
<li>有序集合类型</li>
</ol>
</li>
<li>Redis字典结构的存储方式和对多种键值类型的支持使得开发者可以将程序中的数据直接映射到Redis中，数据在Redis中的存储形式和其在程序中的存储方式非常接近；</li>
<li>优势：Redis为不同数据类型的键值提供了非常方便地操作方式，比如集合类型提供了交集 、并集的集合运算操作；</li>
<li><strong>Redis数据库中的所有数据都存储在内存中，因此比较快！</strong>Redis防止内存中数据丢失，提供了持久化支持；</li>
<li><strong>Redis可以为每个键设置生存时间（Time to Live，TTL），生存时间到期后会自动删除键值对，可以充当缓存系统来使用；</strong></li>
<li>Redis的列表类型键可以用来实现队列，而且支持阻塞式读取，因而很容易实现一个<strong><em>高性能的优先队列</em></strong>；</li>
<li>Redis提供了100多个命令，实际上常用的就十几个，因而使用相对简单；</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>Mac上安装:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Redis相关的启动命令：</p>
<ol>
<li><strong>redis-server：Redis服务器；</strong></li>
<li><strong>redis-cli：Redis命令行客户端；</strong></li>
<li>redis-benchmark：Redis性能测试工具；</li>
<li>redis-check-aof：AOF文件修复工具；</li>
<li>redis-check-dump：RDB文件检查工具；</li>
<li>redis-sentinel：Sentinel服务器；</li>
</ol>
</li>
<li><p>启动Redis服务器使用命令redis-server就可以了，可以修改端口，添加 –port portnum ;</p>
</li>
<li><p>关闭redis：redis-cli SHUTDOWN ；</p>
</li>
<li><p>redis-cli（Redis Command Line Interface）是Redis自带的基于命令行的Redis客户端,在这里主要用来学习Redis；</p>
</li>
</ol>
<h2 id="命令返回值"><a href="#命令返回值" class="headerlink" title="命令返回值"></a>命令返回值</h2><ol>
<li>状态回复（status reply）：状态回复直接显示状态信息，比如PING 返回PONG；</li>
<li>错误回复（error reply）：错误回复以(error)开头，并在后面跟上错误信息；</li>
<li>整数回复（integer reply）:递增键值的INCR命令会以整数形式返回递增后的键值，还有一些其他命令如获取当前数据库中键的数量的DBSIZE命令，以（integer）开头，并在后面跟上整数数据；</li>
<li>字符串回复（bulk reply）：当请求一个字符串类型键的键值或者一个其他类型键中的某个元素时就会得到一个字符串回复，以双引号包裹；</li>
<li>多行字符串回复（multi-bulk reply）：请求一个非字符串类型键的元素列表时就会收到多行字符串回复，每行字符串都以一个序号开头；比如KEYS 命令可以获取数据库中符合指定规则的键名–KEYS *；</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>Redis支持通过配置文件来设置选项，可以通过启动参数传递同名的配置选项会覆盖配置文件中的相应参数；</li>
<li>在redis-cli中可以动态修改配置，如CONFIG SET loglevel warning ，也可以使用CONFIG GET命令获得Redis当前的配置情况：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONFIG GET loglevel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回复</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1) <span class="string">"loglevel"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) <span class="string">"warning"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一行是选项名；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二行是选项值；</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>一个Redis实例提供了多个用来存储数据的字典,客户端可以指定数据存储在哪个字典中,每个字典对外都是以一个从0开始递增数字命名,默认支持16个字典，可以通过配置参数databases来修改这一个数字，默认连接0号字典，可以随时使用SELECT命令更换数据库；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 获取默认的字典数量</span></span><br><span class="line"> CONFIG GET databases</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1) <span class="string">"databases"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) <span class="string">"16"</span></span></span><br><span class="line">SELECT 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> OK</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1:6379[1]&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>一个客户端要么可以访问全部数据库，要么就没有任何一个数据库的访问权限；</li>
<li>redis的数据库之间不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据;</li>
<li><strong>不同的应用应该使用不同的Redis实例存储数据；</strong></li>
</ol>
<h2 id="Redis命令属性"><a href="#Redis命令属性" class="headerlink" title="Redis命令属性"></a>Redis命令属性</h2><ol>
<li>Redis不同命令拥有不同的属性，一个命令可以拥有多个属性；</li>
<li>REDIS_CMD_WRITE：可以修改Redis数据库的数据；</li>
<li>REDIS_CMD_DENYOOM：有可能增加Redis占用的存储空间，超过空间占用限制时，会拒绝执行拥有该属性的命令；</li>
<li>REDIS_CMD_NOSCRIPT:拥有该属性的命令无法在Redis脚本中执行；</li>
<li>REDIS_CMD_RANDOM：执行该属性的命令之后，就不能执行拥有REDIS_CMD_WRITE属性的命令；</li>
<li>REDIS_CMD_SORT_FOR_SCRIPT：拥有该属性的命令会产生随机结果，在脚本中调用拥有该属性的命令会对结果进行排序；</li>
<li>REDIS_CMD_LOADING：Redis启动时，会只执行拥有该属性的命令；</li>
</ol>
<h2 id="常见键值存储系统"><a href="#常见键值存储系统" class="headerlink" title="常见键值存储系统"></a>常见键值存储系统</h2><ol>
<li>Voldemort</li>
<li>Dynamo</li>
<li>Memcachedb</li>
<li>Cassandra</li>
<li>Memcached</li>
<li>Hypertable</li>
</ol>
<h2 id="为什么需要Redis"><a href="#为什么需要Redis" class="headerlink" title="为什么需要Redis"></a>为什么需要Redis</h2><ol>
<li>新的场景mysql的应用成了瓶颈：<ol>
<li>线程阻塞，访问卡顿；</li>
<li>List类型业务不适合mysql；</li>
</ol>
</li>
<li>新的关系计算需求实现困难，大量的关系计算；</li>
</ol>
<h2 id="优化使用Redis"><a href="#优化使用Redis" class="headerlink" title="优化使用Redis"></a>优化使用Redis</h2><ol>
<li>容量规划：<ol>
<li>提前预估容量，上线前预拆足够的数据分片；</li>
<li>选择合适的数据类型，慎用zset；</li>
<li>业务独立存储，拒绝混放；</li>
</ol>
</li>
<li>提高可用性：<ol>
<li>所有Redis全部增加Slave；</li>
<li>Master挂载slave不超过2个采用M-S-S方式挂载；</li>
<li>多IDC单Master,复制同步;</li>
</ol>
</li>
<li>凌晨低峰升级,访问IP-&gt;域名：<ol>
<li>出现问题——&gt;错峰升级</li>
<li>及时清理pagecache，减少对正常业务的影响；</li>
<li>AOF去掉rewrite，改用rotate；</li>
<li>支持热升级，避免重启，提高可运维性；</li>
<li>负载均衡；</li>
</ol>
</li>
<li>资源服务化：<ol>
<li>configserver用于服务的发布与订阅；</li>
<li>cacheService用于集群管理：<ol>
<li>数据路由</li>
<li>负载均衡</li>
<li>数据在线迁移</li>
<li>服务治理</li>
</ol>
</li>
<li>运维标准化、自动化</li>
</ol>
</li>
</ol>
<h2 id="操作String类型"><a href="#操作String类型" class="headerlink" title="操作String类型"></a>操作String类型</h2><ol>
<li>SET key value：设置键值对；</li>
<li>GET key: 读取键值；</li>
<li>GETSET key value：重新设置键的键值，返回旧的键值；</li>
<li>MGET key1 key2 … keyN：返回多个键值；</li>
<li>SETNX key value：键值不存在时设置键值；</li>
<li>SETEX key time value：超时自动删除键值；</li>
<li>MSET key1 value1 key2 value2 … keyN valueN：设置多个键值对；</li>
<li>MSETNX  key1 value1 key2 value2 … keyN valueN：设置多个键值对，键值不存在时设置键值；</li>
<li>INCR key：增加整数键值的值；</li>
<li>INCRBY key integer：增加指定增长值；</li>
<li>DECR key：减少整数键值的值；</li>
<li>DECRBY key integer：减少整数键值的指定值；</li>
<li>APPEND key value：追加指定键的键值；</li>
<li>SUBSTR key start end：返回指定键的键值的子串；</li>
</ol>
<h2 id="操作列表类型"><a href="#操作列表类型" class="headerlink" title="操作列表类型"></a>操作列表类型</h2><ol>
<li>RPUSH key value：在列表的右侧添加键值，可以多个；</li>
<li>LPUSH key value：在列表的左侧添加键值，可以多个；</li>
<li>LLEN key：返回指定列表类型键的长度；</li>
<li>LRANGE key start end：返回列表指定范围的键值；</li>
<li>LTRIM key start end：删除超出指定范围的数据；</li>
<li>LINDEX key index：返回列表中指定位置的键值；</li>
<li>LSET key index value：设置指定键的指定位置的键值；</li>
<li>LREM key count value：从左侧删除匹配的元素多个；</li>
<li>LPOP key：从列表左侧删除元素，并返回删除的键值；</li>
<li>RPOP key：从列表右侧删除元素，并返回删除的键值；</li>
<li>BLPOP key1 key2 … keyN timeout：超时左侧弹出键值；</li>
<li>BRPOP key1 key2 … keyN timeout：超时右侧弹出键值；</li>
<li>RPOPLPUSH srckey dstkey：从srckey的右侧弹出然后从左侧压入dstkey中；</li>
</ol>
<h2 id="操作集合类型"><a href="#操作集合类型" class="headerlink" title="操作集合类型"></a>操作集合类型</h2><ol>
<li>SADD key member：添加指定的成员到指定的集合中；</li>
<li>SREM key member：删除指定的成员到指定的集合中；</li>
<li>SPOP key [count]：从指定集合中随机删除指定个键值；</li>
<li>SMOVE srckey dstkey member：转移指定键值到指定的键中；</li>
<li>SCARD key：返回指定集合的元素数量；</li>
<li>SISMEMBER key member：检查指定元素是否是集合中的元素；</li>
<li>SINTER key1 key2 … keyN：返回集合的交集；</li>
<li>SINTERSTORE dstkey key1 key2 … keyN：将集合之间的交集保存到dstkey中；</li>
<li>SUNION key1 key2 … keyN：返回集合的并集；</li>
<li>SUNIONSTORE dstkey key1 … keyN：将集合之间的并集保存到dstkey中；</li>
<li>SDIFF key1 key2 … keyN：返回集合的差集；</li>
<li>SDIFFSTORE dstkey key1 … keyN：将集合之间的差集保存到dstkey中；</li>
<li>SMEMBERS key：返回集合的所有元素；</li>
<li>SRANDMEMBER key：随机返回集合中的一个元素；</li>
</ol>
<h2 id="操作有序集合类型"><a href="#操作有序集合类型" class="headerlink" title="操作有序集合类型"></a>操作有序集合类型</h2><ol>
<li>ZADD key score member：通过给定的分数插入成员值到指定的key的有序集合中，存在则插入失败；</li>
<li>ZREM key member：从给定的key中删除指定的成员；</li>
<li>ZINCRBY key increment member：给指定的key的成员积分递增指定值；</li>
<li>ZRANK key member：返回指定有序集合中的成员的排名，从0开始计数；</li>
<li>ZREVRANK key member：返回指定有序集合中的成员的排名，从0开始计数，倒序；</li>
<li>ZRANGE key start end：通过开始值和结束值来取有序集合中的元素；</li>
<li>ZREVRANGE key start end：通过开始值和结束值来取有序集合中的元素，逆序；</li>
<li>ZRANGEBYSCORE key min max：通过分数范围返回指定有序集合中的元素；</li>
<li>ZCOUNT key min max：返回指定分数范围的有序集合中的元素数目；</li>
<li>ZCARD key：获取指定有序集合的成员基数；</li>
<li>ZSCORE key element：返回指定集合的元素的分数；</li>
<li>ZREMRANGEBYRANK key min max:删除指定的有序集合中指定排名范围的成员；</li>
<li>ZREMRANGEBYSCORE key min max:删除指定的有序集合中指定分数范围的成员；</li>
<li><strong>zinterstore/zunionstore</strong> storeKey keyNum key [key …] [weights weight [weight…]] [aggregate sum|min|max]　:通过指定的keys做交集或者并集并保存到指定的集合中；</li>
</ol>
<h2 id="操作散列类型"><a href="#操作散列类型" class="headerlink" title="操作散列类型"></a>操作散列类型</h2><ol>
<li>HSET key field value：设置hash的字段及值；</li>
<li>HGET key field：获取hash的指定字段的值；</li>
<li>HMGET key field1 … fieldN：返回指定的hash的多个字段的值；</li>
<li>HMSET key field1 value1 … fieldN valueN：插入指定的hash多个字段及值；</li>
<li>HINCRBY key field integer：对指定的hash字段的值进行递增操作</li>
<li>HEXISTS key field：检查指定的hash字段是否存在；</li>
<li>HDEL key field：通过指定的hash字段删除hash值；</li>
<li>HLEN key：返回hash的长度；</li>
<li>HKEYS key：返回所有hash的所有keys；</li>
<li>HVALS key：返回指定hash的所有value；</li>
<li>HGETALL key：返回指定的hash所有字段及关联的值；</li>
</ol>
<h2 id="键值相关命令"><a href="#键值相关命令" class="headerlink" title="键值相关命令"></a>键值相关命令</h2><ol>
<li>keys pattern：返回满足给定模式的所有key；</li>
<li>exists key：确定一个key是否存在；</li>
<li>del key：删除一个key；</li>
<li>expire key time：设置一个key的过期时间（单位：秒）；</li>
<li>move：将当前数据库中的key转移到其他数据库中；</li>
<li>persist key：移除给定key的过期时间；</li>
<li>randomkey：随机返回一个key；</li>
<li>rename：重命名key；</li>
<li>type key：返回key的类型；</li>
<li>ttl key：显示key的超期时间；</li>
<li>flushall：清除所有的key；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis真的用的非常广泛，还需要学习如何在自己的项目中使用Redis，这部分主要介绍一下基础的Redis知识。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Shell File Command</title>
    <url>/2020/04/23/Shell-File-Command/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Unix为所有的设备和系统功能提供了文件形式的接口，可以通过写入特定终端所对应的设备文件来实现向终端写入信息。可以通过Shell访问目录、普通文件、块设备、字符设备、符号链接、套接字和命名管道等。文件名、大小、文件类型、文件内容修改时间、文件访问时间、文件属性更改时间、i节点、链接以及文件所在的文件系统等都是文件的属性。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="生成测试文件"><a href="#生成测试文件" class="headerlink" title="生成测试文件"></a>生成测试文件</h2><ol>
<li>dd命令会克隆给定的输入内容，然后将一模一样的一份副本写入到输出；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个内容全部为零的1M大小的名为junk.data的文件</span></span><br><span class="line">dd if=/dev/zero of=junk.data bs=1m count=1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dd参数介绍：<ol>
<li>if表示输入文件（input file）；</li>
<li>of表示输出文件（output file）；</li>
<li>bs指定了以字节为单位的块大小（block size）；</li>
<li>count表示需要被复制的块数。</li>
</ol>
</li>
<li><strong>一定要反复检查dd命令所用 的语法是否正确，尤其是参数of=；</strong></li>
<li>comm命令可用于比较两个已排序的文件,可以显示出第一个文件和第二个文件所独有的行以及这两个文件所共有的行;</li>
</ol>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ol>
<li>文件权限和所有权是Unix/Linux文件系统的显著特性之一；</li>
<li>目录有一个叫作粘滞位（sticky bit）的特殊权限，如果目录设置了粘滞位，只有创建该目录的用户才能删除目录中的文件，就算用户组和其他用户也有写权限，仍无能无力；</li>
<li>可使用chmod命令设置文件权限；</li>
<li>可以使用chown命令更改文件或目录的所有权：chown user:group filename；</li>
<li><strong>可以使用chmod的+t选项设置粘滞位，</strong>只有目录的所有者才能够删除目录中的文件；</li>
<li>chmod的-R选项能够以递归的方式修改当前目录下的所有文件和子目录的权限；</li>
<li>setuid只能应用在Linux ELF格式的二进制文件上，允许其他用户以文件所有者的身份来执行文件；</li>
<li>chattr命令可用于更改扩展属性；</li>
<li>touch命令可以用来生成空白文件或是修改已有文件的时间戳；<ol>
<li>touch -a 只更改文件访问时间；</li>
<li>touch -m 只更改文件修改时间。</li>
</ol>
</li>
<li>符号链接是指向其他文件或目录的指针，命令ln；</li>
<li>diff命令可以生成两个文件之间的差异对比；</li>
<li>head和tail命令可以帮助我们查看文件的一小部分内容;</li>
<li><strong>wc是一个用于统计行、单词和字符数量的实用工具:</strong><ol>
<li>统计行数：wc -l file</li>
<li>统计单词数：wc -w file</li>
<li>统计字符数：wc -c file</li>
<li>使用-L选项打印出文件中最长一行的长度：wc file -L</li>
</ol>
</li>
<li>tree命令能够以图形化的树状结构打印文件和目录;</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文件操作是最基础的，这么多命令，熟能生巧，介绍了Linux三剑客之后，真正的开启了Shell终端编程，脚本小子之路！</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Shell Learn</title>
    <url>/2020/04/22/Shell-Learn/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol>
<li>echo是用于终端打印的最基本命令，echo在每次调用后会添加一个换行符；</li>
<li>printf命令也可用于终端打印，使用的参数和C语言中的printf函数一样；</li>
<li><strong>注意：使用echo和printf的命令选项时，要确保选项出现在命令中的所有字符串之前；</strong>可以使用转义序列在终端中生成彩色文本;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "\e[1;42m \e[1;33m Green Background \e[0m"</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>env或printenv命令查看当前shell 中所定义的全部环境变量;</li>
<li>export命令声明了将由子进程所继承的一个或多个变量;</li>
<li>Bash shell使用let、(( ))和[ ]执行基本的算术操作;</li>
<li>sleep命令可以延迟脚本执行一段时间（以秒为单位）;</li>
<li>函数定义 function fname(){}</li>
<li>pwd命令可以打印出工作目录的路径;</li>
<li>cd命令可以将当前目录修改成指定的目录;</li>
<li>read能够从键盘或标准输入中读取文本;</li>
<li>面向列表的for循环 for var in list; do commands; done</li>
</ol>
<h2 id="查找命令find"><a href="#查找命令find" class="headerlink" title="查找命令find"></a>查找命令find</h2><ol>
<li>find命令能够基于通配符或正则表达式、目录树深度、文件日期、文件类型等条件查找文件;</li>
<li>-print选项使用\n（换行符）分隔输出的每个文件或目录名</li>
<li>-name 选项指定了待查找文件名的模式；比如查找”<em>.txt”能匹配所有名字以.txt结尾的文件或目录（单引号能够阻止shell扩展</em>.txt）；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -name '*.txt' -print</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>-iname（忽略字母大小写），该选项的作用和-name类似，只不过在匹配名字时会忽略大小写；</li>
<li>支持逻辑操作符。-a和-and选项可以执行逻辑与（AND）操作，-o和-or选项可 以执行逻辑或（OR）操作；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -name '*.md' -o -name 'S*' -print</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>-path 选项可以限制所匹配文件的路径及名称;</li>
<li>-regex选项和-path类似，只不过前者是基于正则表达式来匹配文件路径的;</li>
<li>-iregex选项可以让正则表达式在匹配时忽略大小写;</li>
<li>用!排除匹配到的模式;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ! -name '*.md' -a  ! -name 'S*'</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>-maxdepth和–mindepth选项可以限制find命令遍历的目录深度,可以避免出现死循环式的查找，-mindepth选项设置的是find开始进行查找的最小目录深度；</li>
<li>-type选项对文件搜索进行过滤；</li>
<li><strong>根据文件的时间戳进行搜索:</strong><ol>
<li>访问时间（-atime）：用户最近一次访问文件的时间;</li>
<li>修改时间（-mtime）：文件内容最后一次被修改的时间;</li>
<li>变化时间（-ctime）：文件元数据（例如权限或所有权）最后一次改变的时间;</li>
<li>-atime、-mtime和-ctime可作为find的时间选项,可以用整数值来指定天数,这些数字前面可以加上-或+,-表示小于，+表示大于;</li>
<li>-amin（访问时间）；</li>
<li>-mmin（修改时间）；</li>
<li>-cmin（变化时间）;</li>
</ol>
</li>
<li>–newer选项可以指定一个用于比较修改时间的参考文件，然后找出比参考文件更新的所有文件;</li>
<li><strong>基于文件大小的搜索:</strong><ol>
<li>b：块（512字节）;</li>
<li>c：字节;</li>
<li>w：字（2字节）;</li>
<li>k：千字节（1024字节）;</li>
<li>M：兆字节（1024K字节）;</li>
<li>G：吉字节（1024M字节）;</li>
</ol>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 大于2KB的文件</span></span><br><span class="line">find . -type f -size +2k</span><br><span class="line"><span class="meta">#</span><span class="bash"> 小于2KB的文件</span></span><br><span class="line">find . -type f -size -2k</span><br><span class="line"><span class="meta">#</span><span class="bash"> 大小等于2KB的文件</span></span><br><span class="line">find . -type f -size 2k</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p><strong>基于文件权限和所有权的匹配:</strong>-perm选项指明find应该只匹配具有特定权限值的文件;</p>
</li>
<li><p>-user USER就能够找出由某个特定用户所拥有的文件;</p>
</li>
<li><p><strong><em>执行操作：</em></strong></p>
<ol>
<li>-delete选项可以删除所匹配到的文件；</li>
<li>-exec选项，find命令可以结合其他命令使用；</li>
<li>find命令使用一对花括号{}代表文件名,对于每一个匹配的文件会将{}替换成相应的文件名,并进行相应的操作；</li>
<li>注意该命令结尾的;，必须对分号进行转义，否则shell会将其视为find命令的结束；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找文件大小为2k的所有文件，然后对所有找到符合条件的文件进行cat读取；</span></span><br><span class="line">find . -type f -size 2k -exec cat &#123;&#125; \;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以将10天前的 .txt文件复制到OLD目录中</span></span><br><span class="line">find . -type f -mtime +10 -name "*.txt" -exec cp &#123;&#125; OLD \;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>find跳过特定的目录:</em></strong></p>
<ol>
<li>在find的执行过程中，跳过某些子目录能够提升性能;</li>
<li>-prune选项排除某些符合条件的文件;</li>
<li>样例：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -name <span class="string">".git"</span> –prune是命令中负责进行修剪的部分，它指明了.git目录应该被排除在外</span></span><br><span class="line">find . -name '.git' -prune -o -type f -print</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="命令xargs"><a href="#命令xargs" class="headerlink" title="命令xargs"></a>命令xargs</h2><ol>
<li>xargs命令从stdin处读取一系列参数，然后使用这些参数来执行指定命令；</li>
<li>能将单行或多行输入文本转换成其他格式，例如单行变多行或是多行变单行；</li>
<li>xargs命令应该紧跟在管道操作符之后；</li>
<li>zargs命令重新格式化stdin接收到的数据，再将其作为参数提供给指定命令，xargs默认会执行echo命令,用来将多行输入转换成单行输出;</li>
<li>xargs的-n选项可以限制每次调用命令时用到的参数个数;</li>
<li>-d选项可以为输入数据指定自定义的分隔符;</li>
<li><strong>xargs命令可以同find命令很好地结合在一起,find的输出可以通过管道传给xargs，由后者执行-exec选项所无法处理的复杂操作;</strong></li>
<li>-I选项用于指定替换字符串，这个字符串会在xargs解析输入时被参数替换掉，{}会在每次执行中被替换为相应的参数；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将符合条件的文件修改后缀加上.bak</span></span><br><span class="line">ls test |xargs -I &#123;&#125; mv &#123;&#125; &#123;&#125;.bak</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>需要注意find命令和xargs命令之间的联合使用的危险性；</li>
<li><strong>xargs -0表示xargs用NULL来作为分隔符;</strong></li>
<li>统计源代码目录中所有程序文件的行数:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -print0 |xargs -0 wc -l</span><br></pre></td></tr></table></figure>

<h2 id="命令tr"><a href="#命令tr" class="headerlink" title="命令tr"></a>命令tr</h2><ol>
<li>对来自标准输入的内容进行字符替换、字符删除以及重复字符压缩；</li>
<li>将输入中的字符由大写转换成小写：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'A-Z'</span>和<span class="string">'a-z'</span>都是字符组</span></span><br><span class="line">echo "HELLO WHO IS THIS" | tr 'A-Z' 'a-z'</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>tr中利用集合的概念，可以轻松地将字符从一个集合映射到另一个集合中;</li>
<li>tr命令可以用来加密,ROT13是一个著名的加密算法,在ROT13算法中，字符会被移动13 个位置，因此文本加密和解密都使用同一个函数;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo wanderros | tr 'a-zA-Z' 'n-za-mN-ZA-M'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出加密串：jnaqreebf</span></span><br><span class="line">echo jnaqreebf | tr 'a-zA-Z' 'n-za-mN-ZA-M'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出wanderros</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>tr还可以将制表符转换成单个空格；</li>
<li>-d选项可以通过指定需要被删除的字符集合将特定字符清除掉；</li>
<li>-c选项来使用集合的补集,一般配合-d选项使用；</li>
<li>tr命令能够完成很多文本处理任务，它可以删除字符串中重复出现的字符，比如空格等，使用-s选项；</li>
<li>tr可以将不同的字符类作为集合使用(使用格式tr [:class:] [:class:]):<ol>
<li>alnum：字母和数字;</li>
<li>alpha：字母;</li>
<li>cntrl：控制（非打印）字符;</li>
<li>digit：数字;</li>
<li>graph：图形字符;</li>
<li>lower：小写字母;</li>
<li>print：可打印字符;</li>
<li>punct：标点符号;</li>
<li>space：空白字符;</li>
<li>upper：大写字母;</li>
<li>xdigit：十六进制字符</li>
</ol>
</li>
</ol>
<h2 id="校验命令"><a href="#校验命令" class="headerlink" title="校验命令"></a>校验命令</h2><ol>
<li>校验和（checksum）程序用来从文件中生成相对较小的唯一密钥，绝大多数软件发行版都包含了一个校验和文件；</li>
<li>强健性最好且使用最为广泛的校验和算法是MD5和SHA-1；</li>
<li>md5和shasum命令可以分别生成文件的md5值和sha值；</li>
<li>校验和有助于核实下载文件的完整性；</li>
<li>md5deep或sha1deep命令可以遍历目录树，计算其中所有文件的校验和,-r选项允许md5deep递归遍历子目录,-l选项允许显示相对路径;</li>
</ol>
<h2 id="行排序命令"><a href="#行排序命令" class="headerlink" title="行排序命令"></a>行排序命令</h2><ol>
<li>sort命令能够对文本文件和stdin进行排序;</li>
<li>uniq经常与sort一同使用，提取不重复（或重复）的行;</li>
<li>sort命令包含大量的选项，能够对文件数据进行各种排序;</li>
<li><strong>使用uniq命令要求输入数据必须经过排序;</strong></li>
<li>如果文件已经排序，sort会返回为0的退出码($?),否则返回非0；</li>
<li>sort演示：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 排序输入然后输出到文件：</span></span><br><span class="line">ls |sort &gt;sort.text</span><br><span class="line">ls |sort -o sort.text</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照数字排序：</span></span><br><span class="line">echo "1 \n 2\n 3\n 6\n 4"|sort -n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照逆序排序:</span></span><br><span class="line">echo "1 \n 2\n 3\n 6\n 4"|sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并两个已排序过的文件：</span></span><br><span class="line">sort -m sorted1 sorted2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找出已排序文件中不重复的行：</span></span><br><span class="line">echo "1\n2\n3\n1\n2\n"|sort|uniq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查文件是否已经排序过：</span></span><br><span class="line">sort -C filename</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>sort的-k指定了排序所依据的字符，如果是单个数字，则指的是列号，列与列之间由空格分隔，从1开始；</strong></li>
<li>可以使用-k选项指定键值定义字符位置(开始位置,结束位置)，如下：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat totalcode.txt|tr -d ' '|sort -nk 1,3</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><strong>-z选项使sort的输出与以\0作为终止符的xargs命令相兼容；</strong></li>
<li>-b选项用于忽略文件中的前导空白行，选项-d用于指明以字典序进行排序；</li>
<li>uniq命令可以从给定输入中找出唯一的行，报告或删除那些重复的行；</li>
<li><strong>uniq命令的-c 选项可以统计各行在文件中出现的次数；</strong></li>
<li><strong>uniq命令的-s指定跳过前N个字符；</strong></li>
<li>-z选项可以生成由0值字节终止的输出;</li>
</ol>
<h2 id="临时文件命名"><a href="#临时文件命名" class="headerlink" title="临时文件命名"></a>临时文件命名</h2><ol>
<li>shell脚本经常需要存储临时数据，最适合存储临时数据的位置是 /tmp；</li>
<li>mktemp命令可以为临时文件或目录创建唯一的名字；</li>
<li>-d选项可以创建一个临时目录；</li>
<li>-u选项仅仅生成名字，不产生文件或者目录；</li>
<li>基于模板创建临时文件名,<strong>mktemp正常工作的前提是保证模板中至少要有3个X</strong>,比如：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mktemp test.XXX</span><br></pre></td></tr></table></figure>

<h2 id="分割文件和数据"><a href="#分割文件和数据" class="headerlink" title="分割文件和数据"></a>分割文件和数据</h2><ol>
<li>split命令可以用来分割文件；</li>
<li>-b选项可以指定分割大小，可以指定k（KB）、M（MB）、G（GB）；</li>
<li>为分割后的文件指定文件名前缀:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用split_file作为文件名前缀</span></span><br><span class="line">split -b 100  -a 3 test.bak split_file</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>csplit实用工具能够基于上下文来分隔文件,依据的是行计数或正则表达式,对于日志文件分割尤为有用;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csplit server.log /SERVER/ -n 2 -s &#123;*&#125; -f server -b "%02d.log"</span><br><span class="line"><span class="meta">#</span><span class="bash"> /SERVER/ 用来匹配特定行，分割过程即从此处开始</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /[REGEX]/ 用于描述文本模式。它从当前行（第一行）一直复制到（但不包括）包含SERVER的匹配行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;*&#125; 表示根据匹配重复执行分割操作，直到文件末尾为止。可以用&#123;整数&#125;的形式来指定分割执行的次数。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s 使命令进入静默模式，不打印其他信息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n 指定分割后的文件名后缀的数字个数，例如01、02、03等。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 指定分割后的文件名前缀（在上面的例子中，server就是前缀）。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -b 指定后缀格式。例如%02d.log，类似于C语言中<span class="built_in">printf</span>的参数格式,文件名 = 前缀 + 后缀，也就是server + %02d.log</span></span><br></pre></td></tr></table></figure>

<h2 id="切割文件名"><a href="#切割文件名" class="headerlink" title="切割文件名"></a>切割文件名</h2><ol>
<li>借助 % 操作符可以从name.extension这种格式中提取name部分（文件名），例如：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_jpg="sample.jpg" </span><br><span class="line">name=$&#123;file_jpg%.*&#125; </span><br><span class="line">echo File name is: $name</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>#操作符可以提取出扩展名，例如：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_jpg="sample.jpg" </span><br><span class="line">extension=$&#123;file_jpg#*.&#125;</span><br><span class="line">echo Extension name is: $extension</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>${VAR%.*} 的含义：<ol>
<li>从 $VAR中删除位于%右侧的通配符（在上例中是.*）所匹配的字符串，通配符从右向左进行匹配；</li>
<li>给VAR赋值，即VAR=sample.jpg。通配符从右向左匹配到的内容是.jpg，因此从$VAR中删除匹配结果，得到输出sample；</li>
<li>%属于非贪婪（non-greedy）操作，右向左找出匹配通配符的最短结果；</li>
<li>%%，它与%相似，但行为模式却是贪婪的，这意味着它会匹配符合通配符的最长结果。</li>
</ol>
</li>
<li>#操作符可以从文件名中提取扩展名，这个操作符与%类似，不过求值方向是从左向右；</li>
<li>##从左向右进行贪婪匹配，并从指定变量中删除匹配结果；</li>
</ol>
<h2 id="文件重命名和移动"><a href="#文件重命名和移动" class="headerlink" title="文件重命名和移动"></a>文件重命名和移动</h2><ol>
<li>系统管理员经常需要将有相同前缀或相同类型的文件移动到新的目录中；</li>
<li>rename命令利用Perl正则表达式修改文件名，组合find、rename和mv命令，我们能做到的就可以很多了；</li>
<li>综合样例：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件名: rename.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用途: 重命名 .jpg 和 .png 文件</span></span><br><span class="line"></span><br><span class="line">count=1; for img in `find . -iname '*.png' -o -iname '*.jpg' -type f -maxdepth 1`</span><br><span class="line">do </span><br><span class="line">	new=image-$count.$&#123;img##*.&#125;</span><br><span class="line">	echo "Renaming $img to $new" </span><br><span class="line">	mv "$img" "$new" </span><br><span class="line">	let count++</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将 *.JPG更名为 *.jpg： rename *.JPG *.jpg</li>
<li>将文件名中的空格替换成字符 “_“：rename ‘s/ /_/g’ *</li>
<li>转换文件名的大小写: rename ‘y/A-Z/a-z/‘ *</li>
<li>将所有的.mp3文件移入给定的目录：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find path -type f -name "*.mp3" -exec mv &#123;&#125; target_dir \;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>以递归的方式将所有文件名中的空格替换为字符”_”：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find path -type f -exec rename 's/ /_/g' &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="交互式输入"><a href="#交互式输入" class="headerlink" title="交互式输入"></a>交互式输入</h2><ol>
<li>echo命令和重定向可以实现交互式输入的自动化；</li>
<li><strong>要实施攻击，我们需要将十六进制形式的shellcode（例如\xeb\x1a\x5e\x31\xc0\x88\x46）进行重定向；</strong></li>
<li><strong>expect程序能够执行复杂的交互操作并适应目标应用的变化</strong>,被用于控制硬件测试、验证软件构建、查询路由器统计信息等；<ol>
<li>spawn： 运行新的目标应用；</li>
<li>expect： 关注目标应用发送的模式；</li>
<li>send：向目标应用发送字符串</li>
</ol>
</li>
<li>spawn命令的参数是需要自动化运行的应用程序及其参数，expect命令接受一组模式以及匹配模式时要执行的操作，send命令是要发送的信息。</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要介绍一些常见的shell命令，熟练使用这些命令的话，能够使得我们能够写出高效的shell脚本帮助我们高效完成日常的办公，真的是别人一天的工作可能就是你一个命令的事，所有shell还是好好学习吧！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Shell Manage Command</title>
    <url>/2020/04/23/Shell-Manage-Command/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>想要使用好自己的操作系统，那么作为自己的系统使用者，需要监视整个系统，保证所有一切都井然有序！这部分开始学习如何使用终端进行系统的管理任务。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>进程是程序的运行实例（running instance），运行在计算机中的多个进程都被分配了一个称为进程ID（PID）的唯一标识数字；</li>
<li>进程属性包括拥有该进程的用户、进程使用的内存数量、进程占用的CPU时间等；</li>
<li>进程管理相关的重要命令是top、ps和pgrep；</li>
<li>ps可以报告活跃进程的相关信息：拥有进程的用户、进程的起始时间、进程对应的命令路径、PID、进程所属的终端（TTY）、进程使用的内存、进程占用的CPU等；</li>
<li>命令ps -e、ps -ef、ps -ax以及ps -axf都能够生成包含所有进程的报告，提供比ps更多的信息;</li>
<li>pgrep命令也可以列出命令的进程ID列表;</li>
<li><strong>uptime和top命令都可以显示平均负载,平均负载由3个值来指定，第1个值指明了1分钟内的平均值，第2个值指明了5分钟内的平均值，第3个值指明了15分钟内的平均值；</strong></li>
<li>top命令会列出CPU占用最高的进程列表以及基本的系统统计信息，其中包括总的任务数、CPU核心数以及内存占用情况；</li>
<li>which命令用来找出某个命令的位置；</li>
<li>whereis与which命令类似，它不仅会返回命令的路径，还能够打印出其对应的命令手册以及源代码的路径（如果有的话）；</li>
<li>whatis会输出指定命令的一行简短描述；</li>
<li>file命令可以用来确定文件的类型；</li>
<li>在命令行中是通过kill命令来发出信号，trap命令可以在脚本中用来处理所接收的信号；</li>
<li>write命令可以向一个用户发送消息，talk命令可以让两个用户展开会话，wall命令可以向所有用户发送消息;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将message发送给所有用户以及终端</span></span><br><span class="line">cat message | wall</span><br></pre></td></tr></table></figure>

<h2 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="/proc文件系统"></a>/proc文件系统</h2><ol>
<li>/proc是一种存在于内存中的伪文件系统（pseudo filesystem），它的引入是为了可以从用户空间中读取Linux内核的内部数据结构；</li>
<li>/proc目录中包含了多个文件和目录。其中大多数文件可以使用cat、less或more命令来查看，其内容都是纯文本格式；</li>
<li>系统中每一个运行的进程在/proc中都有一个对应的目录，目录名和进程ID相同；</li>
<li>hostname和uname可以输出当前系统的主机名；</li>
<li>cron多用于调度系统维护任务,有专门的文档记录如何使用cron进行任务调度；</li>
<li>screen工具可以在单个终端会话中创建多个虚拟屏幕,在一个虚拟屏幕中启动的任务可以在该屏幕隐藏的情况下继续运行;<ol>
<li>从shell中运行screen命令就可以创建一个新的屏幕;</li>
<li>按下Ctrl+A和Ctrl+N可以切换到下一个窗口;</li>
<li>使用Ctrl+A和Ctrl+D可以脱离当前screen会话;</li>
</ol>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为大部分的实验都是在Mac上实施的,因此有些命令都没有去记录,但是记录的都是统一的,唯一可能参数不太相同,可以使用man命令来查看具体的参数!</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Shell Network Command</title>
    <url>/2020/04/23/Shell-Network-Command/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>shell脚本可用于配置网络节点、测试主机是否可用、自动执行远程主机命令，而这些脚本的底层依赖是各种各样的网络命令，这部分学习的是常用的网络命令！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础网络知识"><a href="#基础网络知识" class="headerlink" title="基础网络知识"></a>基础网络知识</h2><ol>
<li>网络接口用于将主机以有线或无线的形式连接到网络；</li>
<li>ifconfig命令用于配置及显示网络接口、子网掩码等细节信息；</li>
<li>命令示例：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置网路接口wlan0的ip以及子网掩码</span></span><br><span class="line">ifconfig wlan0 192.168.0.80 netmask 255.255.252.0</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>mac地址欺骗：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 hw ether 00:1c:bf:87:25:d5</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>过滤出本机ip：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig |egrep -o "inet [^ ]*"|tr -d "a-z"</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>host和nslookup是基于命令行的DNS查找工具都可以实现名字与IP地址的解析；</p>
</li>
<li><p>ping是一个基础的网络命令，用于检验网络上主机之间的连通性，找出活动主机;</p>
</li>
<li><p><strong>ping命令如果执行顺利，会返回退出状态0；否则，返回非0;</strong></p>
</li>
<li><p>netstat命令用于显示各种网络相关信息，如网络连接、路由表、接口状态、masquerade连接、多播成员等等；</p>
</li>
<li><p>route命令用于显示和操作路由表，要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">route add default gw 192.168.3.1 netmask 255.255.255.0</span><br><span class="line">netstat -nr # 查看路由表</span><br></pre></td></tr></table></figure>
</li>
<li><p>traceroute命令可以显示分组途径的所有网关的地址,这些信息可以帮助我们搞明白分组到达目的地需要经过多少跳;</p>
</li>
<li><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具，支持文件的上传和下载，所以是综合传输工具。但按传统，习惯称curl为下载工具，作为一款强力工具，curl支持包括HTTP、HTTPS、FTP等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征；</p>
</li>
<li><p>fping命令可以为多个IP地址生成ICMP分组，然后等待回应:</p>
<ol>
<li>-a指定显示出所有活动主机的IP地址;</li>
<li>-u指定显示出所有不可达的主机;</li>
<li>-g指定从“IP地址/子网掩码”记法或者“IP地址范围”记法中生成一组IP地址;</li>
</ol>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 找出192.168.3.1网段的所有活着的主机</span></span><br><span class="line">fping -a 192.168.3.1/24 -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面的也可以</span></span><br><span class="line">fping -a 192.168.3.1 192.168.3.255 -g</span><br></pre></td></tr></table></figure>

<h2 id="高级网络知识"><a href="#高级网络知识" class="headerlink" title="高级网络知识"></a>高级网络知识</h2><ol>
<li>SSH代表的是Secure Shell（安全shell），使用加密隧道连接两台计算机，能够让你访问远程计算机上的shell；</li>
<li>SSH执行指纹核对（fingerprint verification）来确保用户连接到正确的远程主机；</li>
<li>连接运行在端口422之上的SSH服务器: ssh user@locahost -p 422</li>
<li><strong>要想在远程主机中执行命令，在本地shell中显示命令输出:ssh user@host ‘COMMANDS’,多条命令，命令之间用分号分隔:ssh user@host “command1 ; command2 ; command3”;</strong></li>
<li>用ssh命令的选项-C启用对数据进行压缩传输;</li>
<li>可以使用ssh-copy-id命令将秘钥文件拷贝到要访问的服务器中，然后就可以免密登录了；</li>
<li>文件传输协议（File Transfer Protocol，FTP）是一个古老的协议，在很多公共站点上用于文件共享;</li>
<li>SFTP是一个运行在SSH连接之上并模拟了FTP接口的文件传输系统;</li>
<li>SCP是一个安全的文件复制命令，和旧式的、不安全的远程复制命令rcp类似,文件均通过SSH加密通道进行传输;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将远程主机中的文件复制到当前目录并使用给定的文件名</span></span><br><span class="line">scp user@remotehost:/home/path/filename filename</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将目录/home/username递归复制到远程主机中</span></span><br><span class="line">scp -r /home/usernameuser@remotehost:/home/backups</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>scp的选项-p能够在复制文件的同时保留文件的权限和模式;</li>
<li>sshfs利用SSH实现了在本地挂载点上挂载远程文件系统；</li>
</ol>
<h2 id="连接无线网络"><a href="#连接无线网络" class="headerlink" title="连接无线网络"></a>连接无线网络</h2><ol>
<li>无线网络需要使用iwconfig和iwlist工具来配置更多的参数；</li>
<li>无线LAN需要essid、key（密钥）以及frequency（频率）等参数；<ol>
<li>essid：无线网络的名称；</li>
<li>key：一些网络需要用WEP密钥进行认证， WEP密钥通常是一个5位或10位十六 进制数口令；</li>
<li>frequency：频率则是分配给特定网络的。</li>
</ol>
</li>
<li>iwlist工具能够扫描并列出可用的无线网络：iwlist scan；</li>
</ol>
<h2 id="分析网络流量与端口"><a href="#分析网络流量与端口" class="headerlink" title="分析网络流量与端口"></a>分析网络流量与端口</h2><ol>
<li>通过获取开放端口列表、使用特定端口的应用以及运行该应用的用户，是跟踪系统中出现预期和非预期行为的一种方法，可用于检查rootkits或其他恶意软件；</li>
<li><strong>lsof 和 netstat 命令可用来列出端口以及运行在端口上的服务；</strong></li>
<li>lsof（list open files）命令可以列出已打开的文件。选项-i将范围限制在已打开的网络连接；</li>
<li>netstat也可以显示网络服务统计信息;</li>
<li>netcat或nc命令都可以创建用于在TCP/IP网络上传输数据的套接字;</li>
<li>Linux系统可以作为网桥使用,网桥是一种低层连接，它并不是基于IP地址，而是使用MAC地址传递分组;</li>
</ol>
<h2 id="私有网络（VPN）"><a href="#私有网络（VPN）" class="headerlink" title="私有网络（VPN）"></a>私有网络（VPN）</h2><ol>
<li>虚拟私有网络（Virtual Private Network，VPN）是建立在公网之上的加密通道；</li>
<li>VPN可用于连接远程办公点、散布多处的生产制造站点以及远程工作人员!</li>
<li>后续专门讲解如何配置以及原理！</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Shell Web Command</title>
    <url>/2020/04/23/Shell-Web-Command/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Shell终端可以进行Web界面的访问，这点应该知道吧，在研究生期间曾在服务器上使用curl命令登录校园网，因为要认证网络，但是没有图形界面，后来又用自动化测试工具使用Python脚本进行校园网认证，作为一个程序员真的得会这些基础的web命令,详细的在Python中介绍!</p>
<hr>
<h1 id="Web访问"><a href="#Web访问" class="headerlink" title="Web访问"></a>Web访问</h1><ol>
<li>wget是一个用于文件下载的命令行工具，选项繁多且用法灵活;<ol>
<li>通过选项-O指定输出文件名;</li>
<li>选项-o指定一个日志文件，这样日志信息就不会被打印到stdout了;</li>
<li>选项-t可以指定在放弃下载之前尝试多少次;</li>
<li>选项–limit-rate可以限定下载任务能够占有的最大带宽，从而保证其他应用程序能够公平地访问Internet;</li>
<li>选项–quota或-Q可以指定最大下载配额（quota）;</li>
<li>选项-c从断点开始继续下载;</li>
</ol>
</li>
<li>wget像爬虫一样以递归的方式遍历网页上所有的URL链接，并逐个下载,要实现这种操作， 可以使用选项–mirror;</li>
<li>-k或–convert-links指示wget将页面的链接地址转换为本地地址;</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 镜像一个网站</span></span><br><span class="line">wget --mirror --convert-links exampledomain.com</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>注意：只应出于个人使用的目的才可以镜像网站，而且不要频繁地做镜像；</strong></li>
<li>一些网站需要HTTP或FTP认证，可以用–user和–password提供认证信息，可以不在命令行中指定密码，而是在网页上手动输入密码，这就需要将–password改为–ask-password；</li>
<li><strong>Lynx是一款基于命令行的Web浏览器，能够以纯文本形式下载Web网页；</strong></li>
<li>curl可以使用HTTP、HTTPS、FTP协议在客户端与服务器之间传递数据,支持POST、cookie、认证、从指定偏移处下载部分文件、参照页（referer）、用户代理字符串、扩展头部、限速、文件大小限制、进度条等特性；<ol>
<li>选项-O指明将下载数据写入文件，采用从URL中解析出的文件名，URL必须是完整的，不能仅是站点的域名；</li>
<li>选项-o可以指定输出文件名；</li>
<li>选项–silent可以让curl命令不显示进度信息;</li>
<li>如果需要在下载过程中显示形如#的进度条，可以使用选项–progress。</li>
</ol>
</li>
<li>选项 –cookie 可以指定提供哪些cookie,cookies需要以 name=value的形式来给出,多个cookie之间使用分号分隔;</li>
<li>用–limit-rate限制cURL的下载速度:curl URL –limit-rate 20k；</li>
<li>用curl的选项-u完成HTTP或FTP认证：curl -u user:pass <a href="http://test_auth.com；" target="_blank" rel="noopener">http://test_auth.com；</a></li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 实战</title>
    <url>/2020/05/19/Spring-Boot-%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在当今的Java EE开发中，Spring框架是当之无愧的最强王者！而Spring Boot的出现是为了快速搭建Spring框架的应用，从而使得Java EE开发变得异常简单。使用Spring进行开发至少应该学会：Web开发、数据访问、安全控制、批处理、异步消息、系统集成、开发与部署。应用监控。分布式系统开发等。学习时应该更多关注技术，而开发时则应该更多关注业务！使用SpringBoot进行重构，和大量配置与整合说拜拜！<strong><em>推荐书籍：《Java EE开发的颠覆者 Spring Boot 实战》·  汪云飞 著</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Spring发展历程：</p>
<ul>
<li>xml配置</li>
<li>注解配置：应用懂得基本配置使用xml，业务配置用注解</li>
<li>Java配置</li>
</ul>
</li>
<li><p>定义：</p>
<ul>
<li>Spring框架是一个轻量级的企业级开发的一站式解决方案；</li>
<li>Spring使用简单的POJO（Plain Old Java Object，无任何限制的普通Java对象）来进行企业级开发；</li>
<li>每个Spring管理的对象都被称之为Bean，Spring提供了一个IoC容器用来初始化对象，解决对象间的依赖管理和对象的使用；</li>
<li>对于Spring 的每个模块都至少对应有一个jar包；</li>
</ul>
</li>
<li><p>核心容器（Core Container）：</p>
<ul>
<li>Spring-Core：核心工具类，Spring其他模块大量使用Spring-Core</li>
<li>Spring-Beans：Spring定义Bean的支持</li>
<li>Spring-Context：运行时Spring容器</li>
<li>Spring-Context-Support：Spring容器对第三方包的集成支持</li>
<li>Spring-Expression：使用表达式语言在运行时查询和操作对象</li>
</ul>
</li>
<li><p>AOP(面向切面的编程思想，采用“横切”的技术，将涉及多业务流程懂得通用功能抽取并单独封装，形成独立的切面，在合适的时机将这些切面横向切入到业务流程的指定位置中)：</p>
<ul>
<li><p>Spring-AOP：基于代理的AOP支持</p>
</li>
<li><p>Spring-Aspects：基于AspectJ的AOP支持</p>
</li>
<li><p>介绍</p>
<ul>
<li>在一个业务系统中，用户登录是基础功能，凡是涉及到用户的业务流程都要求用户进行系统登录。如果把用户登录功能代码写入到每个业务流程中，会造成代码冗余，维护也非常麻烦，当需要修改用户登录功能时，就需要修改每个业务流程的用户登录代码，这种处理方式显然是不可取的。比较好的做法是把用户登录功能抽取出来，形成独立的模块，当业务流程需要用户登录时，系统自动把登录功能切入到业务流程中,下图展示的是将用户登录功能切入到业务流程示意图</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c7808cbf7520282a43fd6069dcf4fd89-23457" alt=""></p>
</li>
<li><p>AOP是一种编程思想，能够避免写冗余的代码，业务逻辑也更加清晰</p>
</li>
<li><p>把散布于不同业务但功能相同的代码从业务逻辑中抽取出来，封装成独立的模块，这些独立的模块被称为切面，切面的具体功能法被称为关注点</p>
</li>
<li><p>Aspect：切面，切入业务流程的一个独立模块</p>
</li>
<li><p>Join point：连接点，业务流程在运行过程中需要插入切面的具体位置</p>
</li>
<li><p>Advice：通知，切面的具体实现方法</p>
</li>
<li><p>Pointcut：切入点，用于定义通知应该切入到哪些连接点上，不同的通知通常需要切入到不同的连接点上</p>
</li>
<li><p>Target：目标对象，被一个或者多个切面所通知的对象</p>
</li>
<li><p>Proxy：代理对象，将通知应用到目标对象之后被动态创建的对象</p>
</li>
<li><p>Weaving：切入，也称为织入，将切面应用到目标对象从而创建一个新的代理对象的过程</p>
</li>
</ul>
</li>
<li><p>消息（Messaging）：</p>
<ul>
<li>Spring-Messaging：对消息架构和协议的支持</li>
</ul>
</li>
<li><p>Web：</p>
<ul>
<li>Spring-Web：提供基础的Web集成的功能，在Web项目中提供Spring的容器</li>
<li>Spring-Webmvc：提供基于Servlet的Spring MVC</li>
<li>Spring-WebSocket：提供WebSocket功能</li>
<li>Spring-Webmvc-Portlet：提供Portlet环境支持</li>
</ul>
</li>
<li><p>数据访问/集成（Data Access/Integration）：</p>
<ul>
<li>Spring-JDBC：提供JDBC访问数据库的支持</li>
<li>Spring-TX：提供编程式和声明式的事务支持</li>
<li>Spring-ORM：提供对象/关系映射技术的支持</li>
<li>Spring-OXM：提供对象/xml映射技术的支持</li>
<li>Spring-JMS：提供对JMS的支持</li>
</ul>
</li>
</ol>
<h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><ol>
<li>Spring Boot：使用默认开发配置来实现快速开发</li>
<li>Spring XD：用来简化大数据应用开发</li>
<li>Spring Cloud：为分布式系统开发提供工具集</li>
<li>Spring Data：对主流的关系型和NoSQL数据库的支持</li>
<li>Spring Integration：通过消息机制对企业集成模式（EIP）的支持</li>
<li>Spring Batch：简化以及优化大量数据的批处理操作</li>
<li>Spring Security：通过认证和授权保护应用</li>
<li>Spring HETEOAS：基于HETEOAS原则简化REST服务开发</li>
<li>Spring Social：与社交网络API（如Facebook、新浪微博等）的集成</li>
<li>Spring AMQP：对基于AMQP的消息的支持</li>
<li>Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面支持</li>
<li>Spring for Android：主要提供在Android上消费RESTful API的功能</li>
<li>Spring Web Flow：基于Spring MVC提供基于向导流程式的Web应用开发</li>
<li>Spring Web Services：提供基于协议有限的SOAP/Web服务</li>
<li>Spring LDAP：简化使用LDAP开发</li>
<li>Spring Session：提供一个API及实现来管理用户会话信息</li>
<li>… …</li>
</ol>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ol>
<li><p>早期都是通过IDE来创建一个项目，然后将项目依赖的第三方jar包复制到下面的类路径下，但是这种方式真的挺反人类的，因为有些jar包可能会有其他的依赖，这也是平常遇到的ClassNotFound错误的主要原因；</p>
</li>
<li><p>项目构建工具解决了这种问题，目前主流的项目构架工具有：Ant、Maven、Gradle等；</p>
</li>
<li><p>Apache Maven是一个软件项目管理工具，基于项目对象模型（POM,Project Object Model）的概念，可用来管理项目的依赖、编译、文档等信息；</p>
</li>
<li><p>Maven是基于项目对象模型的概念运作的，每个Maven的项目都有一个pom.xml用来管理项目的依赖以及项目的编译等等功能；</p>
<ul>
<li><p>样例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wanderros.actuator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>actuator_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>actuator_test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dependencies元素：此元素包含多个项目依赖需要使用的dependency</p>
</li>
<li><p>dependency元素：内部通过groupId、artifactId以及version确定唯一的依赖：</p>
<ul>
<li>groupId：组织的唯一标识</li>
<li>artifactId：项目的唯一标识</li>
<li>version：项目的版本</li>
</ul>
</li>
<li><p>变量定义：可以在properties中定义变量，然后在dependency中引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.web</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">spring.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>$&#123;spring.web&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译插件，可在编译插件中涉及Java的编译版本，可以看build元素中的内容</p>
</li>
<li><p>description元素：描述Spring项目</p>
</li>
<li><p>parent元素：基础级别的Spring模块</p>
</li>
<li><p>Maven会自动根据dependency中的依赖配置，直接通过网络在Maven中心库下载相关依赖到依赖目录中</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3175b25cabc5e1164f2c9f6cee4ae8a3-531746" alt="依赖关系图"></p>
</li>
</ul>
</li>
<li><p>Spring框架四大原则：</p>
<ul>
<li>使用POJO进行轻量级和最小侵入式开发</li>
<li>通过依赖注入和基于接口编程实现轻耦合</li>
<li>通过AOP和默认习惯进行声明式编程</li>
<li>使用AOP和模板（template）减少模块化代码</li>
</ul>
</li>
<li><p>概念说明：</p>
<ul>
<li>依赖注入：容器负责创建对象和维护对象间的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖—为了解耦</li>
<li>Spring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到所需要的Bean中</li>
<li>配置元数据：描述数据的数据，本身不具备任何执行的能力，只能通过外界代码来对这些元数据进行解析后进行一些有意义的操作，可以进行Bean初始化、配置和管理依赖</li>
<li>声明Bean的注解：<ul>
<li>@Component 组件，没有明确的角色</li>
<li>@Service 在业务逻辑层（service层）使用</li>
<li>@Repository 在数据访问层（dao，Data Access Object层）使用</li>
<li>@Controller 在展示层（MVC-Spring MVC）使用</li>
</ul>
</li>
<li>注入Bean的注解（一般情况下通用）：<ul>
<li>@Autowired Spring提供的注解</li>
<li><del>@Inject JSR-330提供的注解</del></li>
<li>@Resource JSR-250提供的注解</li>
</ul>
</li>
<li>@Autowired、<del>@Inject</del>、@Resource可以注解在set方法上或者属性上，注解在属性上代码更少、层次更清晰，不过因人而异吧！使用@Autowired和@Resource是等效的</li>
</ul>
</li>
</ol>
<h2 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h2><ol>
<li><p>Java配置是Spring Boot 推荐的配置方式，通过@Configuration和@Bean来实现：</p>
<ul>
<li>@Configuration声明当前类是一个配置类，相当于一个Spring配置的xml文件</li>
<li>@Bean注解在方法上，声明当前方法的返回值是一个Bean</li>
</ul>
</li>
<li><p>配置原则：全局配置使用Java配置（如数据库相关配置、MVC相关配置），业务Bean的配置使用注解配置（@Service、@Component、@Repository、@Controller）</p>
</li>
<li><p>一个简单的样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FunctionService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + word + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//useFunctionService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">useFunctionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FunctionService fs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FunctionService <span class="title">getFs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFs</span><span class="params">(FunctionService fs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fs = fs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Say</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fs.sayHello(word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//config.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 注意扫描的包路径</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wanderros.actuator.actuator_test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FunctionService <span class="title">functionService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FunctionService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        useFunctionService uses=context.getBean(useFunctionService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        FunctionService test=context.getBean(FunctionService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        uses.setFs(test);</span><br><span class="line">        System.out.println(uses.Say(<span class="string">"Nice"</span>));</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello Nice!</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ol>
<li><p>面向切面编程，Spring支持AspectJ的注解式切面编程：</p>
<ul>
<li>使用@Aspect声明是一个切面</li>
<li>使用@After、@Before、@Around定义通知（Advice），可直接将拦截规则（切点）作为参数</li>
<li>可以使用@PointCut专门定义拦截规则，然后在@After、@Before、@Around的参数中调用</li>
<li>符合条件的每一个被拦截处为连接点（JoinPoint）</li>
</ul>
</li>
<li><p>Spring本身在事务处理（@Transcational）和数据缓存（@Cacheable等）上面都使用此种形式的拦截</p>
</li>
<li><p>Spring切面可以应用5种类型的通知：</p>
<ul>
<li>Before—在方法被调用之前调用通知</li>
<li>After—在方法完成之后调用通知，无论方法执行是否成功</li>
<li>After-returning—在方法成功执行之后调用通知</li>
<li>After-throwing—在方法抛出异常后调用通知</li>
<li><u>Around—可以决定是否执行目标方法，什么时候执行，甚至可以改变目标方法的参数和获取执行后的返回值，兼具了Before和After-returning的功能</u></li>
</ul>
</li>
<li><p>切点的定义会匹配通知所要织入的一个或多个连接点，用于准确定位应该在什么地方应用切面的通知</p>
</li>
<li><p>切面是通知和切点的结合，共同定义了关于切面的全部内容—它是什么，以及在何时何处完成其他功能</p>
</li>
<li><p>引入（Introduction）允许我们向现有的类添加新方法或属性，通过通知类，从而在无需修改现有类的情况下，让这些类具有新的行为和状态</p>
</li>
<li><p>织入（Weaving）是将切面应用到目标对象来创建新的代理对象的过程，切面在指定的连接点被织入到目标对象中（注入前置、后置通知等）：</p>
<ul>
<li>编译期——切面在目标类编译期被织入，需要特殊的编译器，如AspectJ</li>
<li>类加载期——切面在目标类加载到JVM时被织入，需要特殊的类加载器（ClassLoader）</li>
<li>运行期——切面在应用运行某个时刻被织入，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象，<strong><em>Spring AOP就是以这种方式织入切面的！</em></strong></li>
</ul>
</li>
<li><p>Spring对AOP的支持：</p>
<ol>
<li>基于代理的经典AOP</li>
<li>@AspectJ注解驱动的切面</li>
<li>纯POJO切面</li>
<li>注入式AspectJ切面</li>
</ol>
<ul>
<li>通知是Java编写——Spring所创建的通知都是用标准的Java类编写的</li>
<li>在运行期通知对象——Spring在运行期才创建代理对象，不需要特殊的编译器来织入Spring AOP的切面</li>
<li>Spring只支持方法连接点——Spring基于动态代理，只支持方法连接点，不支持构造器和字段连接点</li>
</ul>
</li>
<li><p><strong>通过注解进行切面操作样例：</strong></p>
<ol>
<li><p>添加Spring aop以及AspectJ依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring aop --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写拦截规则的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> aop &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学过Java注解就很好理解这部分的内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写使用注解的被拦截类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAnnotationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@aop</span>(name=<span class="string">"注解式拦截的add操作"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行DemoAnnotationService.add!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过注解aop来作为切点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写切面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.wanderros.actuator.actuator_test.anotation.aop)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationPointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"annotationPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        MethodSignature signature=(MethodSignature)joinPoint.getSignature();</span><br><span class="line">        Method method=signature.getMethod();</span><br><span class="line">        aop action=method.getDeclaredAnnotation(aop<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"注解式拦截After "</span> + action.name());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"annotationPointCut()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature=(MethodSignature)joinPoint.getSignature();</span><br><span class="line">        Method method=signature.getMethod();</span><br><span class="line">        System.out.println(<span class="string">"注解式拦截Before， "</span> + method.getName());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写了advie 和切点共同组成了切面 ，使用@Aspect来声明切面，@Component来注册Bean</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置类：（使用@EnableAspectJAutoProxy注解开启Spring对AspectJ的支持）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wanderros.actuator.actuator_test"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">config</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        useFunctionService uses=context.getBean(useFunctionService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        FunctionService test=context.getBean(FunctionService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        DemoMethodService demoMethodService=context.getBean(DemoMethodService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        DemoAnnotationService demoAnnotationService=context.getBean(DemoAnnotationService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        demoAnnotationService.add();</span><br><span class="line">        demoMethodService.add();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Before("execution(* com.wanderros.actuator.actuator_test.service.DemoMethodService.*(..))")</span></span><br><span class="line"><span class="comment">// 方法规则被拦截</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解式拦截Before， add</span></span><br><span class="line"><span class="comment">// 执行DemoAnnotationService.add!</span></span><br><span class="line"><span class="comment">// 注解式拦截After 注解式拦截的add操作</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Spring常用配置"><a href="#Spring常用配置" class="headerlink" title="Spring常用配置"></a>Spring常用配置</h2><ol>
<li><p>Scope描述的是Spring容器如何新建Bean的实例，通过@Scope注解来实现：</p>
<ol>
<li>singleton：一个Spring容器中只有一个Bean的实例，此为Spring的默认配置，全容器共享一个实例</li>
<li>prototype：每次调用新建一个Bean实例</li>
<li>request：Web项目中，给每一个http request新建一个Bean实例</li>
<li>session：Web项目中，给每一个http session新建一个Bean实例</li>
<li>globalSession：只在portal应用中有用，给每一个global http session新建一个Bean实例</li>
</ol>
</li>
<li><p>样例：</p>
<ol>
<li><p>创建一个singleton的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Scope("singleton")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个prototype的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        SingletonService singletonService=context.getBean(SingletonService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        SingletonService singletonService2=context.getBean(SingletonService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PrototypeService prototypeService=context.getBean(PrototypeService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        PrototypeService prototypeService2=context.getBean(PrototypeService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"single: "</span>+singletonService.equals(singletonService2));</span><br><span class="line">        System.out.println(<span class="string">"prototype: "</span>+prototypeService.equals(prototypeService2));</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// single: true</span></span><br><span class="line"><span class="comment">// prototype: false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>Spring资源注入：</strong></p>
<ol>
<li><p>Spring EL-Spring表达式语言，支持在xml和注解中使用表达式，开发中经常涉及调用各种资源的情况，涉及：</p>
<ul>
<li>普通文件</li>
<li>网址</li>
<li>配置文件</li>
<li>系统环境变量</li>
<li>… … </li>
</ul>
</li>
<li><p>Spring主要在注解@Value的参数表达式中使用表达式；</p>
</li>
<li><p>常见注入情况：</p>
<ul>
<li>注入普通字符</li>
<li>注入操作系统属性</li>
<li>注入表达式运算结果</li>
<li>注入其他Bean的属性</li>
<li>注入文件内容</li>
<li>注入网址内容</li>
<li>注入属性文件</li>
</ul>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 普通字符</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"I love you!"</span>)</span><br><span class="line">    <span class="keyword">private</span> String normal;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作系统属性</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String osName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;T(java.lang.Math).random()*100.0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> randomNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置name存在则为name的值，否则为test</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name:test&#125;"</span>)</span><br><span class="line">   <span class="keyword">private</span> String fromAnother;</span><br><span class="line"></span><br><span class="line"><span class="comment">// application.properties 文件中的配置</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;book.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>Bean的初始化和销毁：</strong></p>
<ol>
<li><p>实际开发过程中，经常会遇到在Bean使用之前或者之后做些必要的操作,Spring对Bean的生命周期的操作提供了支持：</p>
<ul>
<li>Java配置方式：使用@Bean的initMethod和destoryMethod</li>
<li>注解方式：利用JSR-250的@PostConstruct和@PreDestroy</li>
</ul>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Scope("singleton")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"@Bean init"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"@Bean Destory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"@Bean service construct!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destory"</span>)</span><br><span class="line">    <span class="function">SingletonService <span class="title">singletonService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingletonService();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Bean</span> service construct!</span></span><br><span class="line"><span class="comment"><span class="doctag">@Bean</span> init</span></span><br><span class="line"><span class="comment"><span class="doctag">@Bean</span> Destory</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Scope("singleton")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"@Bean init"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"@Bean Destory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"@Bean service construct!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>initMethod对应的方法会在构造器执行之后执行，而destroyMethod对应的方法会在Bean销毁之前执行；</p>
</li>
<li><p>@PostConstruct对应的方法会在构造器执行之后执行，而@PreDestroy对应的方法会在Bean销毁之前执行！</p>
</li>
</ol>
</li>
<li><p><strong>事件（Application Event）：</strong></p>
<ol>
<li><p>Spring的事件为Bean与Bean之间懂得消息通信提供了支持,当一个Bean处理完一个任务之后,希望另外一个Bean知道并能做相应的处理,则需要让另一个Bean监听当前Bean所发送的事件；</p>
</li>
<li><p>流程：</p>
<ul>
<li>自定义事件，继承ApplicationEvent</li>
<li>定义事件监听器，实现ApplicationListener</li>
<li>使用容器发布事件</li>
</ul>
</li>
<li><p>样例的部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义监听器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DemoEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DemoEvent demoEvent)</span> </span>&#123;</span><br><span class="line">        String msg=demoEvent.getMsg();</span><br><span class="line">        System.out.println(<span class="string">"我接收到了来自"</span>+demoEvent.getSource()+<span class="string">"发布的消息"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布事件</span></span><br><span class="line">AnnotationConfigApplicationContext context=<span class="keyword">new</span>    AnnotationConfigApplicationContext(config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">context.publishEvent(<span class="keyword">new</span> DemoEvent(context,<span class="string">"Hello"</span>));</span><br><span class="line">context.close();</span><br><span class="line"><span class="comment">/**输出</span></span><br><span class="line"><span class="comment">我接收到了来自org.springframework.context.annotation.AnnotationConfigApplicationContext@71623278, started on Tue May 19 20:36:13 CST 2020发布的消息Hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Spring-Aware"><a href="#Spring-Aware" class="headerlink" title="Spring Aware"></a>Spring Aware</h2><ol>
<li><p>Spring的依赖注入最大亮点是你所有的Bean对Spring容器的存在是没有意识的，即Bean之间的耦合度很低，但是不可避免的要使用Spring容器本身的功能资源，这时候Bean必须意识到Spring容器的存在，才能调用Spring所提供的资源；</p>
</li>
<li><p>Spring Aware主要就是为了上述目的而存在的，实际上是设计用来框架内使用，若使用了Spring Aware，则Bean会和Spring框架耦合（关联程度高）；</p>
</li>
<li><p>Spring 提供的Aware接口：</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>BeanNameAware</td>
<td>获得到容器中Bean的名称</td>
</tr>
<tr>
<td>BeanFactoryAware</td>
<td>获得当前Bean Factory，这样可以调用容器的服务</td>
</tr>
<tr>
<td>ApplicationContextAware*</td>
<td>当前的application context，这样可以调用容器的服务</td>
</tr>
<tr>
<td>MessageSourceAware</td>
<td>获得message source，这样可以获得文本信息</td>
</tr>
<tr>
<td>ApplicationEventPublisherAware</td>
<td>应用事件发布器，可以发布事件</td>
</tr>
<tr>
<td>ResourceLoaderAware</td>
<td>获得资源加载器，可以获得外部资源文件</td>
</tr>
</tbody></table>
</li>
<li><p>Spring Aware的目的是为了让Bean获得Spring容器的服务，因为ApplicationContext接口集成了MessageSource接口、ApplicationEventPublisher接口和ResourceLoader接口，所以Bean可以通过继承ApplicationContextAware来获得Spring容器的所有服务；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AwareService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwareService</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader loader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.beanName=s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loader=resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResult</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean的名称是："</span> + beanName);</span><br><span class="line">        Resource res=loader.getResource(<span class="string">"test.property"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println( IOUtils.toString(res.getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(config<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//context.publishEvent(new DemoEvent(context,"Hello"));</span></span><br><span class="line">        AwareService as=context.getBean(AwareService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        as.outputResult();</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：test.property要在resources目录下</li>
<li>实现 BeanNameAware, ResourceLoaderAware的接口，获得Bean名称和资源加载的服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">**输出</span></span><br><span class="line"><span class="comment">Bean的名称是：awareService</span></span><br><span class="line"><span class="comment">book.author=wander</span></span><br><span class="line"><span class="comment">book.name= fuck spring boot</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><h3 id="多线程异步任务任务"><a href="#多线程异步任务任务" class="headerlink" title="多线程异步任务任务"></a>多线程异步任务任务</h3><ol>
<li><p>Spring 通过任务执行器（TaskExecutor）来实现多线程和并发编程，使用ThreadPoolTaskExecutor可实现一个基于线程池的TaskExecutor,需要在配置类中通过@EnableAsync开启对异步的支持，并通过对实际执行的Bean方法使用@Async注解来声明其是一个异步任务；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wanderros.actuator.actuator_test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor=<span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">asyncTaskService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTask</span><span class="params">(Integer i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行异步任务： "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTaskPlus</span><span class="params">(Integer i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行异步任务+1： "</span>+(++i) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(TaskExecutorConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        asyncTaskService as=context.getBean(asyncTaskService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            as.executeAsyncTask(i);</span><br><span class="line">            as.executeAsyncTaskPlus(i);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>异步任务的执行是没发预测先后顺序的，可能先执行也可能后执行！因此上述代码是没有唯一的输出结果的！</p>
</li>
<li><p>如果@Async注解在类级别，则表面该类的所有方法都是异步方法。</p>
</li>
</ol>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol>
<li><p>计划任务在Spring中实现非常简单：</p>
<ol>
<li>首先通过配置类注解@EnableScheduling来开启对计划任务的支持</li>
<li>然后在要执行计划任务的方法上注解@Scheduled来声明这是一个计划任务</li>
</ol>
</li>
<li><p>Spring通过@Scheduled支持多种类型的计划任务，包含cron、fixDelay、fixRate等；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wanderros.actuator.actuator_test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor=<span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">scheduledTaskService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"每隔5秒执行一次 :"</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"50/1 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cronFixTimeExecution</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"指定时间执行："</span> + dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(TaskExecutorConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//  context.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">每隔5秒执行一次 :09:57:45</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:50!</span></span><br><span class="line"><span class="comment">每隔5秒执行一次 :09:57:50</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:51!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:52!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:53!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:54!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:55!</span></span><br><span class="line"><span class="comment">每隔5秒执行一次 :09:57:55</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:56!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:57!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:58!</span></span><br><span class="line"><span class="comment">指定时间执行：09:57:59!</span></span><br><span class="line"><span class="comment">每隔5秒执行一次 :09:58:00</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fixedRate属性是每隔固定时间执行，单位是毫秒</p>
</li>
<li><p>cron属性可以按照指定时间执行，cron是Unix 和Linux系统下的定时任务，然后按照那个格式来就可以了</p>
</li>
</ol>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h3><ol>
<li><p>Spring提供了基于条件的Bean的创建，使用@Conditional注解；</p>
</li>
<li><p>@Conditional根据满足某一个特定条件创建一个特定的Bean：</p>
<ul>
<li>当某一个jar包在一个类路径下的时候，自动配置一个或多个Bean</li>
<li>只有某个Bean被创建才会创建另外一个Bean</li>
<li>… …</li>
</ul>
</li>
<li><p>通过实现Condition接口，并重写其matcher方法来构造判断条件；</p>
</li>
<li><p>对Bean的实现使用@Conditional来使用实现接口的class；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/455456454952b8c3fb77d3fb5b33bbb0-199922" alt=""></p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Condition</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conditionContext.getEnvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Mac OS X"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myCondition2</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conditionContext.getEnvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Linux"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListServiceinterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService</span> <span class="keyword">implements</span> <span class="title">ListServiceinterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mac OS"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListService2</span> <span class="keyword">implements</span> <span class="title">ListServiceinterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showListCmd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Linux"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 条件注解</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wanderros.actuator.actuator_test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor=<span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        taskExecutor.initialize();</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(myCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ListServiceinterface</span> <span class="title">listService</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListService();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(myCondition2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ListServiceinterface</span> <span class="title">listService</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListService2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(TaskExecutorConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(context.getEnvironment().getProperty("os.name"));</span></span><br><span class="line">        TaskExecutorConfig con=context.getBean(TaskExecutorConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ListServiceinterface lsi= con.listService();</span><br><span class="line">        System.out.println(lsi.showListCmd());</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="组合注解和元注解"><a href="#组合注解和元注解" class="headerlink" title="组合注解和元注解"></a>组合注解和元注解</h3><ol>
<li>Spring的注解主要用来配置注入Bean，切面相关配置(@Transactional)，但是注解的大量使用，相同的多个注解用到各个类中，就相当的啰嗦了——组合注解应运而生！</li>
<li>元注解：可以注解到别的注解上的注解；</li>
<li>被注解的注解称为组合注解，组合注解具备元注解的功能；<ul>
<li>@Configuration就是一个组合@Component注解，表明这个类其实也是一个Bean</li>
</ul>
</li>
<li>@Enable*注解：<ol>
<li>@Enable*的常见注解：<ul>
<li>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</li>
<li>@EnableAsync 开启异步方法的支持</li>
<li>@EnableScheduling 开启计划任务的支持</li>
<li>@EnabelWebMvc开启Web MVC的配置支持</li>
<li>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</li>
<li>@EnableJpaRepositories 开启对SpringDataJPA Repository的支持</li>
<li>@EnableTransactionManagement 开启注解式事务的支持</li>
<li>@EnableCaching 开启注解式的缓存支持</li>
<li>… …</li>
</ul>
</li>
<li>所有的@Enable*注解都有一个@Import注解，@Import是用来导入配置类的，自动开启的实现是导入了一些自动配置的Bean，导入的配置方式主要分为三种类型：<ol>
<li><strong>直接导入配置类</strong>，比如@Import(SchedulingConfiguration.class),直接导入了SchedulingConfiguration，这个类注解了@Configuration，且注册了一个scheduledAnnotationProcessor的Bean；</li>
<li><strong>依据条件选择配置类</strong>，比如@Import(AsyncConfigurationSelector.class),AsyncConfigurationSelector通过条件来选择需要导入的配置类，根接口为ImportSelector，需要重写selectImports方法，在此方法内进行事件条件判断；</li>
<li><strong>动态注册Bean</strong>，比如@Import(AspectJAutoProxyRegistrar.class),AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，其作用是在运行时自动添加Bean到已有的配置类，通过重写方法registerBeanDefinitions来实现；</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里所谓的实战，实际上还是功能上的了解，并不包含实际的项目开发，但是学完这部分对于Spring Boot的理解大有裨益，每项技术都有自己的发展的过程，这里的内容不是所有的基础，还需要深入的更多，接下来也会陆续介绍，但是这里体现的有一种思想，就是这项技术是为了解决什么痛点而存在的，站在当时发展这项技术的立场来看待这项技术，就会发现当时产生这种技术的实践者的思想有多先进，思想的传承真的是非常的重要！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 数据持久化</title>
    <url>/2020/05/22/Spring-Boot-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java持久层框架访问数据库的方式大致分为两种：一种以 SQL 核心，封装一定程度的 JDBC 操作，比如： MyBatis；另一种是以 Java 实体类为核心，将实体类的和数据库表之间建立映射关系，也就是ORM框架干的事，比如Hibernate、Spring Data JPA！这篇文章主要介绍Spring Data JPA的种种（遇到的坑，还是自己不太懂Spring框架导致的）！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><ol>
<li><p>不同的数据库厂商都有自己的实现类，后来统一规范也就有了数据库驱动，Java在操作数据库的时候，底层使用的其实是JDBC，JDBC是一组操作不同数据库的规范；</p>
</li>
<li><p><strong>JPA（Java Persistence API，Java持久层API）是Sun公司在JavaEE 5中提出的Java持久化规范</strong>；</p>
</li>
<li><p>JPA吸取了目前Java持久化技术的优点，旨在规范、简化Java对象的持久化工作，很多ORM框架都是实现了JPA的规范，如：Hibernate、EclipseLink；</p>
</li>
<li><p>注意：JPA只是统一了Java应用程序访问ORM框架的规范！</p>
</li>
<li><p>ORM（Object Relational Mapping）对象关系映射，在操作数据库之前，先把数据表与实体类关联起来；只要有一套程序能够建立对象和数据库的关联，操作对象就可以直接操作数据库数据，就可以说这套程序实现了ORM对象关系映射；<strong>ORM是一个实现使用对象操作数据库的设计思想！！！</strong></p>
</li>
<li><p>常见的ORM规范：Mybatis、Hibernate、JPA</p>
</li>
<li><p>JPA规范：</p>
<ul>
<li>ORM（Object Relational Mapping）映射元数据：JPA支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中</li>
<li>JPA 的API：用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的事情，开发人员不用再写SQL了</li>
<li>JPQL查询语言：通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合</li>
</ul>
</li>
<li><p><strong>JPA是ORM的一套标准，既然JPA为ORM而生，那么JPA的作用就是实现使用对象操作数据库，不用写SQL！</strong>（真的太爽了）编写的代码就可以一套代码兼容多种数据库！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d1ae2c30ef5be40eea5c96b6a638984d-40083" alt="JPA规范和ORM框架之间的关系"></p>
</li>
</ol>
<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><ol>
<li><p>Hibernate是Java中的对象关系映射解决方案，即它是符合JPA规范的，是一个ORM框架；对象关系映射或ORM框架是将应用程序数据模型对象映射到关系数据库表的技术！</p>
</li>
<li><p>Hibernate 不仅关注于从 Java 类到数据库表的映射，也有 Java 数据类型到 SQL 数据类型的映射；</p>
</li>
<li><p>JPA和Hibernate的关系：</p>
<ol>
<li>JPA是一个规范，而不是框架</li>
<li>Hibernate是JPA的一种实现，是一个框架</li>
</ol>
</li>
<li><p>Hibernate对JDBC访问数据库的代码做了轻量级封装，大大简化了数据访问层繁琐的重复性代码，并且减少了内存消耗，加快了运行效率；</p>
</li>
<li><p>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现，很大程度的简化了DAO（Data Access Object，数据访问对象）层编码工作；</p>
</li>
<li><p>Hibernate的性能非常好，映射的灵活性很出色，支持很多关系型数据库，从一对一到多对多的各种复杂关系；</p>
</li>
<li><p>可扩展性强，由于源代码的开源以及API的开放，当本身功能不够用时，可以自行编码进行扩展；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/65b0f8016fa865476ce9f5563ed92f95-12771" alt=""></p>
</li>
</ol>
<h3 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h3><ol>
<li><p>Spring Data是Spring 社区的一个子项目，主要用于简化数据（关系型&amp;非关系型）访问，其主要目标是使得数据库的访问变得方便快捷；</p>
</li>
<li><p>Spring Data提供了很多模板：</p>
<ul>
<li>Spring Data Elasticsearch</li>
<li>Spring Data MongoDB</li>
<li>Spring Data Redis</li>
<li>Spring Data Solr</li>
</ul>
</li>
<li><p>Spring Data JPA是在实现了JPA规范的基础上封装的一套 JPA 应用框架，虽然ORM框架都实现了JPA规范，但是在不同的ORM框架之间切换仍然需要编写不同的代码，而使用Spring Data JPA能够方便大家在不同的ORM框架之间进行切换而不需要更改代码；</p>
</li>
<li><p>Hibernate其实是JPA的一种实现，而Spring Data JPA是一个JPA数据访问抽象，只是一个抽象层，主要用于减少为各种持久层存储实现数据访问层所需的样板代码量，<strong>Spring Data JPA底层就是使用的 Hibernate实现！</strong></p>
</li>
<li><p>JPA接口命名规则：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1b0cf7fc4248ba22c8062628b8792b22-69598" alt="接口定义命名规则"></p>
</li>
<li><p>Spring Data JPA和JPA和ORM之间的关系：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cc7344dd34c61ee78c992fcb59cbf700-42822" alt=""></p>
</li>
</ol>
<h2 id="JPA注解"><a href="#JPA注解" class="headerlink" title="JPA注解"></a>JPA注解</h2><ol>
<li>@Entity声明该实体类是一个JPA标准的实体类</li>
<li>@Table指定实体类关联的表，注意如果不写表名，默认使用类名对应表名</li>
<li>@Column指定实体类属性对应的表字段，如果属性和字段一致，可以不写</li>
<li>@Id声明属性是一个OID，对应的一定是数据库的主键字段</li>
<li>@GenerateValue声明属性（Object ID）的主键生成策略</li>
<li>@SequenceGenerate使用SEQUENCE策略时，用于设置策略的参数</li>
<li>@TableGenerate使用TABLE主键策略时，用于设置策略的参数</li>
<li>@JoinTable关联查询时，表与表是多对多的关系时，指定多对多关联表中间表的参数</li>
<li>@JoinColumn关联查询时，表与表是一对一、一对多、多对一以及多对多的关系时，声明表关联的外键字段作为连接表的条件。必须配合关联表的注解一起使用&lt;key&gt;</li>
<li>@OneToMany关联表注解，表示对应的实体和本类是一对多的关系</li>
<li>@ManyToOne关联表注解，表示对应的实体和本类是多对一的关系</li>
<li>@ManyToMany关联表注解，表示对应的实体和本类是多对多的关系</li>
<li>@OneToOne关联表注解，表示对应的实体和本类是一对一的关系</li>
</ol>
<h2 id="JPA常用API说明"><a href="#JPA常用API说明" class="headerlink" title="JPA常用API说明"></a>JPA常用API说明</h2><ol>
<li>Persistence用于读取配置文件，获得实体管理工厂</li>
<li>EntityManagerFactory用于管理数据库的连接，获得操作对象实体管理类</li>
<li>EntityManager实体管理类，用于操作数据库表，操作对象</li>
<li>EntityTransaction用于管理事务。开始，提交，回滚</li>
<li>TypeQuery用于操作JPQL的查询的</li>
<li>Query用于操作JPQL的查询接口，执行没有返回数据的JPQL（增删改）</li>
<li>CriteriaBuilder用户使用标准查询接口 Criteria查询接口</li>
</ol>
<h1 id="实战（多数据源）"><a href="#实战（多数据源）" class="headerlink" title="实战（多数据源）"></a>实战（多数据源）</h1><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--**** lombok ****--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">primary:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">helloworld</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/carddb?useUnicode=true&amp;characterEncoding=UTF-8&amp;useOldAliasMetadataBehavior=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="comment">#   数据源其他配置</span></span><br><span class="line">      <span class="attr">dbType:</span> <span class="string">mysql</span>   <span class="comment"># 指定数据库类型 mysql</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span>  <span class="comment"># 启动初始化连接数量</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span>      <span class="comment"># 最小空闲连接</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span>   <span class="comment"># 最大连接数量（包含使用中的和空闲的）</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>  <span class="comment"># 最大连接等待时间 ，超出时间报错</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment"># 设置执行一次连接回收器的时间</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span>   <span class="comment"># 设置时间： 该时间内没有任何操作的空闲连接会被回收</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span>         <span class="comment"># 验证连接有效性的sql</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span>             <span class="comment"># 空闲时校验</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span>  <span class="comment"># 使用中是否校验有效性</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span>  <span class="comment"># 归还连接池时是否校验</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span>  <span class="comment"># mysql 不推荐打开预处理连接池</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>  <span class="comment">#设置过滤器 stat用于接收状态，wall防止sql注入，logback说明使用logback进行日志输出</span></span><br><span class="line">      <span class="attr">userGlobalataSourceStat:</span> <span class="literal">true</span>  <span class="comment"># 统计所有数据源状态</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergSql=true;druid.stat.slowSqlMillis=500</span>  <span class="comment"># sql合并统计 设置慢sql时间为500，超过500 会有记录提示</span></span><br><span class="line">    <span class="attr">second:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">helloworld</span></span><br><span class="line">      <span class="attr">url:</span>  <span class="string">jdbc:mysql://localhost:3306/memberdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;useOldAliasMetadataBehavior=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="comment">#   数据源其他配置</span></span><br><span class="line">      <span class="attr">dbType:</span> <span class="string">mysql</span>   <span class="comment"># 指定数据库类型 mysql</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span>  <span class="comment"># 启动初始化连接数量</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span>      <span class="comment"># 最小空闲连接</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span>   <span class="comment"># 最大连接数量（包含使用中的和空闲的）</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>  <span class="comment"># 最大连接等待时间 ，超出时间报错</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment"># 设置执行一次连接回收器的时间</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span>   <span class="comment"># 设置时间： 该时间内没有任何操作的空闲连接会被回收</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span>         <span class="comment"># 验证连接有效性的sql</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span>             <span class="comment"># 空闲时校验</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span>  <span class="comment"># 使用中是否校验有效性</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span>  <span class="comment"># 归还连接池时是否校验</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span>  <span class="comment"># mysql 不推荐打开预处理连接池</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>  <span class="comment">#设置过滤器 stat用于接收状态，wall防止sql注入，logback说明使用logback进行日志输出</span></span><br><span class="line">      <span class="attr">userGlobalataSourceStat:</span> <span class="literal">true</span>  <span class="comment"># 统计所有数据源状态</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergSql=true;druid.stat.slowSqlMillis=500</span>  <span class="comment"># sql合并统计 设置慢sql时间为500，超过500 会有记录提示</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">validate</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="创建主数据源"><a href="#创建主数据源" class="headerlink" title="创建主数据源"></a>创建主数据源</h2><ol>
<li><p>创建一个主配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        entityManagerFactoryRef=<span class="string">"entityManagerFactoryPrimary"</span>,</span><br><span class="line">        transactionManagerRef=<span class="string">"transactionManagerPrimary"</span>,</span><br><span class="line">        basePackages= &#123; <span class="string">"com.example.mdata.demo.repository"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource.primary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">PrimaryDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().type(DruidDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"primaryDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource primaryDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(primaryDataSource)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .packages(<span class="string">"com.example.mdata.demo.entity"</span>)</span><br><span class="line">                .persistenceUnit(<span class="string">"primaryPersistenceUnit"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; jpaProperties = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.hbm2ddl.auto"</span>, <span class="string">"update"</span>);</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.show_sql"</span>, env.getProperty(<span class="string">"spring.jpa.show-sql"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.format_sql"</span>, env.getProperty(<span class="string">"spring.jpa.hibernate.format_sql"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.dialect"</span>, env.getProperty(<span class="string">"spring.jpa.hibernate.primary-dialect"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"org.springframework.orm.hibernate5.SpringSessionContext"</span>);</span><br><span class="line">        <span class="keyword">return</span> jpaProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManagerPrimary"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意导入的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键注解说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        entityManagerFactoryRef=<span class="string">"entityManagerFactoryPrimary"</span>,</span><br><span class="line">        transactionManagerRef=<span class="string">"transactionManagerPrimary"</span>,</span><br><span class="line">        basePackages= &#123; <span class="string">"com.example.mdata.demo.repository"</span> &#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">entityManagerFactoryRef="entityManagerFactoryPrimary" 要和工厂类的注解 <span class="doctag">@Bean</span>(name = "entityManagerFactoryPrimary")对应，不然没法找到对应的LocalContainerEntityManagerFactoryBean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">transactionManagerRef="transactionManagerPrimary"必须和<span class="doctag">@Bean</span>(name = "transactionManagerPrimary")对应，这样才能找到PlatformTransactionManager</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> basePackages= &#123; "com.example.mdata.demo.repository" &#125;用来搜索repository，必须和想要匹配的repository路径对应</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>@ConfigurationProperties(prefix=”spring.datasource.primary”)用来指明全局配置的前缀，一定要和配置文件相对应；</p>
</li>
<li><p>实体类的映射扫描路径也一定要配置对（.packages(“com.example.mdata.demo.entity”)）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line">   <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryPrimary"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> builder</span><br><span class="line">               .dataSource(primaryDataSource)</span><br><span class="line">               .properties(getVendorProperties())</span><br><span class="line">               .packages(<span class="string">"com.example.mdata.demo.entity"</span>)</span><br><span class="line">               .persistenceUnit(<span class="string">"primaryPersistenceUnit"</span>)</span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于主配置数据源，每个方法都要有@Primary；</p>
</li>
</ol>
<h2 id="第二个数据源的配置"><a href="#第二个数据源的配置" class="headerlink" title="第二个数据源的配置"></a>第二个数据源的配置</h2><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        <span class="comment">//实体管理</span></span><br><span class="line">        entityManagerFactoryRef=<span class="string">"entityManagerFactorySecond"</span>,</span><br><span class="line">        <span class="comment">//事务管理</span></span><br><span class="line">        transactionManagerRef=<span class="string">"transactionManagerSecond"</span>,</span><br><span class="line">        <span class="comment">//实体扫描,设置Repository所在位置</span></span><br><span class="line">        basePackages= &#123; <span class="string">"com.example.mdata.demo.repositorysecond"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"secondDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource.second"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondaryDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().type(DruidDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"secondDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource secondDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerSecond"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactorySecond(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactorySecond"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactorySecond</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(secondDataSource)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .packages(<span class="string">"com.example.mdata.demo.entity2"</span>)</span><br><span class="line">                .persistenceUnit(<span class="string">"secondPersistenceUnit"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; jpaProperties = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.hbm2ddl.auto"</span>, <span class="string">"update"</span>);</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.show_sql"</span>, env.getProperty(<span class="string">"spring.jpa.show-sql"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.dialect"</span>, env.getProperty(<span class="string">"spring.jpa.hibernate.Second-dialect"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.format_sql"</span>, env.getProperty(<span class="string">"spring.jpa.hibernate.format_sql"</span>));</span><br><span class="line">        jpaProperties.put(<span class="string">"hibernate.current_session_context_class"</span>, <span class="string">"org.springframework.orm.hibernate5.SpringSessionContext"</span>);</span><br><span class="line">        <span class="keyword">return</span> jpaProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManagerSecond"</span>)</span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">transactionManagerSecond</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactorySecond(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建映射表的类（主）"><a href="#创建映射表的类（主）" class="headerlink" title="创建映射表的类（主）"></a>创建映射表的类（主）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.FieldDefaults;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"primary2"</span>)</span><br><span class="line"><span class="meta">@FieldDefaults</span>(level = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">primary2</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String sex;</span><br><span class="line"></span><br><span class="line">    Date birth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建映射表的类（第二个数据源）"><a href="#创建映射表的类（第二个数据源）" class="headerlink" title="创建映射表的类（第二个数据源）"></a>创建映射表的类（第二个数据源）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.FieldDefaults;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_user2"</span>)</span><br><span class="line"><span class="meta">@FieldDefaults</span>(level = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="创建repository（主数据源）"><a href="#创建repository（主数据源）" class="headerlink" title="创建repository（主数据源）"></a>创建repository（主数据源）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserPrimaryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">primary2</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> List&lt;primary2&gt; <span class="title">findAllById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建repository（第二个）"><a href="#创建repository（第二个）" class="headerlink" title="创建repository（第二个）"></a>创建repository（第二个）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSecondRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">test</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> List&lt;test&gt; <span class="title">findAllById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建RestController对外访问接口"><a href="#创建RestController对外访问接口" class="headerlink" title="创建RestController对外访问接口"></a>创建RestController对外访问接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">primarycontroller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserPrimaryRepository userPrimaryRepository;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserSecondRepository userSecondRepository;</span><br><span class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;primary2&gt; <span class="title">girlList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userPrimaryRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/test2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;test&gt; <span class="title">sencondlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userSecondRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行代码测试"><a href="#运行代码测试" class="headerlink" title="运行代码测试"></a>运行代码测试</h2><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/24aeffa51723ff7c7600a6a146ab7bbb-53030" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3e6fd10cfa5af079754ee5654b1f9e56-43639" alt=""></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要记录的是JPA多数据源的配置，有一些坑，都填完了，参考这部分灵活使用就能配置不止于两个数据源了，还需要阅读源码才能深入理解这部分的原理，表面上就是对数据源进行区分，两份相同的流程，然后标记一个主数据源，其他的都大致类似！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot快速入门</title>
    <url>/2020/04/20/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring Boot让我们的Spring应用变的更轻量化。比如：你可以仅仅依靠一个Java类来运行一个Spring引用。你也可以打包你的应用为jar并通过使用java -jar来运行你的Spring Web应用。几乎可以在后端开发中都能看到SpringBoot的踪影，如果你说你搞后端开发用的java，然后不知道SpringBoot，你可能直接被pass掉了。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Spring-Boot核心功能"><a href="#Spring-Boot核心功能" class="headerlink" title="Spring Boot核心功能"></a>Spring Boot核心功能</h2><ol>
<li>独立运行的Spring项目：SpringBoot项目可以以jar包的形式独立运行</li>
<li>内嵌Servlet容器：可选择内嵌Tomcat、Jetty或者Undertow</li>
<li>提供starter简化Maven配置：提供了一系列的starter pom来简化Maven的依赖加载</li>
<li>自动配置Spring：实际开发中可能还需要自定义自动配置</li>
<li>准生产的应用监控：提供基于http、ssh、telnet对运行时的项目进行监控</li>
<li>减少配置过程</li>
</ol>
<h2 id="Spring-Boot优缺点"><a href="#Spring-Boot优缺点" class="headerlink" title="Spring Boot优缺点"></a>Spring Boot优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>为所有Spring开发者更快的入门，快速构建项目</li>
<li>开箱即用，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化Web项目，可独立运行，无需外部依赖Servlet容器</li>
<li>没有冗余代码生成和XML配置的要求</li>
<li>对主流开发框架的无配置集成</li>
<li>与云计算天然集成</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>书籍文档较少且不够深入</li>
<li>Spring框架的知识储备必不可少，入门快速，深入较难</li>
</ol>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ol>
<li>Java JDK版本: Java SE 11;</li>
<li>Maven版本：3.6.3;</li>
<li>IDE：Intellij IDEA 2019V2;</li>
</ol>
<h2 id="starter-pom（部分）"><a href="#starter-pom（部分）" class="headerlink" title="starter pom（部分）"></a>starter pom（部分）</h2><ol>
<li><p><strong>spring-boot-starter-parent：</strong>主要完成依赖管理；</p>
</li>
<li><p><strong>spring-boot-starter-web：</strong>spring web核心组件；</p>
</li>
<li><p><strong>spring-boot-maven-plugin：</strong>打包核心组件。</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b066b8a33ef78964596e4fb5105b1d6e-103366" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cdbf0050c941aa9936aa0d2bf2450dfd-402594" alt=""></p>
</li>
<li><p>第三方starter pom：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/181a96330ca7ece8d8c4cef251fe1b82-164356" alt=""></p>
</li>
</ol>
<h2 id="SpringWeb静态资源访问"><a href="#SpringWeb静态资源访问" class="headerlink" title="SpringWeb静态资源访问"></a>SpringWeb静态资源访问</h2><ol>
<li>Spring Boot默认提供静态资源目录位置需置于classpath下，目录名需符合如下规则：</li>
</ol>
<ul>
<li>/static</li>
<li>/public</li>
<li>/resources</li>
<li>/META-INF/resources</li>
</ul>
<ol start="2">
<li>放入成功的话，可以直接对应网址加上/资源文件名访问对应的内容；</li>
<li>在<strong>/scr/main/resources/public/error文件夹</strong>下创建对应得error页就可以在出现相应的错误的时候直接跳转到该页面。</li>
</ol>
<h2 id="全局捕获异常"><a href="#全局捕获异常" class="headerlink" title="全局捕获异常"></a>全局捕获异常</h2><ol>
<li>@ExceptionHandler 表示拦截异常：<ul>
<li>@ControllerAdvice 是 controller 的一个辅助类；</li>
<li>@ControllerAdvice 可以指定扫描范围；</li>
<li>@ControllerAdvice 约定了几种可行的返回值，如果是直接返回 model 类的话，需要使用 @ResponseBody 进行 json 转换：<ul>
<li>返回 String，表示跳到某个 view</li>
<li>返回 modelAndView</li>
<li>返回 model + @ResponseBody</li>
</ul>
</li>
</ul>
</li>
<li>样例代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">exceptionHandler</span>() </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		map.put(<span class="string">"errorCode"</span>, <span class="string">"101"</span>);</span><br><span class="line">		map.put(<span class="string">"errorMsg"</span>, <span class="string">"系統错误!"</span>);</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><ol>
<li>在动态HTML实现上Spring Boot依然可以完美胜任，并且提供了多种模板引擎的默认配置支持，所以在推荐的模板引擎下，我们可以很快的上手开发动态网站。</li>
<li>常见的模板引擎有：</li>
</ol>
<ul>
<li>Thymeleaf</li>
<li>FreeMarker</li>
<li>Velocity</li>
<li>Groovy</li>
<li>Mustache</li>
</ul>
<ol start="3">
<li>Spring Boot建议使用这些模板引擎，避免使用JSP；</li>
<li>当使用上述模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates，当然也可以修改这个默认路径。</li>
<li>注意一般采用前后端分离，不仅可以加速后端的处理速度，而且前端由前端人员开发可以加速整个项目的开发进度。</li>
<li><strong>创建SpringBoot整合JSP，一定要为war类型，否则会找不到页面。</strong></li>
</ol>
<h2 id="整合多数据源"><a href="#整合多数据源" class="headerlink" title="整合多数据源"></a>整合多数据源</h2><ol>
<li>配置文件写多个，然后分包就可以了；</li>
<li>注意每个配置类加上注解：@Primary，@ConfigurationProperties(prefix =”spring.datasource.test1”)</li>
<li>加上@Transactional就可以进行事务管理；</li>
<li>Spring Data为我们使用统一的API来对上述的数据存储技术进行数据访问操作提供了支持,这些数据访问是通过Spring Data Commons项目来实现的，让我们在使用关系型或者非关系型数据访问技术时都使用基于Spring的统一标准，包含了CRUD、查询、排序和分页的相关操作；</li>
<li>Spring Data Repository抽象是一个非常重要的概念,可以极大减少数据访问层的代码；</li>
</ol>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ol>
<li><p>Spring  Boot支持Java Util Logging、Log4J、Log4J2和Logback作为日志框架，无论使用哪种日志框架，都为当前使用日志框架的控制台输出以及文件输出做好了配置，默认使用Logback作为日志框架；</p>
</li>
<li><p>配置日志文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.file</span>=<span class="string">/mylog/log.log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置日志级别：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.org.springframework.web</span> = <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a>Profile配置</h2><ol>
<li>Profile是Spring Boot用来针对不同的环境对不同的配置提供支持的,全局Profile配置使用application-{profile}.properties（例如application-prod.properties）</li>
<li>通过在application.properties中设置spring.profiles.active=prod来指定活动的Profile</li>
<li>建议使用yml进行Profile文件的配置；</li>
</ol>
<h2 id="应用监控"><a href="#应用监控" class="headerlink" title="应用监控"></a>应用监控</h2><ol>
<li><p>Spring Boot提供了运行时的应用监控和管理的功能，可以通过http、JMX<del>、ssh</del>协议来进行操作，可以自动获得审计、健康以及指标信息；</p>
</li>
<li><p>Spring Boot提供了监控和管理端点：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/80882a10784fc3e30a3f046c4df6155e-222856" alt=""></p>
</li>
<li><p>要想在项目中开启http监控，需要添加spring-boot-starter-actuator，添加好的项目可以重新构建，然后就能访问actuator端点来访问，监控和管理端点访问对应的端点名就可以了；</p>
</li>
<li><p>可以定制端点，一般通过endpoints+端点名+属性名来设置，间隔使用”.”</p>
<ol>
<li>修改端点id：endpoints.beans.id=mybeans</li>
<li>开启端点：endpoints.shutdown.enabled=true</li>
<li>关闭端点：endpoints.shutdown.enabled=false</li>
<li>开启部分端点，可以先关闭所有端点，然后再开启所需端点，endpoints.enabled=false</li>
<li>定制端点访问路径：management.context-path=/manage</li>
<li>定制端点的访问端口：management.port=8081</li>
<li>关闭http端点：management.port=-1</li>
</ol>
</li>
<li><p>Health信息都是从ApplicationContext中所有的HealthIndicator的Bean中收集的,下面显示的是部分的HealthIndicator</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/dbaf759cc264aeb22ef41f509f1bb241-152584" alt=""></p>
</li>
<li><p>JMX是Java内置的对应用进行监控和管理的工具，通过控制台命令jconsole来实现JMX监控；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a5628e51d5b513a1b86bd3c92b7b3434-178293" alt=""></p>
</li>
<li><p><del>可以使用spring-boot-starter-remote-shell来开启SSH监控和管理端点；</del></p>
</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li>单元测试能够对当前开发的类和方法进行测试，集成测试则可以验证系统各部分是否能正常协同工作；</li>
<li>Spring通过SpringTestContextFramework对集成测试提供顶级支持，它不依赖于特定的测试框架，可以使用Junit，也可以使用TestNG；</li>
<li>基于Maven构建的项目结构默认有关于测试的目录：src/test/java（测试代码）、src/test/resources（测试资源）；</li>
<li>Spring提供了一个SpringJUnit4ClassRunner类，提供了Spring TestContext Framework的功能，通过@ContextConfiguration来配置ApplicationContext，通过@ActiveProfiles确定活动的profile；</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><p>Spring Boot提倡零配置，但是在实际项目中，可能有一些特殊要求必须使用xml配置，可以通过@ImportResource来加载xml配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(&#123;<span class="string">"classpath:some-context.xml"</span>,<span class="string">"classpath:another-context.xml"</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注入properties文件里的值：通过@PropertySource指明properties文件的位置，然后通过@Value注入值,在Spring Boot中只需在application.properties中定义属性，然后直接使用@Value注入即可；比如@Value(“${book.author}”);</p>
</li>
<li><p>在Spring Boot中可以使用@ConfigurationProperties注解为一个Bean注入application.properties中的一组属性，比如@ConfigurationProperties(prefix = “author” )；通过prefix属性指定properties的配置的前缀，通过locations指定properties文件的位置，比如@ConfigurationProperties(prefix = “author” ,locations = {“classpath:config/author.properties”})</p>
</li>
</ol>
<h1 id="SpringBoot核心"><a href="#SpringBoot核心" class="headerlink" title="SpringBoot核心"></a>SpringBoot核心</h1><h2 id="注解-SpringBootApplication"><a href="#注解-SpringBootApplication" class="headerlink" title="注解@SpringBootApplication"></a>注解@SpringBootApplication</h2><ol>
<li><p>@SpringBootApplication是SpringBoot的核心注解,是一个组合注解:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到SpringBootApplication注解主要组合了@Configuration、@EnableAutoConfiguration、@ComponentScan；若不使用@SpringBootApplication则可以直接在入口类上使用@Configuration、@EnableAutoConfiguration、@ComponentScan；</p>
</li>
<li><p>@EnableAutoConfiguration让SpringBoot根据类路径中的jar包依赖为当前项目进行自动配置；</p>
</li>
<li><p>Spring Boot会自动扫描@SpringBootApplication所在类的同级包里的Bean；</p>
</li>
<li><p>要想关闭特定的自动配置可以使用@SpringBootApplication注解的exclude参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a>外部配置</h2><ol>
<li><p>SpringBoot可以是基于jar包运行的，打包成jar包之后就可以直接通过命令运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以直接通过命令修改端口号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar xx.jar --server.port=<span class="number">8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令可以添加参数–debug参数，能看到调试信息!</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分是看了蚂蚁课堂的视频进行的总结，不完全，还有一些redis等需要先学习redis等的基础知识之后才能深入学习，还有其他的视频教程也在不断地加深我对SpringBoot的理解，合适的时候，可以看SpringBoot源码深入掌握SpringBoot！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Cloud Quick Start</title>
    <url>/2020/05/21/Spring-Cloud-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="通用基础知识"><a href="#通用基础知识" class="headerlink" title="通用基础知识"></a>通用基础知识</h2><ol>
<li><p><strong>一致性</strong>实际上就是围绕着“看见”来的。谁能看见？能否看见？什么时候看见？以卖家上架商品为例，买家看到商品的更新情况将一致性进行分类如下：</p>
<ul>
<li>假设卖家更新成功之后买家立马就能看到卖家的更新，称为<strong>强一致性</strong></li>
<li>假设卖家更新成功后买家不能看到卖家更新的内容，称为<strong>弱一致性</strong></li>
<li>假设卖家更新成功后，买家经过一段时间最终能看到卖家的更新，称为<strong>最终一致性</strong></li>
</ul>
</li>
<li><p>解决一致性问题的方案：</p>
<ul>
<li><strong>查询重复补偿</strong>，对于分布式应用中不确定的情况，先使用查询接口查询到当前状态，如果当前状态不一致则采用补偿接口对状态进行重试推进，或者回滚接口对业务做回滚。典型的场景如银行跟支付宝之间的交互，支付宝发送一个转账请求到银行，如一直未收到响应，则可以通过银行的查询接口查询该笔交易的状态，如该笔交易对方未收到，则采取补偿的模式进行推送</li>
<li><strong>定时任务推送</strong>，对于上面的情况，有可能一次推送搞不定，于是需要2次，3次推送… …支付宝内最初掉单率很高，全靠后续不断的定时任务推送增加成功率</li>
<li><strong>TCC(Try Confirm Cancel)</strong>，实际上是两阶段协议，第二阶段的可以实现提交操作或是逆操作</li>
</ul>
</li>
<li><p>CAP原则：CAP在分布式系统中主要指的是一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）</p>
<ul>
<li>一致性，指的就是强一致性</li>
<li>可用性，系统提供的服务一直处于可用状态，用户的操作请求在指定的响应时间内响应请求，超过时间范围，认为系统不可用</li>
<li>分区容错性，分布式系统在遇到任何网络分区故障的时候，仍需要能够保证对外提供一致性和可用性服务，除非是整个网络都发生故障</li>
</ul>
</li>
<li><p>在一个分布式系统中不可能同时满足一致性、可用性、分区容错性，最多满足两个，对于分布式互联网应用而言，必须保证P，所以要么是CP，要么是AP；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fa7bac94fbd9eb9c21747bf0811fe366-9028" alt="CAP原则"></p>
</li>
</ol>
<h2 id="微服务基础知识"><a href="#微服务基础知识" class="headerlink" title="微服务基础知识"></a>微服务基础知识</h2><ol>
<li>服务治理是微服务架构中最为核心和基础的模块，主要用来实现各个微服务实例的自动化注册和发现：<ul>
<li>服务注册：每个服务单元向注册中心登记自己提供的服务，包括服务的主机与端口号、服务版本号、通讯协议等一些附加信息。注册中心按照服务名分类组织服务清单，同时还需要以心跳检测的方式去监测清单中的服务是否可用，若服务不可用则需要从服务清单中剔除，以达到排除故障服务的效果</li>
<li>服务发现：服务间的调用通过服务名发起请求调用实现。服务调用方通过服务名从服务注册中心的服务清单中获取服务实例的列表清单，通过指定的负载均衡策略取出一个服务实例位置来进行服务调用</li>
</ul>
</li>
<li>Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分，基于 Netflix Eureka 做了二次封装。主要负责完成微服务架构中的服务治理功能；</li>
<li></li>
</ol>
<h2 id="Zookeeper基础知识"><a href="#Zookeeper基础知识" class="headerlink" title="Zookeeper基础知识"></a>Zookeeper基础知识</h2><ol>
<li><p>ZooKeeper: Because Coordinating Distributed Systems is a Zoo！</p>
</li>
<li><p>Zookeeper官方网址：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p>
</li>
<li><p>Zookeeper中的角色主要有三类，如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/81cb1ddd7ae9abdda6d7d6b1c1878b60-50519" alt="Zookeeper角色"></p>
</li>
<li><p>Zookeeper系统模型：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c6273dc64954ece8ac53c6cff2ffbbfa-24926" alt="系统模型"></p>
</li>
<li><p>设计目的：</p>
<ul>
<li><strong>最终一致性</strong>，client不论连接到哪个Server，展示给它都是同一个视图</li>
<li><strong>可靠性</strong>，具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受</li>
<li><strong>实时性</strong>，Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息</li>
<li><strong>等待无关（wait-free）</strong>，慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待</li>
<li><strong>原子性</strong>，更新只能成功或者失败，没有中间状态</li>
<li><strong>顺序性</strong>，包括全局有序和偏序两种</li>
</ul>
</li>
<li><p>Zookeeper的核心是原子广播，实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了；</p>
</li>
<li><p>Zookeeper的选举算法有两种：一种是基于basic paxos实现的，另外一种是基于fast paxos算法实现的。系统默认的选举算法为fast paxos；</p>
</li>
<li><p>Zookeeper的leader选举机制：</p>
<ol>
<li>Zookeeper的集群中只有超过半数以上的服务器启动，集群才能正常工作</li>
<li>在集群正常工作之前，myid小的服务器会给myid大的服务器进行投票，持续到集群正常工作，选举leader</li>
<li>选出leader之后，之前的服务器状态要由looking改为following，以后的服务器都是follower</li>
</ol>
</li>
<li><p>选举过程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0528b755274bf01af5d88cccd6acd4ed-111310" alt="选举机制"></p>
<ol>
<li>假设有5台服务器，组成了zookeeper集群，5台服务器的myid从1到5，而且它们都是最新启动的，没有历史数据，并且假设服务器启动从id1~5的顺序启动</li>
<li>因为一共有5台服务器，只有超过半数以上，也就是最少启动三台服务器，集群才能正常工作</li>
<li>leader挂掉之后，集群中其他follower会将状态由following变为looking，重新进入leader选举</li>
</ol>
</li>
<li><p>zookeeper的数据模型的结构和Unix文件系统很类似，整体上可以看做是一棵树，每个节点称作一个ZNode，每个ZNode都可以通过其路径唯一标识；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/97c67fb9b2b2e2db80f65d9ae3c93a7c-11460" alt="Zookeeper结构"></p>
</li>
<li><p>ZNode节点类型：</p>
<ul>
<li>持久化目录节点，客户端和zookeeper断开连接后，该节点依旧存在</li>
<li>持久化顺序编号目录节点，客户端和zookeeper断开连接后，该节点依旧存在，Zookeeper会给该节点按照顺序编号</li>
<li>临时目录节点，客户端和zookeeper断开连接后，该节点被删除</li>
<li>临时顺序编号目录节点，客户端和zookeeper断开连接后，该节点被删除，Zookeeper会给该节点按照顺序编号</li>
</ul>
</li>
</ol>
<h2 id="Zookeeper应用场景"><a href="#Zookeeper应用场景" class="headerlink" title="Zookeeper应用场景"></a>Zookeeper应用场景</h2><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><ol>
<li>在日常的业务开发过程中，通常需要将系统的一些通用的全局配置，例如机器列表配置，运行时开关配置，数据库配置信息等统一集中存储，让集群所有机器共享配置信息，系统在启动会首先从配置中心读取配置信息，进行初始化；</li>
<li>传统的实现方式将配置存储在本地文件和内存中，一旦机器规模更大，配置变更频繁的情况下，本地文件和内存方式的配置维护成本较高；</li>
<li>可以将配置信息存储在zookeeper中的一个节点中，同时向该节点注册一个数据节点变更的watcher监听，一旦节点数据发生变更，所有的订阅该节点的客户端都可以后去数据变更通知</li>
</ol>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol>
<li>建立services节点，并建立监听器监视servers子节点的状态（用于在服务器增添时及时同步当前集群中服务器列表）；</li>
<li>在每个服务器启动时，在services节点下建立具体服务器地址的子节点，并在对应的子节点下存入服务器的相关信息。这样，我们在zookeeper服务器上可以获取当前集群中的服务器列表及相关信息，可以自定义一个负载均衡算法，在每个请求过来的时候从zookeeper服务器中获取当前集群服务器列表，根据算法选出一个服务器来处理请求；</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e7b5f602e0b7f90cd9d6428b21bc46d0-28122" alt="负载均衡"></li>
</ol>
<h3 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h3><ol>
<li>命名服务是分布式系统中的基本功能之一。被命名的实体通常可以是集群中的机器、提供的服务地址或者远程对象，这些都可以称作名字。常见的就是一些分布式服务框架（RPC、RMI）中的服务地址列表，通过使用名称服务客户端可以获取资源的实体、服务地址和提供者信息。命名服务就是通过一个资源引用的方式来实现对资源的定位和使用；</li>
<li>在单库单表系统中可以通过自增的ID来标识每一条记录，但是随着规模变大分库分表很常见，那么自增ID有且仅能针对单一表生成ID，所以在这种情况下无法依靠这个来标识唯一ID；</li>
<li>在zookeeper中通过创建顺序节点就可以实现，所有客户端都会根据自己的任务类型来创建一个顺序节点，例如job-000001；</li>
<li>节点创建完毕后，create()接口会返回一个完成的节点名，例如：job-000002。拼接ype类型和完成节点名作为全局唯一的ID；</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b8f65ec1fa21d0bae2fdceea1c8bc76a-38302" alt="统一命名服务"></li>
</ol>
<h3 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h3><ol>
<li>域名配置：在分布式系统应用中，每一个应用都需要分配一个域名，日常开发中，往往使用本地HOST绑定域名解析，开发阶段可以随时修改域名和IP的映射，大大提高开发的调试效率。如果应用的机器规模达到一定程序后，需要频繁更新域名时，需要在规模的集群中变更，无法保证实时性；</li>
<li>在zookeeper上创建一个节点在进行域名配置；<ol>
<li>域名解析：应用解析的时候，首先从zookeeper域名节点中获取域名映射的IP和端口</li>
<li>域名变更：每个应用都会在对应的域名节点注册一个数据变更的watcher监听，一旦监听的域名节点数据变更，zookeeper会向所有订阅的客户端发送域名变更通知</li>
</ol>
</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/95ae55de070e8a5c8d97721b728f22e9-28726" alt="DNS服务"></li>
</ol>
<h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><ol>
<li>某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线；</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1839685de525052166ba6d4a9b8a78a9-53803" alt="集群管理"></li>
</ol>
<h1 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h1><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><ol>
<li><p><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>是Apache Hadoop的一个子项目，是一个树形的目录服务分布式组件，支持变更推送，非常适合作为分布式服务的注册中心，被大量用于生产环境中！</p>
</li>
<li><p>Zookeeper目标：解决分布式应用中经常遇到的一些数据管理问题，如统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等；</p>
</li>
<li><p>抽象：Zookeeper=文件系统+监听通知机制；</p>
</li>
<li><p>产生背景：最初其作为研发Hadoop时的副产品而出现！后来由于分布式系统中一致性处理较为困难，其他的分布式系统没有必要费劲重复造轮子，故随后的分布式系统中大量应用了zookeeper。后续的大部分分布式系统中大量应用了Zookeeper，以至于它成了各种分布式系统的基础组件；</p>
</li>
<li><p>应用场景：著名的hadoop、kafka、dubbo 都是基于zookeeper构建的；</p>
</li>
<li><p>解决的问题：保证在分布式环境下数据的最终一致性；</p>
</li>
<li><p>Zookeeper节点以及流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/486d8d458c7374c53b865491b592b090-31272" alt="Zookeeper节点图"></p>
<ul>
<li>服务提供者启动时，向Zookeeper注册自己的URL地址</li>
<li>服务消费者启动时，获取服务提供者的URL地址，并向Zookeeper注册自己的URL地址</li>
<li>监控中心启动时，订阅所有提供者和消费者URL地址</li>
</ul>
</li>
<li><p>SpringBoot添加Zookeeper操作依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意:Dubbo在2.7.x的版本中已经移除了zkclient的实现,如果要使用zkclient客户端,需要自行拓展</strong></p>
</li>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testZookeeper</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建Zookeeper的连接</span></span><br><span class="line">    ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"127.0.0.1:2181"</span>, <span class="number">2000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"触发了。。。。"</span> + event.getType() + <span class="string">"的事件"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    String path;</span><br><span class="line">    <span class="comment">//2. 创建父节点</span></span><br><span class="line">      path = zooKeeper.create(<span class="string">"/wander"</span>, <span class="string">"wander"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">      System.out.println(<span class="string">"path:"</span> + path);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3. 创建子节点</span></span><br><span class="line">    path = zooKeeper.create(<span class="string">"/wander/children"</span>, <span class="string">"children"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    System.out.println(<span class="string">"path:"</span> + path);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4. 获取节点中的值（父节点和子节点）</span></span><br><span class="line">    <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/wander"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; children = zooKeeper.getChildren(<span class="string">"/wander"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">        System.out.println(child);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5. 修改节点的值</span></span><br><span class="line">    Stat stat = zooKeeper.setData(<span class="string">"/wander"</span>, <span class="string">"wander520"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"exists :"</span>+stat);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6. 判断某个节点是否存在</span></span><br><span class="line">    Stat exists = zooKeeper.exists(<span class="string">"/wander"</span>, <span class="keyword">true</span>);</span><br><span class="line">    System.out.println(<span class="string">"exists :"</span>+exists);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//7. 删除节点</span></span><br><span class="line">    zooKeeper.delete(<span class="string">"/wander/children"</span>, -<span class="number">1</span>);</span><br><span class="line">    zooKeeper.delete(<span class="string">"/wander"</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">触发了。。。。None的事件</span><br><span class="line">path:/wander</span><br><span class="line">path:/wander/children</span><br><span class="line">wander</span><br><span class="line">children</span><br><span class="line">exists :30,32,1594104111802,1594104111825,1,1,0,0,9,1,31</span><br><span class="line"></span><br><span class="line">exists :30,32,1594104111802,1594104111825,1,1,0,0,9,1,31</span><br><span class="line"></span><br><span class="line">触发了。。。。NodeChildrenChanged的事件</span><br><span class="line">触发了。。。。NodeDeleted的事件</span><br></pre></td></tr></table></figure>
</li>
<li><p>Zookeeper客户端依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>zkclient是Datameer 开源的一个 Zookeeper 客户端实现</li>
<li>curator是 Netflix 开源的一个 Zookeeper 客户端实现</li>
</ul>
</li>
<li><p>想要使用Zookeeper必须搭建一个原生的Zookeeper服务器，可以使用Dockek来获取镜像然后使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取zookeeper镜像</span></span><br><span class="line">docker pull zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个服务的话暴露2181接口即可</span></span><br><span class="line">docker run -d -p 2181:2181 zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>分布式服务认知：对于一个服务框架，<strong>注册中心是其核心中的核心</strong>，虽然暂时挂掉并不会导致整个服务出问题，但是一旦挂掉，整体风险就很高！考虑一般情况，注册中心就是单台机器的时候，其实现很容易，所有机器运行后都去注册服务给它，并且所有调用方都跟它保持长连接，一旦服务有变，即通过长连接来通知到调用方。但是当服务集群规模扩大时，这事情就不简单了，单机保持连接数有限，而且容易故障</p>
</li>
<li><p>Zookeeper使用步骤（可以看Zookeeper节点图理解）：</p>
<ol>
<li>启动注册中心Zookeeper（单体或集群）</li>
<li>当服务提供者服务启动时，向Zookeeper注册一个节点</li>
<li>服务消费者则订阅其父节点的变化，诸如启动停止都能够通过节点创建删除得知，异常情况比如被调用方掉线也可以通过临时节点session 断开自动删除得知</li>
<li>服务消费方同时也会将自己订阅的服务以节点创建的方式放到Zookeeper</li>
<li>于是可以得到映射关系，诸如谁提供了服务，谁订阅了谁提供的服务，基于这层关系再做监控，就能轻易得知整个系统情况</li>
</ol>
</li>
<li><p>用法：</p>
<ul>
<li><strong>数据发布订阅</strong>，通过对节点管理做到发布以及事件监听做到订阅</li>
<li><strong>负载均衡</strong></li>
<li><strong>命名服务</strong>，把信息集中存储，并以树状管理，方便统一查阅</li>
<li><strong>分布式协调通知</strong></li>
<li><strong>分布式的并发等待</strong></li>
<li>… …</li>
</ul>
</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h2><h3 id="Zookeeper单体"><a href="#Zookeeper单体" class="headerlink" title="Zookeeper单体"></a>Zookeeper单体</h3><ol>
<li><p>Docker下载官方镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个Zookeeper实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name my_zookeeper -d zookeeper</span><br></pre></td></tr></table></figure>

<ul>
<li>会在后台运行一个 zookeeper 容器, 名字是 <strong>my_zookeeper</strong>，但是没有对外暴露端口</li>
</ul>
</li>
<li><p>查看日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f my_zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">2020-06-28 08:45:59,207 [myid:] - INFO  [main:QuorumPeerConfig@173] - Reading configuration from: /conf/zoo.cfg</span><br><span class="line">2020-06-28 08:45:59,215 [myid:] - INFO  [main:QuorumPeerConfig@450] - clientPort is not set</span><br><span class="line">2020-06-28 08:45:59,215 [myid:] - INFO  [main:QuorumPeerConfig@463] - secureClientPort is not set</span><br><span class="line">2020-06-28 08:45:59,215 [myid:] - INFO  [main:QuorumPeerConfig@479] - observerMasterPort is not set</span><br><span class="line">2020-06-28 08:45:59,218 [myid:] - INFO  [main:QuorumPeerConfig@496] - metricsProvider.className is org.apache.zookeeper.metrics.impl.DefaultMetricsProvider</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<ul>
<li>可以看到容器中使用/conf/zoo.cfg的配置文件</li>
</ul>
</li>
<li><p>使用 ZK 命令行客户端连接 Zookeeper：</p>
<ul>
<li>启动的那个 ZK 容器并没有绑定宿主机的端口, 因此我们不能直接访问它. 但是我们可以通过 Docker 的 link 机制来对这个 ZK 容器进行访问</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个 zookeeper 镜像, 并运行这个镜像内的 zkCli.sh 命令, 命令参数是 <span class="string">"-server zookeeper"</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>将我们先前启动的名为 my_zookeeper 的容器连接(link) 到我们新建的这个容器上, 并将其主机名命名为 <strong>zookeeper</strong></p>
</li>
<li><p>运行命令后就可以像正常使用 ZK 命令行客户端一样操作 ZK 服务了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">... ...</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">2020-06-28 09:14:40,394 [myid:zookeeper:2181] - INFO  [main-SendThread(zookeeper:2181):ClientCnxn$SendThread@1154] - Opening socket connection to server zookeeper/172.17.0.2:2181.</span><br><span class="line">2020-06-28 09:14:40,396 [myid:zookeeper:2181] - INFO  [main-SendThread(zookeeper:2181):ClientCnxn$SendThread@1156] - SASL config status: Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">JLine support is enabled</span><br><span class="line">2020-06-28 09:14:40,432 [myid:zookeeper:2181] - INFO  [main-SendThread(zookeeper:2181):ClientCnxn$SendThread@986] - Socket connection established, initiating session, client: /172.17.0.3:40248, server: zookeeper/172.17.0.2:2181</span><br><span class="line">2020-06-28 09:14:40,455 [myid:zookeeper:2181] - INFO  [main-SendThread(zookeeper:2181):ClientCnxn$SendThread@1420] - Session establishment complete on server zookeeper/172.17.0.2:2181, session id = 0x1001676aa8a0002, negotiated timeout = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: zookeeper(CONNECTED) 0]</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="Zookeeper集群-1"><a href="#Zookeeper集群-1" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h3><ol>
<li><p>docker-compose配置文件（docker-compose.yml）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2181:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line">            </span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2182:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2183:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在docker-compose.yml路径下输入如下命令启动集群：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">... ...</span><br><span class="line">zoo1    | 2020-06-28 09:28:57,389 [myid:1] - INFO  [QuorumPeer[myid=1](plain=disabled)(secure=disabled):CommitProcessor@476] - Configuring CommitProcessor with readBatchSize -1 commitBatchSize 1</span><br><span class="line">zoo2    | 2020-06-28 09:28:57,389 [myid:2] - INFO  [QuorumPeer[myid=2](plain=disabled)(secure=disabled):CommitProcessor@476] - Configuring CommitProcessor with readBatchSize -1 commitBatchSize 1</span><br><span class="line">zoo1    | 2020-06-28 09:28:57,389 [myid:1] - INFO  [QuorumPeer[myid=1](plain=disabled)(secure=disabled):CommitProcessor@438] - Configuring CommitProcessor with 2 worker threads.</span><br><span class="line">zoo2    | 2020-06-28 09:28:57,391 [myid:2] - INFO  [QuorumPeer[myid=2](plain=disabled)(secure=disabled):CommitProcessor@438] - Configuring CommitProcessor with 2 worker threads.</span><br><span class="line">zoo3    | 2020-06-28 09:28:57,393 [myid:3] - INFO  [QuorumPeer[myid=3](plain=disabled)(secure=disabled):QuorumPeer@863] - Peer state changed: leading - broadcast</span><br><span class="line">zoo1    | 2020-06-28 09:28:57,402 [myid:1] - INFO  [QuorumPeer[myid=1](plain=disabled)(secure=disabled):RequestThrottler@74] - zookeeper.request_throttler.shutdownTimeout = 10000</span><br><span class="line">zoo2    | 2020-06-28 09:28:57,407 [myid:2] - INFO  [QuorumPeer[myid=2](plain=disabled)(secure=disabled):RequestThrottler@74] - zookeeper.request_throttler.shutdownTimeout = 10000</span><br><span class="line">zoo1    | 2020-06-28 09:28:57,430 [myid:1] - INFO  [QuorumPeer[myid=1](plain=disabled)(secure=disabled):QuorumPeer@863] - Peer state changed: following - broadcast</span><br><span class="line">zoo2    | 2020-06-28 09:28:57,452 [myid:2] - INFO  [QuorumPeer[myid=2](plain=disabled)(secure=disabled):QuorumPeer@863] - Peer state changed: following - broadcast</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看集群运行状态（在docker-compose.yml路径下运行）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">Name              Command               State                          Ports</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">zoo1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class="line">zoo2   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class="line">zoo3   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>MacOS安装zookeeper：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地连接服务器集群：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkCli -server localhost:2181,localhost:2182,localhost:2183</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">Connecting to localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 0]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看Zookeeper节点模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it zoo1 /bin/bash</span><br><span class="line">cd bin</span><br><span class="line">./zkServer.sh  status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Zookeeper操作"><a href="#Zookeeper操作" class="headerlink" title="Zookeeper操作"></a>Zookeeper操作</h2><ol>
<li><p>连接Zookeeper集群：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkCli -server localhost:2181,localhost:2182,localhost:2183</span><br></pre></td></tr></table></figure>

<ul>
<li><p>连接成功输出信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Connecting to localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTING) 0]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 0]</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接失败输出信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Connecting to localhost:2181,localhost:2182,localhost:2183</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTING) 0]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>支持的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">	addauth scheme auth</span><br><span class="line">	close</span><br><span class="line">	config [-c] [-w] [-s]</span><br><span class="line">	connect host:port</span><br><span class="line">	create [-s] [-e] [-c] [-t ttl] path [data] [acl]</span><br><span class="line">	delete [-v version] path</span><br><span class="line">	deleteall path</span><br><span class="line">	delquota [-n|-b] path</span><br><span class="line">	get [-s] [-w] path</span><br><span class="line">	getAcl [-s] path</span><br><span class="line">	history</span><br><span class="line">	listquota path</span><br><span class="line">	ls [-s] [-w] [-R] path</span><br><span class="line">	ls2 path [watch]</span><br><span class="line">	printwatches on|off</span><br><span class="line">	quit</span><br><span class="line">	reconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]</span><br><span class="line">	redo cmdno</span><br><span class="line">	removewatches path [-c|-d|-a] [-l]</span><br><span class="line">	rmr path</span><br><span class="line">	set [-s] [-v version] path data</span><br><span class="line">	setAcl [-s] [-v version] [-R] path acl</span><br><span class="line">	setquota -n|-b val path</span><br><span class="line">	stat [-w] path</span><br><span class="line">	sync path</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看某个目录包含的所有文件——ls：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 9] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看某个目录包含的所有文件time、version等信息——ls -s：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 10] ls -s /</span><br><span class="line">[zookeeper]cZxid = 0x0</span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">pZxid = 0x0</span><br><span class="line">cversion = -1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">cZxid ：创建节点的id</span><br><span class="line">ctime ： 节点的创建时间</span><br><span class="line">mZxid ：修改节点的id</span><br><span class="line">mtime ：修改节点的时间</span><br><span class="line">pZxid ：子节点的id</span><br><span class="line">cversion : 子节点的版本</span><br><span class="line">dataVersion ： 当前节点数据的版本</span><br><span class="line">aclVersion ：权限的版本</span><br><span class="line">ephemeralOwner ：判断是否是临时节点</span><br><span class="line">dataLength ： 数据的长度</span><br><span class="line">numChildren ：子节点的数量</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建znode，并设置初始内容——create：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 11] create /test "hello"</span><br><span class="line">Created /test</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取znode的数据——get：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 13] get /test</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改znode内容——set：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 14] set /test "world"</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 15] get /test</span><br><span class="line">world</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除znode——delete：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 16] get /test</span><br><span class="line">world</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 17] delete /test</span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 18] get /test</span><br><span class="line">org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /test</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出客户端——quit：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 20] quit</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:Closed type:None path:null</span><br></pre></td></tr></table></figure>
</li>
<li><p>ACL权限控制：ZK的节点有5种操作权限：CREATE、READ、WRITE、DELETE、ADMIN 也就是 增、删、改、查、管理权限，这5种权限简写为crwda(即：每个单词的首字符缩写)；</p>
</li>
<li><p>身份的认证有4种方式：</p>
<ul>
<li>world——默认方式，相当于全世界都能访问</li>
<li>auth——代表已经认证通过的用户(cli中可以通过addauth digest user:pwd 来添加当前上下文中的授权用户)</li>
<li>digest——即用户名:密码这种方式认证，这也是业务系统中最常用的</li>
<li>ip——使用Ip地址认证</li>
</ul>
</li>
<li><p>权限操作（部分）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 10] getAcl /test</span><br><span class="line">'world,'anyone</span><br><span class="line">: cdrwa</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181,localhost:2182,localhost:2183(CONNECTED) 20] addauth digest test:test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建账户<span class="built_in">test</span>密码<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC Quick Start</title>
    <url>/2020/05/21/Spring-MVC-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MVC（Model View Controller，模型－视图－控制器）是一种软件设计典范,在软件开发中已经处于霸主地位很多年了，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。Spring MVC支持很多模板引擎，使我们可以简单地开发灵活且松耦合的Web项目！<strong><em>推荐书籍：《Java EE开发的颠覆者 Spring Boot 实战》·  汪云飞 著</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>三层架构：Presentation tier + Application tier + Data tier （展现层 + 应用层 + 数据访问层）</li>
<li>MVC只存在三层架构的展现层，M是数据模型，是包含数据的对象，在Spring MVC里有一个专门的类叫做Model，用来和V之间的数据交互、传值；V是视图页面，包含JSP、freeMarker、Velocity、Thymeleaf、Tile等；C是控制器，Spring MVC中使用@Controller注解的类；</li>
<li>三层架构是整个应用的架构，在项目中可能由Spring框架来负责管理，一般项目结构中都有Service层、Dao层分别对应着应用层和数据访问层；</li>
<li>Spring MVC 提供了一个DispatcherServlet来开发Web应用；</li>
</ol>
<h2 id="Spring-MVC常用注解"><a href="#Spring-MVC常用注解" class="headerlink" title="Spring MVC常用注解"></a>Spring MVC常用注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><ol>
<li>@Controller注解在类上，表明这个类是Spring MVC里的Controller，将其声明为Spring里的一个Bean，Dispatcher Servlet会自动扫描注解了此注解的类；</li>
<li>在声明普通Bean的时候，使用@Component、@Service、@Repository和@Controller是等同的，因为都组合了@Component元注解，但是声明Spring MVC控制器的时候，只能使用@Controller或者@RestController；</li>
</ol>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><ol>
<li>该注解是用来映射Web请求（访问路径和参数）、处理类和方法的；</li>
<li><strong>可以注解在类或者方法上，注解在方法上的@RequestMapping路径会继承注解在类上的路径；</strong></li>
<li>@RequestMapping支持Servlet的request和response作为参数，也支持对request和response的媒体类型进行配置；</li>
</ol>
<h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><ol>
<li>该注解支持将返回值放在response体内，而不是返回一个页面；</li>
<li>用此注解返回数据而不是页面；</li>
<li>此注解可以放置在返回值前或者方法上；</li>
</ol>
<h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><ol>
<li>该注解用来接收路径参数，放置在参数前；</li>
</ol>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><ol>
<li>该注解实际是组合了@Controller和@ResponseBody；</li>
<li>开发一个只和页面交互数据的控制的时候，就可以使用此注解，就不需要再加上@Controller和@ResponseBody两个注解了；</li>
</ol>
<h2 id="简单的练习"><a href="#简单的练习" class="headerlink" title="简单的练习"></a>简单的练习</h2><ol>
<li><p>创建一个对象，为后面的参数传递做准备：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoObj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoObj</span><span class="params">(Long id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意要添加public DemoObj()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAnnoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">index</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span>+ request.getRequestURL() + <span class="string">"can Access!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pathvar/&#123;str&#125;"</span>,produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">demoPathVar</span><span class="params">(@PathVariable String str,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span>+ request.getRequestURL()+ <span class="string">"can access ,str: "</span>+ str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/requestParam"</span>,produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">passRequestParam</span><span class="params">( Long id,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span>+ request.getRequestURL()+ <span class="string">"can access ,id: "</span>+ id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/requestObj"</span>,produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">passObj</span><span class="params">( DemoObj obj, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span>+ request.getRequestURL()+ <span class="string">"can access ,id: "</span>+ obj.getName()+obj.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/name1"</span>,<span class="string">"/name2"</span>&#125;,produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">testMore</span><span class="params">( DemoObj obj, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span>+ request.getRequestURL()+ <span class="string">"can access ,id: "</span>+ obj.getName()+obj.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RestController:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method= RequestMethod.POST</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/json"</span>,produces = &#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoObj <span class="title">getjson</span><span class="params">(DemoObj obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoObj(obj.getId()+<span class="number">1</span>,obj.getName()+<span class="string">"yy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建拦截器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">"startTime"</span>,startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,  ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime=(Long) request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        request.removeAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"本次处理的时间为： "</span>+ <span class="keyword">new</span> Long(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"handleTime"</span>,endTime-startTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册拦截器以及使能WebMVC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wander.mvclearn.mvclearn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InternalResourceViewResolver viewResolver=<span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/templates/"</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">        viewResolver.setViewClass(JstlView<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoInterceptor <span class="title">demoInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(demoInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<ol>
<li>访问<a href="http://localhost/rest/json?id=1&amp;name=hello" target="_blank" rel="noopener">http://localhost/rest/json?id=1&amp;name=hello</a></li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f0fd7c8e99f561f6976a560f6ed3724c-24867" alt=""></p>
</li>
</ol>
<h2 id="Spring-MVC配置"><a href="#Spring-MVC配置" class="headerlink" title="Spring MVC配置"></a>Spring MVC配置</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol>
<li><p>Spring MVC的定制配置需要实现WebMvcConfigurer接口，并在此类使用@EnableWebMvc注解来开启对Spring MVC的配置支持；</p>
</li>
<li><p>WebMvcConfigurer接口源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addReturnValueHandlers</span><span class="params">(List&lt;HandlerMethodReturnValueHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">extendHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> MessageCodesResolver <span class="title">getMessageCodesResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>addInterceptors在前面已经使用过了！addResourceHandlers可以实现资源的映射；通过实现 void addResourceHandlers(ResourceHandlerRegistry registry) 来进行资源映射！</p>
</li>
<li><p>拦截器（Interceptor）实现对每一个请求处理前后进行相关的业务处理，类似于Servlet的Filter；</p>
</li>
<li><p>configurePathMatch(PathMatchConfigurer configurer)用于路径参数匹配设置，比如可以接受”.”后面的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 下面的方法目前已经过时了</span></span><br><span class="line">    configurer.setUseSuffixPatternMatch(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security Quick Start</title>
    <url>/2020/05/21/Spring-Security-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在Web应用开发中，安全无疑是十分重要的，选择Spring Security来保护Web应用是一个非常明智的选择！Spring Security 是Spring项目中的一个安全模块，可以非常方便地与Spring项目无缝集成，特别是在SpringBoot项目中加入Spring Security更是十分简单。在实际开发中使用Spring Security非常有利于理解安全和认证！</p>
<p>一般来说，常见的安全管理技术栈的组合是：</p>
<ul>
<li>SSM + Shiro</li>
<li>Spring Boot/Spring Cloud + Spring Security</li>
<li><strong>注意，这只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的</strong></li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/51a583a85a0213a4df4c3283a590e786-205974" alt="Spring Security整体概览"></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Spring Security是专门针对基于Spring项目的安全框架，主要利用了依赖注入和AOP技术来实现安全的功能。安全框架有两个很重要的内容，即认证（Authentication）和授权（Authorization）：认证即确认用户是否可以访问当前系统；授权即确定用户在当前系统下所拥有的功能权限！</p>
</li>
<li><p>Spring Security的介绍非常注重版本，版本的不同会导致功能代码的实现上也会有些许的不同！</p>
</li>
<li><p>Spring Security核心功能：</p>
<ul>
<li>认证（你是谁）——对主体/用户身份的确认</li>
<li>授权（你能干什么）——控制不同的用户访问不同的权限</li>
<li>攻击防护（防止身份伪造）</li>
</ul>
</li>
<li><p>Spring Security在Spring Boot出现之前就已经发展多年了，但是使用的不多，安全管理领域一直都是Shiro的天下，但是SpringBoot出现之后，为其提供了自动化配置，可以零配使用Spring Security，这就使得使用SpringBoot或者Spring Cloud的开发人员也在逐渐使用</p>
</li>
<li><p>在Web开发过程中有一些比较常见的黑客攻击方式，比如：XSS(跨站脚本攻击)、CSRF（跨站请求伪造攻击）、SQL注入、命令行注入、DDoS攻击、DNS劫持等；</p>
</li>
<li><p>一般而言，用户可以分配多个角色，角色可以分配多个权限。在权限设计表的时候，一般设计5张表，分别为用户表、角色表、权限表、用户角色表、角色权限表。业内有时也会将这5张表称为经典的RBAC权限设计模型；</p>
</li>
<li><p>RBAC（Role-Based Access Control，基于角色的访问控制）中权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限，极大地简化了权限的管理！</p>
</li>
<li><p>Spring Security 支持两种不同的认证方式：</p>
<ul>
<li>可以通过 form 表单来认证</li>
<li>可以通过 HttpBasic 来认证</li>
</ul>
</li>
<li><p>在没有Spring Security的时候，我们直接访问REST APi可以得到结果，但是当我们的应用加入了Spring security之后，相当于加上了过滤器，其实Spring Security本身就是一个过滤器链，所有的请求在访问REST API时都要经过Spring Security的过滤器链，当返回应答的时候，也会走一遍这个过滤器链，然后返回给用户：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/20b27c6cca4200f3f8699e90ebb86861-185025" alt="SpringSecurity过滤器链"></p>
</li>
<li><p>官方网址：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener">https://spring.io/projects/spring-security</a></p>
</li>
<li><p>Spring Security官方文档：<a href="https://docs.spring.io/spring-security/site/docs/5.4.x-SNAPSHOT/reference/html5/" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/5.4.x-SNAPSHOT/reference/html5/</a></p>
</li>
<li><p>官方简易Web安全认证教程：<a href="https://spring.io/guides/gs/securing-web/" target="_blank" rel="noopener">https://spring.io/guides/gs/securing-web/</a></p>
</li>
<li><p>官方示例源码：<a href="https://github.com/spring-projects/spring-security" target="_blank" rel="noopener">https://github.com/spring-projects/spring-security</a></p>
</li>
</ol>
<h2 id="Spring-Security执行流程"><a href="#Spring-Security执行流程" class="headerlink" title="Spring Security执行流程"></a>Spring Security执行流程</h2><ol>
<li><p>客户端发起一个请求，进入 Security 过滤器链；</p>
</li>
<li><p>当到 LogoutFilter 的时候判断是否是登出URI，如果是登出URI则到 logoutHandler ，如果登出成功则到 logoutSuccessHandler 登出成功处理，如果登出失败则由 ExceptionTranslationFilter ，如果不是登出URI则直接进入下一个过滤器；</p>
</li>
<li><p>当到 UsernamePasswordAuthenticationFilter 的时候判断是否为登录URI，如果是，则进入该过滤器进行登录操作，如果登录失败则到 AuthenticationFailureHandler 登录失败处理器处理，如果登录成功则到 AuthenticationSuccessHandler 登录成功处理器处理，如果不是登录请求则不进入该过滤器；</p>
</li>
<li><p>当到 FilterSecurityInterceptor 的时候会拿到URI ，根据URI去找对应的鉴权管理器，鉴权管理器做鉴权工作，鉴权成功则到 Controller 层否则到 AccessDeniedHandler 鉴权失败处理器处理。</p>
</li>
<li><p>Spring Security执行流程图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1939ad2bff6a74086e5f13f7ebd1f7bc-120969" alt="Spring Security执行流程"></p>
</li>
</ol>
<h2 id="Spring-Security过滤器"><a href="#Spring-Security过滤器" class="headerlink" title="Spring Security过滤器"></a>Spring Security过滤器</h2><ol>
<li>WebAsyncManagerIntegrationFilter——将 Security 上下文与 Spring Web 中用于处理异步请求映射的 WebAsyncManager 进行集成；</li>
<li>SecurityContextPersistenceFilter——在每次请求处理之前将该请求相关的安全上下文信息加载到 SecurityContextHolder 中，然后在该次请求处理完成之后，将 SecurityContextHolder 中关于这次请求的信息存储到一个“仓储”中，然后将 SecurityContextHolder 中的信息清除，例如在Session中维护一个用户的安全信息就是这个过滤器处理的；</li>
<li>HeaderWriterFilter——用于将头信息加入响应中</li>
<li>CsrfFilter——用于处理跨站请求伪造；</li>
<li>LogoutFilter——用于处理退出登录；</li>
<li>UsernamePasswordAuthenticationFilter——用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自 /login 的请求。从表单中获取用户名和密码时，默认使用的表单 name 值为 username 和 password，这两个值可以通过设置这个过滤器的usernameParameter 和 passwordParameter 两个参数的值进行修改；</li>
<li>DefaultLoginPageGeneratingFilter——如果没有配置登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面；</li>
<li>BasicAuthenticationFilter——检测和处理 http basic 认证；</li>
<li>RequestCacheAwareFilter——用来处理请求的缓存；</li>
<li>SecurityContextHolderAwareRequestFilter——主要是包装请求对象request；</li>
<li>AnonymousAuthenticationFilter——检测 SecurityContextHolder 中是否存在 Authentication 对象，如果不存在为其提供一个匿名 Authentication；</li>
<li>SessionManagementFilter——管理 session 的过滤器；</li>
<li>ExceptionTranslationFilter——处理 AccessDeniedException 和 AuthenticationException 异常</li>
<li>FilterSecurityInterceptor——可以看做过滤器链的出口；</li>
<li>RememberMeAuthenticationFilter——当用户没有登录而直接访问资源时, 从 cookie 里找出用户的信息, 如果 Spring Security 能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启！</li>
</ol>
<h2 id="Spring-Security细节"><a href="#Spring-Security细节" class="headerlink" title="Spring Security细节"></a>Spring Security细节</h2><ol>
<li><p>Spring Security的基础对象有SecurityContextHolder，SecurityContext，Authentication</p>
<ul>
<li>SecurityContextHolder：存储当前的SecurityContext，即认证用户的上下文信息，内部使用ThreadLocal</li>
<li>SecurityContext：持有Authentication对象和其他可能需要的信息</li>
<li>UserDetails：从Authentication中获取的对象，代表当前用户的具体信息</li>
<li>UserDetailsService：获取UserDetails的逻辑，一般封装了查询用户的逻辑</li>
<li>GrantedAuthority：当前用户获取到的授权信息</li>
</ul>
</li>
<li><p>在应用中获取当前用户的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">String username;</span><br><span class="line"><span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span><br><span class="line">     username= ((UserDetails)principal).getUsername();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     username = principal.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ant Pattern语法，<strong>antMatcher使用的是ant风格的路径匹配模式</strong>，Apache Ant样式的路径有三种通配符匹配方法：</p>
<ul>
<li>?——匹配任何单字符</li>
<li>*——匹配0或者任意数量的字符，不包含”/“</li>
<li>**——匹配0或者更多的目录，包含”/“</li>
</ul>
</li>
<li><p>Ant 匹配案例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Path	              Description	</span><br><span class="line">/app/*.x	          匹配(Matches)所有在app路径下的.x文件	</span><br><span class="line">/app/p?ttern	      匹配(Matches) /app/pattern 和 /app/pXttern,但是不包括/app/pttern	</span><br><span class="line">/**/example     	  匹配(Matches) /app/example, /app/foo/example, 和 /example	</span><br><span class="line">/app/**/dir/file.  	匹配(Matches) /app/dir/file.jsp, /app/foo/dir/file.html,/app/foo/bar/dir/file.pdf, 和 /app/dir/file.java	</span><br><span class="line">/**/*.jsp	          匹配(Matches)任何的.jsp 文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>HttpSecurity 使用的是链式编程，其中 <code>http.xxxx.and.yyyyy</code> 这种写法和 <code>http.xxxx;http.yyyy</code> 写法意义一样；</p>
</li>
<li><p>第三方认证基本原理：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b4f75f73c741385ce32353ff5736d53a-45181" alt="第三方认证基本原理"></p>
</li>
</ol>
<h2 id="Security-扩展"><a href="#Security-扩展" class="headerlink" title="Security 扩展"></a>Security 扩展</h2><ol>
<li>Security 可扩展的内容有：<ul>
<li>鉴权失败处理器</li>
<li>验证器</li>
<li>登录成功处理器</li>
<li>投票器</li>
<li>自定义token处理过滤器</li>
<li>登出成功处理器</li>
<li>登录失败处理器</li>
<li>自定义 UsernamePasswordAuthenticationFilter</li>
</ul>
</li>
<li>Security 的处理器大部分都是重定向的，我们的项目如果是前后端分离的话，我们希望无论什么情况都返回 json ,那么就需要重写各个处理器了！</li>
<li>Security 鉴权失败默认跳转登录页面，可以实现 AccessDeniedHandler 接口，重写 handle() 方法来自定义处理逻辑；然后参考配置类说明将处理器加入到配置当中；</li>
<li>实现 AuthenticationProvider 接口来实现自己验证逻辑。需要注意的是在这个类里面就算你抛出异常，也不会中断验证流程，而是算你验证失败，只要有一个验证器验证成功，就算验证成功；</li>
<li>在 Security 中验证成功默认跳转到上一次请求页面或者路径为 “/“ 的页面，我们同样可以自定义：继承 SimpleUrlAuthenticationSuccessHandler 这个类或者实现 AuthenticationSuccessHandler 接口；</li>
<li>投票器可继承 WebExpressionVoter 或者实现 AccessDecisionVoter接口，WebExpressionVoter 是 Security 默认的投票器，投票器 vote 方法返回一个int值；-1代表反对，0代表弃权，1代表赞成；投票管理器收集投票结果，如果最终结果大于等于0则放行该请求；</li>
<li>自定义 token 处理器继承自 OncePerRequestFilter 或者 GenericFilterBean 或者 Filter 都可以，在这个处理器里面需要完成的逻辑是：获取请求里的 token，验证 token 是否合法然后填充 SecurityContextHolder；</li>
<li>登录失败默认跳转到登录页，我们同样可以自定义。继承 SimpleUrlAuthenticationFailureHandler 或者实现；</li>
<li>自定义UsernamePasswordAuthenticationFilter可以极大提高我们 Security的灵活性；</li>
</ol>
<h1 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h1><h2 id="没有安全的Web应用"><a href="#没有安全的Web应用" class="headerlink" title="没有安全的Web应用"></a>没有安全的Web应用</h2><ol>
<li><p>创建一个没有Spring Security的Web微服务，之前已经介绍过了如何创建，现在使用Thymeleaf来做安全示例；</p>
</li>
<li><p>创建两个模板：</p>
<ul>
<li><p>home.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/hello&#125;"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to see a greeting.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用废弃的MVC来设置视图控制器来暴露这些模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/home"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// addViewControllers()方法（覆盖WebMvcConfigurerAdapter中同名的方法）添加了四个视图控制器</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置配置文件application.properties文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置完成了不出任何意外的话就能访问了。</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/565f63b68417b1309314df717cdcd1ca-16472" alt="访问主页"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5c37880097e5c0711ddcab0e095bbdd5-7588" alt="访问hello页面"></p>
</li>
</ol>
<h2 id="快速集成Spring-Security"><a href="#快速集成Spring-Security" class="headerlink" title="快速集成Spring Security"></a>快速集成Spring Security</h2><ol>
<li><p>因为使用的是Maven进行依赖管理的，在pom.xml中添加Security依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安全配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/home"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/hello"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                <span class="comment">//.loginPage("/login")</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth</span><br><span class="line">                .inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder()).withUser(<span class="string">"user"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>WebSecurityConfig</code>类使用了<code>@EnableWebSecurity</code>注解 ，以启用Spring Security的Web安全支持，并提供Spring MVC集成</li>
<li><code>configure(HttpSecurity)</code>方法定义了哪些URL路径应该被保护，哪些不应该</li>
<li><code>configureGlobal(AuthenticationManagerBuilder)</code> 方法，它将单个用户设置在内存中</li>
</ul>
</li>
<li><p>如果不配置configureGlobal(AuthenticationManagerBuilder auth)，可以在配置文件中直接添加用户和密码以及对应的角色：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring.security.user.name=javaboy</span><br><span class="line">spring.security.user.password=123</span><br><span class="line">spring.security.user.roles=user</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置登录页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.error&#125;"</span>&gt;</span></span><br><span class="line">    Invalid username and password.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.logout&#125;"</span>&gt;</span></span><br><span class="line">    You have been logged out.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户账号 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户密码 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将安全配置的//.loginPage(“/login”)屏蔽去掉，重启应用：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/53a179c405ab8b42a192989110d25109-9563" alt="配置安全登录页效果"></p>
</li>
<li><p>修改hello模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>Hello [[$&#123;#httpServletRequest.remoteUser&#125;]]!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用Spring Security与<code>HttpServletRequest#getRemoteUser()</code>的集成来显示用户名</li>
<li>“登出”表单将POST请求提交到“/ logout”。 成功注销后，会将用户重定向到“/ login?logout”</li>
</ul>
</li>
<li><p>重启应用，查看hello页面：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/aca99b58ee812ceba9f5199905578418-9639" alt="hello新页面"></p>
</li>
<li><p>默认是屏蔽post等请求的，需要允许跨域请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在configure(HttpSecurity http)中添加</span></span><br><span class="line">http.csrf().disable(); <span class="comment">//允许post、delete</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>密码加密：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案1</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line"></span><br><span class="line">        UserDetails user = User</span><br><span class="line">                .withUsername(<span class="string">"user"</span>)</span><br><span class="line">                .password(encoder.encode(<span class="string">"123456"</span>))</span><br><span class="line">                .roles(<span class="string">"USER"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryUserDetailsManager(user);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 方案2</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth</span><br><span class="line">                .inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder()).withUser(<span class="string">"user"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BCryptPasswordEncoder相关知识：</p>
<ul>
<li>用户表的密码通常使用MD5等不可逆算法加密后存储，为防止彩虹表破解更会先使用一个特定的字符串（如域名）加密，然后再使用一个随机的salt（盐值）加密</li>
<li>特定字符串是程序代码中固定的，salt是每个密码单独随机，一般给用户表加一个字段单独存储，比较麻烦</li>
<li>BCrypt算法将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题</li>
</ul>
</li>
<li><p>设置拒绝时候的URL：</p>
<ol>
<li><p>修改configure(final HttpSecurity http)，添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  .and()</span><br><span class="line">  .exceptionHandling().accessDeniedPage(<span class="string">"403"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加403模板页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Access Denied<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>用户 [[$&#123;#httpServletRequest.remoteUser&#125;]]，你没有权限访问！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>MvcConfig中添加控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">"/403"</span>).setViewName(<span class="string">"403"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改账户角色，使得访问页面没有权限来验证是否配置成功，重启应用！</p>
</li>
<li><p><img src="" alt="修改拒绝页面效果图"></p>
</li>
</ol>
</li>
<li><p>设置登录请求的URL及其它信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//设置登陆请求的URL</span></span><br><span class="line">            .and().formLogin() <span class="comment">//表单登录</span></span><br><span class="line">            .loginProcessingUrl(LOGIN_URL) <span class="comment">//表单登录url</span></span><br><span class="line">            .defaultSuccessUrl(LOGIN_SUCCESS_URL) <span class="comment">//登录成功重定向地址</span></span><br><span class="line">            .usernameParameter(USER_NAME_PARAMETER) <span class="comment">// 修改html中的用户参数名</span></span><br><span class="line">            .passwordParameter(PASSWORD_PARAMETER); <span class="comment">// 修改html中的用户密码</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/home"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/hello"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .usernameParameter(<span class="string">"user"</span>)</span><br><span class="line">                .passwordParameter(<span class="string">"passwd"</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/"</span>,<span class="keyword">true</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().accessDeniedPage(<span class="string">"/403"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>开启（Remember-me）记住我功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">    ...</span><br><span class="line">    .and().remeberMe().tokenValiditySeconds(<span class="number">3600</span>).key(<span class="string">"key"</span>)</span><br><span class="line"><span class="comment">// 存储一个cookie 1小时过期，cookie 的名字叫做key</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要在登录页面里添加记住我复选框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"remeber-me"</span> <span class="attr">yupe</span>=<span class="string">"checkbox"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/030c3c170edcc09a9f8252159001f86d-35619" alt="记住我基本原理"></p>
</li>
</ul>
</li>
<li><p>设置登出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">//设置登出</span></span><br><span class="line">        .and().logout().logoutUrl(LOGOUT_URL)</span><br><span class="line">        .logoutSuccessUrl(LOGOUT_SUCCESS_URL)</span><br><span class="line">        .deleteCookies(<span class="string">"JSESSIONID"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置状态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">    .sessionManagement()</span><br><span class="line">    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br></pre></td></tr></table></figure>

<ul>
<li>ALWAYS——没有Session则创建</li>
<li>NEVER——如果有需要就创建（默认的）</li>
<li>IF_REQUIRED——如果有则使用Session，不会自己创建Session</li>
<li>STATELESS——不创建并且不使用Session</li>
</ul>
</li>
</ol>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><h3 id="注解-EnableWebSecurity"><a href="#注解-EnableWebSecurity" class="headerlink" title="注解 @EnableWebSecurity"></a>注解 @EnableWebSecurity</h3><ol>
<li>注解 WebSecurityConfigurer 类型的类，或者利用@EnableWebSecurity 注解继承 WebSecurityConfigurerAdapter的类，这样就构成了 Spring Security 的配置</li>
</ol>
<h3 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h3><ol>
<li>WebSecurityConfigurerAdapter 提供了一种便利的方式去创建 WebSecurityConfigurer的实例，只需要重写 WebSecurityConfigurerAdapter 的方法，即可配置拦截什么URL、设置什么权限等安全控制；</li>
<li>在样例中就是继承这个类，然后重写方法进行权限以及用户认证的配置；</li>
</ol>
<h3 id="UserDetails"><a href="#UserDetails" class="headerlink" title="UserDetails"></a>UserDetails</h3><ol>
<li><p>存储的是用户信息，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">	<span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>各个方法的含义</p>
<ul>
<li><code>getAuthorites</code>：获取用户权限，本质上是用户的角色信息。</li>
<li><code>getPassword</code>: 获取密码</li>
<li><code>getUserName</code>: 获取用户名。</li>
<li><code>isAccountNonExpired</code>: 账户是否过期</li>
<li><code>isAccountNonLocked</code>: 账户是否被锁定。</li>
<li><code>isCredentialsNonExpired</code>: 密码是否过期</li>
<li><code>isEnabled</code>: 账户是否可用</li>
</ul>
</li>
</ol>
<h2 id="SpringBoot网站https"><a href="#SpringBoot网站https" class="headerlink" title="SpringBoot网站https"></a>SpringBoot网站https</h2><ol>
<li><p>借助 Java 自带的 JDK 管理工具 keytool 来生成一个免费的 https 证书：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias tomcathttps -keyalg RSA -keysize 2048 -keystore ./secret.p12 -validity 365</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令含义如下：</p>
<ul>
<li>genkey 表示要创建一个新的密钥。</li>
<li>alias 表示 keystore 的别名</li>
<li>keyalg 表示使用的加密算法是 RSA ，一种非对称加密算法。</li>
<li>keysize 表示密钥的长度</li>
<li>keystore 表示生成的密钥存放位置</li>
<li>validity 表示密钥的有效时间，单位为天</li>
</ul>
</li>
<li><p>执行完命令之后生成secret.p12证书，将证书拷贝到自己的项目的resources目录下；</p>
</li>
<li><p>修改application.properties:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="meta">server.ssl.key-store</span>=<span class="string">classpath:secret.p12</span></span><br><span class="line"><span class="meta">server.ssl.key-alias</span>=<span class="string">tomcathttps</span></span><br><span class="line"><span class="meta">server.ssl.key-store-password</span>=<span class="string">12345678</span></span><br></pre></td></tr></table></figure>

<ul>
<li>key-store表示密钥文件名</li>
<li>key-alias表示密钥别名</li>
<li>key-store-password就是在cmd命令执行过程中输入的密码</li>
</ul>
</li>
<li><p>重启项目就可以https访问了！</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring Security可以解决很多安全问题，相对技术也比较成熟，还可以无缝集成，这部分只是涉及到了基础的Spring Security的实验，还有token、重写过滤器等实现更高级的安全功能需要学习！这部分就当是一个入门级别的文章吧，结合了很多的博客以及官方文档！贴一下官方的LOGO吧！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6e435ca111730295046db18a281608aa-72317" alt="官方logo"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security &amp; Token Quick Start</title>
    <url>/2020/07/06/Spring-Security-Token-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JWT（Json Web Token，Json Web 令牌） 是一种基于JSON的开放标准（<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">RFC 7519</a>），定义了一种宽松且紧凑的数据组合方式，使用 JSON  对象在各应用之间传输加密信息。该 JSON 对象可以通过数字签名进行鉴签和校验，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息。本文主要介绍如何在SpringBoot中使用SpringSecurity、JWT实现安全认证。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p><strong>有状态服务</strong>：服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份对请求进行处理，典型的设计如Tomcat中的Session；</p>
</li>
<li><p>有状态服务的缺陷：</p>
<ul>
<li>服务端保存大量数据，增加服务端压力</li>
<li>服务端保存用户状态，不支持集群化部署</li>
</ul>
</li>
<li><p><strong>无状态服务</strong>：相对于有状态服务而言，服务端不保存任何客户端请求者信息，客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份；</p>
</li>
<li><p>无状态服务的优势：</p>
<ul>
<li>客户端请求不依赖服务端的信息，多次请求不需要必须访问到同一台服务器</li>
<li>服务端的集群和状态对客户端透明</li>
<li>服务端可以任意的迁移和伸缩（可以方便的进行集群化部署）</li>
<li>减小服务端存储压力</li>
</ul>
</li>
<li><p>无状态服务的实现一般化流程：</p>
<ol>
<li>客户端发送账户名/密码到服务端进行认证；</li>
<li>认证通过后，服务端将用户信息加密并且编码成一个token，返回给客户端；</li>
<li>以后客户端每次发送请求，都需要携带认证的token；</li>
<li>服务端对客户端发送来的token进行解密，判断是否有效，并且获取用户登录信息。</li>
</ol>
</li>
<li><p>令牌（Token）指 Security Token(安全令牌)，可以分为 Hardware Token(硬件令牌)，Authentication Token(授权令牌)，USB Token(USB令牌)，Cryptographic Token(加密令牌)，Virtual Token(虚拟令牌)和 Key Fob(钥匙卡)：</p>
<ul>
<li>验证身份的合法性，以允许计算机系统的用户可以操作系统资源</li>
<li>为计算机系统提供一个可以识别用户的任意数值</li>
<li>生活中常见的令牌如：登录密码，指纹，声纹，门禁卡，银行电子卡等</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/473d8ffe9e3bd71472ff4a27f594cea1-432017" alt="Token图"></p>
</li>
<li><p><strong>传统的session认证</strong>：在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了；</p>
</li>
<li><p>传统的Session认证是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击；</p>
</li>
<li><p>传统的Session认证一般化流程：</p>
<ol>
<li>用户向服务器发送用户名和密码；</li>
<li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等；</li>
<li>服务器向用户返回一个 session_id，写入用户的 Cookie；</li>
<li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器；</li>
<li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li>
</ol>
</li>
<li><p>这种模式的问题在于扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session，解决方案一般如下：</p>
<ul>
<li>session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败</li>
<li>服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器</li>
</ul>
</li>
</ol>
<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>一个 JWT 通常有 Header (头)，Payload (有效载荷)和 Signature (签名)三个部分组成，三者之间使用“.”链接，格式如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">header.payload.signature</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6a949b8969e914016f12ea4f3f64304d-193610" alt="JWT格式图"></p>
</li>
<li><p>Header：头部，通常头部有两部分信息：</p>
<ul>
<li>声明类型，可以是JWT等</li>
<li>加密算法，自定义</li>
</ul>
</li>
<li><p>Payload：载荷，就是有效数据，在官方文档中(RFC7519)，这里给了7个示例信息：</p>
<ul>
<li>iss (issuer)：表示签发人</li>
<li>exp (expiration time)：表示token过期时间</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
</li>
<li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥secret（密钥保存在服务端，不能泄露给客户端），通过Header中配置的加密算法生成。用于验证整个数据完整和可靠性；</p>
</li>
<li><p>一个JWT的Header、Payload可以通过Base64进行解码获得数据内容，Signature需要通过Header以及Payload以及加密密钥通过使用的加密算法计算得到!</p>
</li>
<li><p>JWT 作为一种规范，并没有和某一种语言绑定在一起，常用的Java 实现是GitHub 上的开源项目 jjwt，地址如下： <a href="https://github.com/jwtk/jjwt；" target="_blank" rel="noopener">https://github.com/jwtk/jjwt；</a></p>
</li>
<li><p>官网：<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p>
</li>
</ol>
<h3 id="创建JWT示例"><a href="#创建JWT示例" class="headerlink" title="创建JWT示例"></a>创建JWT示例</h3><ol>
<li><p>标头用于存储有关如何计算JWT签名的信息，如对象类型，签名算法等。下面是JWT中Header部分的JSON对象示例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/529861c42cedfd1cc6f980d3fad304ae-6665" alt="Header"></p>
<ul>
<li>在此 JSON 对象中，type 表示该对象为 JWT,alg 表示创建 JWT 时使用HMAC-SHA256 散列算法计算签名</li>
</ul>
</li>
<li><p>有效载荷主要用于存储用户信息，如用户 ID，Email，角色和权限信息等。下面是有效载荷的一个简单示例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9044668ad84a07f54e76e2a1c3b6f46c-10859" alt="Payload"></p>
</li>
<li><p>签名需要使用 Base64URL 编码技术对标头 (Header 和有效载荷(Payload) 进行编码，并作为参数和秘钥一同传递给签名算法，生成最终的签名 (Signature)。以 HMAC-SHA256 算法为例，下面是生成签名的一个伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/34e55cd359bbb28fb49e6214ae57727e-13744" alt="Signature"></p>
</li>
<li><p>整个过程如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9c299b3ac18ec8a50d2d790363ca3bb5-205051" alt="JWT流程"></p>
<ul>
<li>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以得到完整的JWT</li>
</ul>
</li>
</ol>
<h3 id="JWT交互流程"><a href="#JWT交互流程" class="headerlink" title="JWT交互流程"></a>JWT交互流程</h3><ol>
<li><p>整体流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/910621f8156583b410713eb21748c8e0-231662" alt="JWT流程"></p>
</li>
<li><p>执行步骤说明：</p>
<ol>
<li>应用程序或客户端向授权服务器请求授权</li>
<li>获取到授权后，授权服务器会向应用程序返回访问令牌</li>
<li>应用程序使用访问令牌来访问受保护资源（如API）</li>
</ol>
</li>
<li><p>JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，这样就完全符合了RESTful的无状态规范。</p>
</li>
</ol>
<h3 id="JWT注意事项"><a href="#JWT注意事项" class="headerlink" title="JWT注意事项"></a>JWT注意事项</h3><ol>
<li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次；</li>
<li>JWT 不加密的情况下，不能将秘密数据写入 JWT；</li>
<li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数；</li>
<li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑；</li>
<li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证；</li>
<li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输！</li>
</ol>
<h3 id="JWT需要解决的问题"><a href="#JWT需要解决的问题" class="headerlink" title="JWT需要解决的问题"></a>JWT需要解决的问题</h3><ol>
<li>续签问题，jwt由于服务端不保存用户状态，因此很难完美解决续签问题，如果引入redis，虽然可以解决问题，但是jwt也变得不伦不类了；</li>
<li>注销问题，由于服务端不再保存用户信息，所以一般可以通过修改secret来实现注销，服务端secret修改后，已经颁发的未过期的token就会认证失败，进而实现注销，不过毕竟没有传统的注销方便；</li>
<li>密码重置，密码重置后，原本的token依然可以访问系统，这时候也需要强制修改secret；</li>
<li>一般建议不同用户取不同secret！</li>
<li>服务端无法主动推送消息：服务端由于是无状态的，他将无法使用像 Session 那样的方式推送消息到客户端，例如过期时间将至，服务端无法主动为用户续约，需要客户端向服务端发起续约请求；</li>
<li>冗余的数据开销：<strong>一个 JWT 签名的大小要远比一个 Session ID 长很多，如果你对有效载荷(payload)中的数据不做有效控制，其长度会成几何倍数增长，且在每一次请求时都需要负担额外的网络开销</strong>；</li>
<li>反观传统的用户认证措施，通常会包含多种组合，如手机验证码，人脸识别，语音识别，指纹锁等。用户名和密码只做用户身份识别使用，当用户名和密码泄露后，在遇到敏感操作时(如新增，修改，删除，下载，上传)，都会采用另外的方式对用户的合法性进行验证(发送验证码，邮箱验证码，指纹信息等)以确保数据安全；</li>
<li>与传统的身份验证方式相比，JWT 过多的依赖于算法，缺乏灵活性，而且服务端往往是被动执行用户身份验证操作，无法及时对异常用户进行隔离！</li>
</ol>
<h3 id="JWT功能完善"><a href="#JWT功能完善" class="headerlink" title="JWT功能完善"></a>JWT功能完善</h3><ol>
<li><strong>清除已泄露的令牌</strong>：此方案最直接，也容易实现，需要将 JWT 令牌在服务端也存储一份，若发现有异常的令牌存在，则从服务端令牌列表中将此异常令牌清除。当用户发起请求时，强制用户重新进行身份验证，直至验证成功。对于服务端的令牌存储，可以借助 Redis 等缓存服务器进行管理，也可以使用 Ehcache 将令牌信息存储在内存中；</li>
<li><strong>敏感操作保护</strong>：在涉及到诸如新增，修改，删除，上传，下载等敏感性操作时，定期(30分钟，15分钟甚至更短)检查用户身份，如手机验证码，扫描二维码等手段，确认操作者是用户本人。如果身份验证不通过，则终止请求，并要求重新验证用户身份信息；</li>
<li><strong>地域检查</strong>：通常用户会在一个相对固定的地理范围内访问应用程序，可以将地理位置信息作为一个辅助来甄别用户的 JWT 令牌是否存在问题。如果发现用户A由经常所在的地区 1 变到了相对较远的地区 2 ，或者频繁在多个地区间切换，不管用户有没有可能在短时间内在多个地域活动(一般不可能)，都应当终止当前请求，强制用户重新进行验证身份，颁发新的 JWT 令牌，并提醒(或要求)用户重置密码；</li>
<li><strong>监控请求频率</strong>：如果 JWT 密令被盗取，攻击者或通过某些工具伪造用户身份，高频次的对系统发送请求，以套取用户数据。针对这种情况，可以监控用户在单位时间内的请求次数，当单位时间内的请求次数超出预定阈值值，则判定该用户密令是有问题的。例如 1 秒内连续超过 5 次请求，则视为用户身份非法，服务端终止请求并强制将该用户的 JWT 密令清除，然后回跳到认证中心对用户身份进行验证；</li>
<li><strong>客户端环境检查</strong>：对于一些移动端应用来说，可以将用户信息与设备(手机,平板)的机器码进行绑定，并存储于服务端中，当客户端发起请求时，可以先校验客户端的机器码与服务端的是否匹配，如果不匹配，则视为非法请求，并终止用户的后续请求！</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建一个SpringBoot项目"><a href="#创建一个SpringBoot项目" class="headerlink" title="创建一个SpringBoot项目"></a>创建一个SpringBoot项目</h2><ol>
<li><p>创建一个常规的SpringBoot项目添加Web、Security依赖；</p>
</li>
<li><p>添加JWT相关的依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>添加jaxb-api是因为JDK9提出的模块化的概念，导致不再以后的版本里默认提供，因此需要导入，不然会出错，踩过的坑！</strong></li>
</ul>
</li>
</ol>
<h2 id="测试JWT"><a href="#测试JWT" class="headerlink" title="测试JWT"></a>测试JWT</h2><h3 id="创建一个Token"><a href="#创建一个Token" class="headerlink" title="创建一个Token"></a>创建一个Token</h3><ol>
<li><p>添加测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JwtBuilder builder= Jwts.builder().setId(<span class="string">"123456"</span>) .setSubject(<span class="string">"WanderROS"</span>)</span><br><span class="line">            .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//设置签发时间</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256,<span class="string">"secret"</span>);<span class="comment">//设置签名秘钥</span></span><br><span class="line">    String token=builder.compact();</span><br><span class="line">   log.info(<span class="string">"generated token: "</span> + token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（关键部分）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2020-07-06 20:30:45.784  INFO 51065 --- [           main] c.w.learn.jwtsec.JwtsecApplicationTests  : generated token: eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjM0NTYiLCJzdWIiOiJXYW5kZXJST1MiLCJpYXQiOjE1OTQwMzg2NDV9.XCa4N8JpNhkVE0Se6xmpcpW9v6DbXFeiq8ppLIauPys</span><br></pre></td></tr></table></figure>
</li>
<li><p>Header：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"alg"</span>:<span class="string">"HS256"</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"jti"</span>:<span class="string">"123456"</span>,<span class="attr">"sub"</span>:<span class="string">"WanderROS"</span>,<span class="attr">"iat"</span>:<span class="number">1594038645</span>&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="解析一个Token"><a href="#解析一个Token" class="headerlink" title="解析一个Token"></a>解析一个Token</h3><ol>
<li><p>添加测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JwtBuilder builder= Jwts.builder().setId(<span class="string">"123456"</span>) .setSubject(<span class="string">"WanderROS"</span>)</span><br><span class="line">            .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//设置签发时间</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256,<span class="string">"secret"</span>);<span class="comment">//设置签名秘钥</span></span><br><span class="line">    String token=builder.compact();</span><br><span class="line">    Claims claims =</span><br><span class="line">            Jwts.parser().setSigningKey(<span class="string">"secret"</span>).parseClaimsJws(token).getBody();</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+claims.getId());</span><br><span class="line">    System.out.println(<span class="string">"subject:"</span>+claims.getSubject());</span><br><span class="line">    System.out.println(<span class="string">"IssuedAt:"</span>+claims.getIssuedAt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（关键部分）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">id:123456</span><br><span class="line">subject:WanderROS</span><br><span class="line">IssuedAt:Mon Jul 06 20:34:15 CST 2020</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Token过期校验"><a href="#Token过期校验" class="headerlink" title="Token过期校验"></a>Token过期校验</h3><ol>
<li><p>添加测试代码如下（生成带过期的Token）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExpireToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//为了方便测试，我们将过期时间设置为1分钟</span></span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();<span class="comment">//当前时间</span></span><br><span class="line">        <span class="keyword">long</span> exp = now + <span class="number">1000</span>*<span class="number">60</span>;<span class="comment">//过期时间为1分钟</span></span><br><span class="line">        JwtBuilder builder= Jwts.builder().setId(<span class="string">"123456"</span>)</span><br><span class="line">                .setSubject(<span class="string">"Wander"</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,<span class="string">"secret"</span>)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(exp));<span class="comment">//设置过期时间</span></span><br><span class="line">        System.out.println( builder.compact() );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjM0NTYiLCJzdWIiOiJXYW5kZXIiLCJpYXQiOjE1OTQwMzkwOTksImV4cCI6MTU5NDAzOTE1OX0.udCKY5IwsBithZXtXG9puMqT_wdsl3MQjapJlMvOuHU</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>校验代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReallExpireToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String compactJws=<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjM0NTYiLCJzdWIiOiJXYW5kZXIiLCJpYXQiOjE1OTQwMzkwOTksImV4cCI6MTU5NDAzOTE1OX0.udCKY5IwsBithZXtXG9puMqT_wdsl3MQjapJlMvOuHU"</span>;</span><br><span class="line">            Claims claims = Jwts.parser()</span><br><span class="line">            .setSigningKey(<span class="string">"secret"</span>)</span><br><span class="line">            .parseClaimsJws(compactJws).getBody();</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+claims.getId());</span><br><span class="line">    System.out.println(<span class="string">"subject:"</span>+claims.getSubject());</span><br><span class="line">    SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy‐MM‐dd hh:mm:ss"</span>);</span><br><span class="line">    System.out.println(<span class="string">"签发时间:"</span>+sdf.format(claims.getIssuedAt()));</span><br><span class="line">    System.out.println(<span class="string">"过期时间:"</span>+sdf.format(claims.getExpiration()));</span><br><span class="line">    System.out.println(<span class="string">"当前时间:"</span>+sdf.format(<span class="keyword">new</span> Date()) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>正常输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">id:123456</span><br><span class="line">subject:Wander</span><br><span class="line">签发时间:2020‐07‐06 08:38:19</span><br><span class="line">过期时间:2020‐07‐06 08:39:19</span><br><span class="line">当前时间:2020‐07‐06 08:38:47</span><br></pre></td></tr></table></figure>
</li>
<li><p>过期输出（抛出异常）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">io.jsonwebtoken.ExpiredJwtException: JWT expired at 2020-07-06T20:39:19Z. Current time: 2020-07-06T20:41:02Z, a difference of 103250 milliseconds.  Allowed clock skew: 0 milliseconds.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自定义claims"><a href="#自定义claims" class="headerlink" title="自定义claims"></a>自定义claims</h3><ol>
<li><p>添加测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelfToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();<span class="comment">//当前时间</span></span><br><span class="line">        <span class="keyword">long</span> exp = now + <span class="number">1000</span>*<span class="number">60</span>;<span class="comment">//过期时间为1分钟</span></span><br><span class="line">        JwtBuilder builder= Jwts.builder().setId(<span class="string">"123456"</span>)</span><br><span class="line">                .setSubject(<span class="string">"Wander"</span>)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date()) .signWith(SignatureAlgorithm.HS256,<span class="string">"secret"</span>) .setExpiration(<span class="keyword">new</span> Date(exp)) .claim(<span class="string">"roles"</span>,<span class="string">"admin"</span>) .claim(<span class="string">"logo"</span>,<span class="string">"logo.png"</span>);</span><br><span class="line">        System.out.println( builder.compact() );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 输出eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxMjM0NTYiLCJzdWIiOiJXYW5kZXIiLCJpYXQiOjE1OTQwMzk0NDYsImV4cCI6MTU5NDAzOTUwNiwicm9sZXMiOiJhZG1pbiIsImxvZ28iOiJsb2dvLnBuZyJ9.gdumI1wlFo4aAHF4AeksMwD3DlKQpKW6b5Xok-Hb5bE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"jti"</span>:<span class="string">"123456"</span>,<span class="attr">"sub"</span>:<span class="string">"Wander"</span>,<span class="attr">"iat"</span>:<span class="number">1594039446</span>,<span class="attr">"exp"</span>:<span class="number">1594039506</span>,<span class="attr">"roles"</span>:<span class="string">"admin"</span>,<span class="attr">"logo"</span>:<span class="string">"logo.png"</span>&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="使用JWT的接口开发"><a href="#使用JWT的接口开发" class="headerlink" title="使用JWT的接口开发"></a>使用JWT的接口开发</h2><h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h3><ol>
<li><p>关键依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实现一个UserDetails接口的类，类名User，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(List&lt;GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建登录过滤器JwtLoginFilter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">JwtLoginFilter</span><span class="params">(String defaultFilterProcessesUrl, AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(defaultFilterProcessesUrl));</span><br><span class="line">        setAuthenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span>  </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        User user;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            user = objectMapper.readValue(httpServletRequest.getInputStream(), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            log.error(user.getUsername() + <span class="string">"   -- "</span> + user.getPassword());</span><br><span class="line">            <span class="keyword">return</span> getAuthenticationManager().authenticate(<span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            log.error(<span class="string">"没有输入内容"</span>);</span><br><span class="line">           <span class="comment">// log.error(e.toString());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAuthenticationManager().authenticate(<span class="keyword">new</span> UsernamePasswordAuthenticationToken(<span class="string">"null"</span>,<span class="string">"null"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//super.successfulAuthentication(request, response, chain, authResult);</span></span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authResult.getAuthorities();</span><br><span class="line">        StringBuffer as = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            as.append(authority.getAuthority()).append(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String jwt = Jwts.builder()</span><br><span class="line">                .claim(<span class="string">"authorities"</span>, as)</span><br><span class="line">                .setSubject(authResult.getName())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, <span class="string">"secret"</span>)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">//  log.error(jwt);</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(jwt));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//super.unsuccessfulAuthentication(request, response, failed);</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(<span class="string">"登录失败!"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建校验过滤器JwtFilter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpServletRequest req=(HttpServletRequest) servletRequest;</span><br><span class="line">      <span class="comment">//  Enumeration&lt;String&gt; test= req.getHeaderNames();</span></span><br><span class="line">      <span class="comment">//  while (test.hasMoreElements())&#123;</span></span><br><span class="line">      <span class="comment">//      log.error(test.nextElement());</span></span><br><span class="line">      <span class="comment">//  &#125;</span></span><br><span class="line">        String jwtToken=req.getHeader(<span class="string">"authorization"</span>);</span><br><span class="line">       <span class="keyword">if</span>(jwtToken.isEmpty())</span><br><span class="line">       &#123;</span><br><span class="line">           log.error(<span class="string">"账户或者密码为空"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               Claims claims = Jwts.parser()</span><br><span class="line">                       .setSigningKey(<span class="string">"secret"</span>)</span><br><span class="line">                       .parseClaimsJws(jwtToken).getBody();</span><br><span class="line">               String username=claims.getSubject();</span><br><span class="line">               log.error(username);</span><br><span class="line">               List&lt;GrantedAuthority&gt; authorities= AuthorityUtils.commaSeparatedStringToAuthorityList((String)claims.get(<span class="string">"authorities"</span>));</span><br><span class="line">               UsernamePasswordAuthenticationToken token=<span class="keyword">new</span> UsernamePasswordAuthenticationToken(username,<span class="keyword">null</span>,authorities);</span><br><span class="line">               SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class="line">               filterChain.doFilter(req,servletResponse);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (ExpiredJwtException e)</span><br><span class="line">           &#123;</span><br><span class="line">               HttpServletResponse response=(HttpServletResponse) servletResponse;</span><br><span class="line">               log.error(<span class="string">"expire "</span>);</span><br><span class="line">               log.error(e.toString());</span><br><span class="line">               response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">               PrintWriter out = response.getWriter();</span><br><span class="line">               out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(<span class="string">"签名过期，请重新获取签名！"</span>));</span><br><span class="line">               out.flush();</span><br><span class="line">               out.close();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">               log.error(<span class="string">"io__"</span>);</span><br><span class="line">                log.error(e.toString());</span><br><span class="line">           &#125;<span class="keyword">catch</span> (ServletException e)</span><br><span class="line">           &#123;</span><br><span class="line">               log.error(<span class="string">"servlet__ "</span>);</span><br><span class="line">            log.error(e.toString());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建安全配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(auth);</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder()).withUser(<span class="string">"user"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/hello"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/admin"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(HttpMethod.POST,<span class="string">"/login"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilterBefore(<span class="keyword">new</span> JwtLoginFilter(<span class="string">"/login"</span>,authenticationManager()), UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">addFilterBefore</span>(<span class="title">new</span> <span class="title">JwtFilter</span>(),<span class="title">UsernamePasswordAuthenticationFilter</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">csrf</span>().<span class="title">disable</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello jwt !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h3><ol>
<li>JwtLoginFilter为登录过滤器，在用户的登录的过滤器中校验用户是否登录成功。如果登录成功，则生成一个token返回给客户端，登录失败则给前端一个登录失败的提示；<ol>
<li>在attemptAuthentication方法中，从登录参数中提取出用户名密码，然后调用AuthenticationManager.authenticate()方法去进行自动校验</li>
<li>如果校验成功，就会来到successfulAuthentication回调中，在successfulAuthentication方法中，将用户角色遍历然后用一个 <code>,</code> 连接起来，然后再利用Jwts去生成token，按照代码的顺序，生成过程一共配置了四个参数，分别是用户角色、主题、过期时间以及加密算法和密钥，然后将生成的token写出到客户端</li>
<li>如果校验失败就会来到unsuccessfulAuthentication方法中，在这个方法中返回一个错误提示给客户端即可</li>
</ol>
</li>
<li>JwtFilter为校验过滤器，当其他请求发送来，校验token的过滤器。如果校验成功，就让请求继续执行，否则不予执行；<ol>
<li>从请求头中提取出 authorization 字段，这个字段对应的value就是用户的token</li>
<li>将提取出来的token字符串转换为一个Claims对象，再从Claims对象中提取出当前用户名和用户角色，创建一个UsernamePasswordAuthenticationToken放到当前的Context中，然后执行过滤链使请求继续执行下去</li>
</ol>
</li>
<li>在configure(HttpSecurity http)中配置过滤器，”/login”使用JwtLoginFilter，其他使用JwtFilter；</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>获取令牌：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d8cc309614f2471af974a08fe90fb9c6-180006" alt="获取签名"></p>
</li>
<li><p>使用错误的账户密码请求令牌：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eac771a7366e5c204f1274abe88e88ec-154243" alt="错误的密码获取签名"></p>
</li>
<li><p>使用令牌请求API：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4e985da68969082914ddc4fc5a685f9f-134835" alt="正确的请求"></p>
</li>
<li><p>使用过期的令牌请求API:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/40ce7a77d958a9c65ae17a6acd30b77e-151262" alt="过期签名请求"></p>
</li>
<li><p>请求没有权限的API：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0ea996a469c8275b09c52a8f9d18165b-177718" alt="没有权限的请求"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分是简单的令牌认证接入记录文档，需要有SpringBoot、SpringSecurity基础知识，然后能够定位问题，只有使用了之后才知道会出现什么问题，只有一步步定位问题然后解决问题，这些知识才会深入脑海！比如测试生成JWT的时候一点问题都没有，但是在项目的身份认证过程中使用就是出问题，最后定位是缺少一个依赖，这些定位问题的能力需要不断地去学习掌握！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot AOP Quick Start</title>
    <url>/2020/09/28/SpringBoot-AOP-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring AOP在SpringBoot实战学习的时候有接触过，但是对于其并没有深入，在实际开发中才渐渐发现它的强大，这里花点时间深入了解一下AOP，使得后续项目开发中能更好地使用AOP写出优质代码！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ol>
<li><p>官方说明文档：<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop</a></p>
</li>
<li><p>AOP （Aspect Oriented Programming，面向切面编程）是一种编程思想，是面向对象编程（OOP）的一种补充。（OOP从纵向上区分出一个个的类来，而AOP则从横向上向对象中加入特定的代码。）面向对象编程将程序抽象成各个层次的对象，而面向切面编程是将程序抽象成各个切面！</p>
</li>
<li><p>AOP的存在是为了保证开发者不修改源代码的前提下，为系统中的业务组件添加某种通用功能，AOP能够使得代码解耦，并且可以让一组类共享相同的行为。</p>
</li>
<li><p>各种AOP实现的比较：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7f6d70a666b70e2cf99d93a04c34eb58-59526" alt="AOP比较"></p>
</li>
<li><p>AOP 领域术语：</p>
<ol>
<li>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理</li>
<li>连接点（Join Point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用，通过声明一个<code>org.aspectj.lang.JoinPoint</code>类型参数我们可以在通知(Advice)中获得连接点的信息</li>
<li>切点（PointCut）: 可以插入增强处理的连接点集，切入点表达式如何跟连接点匹配是AOP的核心，Spring默认使用AspectJ作为切入点语法</li>
<li>切面（Aspect）: 切面是通知和切点的结合，可能会横切多个对象</li>
<li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性，AOP允许在运行时动态的向代理对象实现新的接口来完成一些额外的功能并且不影响现有对象的功能</li>
<li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。Spring和其他纯AOP框架一样，在运行时完成织入</li>
</ol>
</li>
<li><p>Spring 中的 AOP 是通过动态代理实现的，不能拦截对对象字段的修改，也不支持构造器连接点,无法在 Bean 创建时应用通知！</p>
</li>
<li><p>Spring AOP 中有 5 中通知类型：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7c1d36d77b3d405328d28bb915250fc7-28909" alt="通知类型"></p>
<ul>
<li>环绕通知类型<code>@Around</code>将整个目标方法封装了起来，在使用时，传入<code>ProceedingJoinPoint</code>类型的参数，调用<code>proceed()</code>方法是会进入目标方法中返回，否则原目标方法被阻塞调用</li>
<li>后置通知是当某个连接点退出的时候执行的通知，而不管是正常返回还是发生异常后的退出，说白了就是会在返回后通知和抛出异常后通知执行</li>
</ul>
</li>
<li><p>Spring AOP是Spring的一个重要组件，但是Spring IOC并不依赖于Spring AOP，这意味着可以自由选择是否使用AOP，AOP提供了强大的中间件解决方案，这使得Spring IOC更加完善。</p>
</li>
<li><p><strong>AOP能用来实现日志监听、事务管理、效率检查、权限控制等。</strong>AOP能够减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
</li>
<li><p>被定义为切面的类需要 <code>@Component</code> 注解标注。</p>
</li>
<li><p>Spring提供了3种类型的AOP支持：</p>
<ol>
<li>基于代理的经典SpringAOP（需要实现接口，手动创建代理）</li>
<li>纯POJO切面（使用XML配置，aop命名空间）</li>
<li><code>@AspectJ</code>注解驱动的切面（使用注解的方式）</li>
</ol>
</li>
<li><p>AOP实现日志监听的比较好的样例效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/af330349070ce3c0d890c6089e4053da-184252" alt="日志管理"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bb2526c43285284bfd389f5189cff547-84900" alt="日志管理详情"></p>
</li>
</ol>
<h2 id="声明一个PointCut（切点）"><a href="#声明一个PointCut（切点）" class="headerlink" title="声明一个PointCut（切点）"></a>声明一个PointCut（切点）</h2><ol>
<li><p>Spring AOP仅支持Spring Bean可执行方法连接点，因此在 Spring AOP 中，连接点总是方法的调用。</p>
</li>
<li><p>切点可以通过注解<code>@Pointcut</code>来声明，作为Pointcut 标识的方法返回类型必须是<code>void</code>。示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* transfer(..))"</span>) <span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// the pointcut signature</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>Spring AOP借助了AspectJ的语法，但底层技术用的还是Spring自己的。因此AspectJ的切点语法可以参考<a href="https://www.eclipse.org/aspectj/doc/released/progguide/index.html" target="_blank" rel="noopener">AspectJ语法指导</a>，Spring AOP支持的AspectJ 切点标识符：</p>
<ul>
<li><code>execution</code>：用于匹配方法执行连接点（基础切点标识符）</li>
<li><code>within</code>：限制性匹配指定类型的连接点（范围型）</li>
<li><code>this</code>：限制性匹配指定类型的实例及其子类的连接点（精确型）</li>
<li><code>target</code>：限制性匹配目标Object是给定类型实例（不包含子类）的连接点（精确型）</li>
<li><code>args</code>：限制性匹配使用指定参数类型（如<code>String</code>）的连接点（范围型）</li>
<li><code>@target</code>：<strong>类上</strong>带有指定类型注解的连接点（精确型）</li>
<li><code>@args</code>：<strong>参数类型</strong>带有指定类型的注解（范围型）</li>
<li><code>@within</code>：目标类型上有指定类型的注解（范围性）</li>
<li><code>@annotation</code>：限制性匹配有指定的注解可执行方法的连接点（精确型）</li>
</ul>
</li>
<li><p>可以通过<code>&amp;&amp;</code>，<code>||</code>以及<code>!</code>来组合表示切点表达式，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * *(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyPublicOperation</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.myapp.trading..*)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inTrading</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"anyPublicOperation() &amp;&amp; inTrading()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tradingOperation</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>anyPublicOperation()</code>指示任何public类型的可执行方法</li>
<li><code>inTrading()</code>指示在模块<code>trading</code>中的可执行方法</li>
<li><code>tradingOperation()</code>指示在模块<code>trading</code>中的public类型的可执行方法</li>
</ul>
</li>
<li><p>Spring AOP的大多数使用者喜欢使用<code>execution</code>来指示连接点，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) <span class="keyword">throws</span>-pattern?)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ret-type-pattern</code>、<code>name-pattern</code>、<code>param-pattern</code>是必须有的，其他的都是可选的</li>
<li><code>*</code>是使用最多的返回类型，用于匹配任意返回类型</li>
<li>参数类型使用<code>()</code>表示没有参数，<code>(..)</code>表示可以有任意个参数，<code>(*)</code>表示只有一个任意类型的参数，<code>(*,String)</code>匹配第一个是任意类型的参数，第二个是String类型的可执行方法</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>任意public的可执行方法：<code>execution(public * *(..))</code></li>
<li>任意名称以set开头的可执行方法：<code>execution(* set*(..))</code></li>
<li>指定到<code>com.xyz.service.AccountService</code>下任意可执行方法：<code>execution(* com.xyz.service.AccountService.*(..))</code></li>
<li>指定到包<code>com.xyz.service</code>下的任意可执行方法：<code>execution(* com.xyz.service.*.*(..))</code></li>
<li>指定到包<code>com.xyz.service</code>或者任意一个子包下的任意可执行方法：<code>execution(* com.xyz.service..*.*(..))</code></li>
<li>在包<code>com.xyz.service</code>下（不包含子包）的任意连接点：<code>within(com.xyz.service.*)</code></li>
<li>使用了<code>@Transactional</code>注解的可执行方法的任意连接点：<code>@annotation(org.springframework.transaction.annotation.Transactional)</code></li>
<li>只有一个参数，而且运行时传递了<code>@Classified</code>注解的任意连接点：<code>@args(com.xyz.security.Classified)</code></li>
<li>… …</li>
</ul>
</li>
<li><p>推荐博客：<a href="https://www.cnblogs.com/zhangxufeng/p/9160869.html，实在不太清楚可以对照官方文档进行试验，以实际效果为准！" target="_blank" rel="noopener">https://www.cnblogs.com/zhangxufeng/p/9160869.html，实在不太清楚可以对照官方文档进行试验，以实际效果为准！</a></p>
</li>
</ol>
<h2 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h2><ol>
<li><p>5种类型的通知：</p>
<ul>
<li><code>@Before</code> ：在切入点开始处切入内容</li>
<li><code>@AfterReturning</code> ：在切入点 return 内容之后切入内容（可以用来对处理返回值做一些加工处理）</li>
<li><code>@AfterThrowing</code> ：用来处理当切入内容部分抛出异常之后的处理逻辑</li>
<li><code>@After</code> ：在切入点结尾处切入内容</li>
<li><code>@Around</code> ：在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li>
</ul>
</li>
<li><p>在实际情况下，对同一个接口做多个切面时会面临一个优先级的问题，这就需要使用 <code>@Order(i)</code> 注解来标识切面的优先级, <code>i</code> 的值越小，优先级越高。<strong>在切入点前的操作，按order的值由小到大执行，在切入点后的操作，按order的值由大到小执行！</strong></p>
</li>
<li><p>在进行通知处理的时候，5中类型通知的处理是有先后顺序的，默认顺序如下，如果有特殊处理除外：</p>
<ul>
<li><code>@Around</code> &gt; <code>@Before</code> &gt; <code>@AfterThrowing</code>&gt;<code>@AfterReturning</code> &gt; <code>@After</code> </li>
<li>如果<code>@Around</code>不执行<code>proceed()</code>方法，则其他通知是无法执行的</li>
</ul>
</li>
<li><p>除了环绕通知可以添加<code>ProceedingJoinPoint</code>类型的参数外，其他的通知都可以添加<code>JoinPoint</code>类型的参数。</p>
</li>
<li><p><code>@Before</code>通知可以接受切点的方法参数，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(public * com.example.aop.controller..*(..))&amp;&amp;args(result)"</span>,argNames = <span class="string">"joinPoint,result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">(JoinPoint joinPoint,Result result)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>@Before注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Before &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>该注解只能用在方法上</p>
</li>
<li><p><code>value</code>用于传递切点</p>
</li>
<li><p><code>argNames</code>可以接受方法的参数名</p>
</li>
</ul>
</li>
<li><p><code>@AfterReturning</code>通知可以通过参数接受切点方法的返回值也可以获取参数值，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1   </span></span><br><span class="line">		<span class="meta">@AfterReturning</span>(value = <span class="string">"annotationPointCut()"</span>,returning = <span class="string">"res"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturnAdvice</span><span class="params">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例2</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public * com.example.aop.controller..*(..))&amp;&amp;args(result)"</span>,returning = <span class="string">"res"</span>,argNames = <span class="string">"joinPoint,res,result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturnAdvice2</span><span class="params">(JoinPoint joinPoint,Object res,Result result)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@AfterReturning</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AfterReturning &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pointcut</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">returning</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>value</code>用于传递切点,<code>pointcut</code>也是 </p>
</li>
<li><p><code>argNames</code>可以接受方法的参数名</p>
</li>
<li><p><code>returning</code>可以接受方法的返回值，然后传递到通知的参数中</p>
</li>
</ul>
</li>
<li><p><code>@AfterThrowing</code>通知可以通过参数接受切点方法的异常：</p>
<ul>
<li><p><code>@AfterThrowing</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AfterThrowing &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pointcut</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">throwing</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>throwing</code>用于接受异常，然后传递到通知的参数中</p>
</li>
</ul>
</li>
<li><p><code>@After</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> After &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Around</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Around &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过自定义注解来表示切点，格式类似下面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Target 的注解类型    适用场景</span></span><br><span class="line"><span class="comment"> *    TYPE              类(包括Enum)接口</span></span><br><span class="line"><span class="comment"> *    PACKAGE           包</span></span><br><span class="line"><span class="comment"> *    METHOD            方法</span></span><br><span class="line"><span class="comment"> *    FIELD             成员域(包括Enum常量)</span></span><br><span class="line"><span class="comment"> *    CONSTRUCTOR       构造器</span></span><br><span class="line"><span class="comment"> *    PARAMETER         方法或构造器参数</span></span><br><span class="line"><span class="comment"> *    LOCAL_VARIABLE    本地变量</span></span><br><span class="line"><span class="comment"> *    ANNOTATION_TYPE   注解类型声明</span></span><br><span class="line"><span class="comment"> *    java 8 新加</span></span><br><span class="line"><span class="comment"> *    TYPE_PARAMETER    类型参数声明</span></span><br><span class="line"><span class="comment"> *    TYPE_USE          类型的使用</span></span><br><span class="line"><span class="comment"> * Retention的保留策略</span></span><br><span class="line"><span class="comment"> *    保留规则           描述</span></span><br><span class="line"><span class="comment"> *    SOURCE             注释将被编译器丢弃,不包括在类文件中</span></span><br><span class="line"><span class="comment"> *    CLASS              注释由编译器记录在类文件中,但是不需要在运行时被虚拟机(VM)保留。默认策略</span></span><br><span class="line"><span class="comment"> *    RUNTIME            注释由编译器记录在类文件中，并在运行时由VM保存，因此可以反射可读取它们</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//注解放置的目标位置,METHOD是可注解在方法级别上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//注解在哪个阶段执行</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperLog &#123;</span><br><span class="line">    <span class="function">String <span class="title">operModul</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">// 操作模块</span></span><br><span class="line">    <span class="function">String <span class="title">operType</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">// 操作类型</span></span><br><span class="line">    <span class="function">String <span class="title">operDesc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">// 操作说明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注解方式的参数传递：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Pointcut</span>(value = <span class="string">"@annotation(log)"</span>, argNames = <span class="string">"log"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">(Log log)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"pointcut(log)"</span>, argNames = <span class="string">"joinPoint,log"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, Log log)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(log.value());</span><br><span class="line">            System.out.println(<span class="string">"around"</span>);</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"around"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>环绕通知非常强大，可以决定目标方法是否执行，什么时候执行，执行时是否需要替换方法参数，执行完毕是否需要替换返回值。 </p>
</li>
<li><p>环绕通知第一个参数必须是org.aspectj.lang.ProceedingJoinPoint类型 。</p>
</li>
</ol>
<h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><ol>
<li><p><code>HttpServletRequest</code>以及<code>HttpServletResponse</code>：</p>
<ol>
<li><p>实例获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取RequestAttributes</span></span><br><span class="line">RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">// RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes(); // 这个方法也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从获取的RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) requestAttributes</span><br><span class="line">  .resolveReference(RequestAttributes.REFERENCE_REQUEST);</span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes)requestAttributes).getRequest();</span><br><span class="line">HttpServletResponse response = ((ServletRequestAttributes)requestAttributes).getResponse();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HttpServletRequest</code>方法说明(常用)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getMethod() <span class="comment">//动词 GET POST等</span></span><br><span class="line">  request.getHeader(<span class="string">"Connection"</span>) <span class="comment">//请求头的获取</span></span><br><span class="line">  request.getServletPath() <span class="comment">// 获取URI 比如：/api/test</span></span><br><span class="line">  request.getCookies() <span class="comment">// 获取所有的Cookie</span></span><br><span class="line">  request.getRequestedSessionId() <span class="comment">// 获取SessionID</span></span><br><span class="line">  request.getRequestURL() <span class="comment">// 获取除参数外的完整URL</span></span><br><span class="line">  request.getProtocol() <span class="comment">// 获取http协议标准 比如：HTTP/1.1</span></span><br><span class="line">  request.getQueryString() <span class="comment">// 该方法返回请求中的参数部分（参数名+值）</span></span><br><span class="line">  request.getRemoteAddr() <span class="comment">// 该方法返回请求的客户机的IP地址</span></span><br><span class="line">  request.getRemoteHost() <span class="comment">// 该方法返回请求的客户机的完整主机名</span></span><br><span class="line">  request.getRemotePort() <span class="comment">// 该方法返回客户机所使用的网络端口号</span></span><br><span class="line">  request.getLocalPort() <span class="comment">// 该方法返回web服务器所使用的网络端口号</span></span><br><span class="line">  request.getLocalAddr() <span class="comment">// 该方法返回WEB服务器的IP地址</span></span><br><span class="line">  request.getLocalName() <span class="comment">// 该方法返回WEB服务器的主机名</span></span><br><span class="line">  request.getAuthType() <span class="comment">// 该返回包含用来保护servlet身份验证方案的名称，如BASIC和SSL，如果是null表示未不受保护</span></span><br><span class="line">  request.getScheme() <span class="comment">// 返回请求的方案名，如http,ftp,https等</span></span><br><span class="line">  request.getInputStream() <span class="comment">// 获取body中的内容</span></span><br><span class="line">  request.getParameter(<span class="string">"result"</span>) <span class="comment">// 获取Params中的参数值</span></span><br><span class="line">  request.getParameterMap() <span class="comment">//获取Params中的所有参数值，Map形式</span></span><br><span class="line">  request.getParameterNames() <span class="comment">// 获取Params中的所有参数名称</span></span><br><span class="line">  request.getHeaderNames() <span class="comment">//获取Headers中所有的Header名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有Params：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        Enumeration&lt;?&gt; temp = request.getParameterNames();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.hasMoreElements()) &#123;</span><br><span class="line">                String en = (String) temp.nextElement(); <span class="comment">// key</span></span><br><span class="line">                String value = request.getParameter(en); <span class="comment">// value</span></span><br><span class="line">                System.out.println(en);</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">        Map&lt;String, String[]&gt; map= request.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, String[]&gt; entry : map.entrySet())&#123;</span><br><span class="line">            String mapKey = entry.getKey();</span><br><span class="line">            String[] mapValue = entry.getValue();</span><br><span class="line">            System.out.println(mapKey+<span class="string">":"</span>+mapValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有的Header：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;?&gt; temp = request.getHeaderNames();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">    <span class="keyword">while</span> (temp.hasMoreElements()) &#123;</span><br><span class="line">        String en = (String) temp.nextElement();</span><br><span class="line">        String value = request.getHeader(en);</span><br><span class="line">        System.out.println(en);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HttpServletResponse</code>相比而言多了<code>send</code>方法，而少了一些其他的get方法，需要时可以了解</p>
</li>
<li><p>IP提取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRealIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 这个一般是Nginx反向代理设置的参数</span></span><br><span class="line">       String ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getRemoteAddr();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 处理多IP的情况（只取第一个IP）</span></span><br><span class="line">       <span class="keyword">if</span> (ip != <span class="keyword">null</span> &amp;&amp; ip.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">           String[] ipArray = ip.split(<span class="string">","</span>);</span><br><span class="line">           ip = ipArray[<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ip;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><code>JoinPoint</code>以及<code>ProceedingJoinPoint</code>：</p>
<ol>
<li><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] getArgs(); <span class="comment">// 获取传入目标方法的参数对象</span></span><br><span class="line"><span class="function">Signature <span class="title">getSignature</span><span class="params">()</span></span>; <span class="comment">// 获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</span></span><br><span class="line"><span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>; <span class="comment">// 获取被代理的对象</span></span><br><span class="line"><span class="function">Object <span class="title">getThis</span><span class="params">()</span></span>; <span class="comment">//获取代理对象</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Signature getSignature()</code>:<strong>（用的非常多）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;<span class="comment">// 方法名称参数，如 Map com.example.aop.controller.helloPara(Integer,String,String)</span></span><br><span class="line">  <span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>; <span class="comment">//非常简单的方法名称参数，如 controller.helloPara(..)</span></span><br><span class="line">  <span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>; <span class="comment">// 超级详细的方法名称参数，如public java.util.Map com.example.aop.controller.helloPara(java.lang.Integer,java.lang.String,java.lang.String)</span></span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 方法名称 ，如helloPara</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Class <span class="title">getDeclaringType</span><span class="params">()</span></span>; <span class="comment">// 目标方法的类 如 class com.example.aop.controller</span></span><br><span class="line">  <span class="function">String <span class="title">getDeclaringTypeName</span><span class="params">()</span></span>;<span class="comment">// 类名 如com.example.aop.controller</span></span><br><span class="line">      </span><br><span class="line">	Signature signature = joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">String[] parameterNames = methodSignature.getParameterNames(); <span class="comment">//获取方法参数名称</span></span><br><span class="line">methodSignature.getParameterTypes() <span class="comment">// 获取方法参数类</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Object getTarget()</code>以及<code>Object getThis()</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object target=pjp.getTarget();</span><br><span class="line">Object proxy=pjp.getThis();</span><br><span class="line">System.out.println(target.getClass().getName()); <span class="comment">// 方法名称</span></span><br><span class="line">System.out.println(proxy.getClass().getName()); <span class="comment">// 增强后的方法名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>MethodSignature</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class[] getParameterTypes();</span><br><span class="line">String[] getParameterNames();</span><br><span class="line">Class[] getExceptionTypes();</span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Class <span class="title">getDeclaringType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getDeclaringTypeName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Class <span class="title">getReturnType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目标方法获取后的处理模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理请求参数</span></span><br><span class="line">String[] paramNames = ((MethodSignature) signature).getParameterNames();</span><br><span class="line">Object[] paramValues = joinPoint.getArgs();</span><br><span class="line"><span class="keyword">int</span> paramLength = <span class="keyword">null</span> == paramNames ? <span class="number">0</span> : paramNames.length;</span><br><span class="line"><span class="keyword">if</span> (paramLength == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramLength; i++) &#123;</span><br><span class="line">        paramNames[i] <span class="comment">// 参数名称</span></span><br><span class="line">        JSONObject.toJSONString(paramValues[i])<span class="comment">// 参数内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
</li>
</ol>
<h2 id="引入-目标类增加方法"><a href="#引入-目标类增加方法" class="headerlink" title="引入(目标类增加方法)"></a>引入(目标类增加方法)</h2><ol>
<li>概念：在不改变一个现有类代码的情况下，为该类添加属性和方法,可以在无需修改现有类的前提下，让它们具有新的行为和状态。</li>
<li>主要是使用<code>@DeclareParents</code>注解来实现。</li>
</ol>
<h2 id="重复获取RestController请求中body内容"><a href="#重复获取RestController请求中body内容" class="headerlink" title="重复获取RestController请求中body内容"></a>重复获取RestController请求中body内容</h2><ol>
<li><p>AOP可以对RestController中的方法进行切面，而涉及到这些Web请求的增强时通常会使用<code>HttpServletRequest</code>来获取请求的body等的内容，获取body内容时可能会出现问题，这里主要介绍如何解决这些问题。</p>
</li>
<li><p><code>HttpServletRequest</code>的获取使用如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取RequestAttributes</span></span><br><span class="line">RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">// RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes(); // 这个方法也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从获取的RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) requestAttributes</span><br><span class="line">  .resolveReference(RequestAttributes.REFERENCE_REQUEST);</span><br></pre></td></tr></table></figure>
</li>
<li><p>body内容的获取通过上面的方法的request来得到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  	System.out.println(<span class="keyword">new</span> String(request.getInputStream().readAllBytes()));</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"> 	  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是body的获取方法是<code>getInputStream</code>，这个只能读取一次，再次读取会抛出异常，因此，想要获取body中的内容，需要实现一个继承<code>HttpServletRequestWrapper</code>的类<code>RequestMapper</code>，并重写里面的<code>getInputStream</code>方法</li>
</ul>
</li>
<li><p>重写继承自<code>HttpServletRequestWrapper</code>的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; parameterMap; <span class="comment">// 所有参数的Map集合</span></span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeRequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        parameterMap = request.getParameterMap();</span><br><span class="line">        body= <span class="keyword">new</span> String(request.getInputStream().readAllBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写的getInputStream方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayInputStream is=<span class="keyword">new</span> ByteArrayInputStream(body.getBytes());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> is.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写几个HttpServletRequestWrapper中的方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有参数名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回所有参数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;String&gt;(parameterMap.keySet());</span><br><span class="line">        <span class="keyword">return</span> vector.elements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的值，如果有重复的参数名，则返回第一个的值 接收一般变量 ，如text类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 指定参数名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定参数名的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String[] results = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的所有值的数组，如：checkbox的所有数据</span></span><br><span class="line"><span class="comment">     * 接收数组变量 ，如checkobx类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameterMap</span><span class="params">(Map&lt;String, String[]&gt; parameterMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parameterMap = parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现一个过滤器类来使用重写的继承类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LangFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用requestWrapper过滤器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ChangeRequestWrapper changeRequestWrapper = <span class="keyword">new</span> ChangeRequestWrapper((HttpServletRequest) servletRequest);</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = <span class="keyword">new</span> HashMap&lt;&gt;(changeRequestWrapper.getParameterMap());</span><br><span class="line">        String[] strings = parameterMap.get(<span class="string">"lang"</span>);           <span class="comment">//逻辑代码给定默认的参数值,如果参数不为中文,则直接返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="keyword">null</span> || strings.length == <span class="number">0</span>) &#123;</span><br><span class="line">            strings = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">            strings[<span class="number">0</span>] = <span class="string">"zh"</span>;</span><br><span class="line">            parameterMap.put(<span class="string">"lang"</span>, strings);</span><br><span class="line">            changeRequestWrapper.setParameterMap(parameterMap);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String language = strings[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!language.equals(<span class="string">"zh"</span>)) &#123;</span><br><span class="line">                Map&lt;String,String&gt; error = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                error.put(<span class="string">"code"</span>,<span class="string">"500"</span>);</span><br><span class="line"></span><br><span class="line">                ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream = servletResponse.getOutputStream();</span><br><span class="line">                    outputStream.write(<span class="number">112</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outputStream.flush();</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用复写后的wrapper</span></span><br><span class="line">        filterChain.doFilter(changeRequestWrapper, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目中实现了这两个类之后，就可以在AOP中获取RestController的body中的内容！</p>
</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>在使用AOP切入方法的时候，方法的访问控制修饰符不可以是<code>private</code>（由于CGLib采用动态创建子类的方式代理对象，不能对目标类中的final或private方法进行代理），可以是<code>public</code>、<code>protected</code>以及不加任何访问修饰符！</li>
<li>AOP的默认配置属性中，<code>spring.aop.auto</code>属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了<code>@EnableAspectJAutoProxy</code>，不需要在程序主类中增加<code>@EnableAspectJAutoProxy</code>来启用！</li>
<li><strong>不宜把重要的业务逻辑放置到AOP中！</strong></li>
<li>AOP无法拦截<code>static</code>、<code>final</code>修饰的方法，也无法拦截内部方法调用，因为内部方法调用直接被调用，无法进行增强。</li>
<li>需要合理利用面向切面编程提升代码质量。</li>
<li>课程学习：<a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">https://www.imooc.com/learn/869</a></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SpringBoot项目中目前能想到的内容都基本上有去查询与记录，后续使用到一些更为麻烦的场景的时候再继续记录下来，不断扩充自己的AOP知识，这部分没有完整看官方的文档，目前的策略还是用到多少看多少，不然进度太慢了！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot AdminUI 健康监控</title>
    <url>/2020/05/25/SpringBoot-AdminUI-%E5%81%A5%E5%BA%B7%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringBoot 提供 Actuator 进行监控管理，Actuator 能够使开发者在项目生产时监视和管理应用程序，可使用 HTTP 的各种请求来监管，审计，收集应用的运行情况，此举对于微服务管理意义重大，但是缺点是没有可视化界面，但是有需求就有产出，AdminUI就是根据Actuator的输出信息进行监控可视化的插件，提供了较为友善的监控管理可视化功能！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建一个AdminUI服务端"><a href="#创建一个AdminUI服务端" class="headerlink" title="创建一个AdminUI服务端"></a>创建一个AdminUI服务端</h2><ol>
<li><p>添加pom.xml依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置属性配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">2001</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">AdminUi-Server</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类添加AdminUI使能注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminuiApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminuiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务，访问<a href="http://localhost:2001/applications：" target="_blank" rel="noopener">http://localhost:2001/applications：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f132d9c80169d728ed1e7711a5da7816-53505" alt=""></p>
</li>
</ol>
<h2 id="创建一个带有AdminUI的客户端"><a href="#创建一个带有AdminUI的客户端" class="headerlink" title="创建一个带有AdminUI的客户端"></a>创建一个带有AdminUI的客户端</h2><ol>
<li><p>添加pom.xml依赖（与AdminUI相关的依赖）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置属性配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin 客户端配置</span></span><br><span class="line"><span class="comment"># AdminUI的连接的server地址</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://127.0.0.1:2001</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-client</span></span><br><span class="line"><span class="comment"># actuator配置</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务，访问<a href="http://localhost:2001/applications：" target="_blank" rel="noopener">http://localhost:2001/applications：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f9816e269ecabc9d3ffff8b7bfa2582d-33875" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e05a4ca6e8dcf5e4cb32083dedd1fd93-118666" alt=""></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分的使用非常简单，主要就是知道一些actuator的配置，还有理解AdminUI的使用规则，就可以配置好了监控的界面，然后需要注意的是要添加spring-boot-admin-starter-client的版本，不然会出现找不到该依赖，还有一些安全相关的等后续学习了SpringSecurity进行详细的记录！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Filter QuickStart</title>
    <url>/2020/09/29/SpringBoot-Filter-QuickStart/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>过滤器、拦截器、AOP能从不同的程度满足拦截请求的过程，想要了解每种方式的差异性必须要深入了解区别，这部分主要记录过滤器的实操。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>过滤器是对数据进行过滤，预处理过程，SpringBoot的过滤器在实现上基于函数回调，可以对几乎所有请求进行过滤。</li>
<li>过滤器（<code>javax.servlet.Filter</code>）依赖于<code>Servlet</code>容器，属于<code>Servlet</code>规范的一部分。<code>Filter</code>的执行由<code>Servlet</code>容器回调完成，生命周期由<code>Servlet</code>容器管理。</li>
<li>Filter过滤器是servlet包下面的东西，因此不需要再额外引包。</li>
<li>官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-embedded-container-servlets-filters-listeners-scanning" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-embedded-container-servlets-filters-listeners-scanning</a></li>
<li>过滤器可以实现URL级别的权限控制、压缩响应信息、编码格式等等。</li>
<li>过滤器里面的三个方法：<ul>
<li><code>init</code>： filter对象只会创建一次，init方法也只会执行一次</li>
<li><code>doFilter</code> ： 主要的业务代码编写方法，可以多次重复调用</li>
<li><code>destroy</code>： 在销毁Filter时自动调用（程序关闭或者主动销毁Filter）</li>
</ul>
</li>
<li>在过滤器中，对于满足条件的请求，使用<code>filterChain.doFilter(request, response);</code>将连接转发到目的地，不满足，则直接通过response写入错误信息。</li>
<li><strong>过滤器可以包装Request和Response，而拦截器、AOP是不能的，<code>HttpServletRequest</code>并未开放接口提供修改头信息，但是利用过滤器+装饰模式可以修改HttpServletRequest的请求头信息。</strong></li>
</ol>
<h2 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h2><h3 id="Component注解"><a href="#Component注解" class="headerlink" title="Component注解"></a><strong>Component</strong>注解</h3><ol>
<li><p>直接实现<strong>Filter</strong>接口，并使用<strong>@Component</strong>注解标注为组件自动注入Bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化成功LogCostFilter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter Execute cost="</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当有多个过滤器的时候，使用<code>@Order(num)</code>进行优先级设定，数字越小，优先级越高：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化成功LogCostFilter2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="FilterRegistrationBean配置"><a href="#FilterRegistrationBean配置" class="headerlink" title="FilterRegistrationBean配置"></a><code>FilterRegistrationBean</code>配置</h3><ol>
<li><p>首先实现一个过滤器接口的类，比如记录时间的过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"Execute cost="</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>FilterRegistrationBean</code>配置该过滤器的规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>addUrlPatterns</code>可以添加多个过滤URI</li>
</ul>
</li>
<li><p>对于多个过滤器：</p>
<ol>
<li><p>再实现一个过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置类<code>FiltersConfig</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/body"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter2());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter2"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这个里面可以配置过滤器的优先级，有些时候是需要考虑优先级的</p>
</li>
<li><p>优先级数字越小，优先级越高</p>
</li>
<li><p>调试过滤器输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mapping filters: LogCostFilter urls=[<span class="comment">/*] order=2, LogCostFilter2 urls=[/*] order=5, characterEncodingFilter urls=[/*] order=-2147483648, formContentFilter urls=[/*] order=-9900, requestContextFilter urls=[/*] order=-105</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>Component</strong>可以和<code>FilterRegistrationBean</code>配合使用，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> cLogCostFilter clog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> bLogCostFilter2 blog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(blog);</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter2"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(clog);</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="WebFilter配置"><a href="#WebFilter配置" class="headerlink" title="WebFilter配置"></a><code>WebFilter</code>配置</h3><ol>
<li><p><code>@WebFilter</code> 用于将一个类声明为过滤器，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 )</p>
</li>
<li><p><code>@WebFilter</code>常用属性:</p>
<table>
<thead>
<tr>
<th align="left"><strong>属性名</strong></th>
<th align="left"><strong>类型</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">filterName</td>
<td align="left">String</td>
<td align="left">指定过滤器的 name 属性，等价于</td>
</tr>
<tr>
<td align="left">value</td>
<td align="left">String[]</td>
<td align="left">该属性等价于 urlPatterns 属性。但是两者不应该同时使用。</td>
</tr>
<tr>
<td align="left">urlPatterns</td>
<td align="left">String[]</td>
<td align="left">指定一组过滤器的 URL 匹配模式。等价于 标签。</td>
</tr>
<tr>
<td align="left">servletNames</td>
<td align="left">String[]</td>
<td align="left">指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中的 name 属性的取值，或者是 web.xml 中 的取值。</td>
</tr>
<tr>
<td align="left">dispatcherTypes</td>
<td align="left">DispatcherType</td>
<td align="left">指定过滤器的转发模式。具体取值包括： ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td>
</tr>
<tr>
<td align="left">initParams</td>
<td align="left">WebInitParam[]</td>
<td align="left">指定一组过滤器初始化参数，等价于 标签。</td>
</tr>
<tr>
<td align="left">asyncSupported</td>
<td align="left">boolean</td>
<td align="left">声明过滤器是否支持异步操作模式，等价于 标签。</td>
</tr>
<tr>
<td align="left">description</td>
<td align="left">String</td>
<td align="left">该过滤器的描述信息，等价于 标签。</td>
</tr>
<tr>
<td align="left">displayName</td>
<td align="left">String</td>
<td align="left">该过滤器的显示名，通常配合工具使用，等价于 标签。</td>
</tr>
</tbody></table>
</li>
<li><p>使用的时候先要在过滤器类上添加<code>@WebFilter</code>注解，然后在启动类上加上<code>@ServletComponentScan</code>注解来扫描：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"LogCostFilter2"</span>,urlPatterns = &#123;<span class="string">"/1"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bLogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 inited!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扫描多个包时，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span>(basePackages = &#123;<span class="string">"com.example.springboot.servlet"</span>,<span class="string">"com.example.springboot.filter"</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加多个过滤地址的方式类下面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/config/*"</span>,<span class="string">"/driver/*"</span>,<span class="string">"/order/*"</span>,<span class="string">"/im/*"</span>,<span class="string">"/privacy/*"</span>,<span class="string">"/config/*"</span>&#125;, filterName = <span class="string">"apiFilter"</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>对于在同一个包下的filter，采用这种方式的时候，过滤器的执行顺序按照过滤器名来决定，比如aLogCostFilter2&gt;bLogCostFilter2,在不同包下更复杂（有博客去说，但是没有验证）</p>
</li>
<li><p>使用了该方式就不要使用<code>@Component</code>注解的方式了，两个选其一，过滤器会被多次初始化以及执行。如果有<code>FilterRegistrationBean</code>则该方式的过滤器不生效。</p>
</li>
<li><p>有多个Filter的时候，<code>filterName</code>属性不能相同，否则会出错。可以配置配置文件修改覆盖，但是不推荐：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启用覆盖同名bean</span></span><br><span class="line"><span class="meta">spring.main.allow-bean-definition-overriding</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过滤器想对来说还是很容易理解的，记录了几种不同的过滤器设置规则，但是觉得还是<code>FilterRegistrationBean</code>比较好用，非常友好，其他的都有一些缺陷，<code>FilterRegistrationBean</code>能够设置过滤的规则，过滤器的优先顺序，相比<code>WebFilter</code>这种优先级的设置要觉得清楚很多，个人优先考虑<code>FilterRegistrationBean</code>。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Json快速使用</title>
    <url>/2020/06/05/SpringBoot-Json%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Json在Java、以及SpringBoot中被大量的使用，特别是出现了后端开发中，经常要将Java对象转换成Json字符串，或者将Json字符串转换成POJO，Java基本库的Json提供的功能实在是让人吐槽，在使用SpringBoot的过程中搜索到了Jackson，基本上满足了需求，这里主要介绍Jackson在SpringBoot中的使用，以及踩过的坑！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Jackson基本介绍"><a href="#Jackson基本介绍" class="headerlink" title="Jackson基本介绍"></a>Jackson基本介绍</h2><ol>
<li><p>Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象！</p>
</li>
<li><p>特点：</p>
<ol>
<li>容易使用，API提供了一个高层次外观，以简化常用的用例</li>
<li>无需创建映射，API提供了默认的映射大部分对象序列化</li>
<li>性能高 ，快速，低内存占用，适合大型对象图表或系统</li>
<li>干净的JSON ，创建一个干净和紧凑的JSON结果，这是让人很容易阅读</li>
<li>不需要任何其他的库依赖，除了JDK</li>
<li>开放源代码</li>
</ol>
</li>
<li><p>数据处理方式：</p>
<ol>
<li>流式API，读取并将JSON内容写入作为离散事件</li>
<li>树模型，准备JSON文件在内存里以树形式表示</li>
<li>数据绑定，转换JSON并从POJO（普通Java对象）使用属性访问或使用注释</li>
</ol>
</li>
<li><p>Jackson转换操作步骤：</p>
<ol>
<li><p>创建ObjectMapper对象，它是一个可重复使用的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br></pre></td></tr></table></figure>
</li>
<li><p>反序列化Json到对象，从Json对象使用readValue()方法来获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object to JSON Conversion</span></span><br><span class="line">ObjectTest objectTest = mapper.readValue(jsonString, ObjectTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>序列化对象到Json,使用writeValueAsString()方法来获取对象的Json字符串表示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jsonString = mapper.writeValueAsString(objectTest);</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>ObjectMapper类是Jackson库的主要类，提供一些功能将转换成Java对象匹配JSON结构，反之亦然；使用JsonParser和JsonGenerator的实例实现JSON实际的读/写！</p>
</li>
<li><p>简单数据绑定：</p>
<table>
<thead>
<tr>
<th>JSON类型</th>
<th>Java类型</th>
</tr>
</thead>
<tbody><tr>
<td>object</td>
<td>LinkedHashMap&lt;String,Object&gt;</td>
</tr>
<tr>
<td>array</td>
<td>ArrayList&lt;Object&gt;</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
</tr>
<tr>
<td>complete number</td>
<td>Integer, Long or BigInteger</td>
</tr>
<tr>
<td>fractional number</td>
<td>Double / BigDecimal</td>
</tr>
<tr>
<td>true|false</td>
<td>Boolean</td>
</tr>
<tr>
<td>null</td>
<td>null</td>
</tr>
</tbody></table>
</li>
<li><p>jackson 凭借其简洁的语法、高效的处理速度、丰富的功能、清晰的文档等众多优势，受到广大开发者的热爱，成为了java程序员处理json数据的不二选择！</p>
</li>
<li><p>官方文档：<a href="https://www.baeldung.com/jackson" target="_blank" rel="noopener">https://www.baeldung.com/jackson</a></p>
</li>
</ol>
<h2 id="Jackson实操（Maven管理）"><a href="#Jackson实操（Maven管理）" class="headerlink" title="Jackson实操（Maven管理）"></a>Jackson实操（Maven管理）</h2><ol>
<li><p>添加依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--FastJson转POJO--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Json与POJO转换类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonExchange</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">jsonToObj</span><span class="params">(Object obj,String jsonStr)</span> <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">return</span> obj = mapper.readValue(jsonStr, obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objToJson</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">return</span> mapper.writeValueAsString(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据JSON字符串格式定义对应的POJO：</p>
<ul>
<li><p>JSON字符串格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"__statusCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"__errorMessage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"ExpiryTime"</span>: <span class="string">"2020-06-30 21:06:39"</span>,</span><br><span class="line">    <span class="attr">"IdentifyingCode"</span>: <span class="string">"1831593524811799170190"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>POJO定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式：&#123;"__statusCode":"1","__errorMessage":null,"data":&#123;"ExpiryTime":"2020-06-01 10:11:09","IdentifyingCode":"3181590974086869036505"&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentifyingCodeData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String __statusCode;</span><br><span class="line">    <span class="keyword">private</span> String __errorMessage;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">private</span> IdentifyingCode data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造函数，必须要有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentifyingCodeData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentifyingCodeData</span><span class="params">(String __statusCode, String __errorMessage, IdentifyingCode data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.__statusCode = __statusCode;</span><br><span class="line">        <span class="keyword">this</span>.__errorMessage = __errorMessage;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get__statusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set__statusCode</span><span class="params">(String __statusCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.__statusCode = __statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get__errorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set__errorMessage</span><span class="params">(String __errorMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.__errorMessage = __errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdentifyingCode <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(IdentifyingCode data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentifyingCode</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>,timezone=<span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"ExpiryTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date expiryTime;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"IdentifyingCode"</span>)</span><br><span class="line">    <span class="keyword">private</span> String identifyingCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentifyingCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdentifyingCode</span><span class="params">(Date expiryTime, String identifyingCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expiryTime = expiryTime;</span><br><span class="line">        <span class="keyword">this</span>.identifyingCode = identifyingCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getExpiryTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expiryTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpiryTime</span><span class="params">(Date expiryTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expiryTime = expiryTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdentifyingCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> identifyingCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdentifyingCode</span><span class="params">(String identifyingCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.identifyingCode = identifyingCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String content=<span class="string">"JSON字符串"</span>;</span><br><span class="line">IdentifyingCodeData identifyingCodeData= (IdentifyingCodeData) JsonExchange.jsonToObj(<span class="keyword">new</span> IdentifyingCodeData(),content);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Json数组内容为Json对象的复杂Json串：</p>
<ul>
<li><p>定义POJO，需要注意构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesCountDataReal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String __statusCode;</span><br><span class="line">    <span class="keyword">private</span> String __errorMessage;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">private</span> ClassesCountDataArr data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountDataReal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get__statusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set__statusCode</span><span class="params">(String __statusCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.__statusCode = __statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get__errorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set__errorMessage</span><span class="params">(String __errorMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.__errorMessage = __errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassesCountDataArr <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ClassesCountDataArr data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesCountDataArr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ClassesCountData&gt; arr;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountDataArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountDataArr</span><span class="params">(String arr)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JsonNode rootNode = mapper.readTree(arr);</span><br><span class="line">        <span class="comment">// 获取json数组的值----进行循环遍历</span></span><br><span class="line">        JsonNode dewatering_speedNode = rootNode.get(<span class="string">"arr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != dewatering_speedNode &amp;&amp; dewatering_speedNode.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ArrayList&lt;ClassesCountData&gt; dewatering_speed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JsonNode node : dewatering_speedNode) &#123;</span><br><span class="line">                ClassesCountData dewaterSpeed=<span class="keyword">new</span> ClassesCountData();</span><br><span class="line">                dewaterSpeed.setClasses(node.get(<span class="string">"classes"</span>).asText());</span><br><span class="line">                dewaterSpeed.setCount(node.get(<span class="string">"count"</span>).asText());</span><br><span class="line">                dewatering_speed.add(dewaterSpeed);</span><br><span class="line">            &#125;</span><br><span class="line">            setArr(dewatering_speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ClassesCountData&gt; <span class="title">getArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(List&lt;ClassesCountData&gt; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesCountData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"classes"</span>)</span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"count"</span>)</span><br><span class="line">    <span class="keyword">private</span> String count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountData</span><span class="params">(String classes, String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classes = classes;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClasses</span><span class="params">(String classes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(String count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON字符串格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"__statusCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"__errorMessage"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"arr"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"classes"</span>:<span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"count"</span>:<span class="string">"2280"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>POJO主要添加了参数为String的构造函数，手动解析数组内容，其他的复杂类型也是一样的！</p>
</li>
</ul>
</li>
<li><p>需要注意的是POJO的构造函数一定要实现，不然会出现意想不到的问题！</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JSON非常的重要，在现在的微服务中经常用来返回数据，因此在这里记录一下，真的是踩了很多的坑才使用起来！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot kafka Quick Start</title>
    <url>/2020/08/25/SpringBoot-Kafka-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache Kafka是一个开源消息系统，由Scala写成。Kafka是一个分布式消息队列：生产者、消费者的功能，提供了类似于JMS的特性，但是在设计实现上完全不同。Kafka对消息保存时根据Topic进行归档，发送消息者统称为Producer，消息接收者统称为Consumer，而且Kafka支持分布式，可以由多个实例组成Kafka集群，每个实例称为broker。本文主要记录如何搭建Kafka环境以及通过SpringBoot构建Kafka消息Producer以及Consumer。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><ol>
<li>JMS是Java提供的一套技术规范。JMS用来异构系统，缓解系统瓶颈，提高系统的伸缩性并且增强系统用户体验，使得系统模块化和组件化变得可行、灵活；</li>
<li>消息系统的核心：解耦、异步以及并行；</li>
<li>JMS消息传输模型：<ul>
<li>点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）</li>
<li>发布/订阅模式（一对多，数据生产后，推送给所有订阅者）</li>
</ul>
</li>
<li>消息队列（点对点模式）是当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。生产者发送一条消息到队列中，只有一个消费者能收到；</li>
<li>发布-订阅消息系统中，消息被持久化到一个Topic中。消费者可以订阅一个或多个Topic，消费者可以消费该Topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除；</li>
<li>消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这样可以独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束！</li>
<li>使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷请求而完全崩溃！</li>
</ol>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ol>
<li><p>Kafka最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式消息平台；</p>
</li>
<li><p>主要应用场景：日志收集以及消息分发。在架构设计中起到解耦、削峰、异步处理的作用：</p>
<ul>
<li>构建在系统或应用程序之间可靠获取数据的实时数据流管道</li>
<li>构建转换或响应数据流的实时流应用程序</li>
</ul>
</li>
<li><p>Kafka核心组件：</p>
<ul>
<li>Topic ：消息根据Topic进行归类</li>
<li>Producer：发送消息者</li>
<li>Consumer：消息接受者</li>
<li>broker：每个kafka实例(server)</li>
<li>Zookeeper：依赖集群保存meta信息</li>
</ul>
</li>
<li><p>Kafka特性：</p>
<ul>
<li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能</li>
<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输</li>
<li>支持Kafka Server间的消息分区，及分布式消费，同时<strong>保证每个partition内的消息顺序传输</strong></li>
<li>同时支持离线数据处理和实时数据处理</li>
<li>支持在线水平扩展</li>
</ul>
</li>
<li><p>分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息；</p>
</li>
<li><p>Kafka的优点：解耦、冗余（副本）、扩展性、灵活性&amp;峰值处理能力、可恢复性、顺序保证、缓冲、异步通信等！</p>
</li>
<li><p>Kafka的用法大致就是Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉取指定Topic的消息，然后进行业务处理。如下图所示，有两个topic，topic 0有两个partition，topic 1有一个partition，三副本备份：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4523a3e43cc57fc934535cc3db429a12-155422" alt="Kafka数据流"></p>
</li>
<li><p>当存在多副本的情况下，会尽量把多个副本，分配到不同的broker上。kafka会为partition选出一个leader，之后所有该partition的请求，实际操作的都是leader，然后再同步到其他的follower。当一个broker歇菜后，所有leader在该broker上的partition都会重新选举，选出一个leader；</p>
</li>
<li><p>kafka的成功不是技术有多厉害，而是它的业务厉害，能抽象很多的名词术语，已经说明了这款产品设计多么精妙；</p>
</li>
<li><p>Kafka官方中文网址：<a href="https://kafka.apachecn.org/" target="_blank" rel="noopener">https://kafka.apachecn.org/</a></p>
</li>
</ol>
<h3 id="常用消息队列工具对比"><a href="#常用消息队列工具对比" class="headerlink" title="常用消息队列工具对比"></a>常用消息队列工具对比</h3><ol>
<li><strong>RabbitMQ</strong>支持了很多的协议：AMQP，XMPP, SMTP, STOMP。实现了Broker架构，并且对路由、负载均衡以及数据持久化都有很好的支持；</li>
<li><strong>Redis</strong>是一个基于Key-Value对的NoSQL数据库，支持MQ功能，可以当成一个轻量级的队列服务来使用；</li>
<li><strong>ZeroMQ</strong>能够实现RabbitMQ不擅长的高级/复杂的队列，开发人员需要自己组合多种技术框架，技术上的复杂度是能够应用成功的挑战；</li>
<li><strong>ActiveMQ</strong>能够以代理人和点对点的技术实现队列，可以少量代码实现高级应用场景；</li>
<li><strong>Jafka</strong>在Kafka之上孵化而来的，能够快速持久化、高吞吐、完全分布式系统、自动实现负载均衡；</li>
<li><strong>MetaQ/RocketMQ</strong> 纯Java实现，发布/订阅消息系统，支持本地事务和XA分布式事务；</li>
</ol>
<h2 id="Docker构建Kafka环境"><a href="#Docker构建Kafka环境" class="headerlink" title="Docker构建Kafka环境"></a>Docker构建Kafka环境</h2><ol>
<li><p>在涉及到Apache Kafka的快速demo时，使用Docker Hub上提供的镜像免去了很多安装配置上的麻烦；</p>
</li>
<li><p>下载镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> zookeeper镜像</span></span><br><span class="line">docker pull zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> kafka镜像</span></span><br><span class="line">docker pull wurstmeister/kafka</span><br><span class="line"><span class="meta">#</span><span class="bash"> kafka管理者镜像</span></span><br><span class="line">docker pull kafkamanager/kafka-manager</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写docker-compose启动文件docker-compose.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">kafka2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9093</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafkamanagement:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kafkamanager/kafka-manager</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZK_HOSTS=zookeeper:2181</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>KAFKA_ADVERTISED_HOST_NAME以及KAFKA_ADVERTISED_PORT是Kafka对外暴露的地址以及端口</li>
<li>多zookeeper配置文件如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2181:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line">            </span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2182:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2183:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">kafka:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line">    <span class="attr">kafka2:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9093</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">kafkamanagement:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">kafkamanager/kafka-manager</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ZK_HOSTS=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用的时候只要在docker-compose.yml目录下键入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compse up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kafka管理器界面：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9dc0086c6be668e992dc205683065b33-19922" alt="Kafka管理界面"></p>
</li>
<li><p>添加Kafka集群管理，按照下图配置即可，其他的保持默认即可：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/85458fa87843fbf70c87b603d3a78fa8-99994" alt="添加Kafka集群"></p>
</li>
<li><p>Brokers展示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f4b02377c8e40f08a10acb5d283d51ea-86405" alt="Brokers展示"></p>
</li>
</ol>
<h2 id="SpringBoot快速接入Kafka"><a href="#SpringBoot快速接入Kafka" class="headerlink" title="SpringBoot快速接入Kafka"></a>SpringBoot快速接入Kafka</h2><ol>
<li><p>在项目中添加Kafka依赖(pom.xml)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件添加：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kafka默认消费者配置 </span></span><br><span class="line"><span class="meta">spring.kafka.consumer.bootstrap-servers</span>=<span class="string">127.0.0.1:9092,127.0.0.1:9093</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.enable-auto-commit</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.auto-offset-reset</span>=<span class="string">earliest</span></span><br><span class="line"><span class="comment">#kafka默认生产者配置</span></span><br><span class="line"><span class="meta">spring.kafka.producer.bootstrap-servers</span>=<span class="string">127.0.0.1:9092,127.0.0.1:9093</span></span><br><span class="line"><span class="meta">spring.kafka.producer.acks</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">spring.kafka.client-id</span>=<span class="string">kafka-producer</span></span><br><span class="line"><span class="meta">spring.kafka.producer.batch-size</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.kafka.producer.key-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="meta">spring.kafka.producer.value-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Kafka配置代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.producer.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------producer configuration-----------------**/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">producerConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);</span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, <span class="number">0</span>);</span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, Object&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------kafka template configuration-----------------**/</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"kafkaTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, Object&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KafkaTemplate&lt;String, Object&gt; kafkaTemplate = <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">        <span class="keyword">return</span> kafkaTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建TopicName为topic.wander.initial的Topic并设置分区数为10以及副本数为1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NewTopic <span class="title">initialTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NewTopic(<span class="string">"topic.wander.initial"</span>,<span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String kafkaServers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AdminClient <span class="title">adminClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//配置Kafka实例的连接地址</span></span><br><span class="line">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServers);</span><br><span class="line">        <span class="keyword">return</span> AdminClient.create(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加kafka监听器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMessageReceiver2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line">    <span class="meta">@KafkaListener</span>(id = <span class="string">"myListener1"</span>,topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"da"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume da "</span>+integerStringConsumerRecords.value());</span><br><span class="line">      <span class="comment">//  kafkaTemplate.send("TEST",integerStringConsumerRecords.value());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(id = <span class="string">"myListener2"</span>,topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"db"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">  <span class="comment">//  @SendTo("DC2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver2</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume db "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"dc"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver3</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume dc "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"d9"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver4</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume d9 "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加注解@EnableKafka：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafakaproviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(KafakaproviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个控制器添加消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"监听器发送消息!"</span>);</span><br><span class="line">        kafkaTemplate.send(<span class="string">"da"</span>, <span class="string">"1条测试消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目即可。访问<a href="http://localhost:8080/test，然后监听器就能收到消息！" target="_blank" rel="noopener">http://localhost:8080/test，然后监听器就能收到消息！</a></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Kafka上手是有点难度的，这里只是简单的快速入门，还需要深入学习！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Mybatis Quick Start</title>
    <url>/2020/08/27/SpringBoot-Mybatis-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录!Mybatis属于半自动化配置，在项目开发中直接使用了Mybatis，真的是有很长时间去写Mapper中的SQL语句了，真心体会了MybatisPlus的妙处！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li>MyBatis 主要提供了以下CRUD注解：（增删改查占据了绝大部分的业务操作）<ul>
<li>@Select</li>
<li>@Insert</li>
<li>@Update</li>
<li>@Delete</li>
</ul>
</li>
<li>Mybatis主要提供这些映射注解：<ul>
<li>@Results 用于填写结果集的多个字段的映射关系，property表示实体对象的属性名，column表示对应的数据库字段名</li>
<li>@Result 用于填写结果集的单个字段的映射关系</li>
<li>@ResultMap 根据ID关联XML里面&lt;resultMap&gt;</li>
</ul>
</li>
<li>MyBatis-3 主要提供了以下CRUD的高级注解：（主要用于动态SQL）<ul>
<li>@SelectProvider</li>
<li>@InsertProvider</li>
<li>@UpdateProvider</li>
<li>@DeleteProvider</li>
</ul>
</li>
<li>官方中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
<li>mybatis-spring-boot-autoconfigure：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></li>
<li>mybatis-PageHelper参考代码：<a href="https://github.com/abel533/MyBatis-Spring-Boot" target="_blank" rel="noopener">https://github.com/abel533/MyBatis-Spring-Boot</a></li>
<li>Mybatis中文网：<a href="http://www.mybatis.cn/" target="_blank" rel="noopener">http://www.mybatis.cn/</a></li>
</ol>
<h2 id="分页插件参数说明"><a href="#分页插件参数说明" class="headerlink" title="分页插件参数说明"></a>分页插件参数说明</h2><ol>
<li><strong>helperDialect</strong>：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。可以指定分页插件使用哪种方言，比如oracle，mysql，mariadb，sqlite，hsqldb，postgresql，db2，sqlserver，informix，h2，sqlserver2012，derby；</li>
<li><strong>offsetAsPageNum</strong>：该参数对使用 RowBounds 作为分页参数时有效，默认false，当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页；</li>
<li><strong>rowBoundsWithCount</strong>：该参数对使用 RowBounds 作为分页参数时有效，默认false，当该参数设置为 true 时，使用 RowBounds 分页会进行 count 查询；</li>
<li><strong>pageSizeZero</strong>：该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果，默认false；</li>
<li><strong>reasonable</strong>：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页；</li>
<li><strong>params</strong>：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero；</li>
<li>其他参数可以看官方文档：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><ol>
<li><p>创建一个SpringBoot项目，添加Mybatis相关依赖，包含分页插件（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置文件（application.yml）:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置pagehelper参数</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加扫描Mapper的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wander.mybatis"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个数据类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据类的Mapper：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**  <span class="doctag">@Results</span>(&#123; //2</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "id", column = "id"), //2</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "name", column = "name"),</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "email", column = "email")</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT name FROM user"</span>)</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getAllName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id =#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM user WHERE name = #&#123;name&#125;"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getFromName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO user(id,name, email) VALUES (#&#123;id&#125;, #&#123;name&#125;,#&#123;email&#125;)"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO user(id,name, email) VALUES (#&#123;id&#125;, #&#123;name&#125;,#&#123;email&#125;)"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,email)"</span></span><br><span class="line">          + <span class="string">"values                   "</span></span><br><span class="line">          + <span class="string">"(#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;) "</span>)</span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">insertUserByParam</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id,</span></span><br><span class="line"><span class="function">                        @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                        @<span class="title">Param</span><span class="params">(<span class="string">"email"</span>)</span> String email)</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Update</span>(<span class="string">"update user set  "</span></span><br><span class="line">          + <span class="string">"name = #&#123;name&#125;,  "</span></span><br><span class="line">          + <span class="string">"email  = #&#123;email&#125;    "</span></span><br><span class="line">          + <span class="string">"where id = #&#123;id&#125; "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User bean)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"delete from user  "</span></span><br><span class="line">          + <span class="string">"where id = #&#123;id&#125;  "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"delete from user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">deleteUserAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * truncate 返回值为0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"truncate table user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">truncateUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"select count(*) from user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">selectCountUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试的控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users= userDao.getAll();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pages/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getpage</span><span class="params">(@PathVariable <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(page,<span class="number">5</span>);</span><br><span class="line">        List&lt;User&gt; users= userDao.getAll();</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo=<span class="keyword">new</span> PageInfo(users,<span class="number">3</span>);</span><br><span class="line">        System.out.println(pageInfo);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pages2/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">getpage2</span><span class="params">(@PathVariable <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; pager =PageHelper.startPage(page,<span class="number">5</span>);</span><br><span class="line">        List&lt;User&gt; users= userDao.getFromName(<span class="string">"lisi"</span>);</span><br><span class="line">        System.out.println(pager.getTotal());</span><br><span class="line">        System.out.println(pager.size());</span><br><span class="line">        System.out.println(pager.get(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 第一个User对象，参考list，序号0是第一个元素，依此类推</span></span><br><span class="line">        <span class="comment">//pager.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        User user=userDao.findById(id);</span><br><span class="line">        log.info(<span class="string">"username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/insert/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id,String name,String email)</span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">        log.info(<span class="string">"username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/trans"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transactionalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">15</span>);</span><br><span class="line">        user.setName(<span class="string">"lisi15"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"lisi14@email.com"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userDao.insertUser(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"!!!!!"</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"!!!!---成功----username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    user.setName(<span class="string">"lisi"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"lisi@email.com"</span>);</span><br><span class="line">    userDao.insertUser(user);</span><br><span class="line">&#125;<span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"!!!!!"</span>+e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"!!!!---失败----username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMapUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"lier"</span>);</span><br><span class="line">        map.put(<span class="string">"email"</span>,<span class="string">"email@email.com"</span>);</span><br><span class="line">        userDao.insertUserByMap(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertParamUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.insertUserByParam(<span class="number">6</span>,<span class="string">"you"</span>,<span class="string">"you@email.com"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/name/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">        List&lt;User&gt; users=userDao.getFromName(id);</span><br><span class="line">        users.forEach(user-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">"userid: &#123;&#125; ,useremail: &#123;&#125;"</span>,user.getId(),user.getEmail());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=userDao.selectCountUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"一共有 "</span>+Integer.toString(count)+<span class="string">" 名成员！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletebyId</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i= userDao.deleteUserById(id);</span><br><span class="line">        log.error(<span class="string">"delete user id :&#123;&#125;,return &#123;&#125;"</span>,id,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4</span>);</span><br><span class="line">        user.setName(<span class="string">"Fuck"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"fuck@email.com"</span>);</span><br><span class="line">        <span class="keyword">int</span> i= userDao.updateUser(user);</span><br><span class="line">        log.error(<span class="string">"update user return &#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletebyId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i= userDao.deleteUserAll();</span><br><span class="line">        log.error(<span class="string">"delete user return &#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：分页的函数与要执行的查询SQL语句的函数不能隔离，最好上下行，否则有可能出错</li>
<li><strong>只有紧跟在PageHelper.startPage方法后的第一个Mybatis的查询（Select）方法会被分页</strong></li>
<li>对于带有for update的sql，会抛出运行时异常，对于这样的sql建议手动分页，毕竟这样的sql需要重视</li>
<li><strong>分页插件不支持嵌套结果映射</strong></li>
</ul>
</li>
<li><p>启动项目，然后就可以测试了。</p>
</li>
<li><p>建议开发过程中还是引入MP！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot MybatisPlus Quick Start</title>
    <url>/2020/09/26/SpringBoot-MybatisPlus-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>真的是好久没有写学习日志了，一方面和最近这一个月的状态有关，另一方面也可能上上班太累了吧，每天都有很多杂七杂八的活，然后又重构项目，在这种状态下人真的很颓废，然后收拾一下自己的房间，也收拾一下自己的心情，不能放弃学习记录的习惯，更不能让坏心情影响了自己，之前有去接触了下MybatisPlus（以下简称MP），本以为自己会很快建立新项目引入MP，实际上却出现了不少的问题，记录下这些东西很有意义的内容，快速成长吧！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="自动化SQL"><a href="#自动化SQL" class="headerlink" title="自动化SQL"></a>自动化SQL</h2><p>在开发过程中建立好了表，如果迁移到测试环境或者其他环境中，可能需要手动执行SQL语句来执行表的建立以及数据的导入，非常不方便，但是Spring中提供了在项目启动时执行sql语句的配置，只要配置好了就可以自动建表以及插入数据。自动建表的配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>spring.datasource.schema</code>用于建立表，<code>classpath:sql/schema.sql</code>代表的是会从resources下的sql文件夹中搜索schema.sql文件然后执行</li>
<li><code>spring.datasource.data</code>用于导入数据，<code>classpath:sql/data.sql</code>代表的是会从resources下的sql文件夹中搜索data.sql文件然后执行</li>
<li><code>spring.datasource.initialization-mode</code>用于设置sql文件是否执行，内建数据库的文件执行不需要设置，但是其他的需要设置该配置</li>
</ul>
<h2 id="去除IDEA中的自动注入Mapper的警告"><a href="#去除IDEA中的自动注入Mapper的警告" class="headerlink" title="去除IDEA中的自动注入Mapper的警告"></a>去除IDEA中的自动注入Mapper的警告</h2><p>不管是直接使用Mybatis还是使用MP，在IDE工程中自动注入Mapper的时候就会出现警告，虽然没什么问题，但是就让人觉得代码好像是有问题似的，对于开发人员而言，有点强迫症的是很难忍受红色波浪线的警告，这里经过测试记录下可以使用的解决方案。</p>
<ol>
<li><p>在Mapper的注入时，为<code>@Autowired</code>注解设置<code>required=false</code>，样例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure>

<ul>
<li>IDEA认为userMapper是个null，给了警告；加上了required = false后，使用 <code>@Autowired</code> 注解不再去校验userMapper是否存在了，因而也就没有警告了</li>
</ul>
</li>
<li><p>在Mapper的注入时，用<code>@Resource</code>替换<code>@Autowired</code>，样例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以在自动注入Mapper的时候使用<code>@Resource</code>注解</li>
<li><code>@Autowired</code>与<code>@Resource</code>都可以用来装配Bean</li>
<li><code>@Autowired</code>默认按类型装配（该注解属于Spring），而@Resource（该注解属于J2EE）有name和type两个重要的属性，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型</li>
</ul>
</li>
<li><p>在需要使用Mapper的类上添加注解<code>@RequiredArgsConstructor(onConstructor = @__(@Autowired))</code>，并且设置mapper为<code>final</code>，样例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个方法有点不推荐使用，感觉不太爽，而且在类的依赖关系比较复杂的时候可能启动不起来</li>
</ul>
</li>
<li><p>关闭IDEA的警告（不推荐）</p>
<ul>
<li>进入 Settings，找到 Inspection，并选择其中的 Spring Core -&gt; Code -&gt; Autowiring for Bean Class,将 Error 改为 Warning</li>
<li>关闭了IDEA的警告，没有提示反而不能帮助我们写出高质量代码，当然代码的质量还在于开发人员</li>
<li>关于IDEA的Mapper警告还可以安装插件，但是具体哪个插件没有去尝试</li>
</ul>
</li>
</ol>
<h2 id="MP的使用"><a href="#MP的使用" class="headerlink" title="MP的使用"></a>MP的使用</h2><h3 id="基础介绍及使用"><a href="#基础介绍及使用" class="headerlink" title="基础介绍及使用"></a>基础介绍及使用</h3><ol>
<li><p>官方指导文档：<a href="https://mybatis.plus/guide/" target="_blank" rel="noopener">https://mybatis.plus/guide/</a></p>
</li>
<li><p>代码托管地址：<a href="https://github.com/baomidou" target="_blank" rel="noopener">https://github.com/baomidou</a></p>
</li>
<li><p>MP官方示例：<a href="https://github.com/baomidou/mybatis-plus-samples" target="_blank" rel="noopener">https://github.com/baomidou/mybatis-plus-samples</a></p>
</li>
<li><p>MP只是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变，为简化开发、提高效率而生！原理上就是已经封装好了一些crud方法，从官方的介绍也知道MP的使用是依赖于Mybatis的，在项目中没有添加Mybatis的依赖的话会出现错误。</p>
</li>
<li><p>首先需要启动好自己的MySQL数据库，然后确保能够连接数据库，不然SpringBoot项目是没法启动的，可以使用Docker启动一个MySQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>还需要建立数据库，比如我创建的是mybatis</li>
</ul>
</li>
<li><p>添加Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.1.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>引入MP就不需要再引入Mybatis依赖了，以免冲突</strong></li>
</ul>
</li>
<li><p>在项目中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按照自动化SQL的说明来建立schema.sql以及data.sql，添加SQL语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表<code>tb_user</code>对应的Persistent Object（PO）User：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@TableName</code>用于映射表名</li>
<li><code>@TableId</code>用于声明主键，属性type可以用于在PO中的主键没设置时自动生成（依据策略），<code>IdType.ASSIGN_UUID</code>和<code>IdType.ASSIGN_ID</code>推荐使用</li>
<li><code>@TableField</code>用在非主键对应的属性上，可以指定属性对应的数据库字段名，同时也可以设置字段是否为空等属性</li>
<li><code>@TableLogic</code> : 用在标记逻辑删除的字段属性上，使用该注解后，Myabtis Plus 所有针对该表的删除都将执行逻辑删除(即更新操作)，而不使用该注解，Mybatis Plus 执行的删除操作为物理删除</li>
</ul>
</li>
<li><p>创建Mapper：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>继承自<code>BaseMapper</code>则可以少写很多SQL语句</li>
</ul>
</li>
<li><p>在启动类上添加扫描Mapper注解，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mapper"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以测试是否引入成功：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span>  UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">"123"</span>);</span><br><span class="line">        user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="引入分页插件（第三方）"><a href="#引入分页插件（第三方）" class="headerlink" title="引入分页插件（第三方）"></a>引入分页插件（第三方）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加分页测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="string">"123"</span>);</span><br><span class="line">    user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    PageHelper.startPage(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用MP的分页-版本3-4"><a href="#使用MP的分页-版本3-4" class="headerlink" title="使用MP的分页(版本3.4)"></a>使用MP的分页(版本3.4)</h3><ol>
<li><p><strong>3.4版本之后</strong>和之前的版本分页插件是不同的，记录时就是喜欢用新的，新版本的成了内置插件，主体插件<code>MybatisPlusInterceptor</code>，包含了多个内部插件：</p>
<ul>
<li>分页插件: <code>PaginationInnerInterceptor</code></li>
<li>多租户插件: <code>TenantLineInnerInterceptor</code></li>
<li>动态表名插件: <code>DynamicTableNameInnerInterceptor</code></li>
<li>乐观锁插件: <code>OptimisticLockerInnerInterceptor</code></li>
<li>sql性能规范插件: <code>IllegalSQLInnerInterceptor</code></li>
<li>防止全表更新与删除插件: <code>BlockAttackInnerInterceptor</code></li>
</ul>
</li>
<li><p><strong>新提供的插件不得和同功能的旧插件一同使用，之前的插件在新版本里是属于废弃状态的！</strong></p>
</li>
<li><p>分页查询分为物理分页和逻辑分页：</p>
<ul>
<li>物理分页：相当于执行了limit分页语句，返回部分数据，占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景</li>
<li>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据，数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合</li>
</ul>
</li>
<li><p>如果内部插件都是使用,需要注意顺序关系,建议使用如下顺序：</p>
<ol>
<li>多租户插件,动态表名插件</li>
<li>分页插件,乐观锁插件</li>
<li>sql性能规范插件,防止全表更新与删除插件</li>
</ol>
<ul>
<li><strong>对sql进行单次改造的优先放入,不对sql进行改造的最后放入</strong></li>
</ul>
</li>
<li><p>添加配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testselectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">"总条数 ------&gt; "</span> + userIPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"总页数 ------&gt; "</span> +  userIPage.getPages());</span><br><span class="line">    System.out.println(<span class="string">"当前页数 ------&gt; "</span> + userIPage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">"当前每页显示数 ------&gt; "</span> + userIPage.getSize());</span><br><span class="line">    System.out.println(userIPage.getCurrent()); <span class="comment">// 获取当前页</span></span><br><span class="line">    System.out.println(userIPage.getTotal()); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(userIPage.getSize()); <span class="comment">// 获取每页的条数</span></span><br><span class="line">    System.out.println(userIPage.getRecords()); <span class="comment">// 获取每页数据的集合</span></span><br><span class="line">    System.out.println(userIPage.getPages()); <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(userIPage.hasNext()); <span class="comment">// 是否存在下一页</span></span><br><span class="line">    System.out.println(userIPage.hasPrevious()); <span class="comment">// 是否存在上一页</span></span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    <span class="keyword">for</span> (User user : records) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义查询分页（上面的基础下）：</p>
<ol>
<li><p>添加Mapper语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">userDefinedPageSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage =userMapper.selectPageUserDefined(page,<span class="string">"%baomidou%"</span>);</span><br><span class="line">    System.out.println(<span class="string">"总条数 ------&gt; "</span> + userIPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"总页数 ------&gt; "</span> +  userIPage.getPages());</span><br><span class="line">    System.out.println(<span class="string">"当前页数 ------&gt; "</span> + userIPage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">"当前每页显示数 ------&gt; "</span> + userIPage.getSize());</span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    <span class="keyword">for</span> (User user : records) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>映射关系：</p>
<ul>
<li><p>Java中的字段和MySQL字段不一致时，在Mapper中可以使用as字段，但是每个都这样就很繁琐</p>
</li>
<li><p>使用注解的方式就可以简化：<code>@Results</code>、<code>@Result</code>以及<code>@ResultMap</code>可以简化SQL语句，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Select("SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"resultMap"</span> , value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>,column = <span class="string">"name_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"age"</span>,column = <span class="string">"age_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"email"</span>,column = <span class="string">"email_real"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"resultMap"</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE name_real like #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined2</span><span class="params">(IPage&lt;?&gt; page, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Results</code>建立多个映射关系，<code>@Result</code>建立单个映射关系，其中<code>property</code>属性对应java代码中定义的名称，<code>column</code>属性对应MySQL字段</li>
<li><code>@ResultMap</code>可以使用带有id属性的<code>@Results</code></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="多表一对一查询以及一对多查询"><a href="#多表一对一查询以及一对多查询" class="headerlink" title="多表一对一查询以及一对多查询"></a>多表一对一查询以及一对多查询</h3><ol>
<li><p>场景描述：一个员工可以在一家公司任职（员工和公司在该情况下属于一对一），一家公司里有很多的员工（公司和员工在该情况下属于一对多）</p>
</li>
<li><p>创建数据库表以及数据（工程的schema.sql以及data.sql中添加即可）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> company;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> employee;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> company</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">    companyName <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">    userName <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">    companyId <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> company;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">id</span>, userName, companyId, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">1</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">2</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">1</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">1</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">2</span>, <span class="string">'test5@baomidou.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> company (<span class="keyword">id</span>, companyName) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Apple'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Midea'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建PO：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String userName;</span><br><span class="line">    String email;</span><br><span class="line">    Company company;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String companyName;</span><br><span class="line">    List&lt;Employee&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Mapper：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	com.example.mapper.EmployeeMapper是项目中保存Mapper的路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from employee"</span>)</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"company"</span>,column = <span class="string">"companyId"</span>,one=<span class="meta">@One</span>(select = <span class="string">"com.example.mapper.CompanyMapper.selectById"</span>))</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from employee where companyId=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectByCompanyId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompanyMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from company where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Company <span class="title">selectById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from company where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"list"</span>,column = <span class="string">"id"</span>,many = <span class="meta">@Many</span>(select = <span class="string">"com.example.mapper.EmployeeMapper.selectByCompanyId"</span>))</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id"</span>)</span><br><span class="line">    <span class="function">Company <span class="title">showCompanyEmployee</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@One联查（一对一）</li>
<li>@Many联查（一对多）</li>
<li><strong>不管是一对多还是多对一，还是多对多，只需要知道数据是需要一对一关联还是多个结果映射到1个list，就可以很好的在实体的POJO，Mapper文件中写出来</strong></li>
<li>要实现多对多，在程序中则是拆分成2个一对多</li>
</ul>
</li>
<li><p>测试一对一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list=employeeMapper.selectAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">[Employee(id=1, userName=Jone, email=test1@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=2, userName=Jack, email=test2@baomidou.com, company=Company(id=2, companyName=Midea, list=null)), Employee(id=3, userName=Tom, email=test3@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=5, userName=Billie, email=test5@baomidou.com, company=Company(id=2, companyName=Midea, list=null))]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一对多：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CompanyMapper companyMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">one2Many</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Company company= companyMapper.showCompanyEmployee(<span class="number">1</span>);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">        List&lt;Employee&gt; list=company.getList();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Company(id=1, companyName=Apple, list=[Employee(id=1, userName=Jone, email=test1@baomidou.com, company=null), Employee(id=3, userName=Tom, email=test3@baomidou.com, company=null), Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=null)])</span></span><br><span class="line"><span class="comment">Employee(id=1, userName=Jone, email=test1@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">Employee(id=3, userName=Tom, email=test3@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Wrapper条件构造器"><a href="#Wrapper条件构造器" class="headerlink" title="Wrapper条件构造器"></a>Wrapper条件构造器</h3><ol>
<li><p>首先看样例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字包含雨并且年龄小于40</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '%雨%' AND age &lt; 40</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.like(<span class="string">"name"</span>, <span class="string">"雨"</span>).lt(<span class="string">"age"</span>, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字包含雨</span></span><br><span class="line"><span class="comment">     * 年龄大于20小于40</span></span><br><span class="line"><span class="comment">     * 邮箱不能为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '%雨%' AND age BETWEEN 20 AND 40 AND email IS NOT NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.like(<span class="string">"name"</span>, <span class="string">"雨"</span>).between(<span class="string">"age"</span>, <span class="number">20</span>, <span class="number">40</span>).isNotNull(<span class="string">"email"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字为王性</span></span><br><span class="line"><span class="comment">     * 或者年龄大于等于25</span></span><br><span class="line"><span class="comment">     * 按照年龄降序排序，年龄相同按照id升序排序</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '王%' OR age &gt;= 25 ORDER BY age DESC , id ASC</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).or()</span><br><span class="line">                .ge(<span class="string">"age"</span>, <span class="number">25</span>).orderByDesc(<span class="string">"age"</span>).orderByAsc(<span class="string">"id"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询创建时间为2019年2月14</span></span><br><span class="line"><span class="comment">     * 并且上级领导姓王</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE date_format(create_time,'%Y-%m-%d') = '2019-02-14' AND manager_id IN (select id from user where name like '王%')</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperFour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.apply(<span class="string">"date_format(create_time,'%Y-%m-%d') = &#123;0&#125;"</span>, <span class="string">"2019-02-14"</span>)</span><br><span class="line">                .inSql(<span class="string">"manager_id"</span>, <span class="string">"select id from user where name like '王%'"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询王姓</span></span><br><span class="line"><span class="comment">     * 并且年龄小于40或者邮箱不为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '王%' AND ( age &lt; 40 OR email IS NOT NULL )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperFive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).and(qw -&gt; qw.lt(<span class="string">"age"</span>, <span class="number">40</span>).or().isNotNull(<span class="string">"email"</span>));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询王姓</span></span><br><span class="line"><span class="comment">     * 并且年龄大于20 、年龄小于40、邮箱不能为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE ? OR ( age BETWEEN ? AND ? AND email IS NOT NULL )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperSix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).or(</span><br><span class="line">                qw -&gt; qw.between(<span class="string">"age"</span>, <span class="number">20</span>, <span class="number">40</span>).isNotNull(<span class="string">"email"</span>)</span><br><span class="line">        );</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (年龄小于40或者邮箱不为空) 并且名字姓王</span></span><br><span class="line"><span class="comment">     * WHERE ( age &lt; 40 OR email IS NOT NULL ) AND name LIKE '王%'</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperSeven</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.nested(qw -&gt; qw.lt(<span class="string">"age"</span>, <span class="number">40</span>).or().isNotNull(<span class="string">"email"</span>))</span><br><span class="line">                .likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询年龄为30、31、32</span></span><br><span class="line"><span class="comment">     * WHERE age IN (?,?,?)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperEight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.in(<span class="string">"age"</span>, Arrays.asList(<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一条数据</span></span><br><span class="line"><span class="comment">     * limit 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperNine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.in(<span class="string">"age"</span>, Arrays.asList(<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>)).last(<span class="string">"limit 1"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【通用条件：】</span><br><span class="line">【比较大小： ( =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;= )】</span><br><span class="line">    eq(R column, Object val); <span class="comment">// 等价于 =，例: eq("name", "老王") ---&gt; name = '老王'</span></span><br><span class="line">    ne(R column, Object val); <span class="comment">// 等价于 &lt;&gt;，例: ne("name", "老王") ---&gt; name &lt;&gt; '老王'</span></span><br><span class="line">    gt(R column, Object val); <span class="comment">// 等价于 &gt;，例: gt("name", "老王") ---&gt; name &gt; '老王'</span></span><br><span class="line">    ge(R column, Object val); <span class="comment">// 等价于 &gt;=，例: ge("name", "老王") ---&gt; name &gt;= '老王'</span></span><br><span class="line">    lt(R column, Object val); <span class="comment">// 等价于 &lt;，例: lt("name", "老王") ---&gt; name &lt; '老王'</span></span><br><span class="line">    le(R column, Object val); <span class="comment">// 等价于 &lt;=，例: le("name", "老王") ---&gt; name &lt;= '老王'</span></span><br><span class="line">    </span><br><span class="line">【范围：（between、not between、in、not in）】</span><br><span class="line">   between(R column, Object val1, Object val2); <span class="comment">// 等价于 between a and b, 例： between("age", 18, 30) ---&gt; age between 18 and 30</span></span><br><span class="line">   notBetween(R column, Object val1, Object val2); <span class="comment">// 等价于 not between a and b, 例： notBetween("age", 18, 30) ---&gt; age not between 18 and 30</span></span><br><span class="line">   in(R column, Object... values); <span class="comment">// 等价于 字段 IN (v0, v1, ...),例: in("age",&#123;1,2,3&#125;) ---&gt; age in (1,2,3)</span></span><br><span class="line">   notIn(R column, Object... values); <span class="comment">// 等价于 字段 NOT IN (v0, v1, ...), 例: notIn("age",&#123;1,2,3&#125;) ---&gt; age not in (1,2,3)</span></span><br><span class="line">   inSql(R column, Object... values); <span class="comment">// 等价于 字段 IN (sql 语句), 例: inSql("id", "select id from table where id &lt; 3") ---&gt; id in (select id from table where id &lt; 3)</span></span><br><span class="line">   notInSql(R column, Object... values); <span class="comment">// 等价于 字段 NOT IN (sql 语句)</span></span><br><span class="line">   </span><br><span class="line">【模糊匹配：（like）】</span><br><span class="line">    like(R column, Object val); <span class="comment">// 等价于 LIKE '%值%'，例: like("name", "王") ---&gt; name like '%王%'</span></span><br><span class="line">    notLike(R column, Object val); <span class="comment">// 等价于 NOT LIKE '%值%'，例: notLike("name", "王") ---&gt; name not like '%王%'</span></span><br><span class="line">    likeLeft(R column, Object val); <span class="comment">// 等价于 LIKE '%值'，例: likeLeft("name", "王") ---&gt; name like '%王'</span></span><br><span class="line">    likeRight(R column, Object val); <span class="comment">// 等价于 LIKE '值%'，例: likeRight("name", "王") ---&gt; name like '王%'</span></span><br><span class="line">    </span><br><span class="line">【空值比较：（isNull、isNotNull）】</span><br><span class="line">    isNull(R column); <span class="comment">// 等价于 IS NULL，例: isNull("name") ---&gt; name is null</span></span><br><span class="line">    isNotNull(R column); <span class="comment">// 等价于 IS NOT NULL，例: isNotNull("name") ---&gt; name is not null</span></span><br><span class="line"></span><br><span class="line">【分组、排序：（group、having、order）】</span><br><span class="line">    groupBy(R... columns); <span class="comment">// 等价于 GROUP BY 字段, ...， 例: groupBy("id", "name") ---&gt; group by id,name</span></span><br><span class="line">    orderByAsc(R... columns); <span class="comment">// 等价于 ORDER BY 字段, ... ASC， 例: orderByAsc("id", "name") ---&gt; order by id ASC,name ASC</span></span><br><span class="line">    orderByDesc(R... columns); <span class="comment">// 等价于 ORDER BY 字段, ... DESC， 例: orderByDesc("id", "name") ---&gt; order by id DESC,name DESC</span></span><br><span class="line">    having(String sqlHaving, Object... params); <span class="comment">// 等价于 HAVING ( sql语句 )， 例: having("sum(age) &gt; &#123;0&#125;", 11) ---&gt; having sum(age) &gt; 11</span></span><br><span class="line"></span><br><span class="line">【拼接、嵌套 sql：（or、and、nested、apply）】</span><br><span class="line">   or(); <span class="comment">// 等价于 a or b， 例：eq("id",1).or().eq("name","老王") ---&gt; id = 1 or name = '老王'</span></span><br><span class="line">   or(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 or(a or/and b)，or 嵌套。例: or(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; or (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   and(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 and(a or/and b)，and 嵌套。例: and(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; and (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   nested(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 (a or/and b)，普通嵌套。例: nested(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   apply(String applySql, Object... params); <span class="comment">// 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply("date_format(dateColumn,'%Y-%m-%d') = &#123;0&#125;", "2008-08-08") ---&gt; date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'")</span></span><br><span class="line">   last(String lastSql); <span class="comment">// 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span></span><br><span class="line">   exists(String existsSql); <span class="comment">// 拼接 exists 语句。例: exists("select id from table where age = 1") ---&gt; exists (select id from table where age = 1)</span></span><br><span class="line">   </span><br><span class="line">【QueryWrapper 条件：】</span><br><span class="line">    select(String... sqlSelect); <span class="comment">// 用于定义需要返回的字段。例： select("id", "name", "age") ---&gt; select id, name, age</span></span><br><span class="line">    select(Predicate&lt;TableFieldInfo&gt; predicate); <span class="comment">// Lambda 表达式，过滤需要的字段。</span></span><br><span class="line">    lambda(); <span class="comment">// 返回一个 LambdaQueryWrapper</span></span><br><span class="line">    </span><br><span class="line">【UpdateWrapper 条件：】</span><br><span class="line">    set(String column, Object val); <span class="comment">// 用于设置 set 字段值。例: set("name", null) ---&gt; set name = null</span></span><br><span class="line">    etSql(String sql); <span class="comment">// 用于设置 set 字段值。例: setSql("name = '老李头'") ---&gt; set name = '老李头'</span></span><br><span class="line">    lambda(); <span class="comment">// 返回一个 LambdaUpdateWrapper</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>wapper介绍 ：</p>
<ol>
<li>Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示</li>
<li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</li>
<li>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</li>
<li>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</li>
<li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li>
<li>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</li>
<li>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</li>
</ol>
</li>
</ol>
<h3 id="Service-CRUD"><a href="#Service-CRUD" class="headerlink" title="Service CRUD"></a>Service CRUD</h3><ol>
<li><p>通用 Service CRUD 封装IService接口，更进一步封装 CRUD 采用 <code>get 查询单行</code>、 <code>remove 删除</code>、 <code>list 查询集合</code>、 <code>page 分页</code> 前缀命名方式来避免混淆 <code>Mapper</code> 层</p>
</li>
<li><p>Service的好处是可以省略大量的代码编写，避免重复劳动</p>
</li>
<li><p>首先建立一个借口继承<code>IService</code>接口，注意该接口不能放在Mapper的扫描包内，否则会出错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个实现类，实现自定义的接口<code>UserService</code>之前要继承<code>IService</code>的实现类<code>ServiceImpl</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *IService:mp提供的接口。ServiceImpl:mp提供的接口实现类。</span></span><br><span class="line"><span class="comment"> *ServiceImpl&lt;BaseMapper&lt;T&gt;, T&gt;是IService 的实现类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就是在需要的地方注入自定义UserService接口即可，比如测试类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceCRUDTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserService userService;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 插入（批量）</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> batchSize  插入批次数量</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Collection&lt;User&gt; entityList=<span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">		entityList.add(<span class="keyword">new</span> User().setName(<span class="string">"zsf"</span>).setAge(<span class="number">1</span>).setEmail(<span class="string">"zsf@hot.com"</span>));</span><br><span class="line">		entityList.add(<span class="keyword">new</span> User().setName(<span class="string">"whh"</span>).setAge(<span class="number">21</span>).setEmail(<span class="string">"whh@tt.com"</span>));</span><br><span class="line">		userService.saveBatch(entityList);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>各种操作方法可以看官方文档</p>
</li>
</ol>
<h3 id="自定义主键ID生成"><a href="#自定义主键ID生成" class="headerlink" title="自定义主键ID生成"></a>自定义主键ID生成</h3><ol>
<li><p>自3.3.0开始,默认使用雪花算法+UUID(不含中划线)</p>
</li>
<li><p>自定义主键生成主要是重写对应的<code>nextId</code>（对应ASSIGN_ID策略）、<code>nextUUID</code>（对应ASSIGN_UUID策略）方法</p>
</li>
<li><p>SpringBOOT注入代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">nextId</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span></span><br><span class="line">      	String bizKey = entity.getClass().getName();</span><br><span class="line">        <span class="comment">//根据bizKey调用分布式ID生成</span></span><br><span class="line">        <span class="keyword">long</span> id = ....;</span><br><span class="line">      	<span class="comment">//返回生成的id值即可.</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="乐观锁插件OptimisticLockerInnerInterceptor"><a href="#乐观锁插件OptimisticLockerInnerInterceptor" class="headerlink" title="乐观锁插件OptimisticLockerInnerInterceptor"></a>乐观锁插件OptimisticLockerInnerInterceptor</h3><ol>
<li><p>当要更新一条记录的时候，希望这条记录没有被别人更新，如果记录被更新了，则不会更新记录</p>
</li>
<li><p>实现方式：</p>
<ol>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败</li>
</ol>
</li>
<li><p>注解@Version：</p>
<ol>
<li><strong>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</strong></li>
<li>整数类型下 <code>newVersion = oldVersion + 1</code></li>
<li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法，在 <code>update(entity, wrapper)</code> 方法下,<code>wrapper</code> 不能复用!!!</li>
<li><strong>对于自定义的方法或者其他的方法，乐观锁会失效</strong></li>
</ol>
</li>
<li><p>乐观锁插件的使用：</p>
<ol>
<li><p>修改数据表，数据库增加字段version 设为为int类型，给它一个默认值1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	<span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>User实体增加相应属性并用@Version注解标识,UserMapper可以同之前的一致:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加乐观锁插件配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以测试了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptimisticLockerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimistic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user1.setName(<span class="string">"test01"</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user2.setName(<span class="string">"test02"</span>);</span><br><span class="line">      </span><br><span class="line">        userMapper.updateById(user2);</span><br><span class="line">        userMapper.updateById(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.先进行了两次查询 假设获取到的version都为1</span></span><br><span class="line"><span class="comment">2.但是先执行的更新user2对象 此时更新后version变为2</span></span><br><span class="line"><span class="comment">3.当执行更新user1时 where条件where version = oldVersion 没有匹配到  因为这时数据库中的version已经为2 那么就更新失败了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h3 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h3><ol>
<li><p>解决了繁琐的配置，让 mybatis 优雅的使用枚举属性</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>使用 @EnumValue 注解枚举属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> GradeEnum &#123;</span><br><span class="line">    PRIMARY(<span class="number">1</span>, <span class="string">"小学"</span>),  SECONDORY(<span class="number">2</span>, <span class="string">"中学"</span>),  HIGH(<span class="number">3</span>, <span class="string">"高中"</span>);</span><br><span class="line">    GradeEnum(<span class="keyword">int</span> code, String descp) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.descp = descp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@EnumValue</span><span class="comment">//标记数据库存的值是code</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>枚举属性，实现 IEnum 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AgeEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line">    ONE(<span class="number">1</span>, <span class="string">"一岁"</span>),</span><br><span class="line">    TWO(<span class="number">2</span>, <span class="string">"二岁"</span>),</span><br><span class="line">    THREE(<span class="number">3</span>, <span class="string">"三岁"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>需要在配置文件中添加配置<code>mybatis-plus.type-enums-package</code>来扫描枚举类</p>
</li>
<li><p>示例：</p>
<ol>
<li><p>在原来的表基础上添加sex字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	<span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>,sex) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum &#123;</span><br><span class="line"></span><br><span class="line">    MAN(<span class="number">1</span>,<span class="string">"男"</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>,<span class="string">"女"</span>);</span><br><span class="line">		<span class="comment">// 注解方式</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer code, String value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改User实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">		<span class="comment">// 增加的枚举类</span></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置（application.yml）:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># sql输出到控制台  方便查看</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.midea.mpoptimistic</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptimisticLockerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimistic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user1.setName(<span class="string">"test01"</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user2.setName(<span class="string">"test02"</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//   userMapper.updateById(user2);</span></span><br><span class="line">        user1.setSex(SexEnum.WOMAN);</span><br><span class="line">        userMapper.updateById(user1);</span><br><span class="line">        user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><ol>
<li><p>像创建时间、更新时间、创建人、更新人这些都可以自动填充，而无需自己设置</p>
</li>
<li><p>原理：</p>
<ol>
<li><p>实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.MetaObjectHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"createTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"createTime"</span>, () -&gt; LocalDateTime.now(), LocalDateTime<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"createTime"</span>, LocalDateTime.now()); <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"updateTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"updateTime"</span>, () -&gt; LocalDateTime.now(), LocalDateTime<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"updateTime"</span>, LocalDateTime.now()); <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注解填充字段 <code>@TableField(.. fill = FieldFill.INSERT)</code> 生成器策略部分也可以配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意！这里需要标记为填充字段</span></span><br><span class="line">    <span class="meta">@TableField</span>(.. fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> String fillField;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>FieldFill有四种策略：</p>
<ol>
<li><code>DEFAULT</code>：默认不处理</li>
<li><code>INSERT</code>：插入时填充</li>
<li><code>UPDATE</code>：更新时填充</li>
<li><code>INSERT_UPDATE</code>：插入或者更新时填充</li>
</ol>
</li>
<li><p>示例：</p>
<ol>
<li><p>在原来的表基础上添加update_time、insert_time、author字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	<span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改User实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加填充配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"insertTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"updateTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"author"</span>,<span class="string">"admin"</span>,metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"updateTime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"author"</span>,<span class="string">"admin"</span>,metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后测试即可</p>
</li>
</ol>
</li>
</ol>
<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><ol>
<li><p>并非真的删除了，而是在数据库的表中有一个字段来区分是否不可见</p>
</li>
<li><p>添加方式：</p>
<ol>
<li>通过配置：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span>  <span class="comment"># 全局逻辑删除的实体字段名</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可单独配置某个实体类的软删除字段，在字段上加上<code>@TableLogic</code>注解即可</li>
</ol>
</li>
</ol>
<p>3.测试：</p>
<ol>
<li><p>在sql原来的基础上添加删除字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	<span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	deleted <span class="built_in">boolean</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">false</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改User实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以测试了</p>
</li>
</ol>
<h3 id="配置文件安全"><a href="#配置文件安全" class="headerlink" title="配置文件安全"></a>配置文件安全</h3><ol>
<li><p>为了保护数据库配置及数据安全，在一定的程度上控制开发人员流动导致敏感信息泄露</p>
</li>
<li><p>配置文件（YML）中加密配置使用<code>mpw:加密内容</code>，不是只有数据库配置才能加密，其他内容也是可以加密的</p>
</li>
<li><p>配置了加密内容之后，没法进行测试，可以在正式环境使用该方式</p>
</li>
<li><p>配置文件示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">加密配置</span> <span class="attr">mpw:</span> <span class="string">开头紧接加密内容（</span> <span class="string">非数据库配置专用</span> <span class="string">YML</span> <span class="string">中其它配置也是可以使用的</span> <span class="string">）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">mpw:qRhvCwF4GOqjessEB3G+a5okP+uXXr96wcucn2Pev6Bf1oEMZ1gVpPPhdDmjQqoM</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mpw:Hzy5iliJbwDHhjLs1L0j6w==</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">mpw:Xb+EgsyuYRXw7U7sBJjBpA==</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目时可以在项目的idea 设置 Program arguments，服务器可以设置为启动环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--mpw.key=d1104d7c3b616f0b</span><br><span class="line">//比如 java -jar test.jar --mpw.key=d1104d7c3b616f0b</span><br></pre></td></tr></table></figure>
</li>
<li><p>AES加密类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AES</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String key = <span class="string">"littleswan123456"</span>; <span class="comment">//长度为16</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String charset = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String transformation = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String algorithm = <span class="string">"AES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encrypt(content, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decrypt(content, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 需要加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     加密密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec skey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(), algorithm);</span><br><span class="line">            IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key.getBytes());</span><br><span class="line">            Cipher cipher = Cipher.getInstance(transformation);</span><br><span class="line">            <span class="keyword">byte</span>[] byteContent = content.getBytes(charset);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, skey, iv);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base64().encodeToString(result); <span class="comment">// 加密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// LogUtil.exception(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES（256）解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密之后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            SecretKeySpec skey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(), algorithm);</span><br><span class="line">            IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key.getBytes());</span><br><span class="line">            Cipher cipher = Cipher.getInstance(transformation);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, skey, iv);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(<span class="keyword">new</span> Base64().decode(content));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result); <span class="comment">// 解密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//LogUtil.exception(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String s = <span class="string">"hello world"</span>;</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        System.out.println(<span class="string">"加密前："</span> + s);</span><br><span class="line">        String encryptResultStr = encrypt(s);</span><br><span class="line">        System.out.println(<span class="string">"加密后："</span> + encryptResultStr);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        System.out.println(<span class="string">"解密后："</span> + decrypt(encryptResultStr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：加密的key字符串长度一定要是16否则会出问题！</strong></p>
</li>
</ol>
<h3 id="动态表名"><a href="#动态表名" class="headerlink" title="动态表名"></a>动态表名</h3><ol>
<li><p>在之前的项目开发中使用Mybatis的<code>${}</code>来实现动态表名，非常的不友好：</p>
<ol>
<li>在动态sql解析过程，<code>#{}</code>与<code>${}</code>的效果是不一样的， <code>#{ }</code>解析为一个 JDBC 预编译语句（prepared statement）的参数标记符, <code>${ }</code> 仅仅为一个纯碎的 String 替换，在动态 SQL 解析阶段将会进行变量替换</li>
<li><code>${ }</code>的变量的替换阶段是在动态 SQL 解析阶段，而 <code>#{ }</code>的变量的替换是在 DBMS 中</li>
<li><code>#{}</code>能够很大程度上防止sql注入，<code>${}</code>无法防止sql注入</li>
<li><code>${}</code>一般用于传输数据库的表名、字段名等</li>
</ol>
</li>
<li><p>在UserMapper上编写一个创建新表的接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.example.po.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Select("SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"resultMap"</span> , value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>,column = <span class="string">"name_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"age"</span>,column = <span class="string">"age_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"email"</span>,column = <span class="string">"email_real"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"resultMap"</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE name_real like #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined2</span><span class="params">(IPage&lt;?&gt; page, String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据名称创建一个新的表</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"CREATE TABLE $&#123;tableName&#125;\n"</span> +</span><br><span class="line">            <span class="string">"(\n"</span> +</span><br><span class="line">            <span class="string">"\tid_real varchar (50) NOT NULL COMMENT '主键ID',\n"</span> +</span><br><span class="line">            <span class="string">"\tname_real VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n"</span> +</span><br><span class="line">            <span class="string">"\tage_real INT(11) NULL DEFAULT NULL COMMENT '年龄',\n"</span> +</span><br><span class="line">            <span class="string">"\temail_real VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',\n"</span> +</span><br><span class="line">            <span class="string">"\tPRIMARY KEY (id_real)\n"</span> +</span><br><span class="line">            <span class="string">");"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createTable</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改MP的配置类，引入动态表名插件以及规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; TABLE_NAME = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();<span class="comment">// 线程内部存储类</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        PaginationInnerInterceptor paginationInnerInterceptor=<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL);</span><br><span class="line"></span><br><span class="line">        paginationInnerInterceptor.setOverflow(<span class="keyword">true</span>);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        DynamicTableNameInnerInterceptor dynamicTableNameInnerInterceptor=<span class="keyword">new</span> DynamicTableNameInnerInterceptor();</span><br><span class="line">        Map&lt;String, TableNameHandler&gt; tableNameHandlerMap = <span class="keyword">new</span> HashMap&lt;String, TableNameHandler&gt;();</span><br><span class="line">        tableNameHandlerMap.put(<span class="string">"tb_user"</span>, <span class="keyword">new</span> TableNameHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">dynamicTableName</span><span class="params">(String sql, String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> TABLE_NAME.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);<span class="comment">// tb_user和User类上的@TableName(value="tb_user")保持一致</span></span><br><span class="line">        dynamicTableNameInnerInterceptor.setTableNameHandlerMap(tableNameHandlerMap);</span><br><span class="line">        interceptor.addInnerInterceptor(dynamicTableNameInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span>  UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateTableAndInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// userMapper.createTable("user_01"); // 创建表user_01</span></span><br><span class="line">        MybatisPlusConfig.TABLE_NAME.set(<span class="string">"user_01"</span>); <span class="comment">// 配置输出到user_01</span></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">"46"</span>);</span><br><span class="line">        user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">        MybatisPlusConfig.TABLE_NAME.set(<span class="string">"tb_user"</span>);<span class="comment">// 配置输出到tb_user</span></span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><strong>在PO中最好不要使用基础类型，要使用的话也是其对应的封装类型！</strong></li>
<li><code>MateCloud</code>代码地址：<a href="https://github.com/matevip/matecloud" target="_blank" rel="noopener">https://github.com/matevip/matecloud</a></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MP的引入使Mybatis的开发变得简单，而且简化了代码的编写，避免了重复劳动问题。当然这部分只涉及了MP的功能的一部分，在后续需要新功能的时候可以考虑再继续深入学习！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot MybatisPlus 多租户插件学习</title>
    <url>/2020/09/28/SpringBoot-MybatisPlus-%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>多租户是一种软件架构技术，在多用户的环境下，共有同一套系统，并且要注意数据之间的隔离性。在学习MybatiPlus（以下简称MP）的使用过程中，看到自3.4.0之后添加内置插件，内置插件里有多租户插件，就很好奇，然后就尝试了下使用，虽然有文档啥的，但还是花了很长时间去跑一个Demo。记录下来，如果以后有需要也能快速开发！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>多租户是指软件架构支持一个实例服务多个用户（Customer），每一个用户被称之为租户（tenant），软件给予租户可以对系统进行部分定制的能力，如用户界面颜色或业务规则，但是他们不能定制修改软件的代码。</li>
<li>场景：开发系统时，如果该系统提供给多个商家使用时，考虑到各个商家的数据隔离的时候，就需要在传输数据时带上商家的ID（租户ID），从而进行数据的隔离。其实就是不同租户使用同一套系统，需要考虑数据隔离的问题！</li>
<li>数据隔离有三种方案：<ol>
<li><strong>独立数据库</strong>：简单来说就是一个租户使用一个数据库，这种数据隔离级别最高，安全性最好，但是成本就相对很高</li>
<li><strong>共享数据库、隔离数据架构</strong>：多租户使用同一个数据裤，但是每个租户对应一个Schema</li>
<li><strong>共享数据库、共享数据架构</strong>：使用同一个数据库，同一个Schema，但是在表中增加了租户ID的字段，这种共享数据程度最高，隔离级别最低</li>
</ol>
</li>
<li>MP通过内置的多租户插件（TenantLineInnerInterceptor）提供了一种多租户解决方案。</li>
</ol>
<h2 id="MP多租户简单实现"><a href="#MP多租户简单实现" class="headerlink" title="MP多租户简单实现"></a>MP多租户简单实现</h2><ol>
<li><p>创建一个SpringBoot项目，添加MP的依赖(3.4版本)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库脚本：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">	id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">	name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">	email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	<span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">	deleted <span class="built_in">boolean</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">false</span>,</span><br><span class="line">	tenant_id <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>,sex,tenant_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建实体对象User：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"tenant_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long tenantId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Mapper：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加Mapper扫描注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Test2Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MP的内置插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        TenantLineInnerInterceptor tenantLineInnerInterceptor=<span class="keyword">new</span> TenantLineInnerInterceptor(<span class="keyword">new</span> TenantLineHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Expression <span class="title">getTenantId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LongValue(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTenantIdColumn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"tenant_id"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ignoreTable</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        interceptor.addInnerInterceptor(tenantLineInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line"><span class="comment">//        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));</span></span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>主要实现TenantLineHandler的<code>getTenantId</code>、<code>getTenantIdColumn</code>、<code>ignoreTable</code>方法，分别表示租户ID、租户ID对应的数据库列、忽略哪些表（因为有些可能是公用的表或者其他用处）</li>
<li>这里是所有的表都不忽略，然后租户ID以及租户ID对应的数据库列都是固定的，方便测试</li>
</ol>
</li>
<li><p>添加配置文件（application.yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># sql输出到控制台  方便查看</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Creating a new SqlSession</span></span><br><span class="line"><span class="comment">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@604c7e9b] was not registered for synchronization because synchronization is not active</span></span><br><span class="line"><span class="comment">JDBC Connection [HikariProxyConnection@1560391896 wrapping com.mysql.cj.jdbc.ConnectionImpl@271e851e] will not be managed by Spring</span></span><br><span class="line"><span class="comment">==&gt;  Preparing: UPDATE tb_user SET deleted = 1 WHERE tenant_id = 1 AND id_real = ? AND deleted = 0</span></span><br><span class="line"><span class="comment">==&gt; Parameters: 5(Integer)</span></span><br><span class="line"><span class="comment">&lt;==    Updates: 1</span></span><br><span class="line"><span class="comment">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@604c7e9b]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以看到虽然没有在条件中加入tenant_id，但是输出的sql语句中自动加入了该字段，非常方便</li>
<li>配置好之后，不管是查询、新增、修改删除方法，MP都会自动加上租户ID的标识</li>
<li>实现出现问题可以先看SpringBoot MybatisPlus Quick Start中的记录</li>
</ul>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><code>MateCloud</code>有用MP的多租户插件，可以阅读下源码，代码地址：<a href="https://github.com/matevip/matecloud" target="_blank" rel="noopener">https://github.com/matevip/matecloud</a></li>
<li><strong>多租户 != 权限过滤,不要乱用,租户之间是完全隔离的!!!</strong></li>
<li>在开发的过程中我忘记ComponentScan，导致MP的配置没有生效，一直不出现效果，浪费了很多时间，非常要注意这些弱智问题！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多租户概念上理解起来还是很简单的，但是涉及到的内容很多，这里只是用MP的内置插件写了一个Demo，根据效果大致了解了MP的多租户的实现原理，后续如果业务上有需求，也不失为一种快速方案！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Swagger2 Quick Start</title>
    <url>/2020/05/26/SpringBoot-Swagger2-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>无论是前端开发还是后端开发，都或多或少地被接口文档折磨过!前端经常抱怨后端给的接口文档与实际情况不一致，后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用后端，都期望有一个好的接口文档，但仅仅只通过强制来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易跟不上代码更新的速度。<strong>Swagger的出现很好的解决了这一个问题，而且支持SpringBoot，只要使用注解就能很方便的为前端提供友好的API接口！</strong>这部分介绍如何使用SpringBoot快速构建带有Swagger接口的项目！</p>
<p>过去的文档迭代过程主要有两种：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a5a44968763300a332ec4e8fcdb4b37e-242054" alt="方案一"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/41844101791fa64e89d3a3d173ad875f-195499" alt="方案二"></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>Swagger 提供了一套通过代码和注解自动生成文档的方法，这一点对于保证 API 文档的及时性将有很大的帮助。</li>
<li>Swagger 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。Swagger 主要包含了以下三个部分：<ul>
<li><code>Swagger Editor</code>：基于浏览器的编辑器，可以用来编写 OpenAPI 规范</li>
<li><code>Swagger UI</code>：将编写好的 OpenAPI 规范呈现为交互式的 API 文档</li>
<li><code>Swagger Codegen</code>：可以通过为 OpenAPI规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程</li>
</ul>
</li>
<li>Swagger的优点：<ul>
<li>代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性</li>
<li>跨语言性，支持 40 多种语言</li>
<li>Swagger UI 呈现出来的是一份可交互式的 API 文档，可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程</li>
<li>可以将文档规范导入相关的工具（例如 SoapUI）, 这些工具将会为我们自动地创建自动化测试</li>
</ul>
</li>
<li>OAS是OpenAPI Specification的简称，可以翻译为OpenAPI规范，它是定义API的一种规范，它的前身是Swagger规范。</li>
<li>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></li>
<li>官方文档：<a href="http://springfox.github.io/springfox/docs/snapshot/" target="_blank" rel="noopener">http://springfox.github.io/springfox/docs/snapshot/</a></li>
<li>第三方UI页面：<ul>
<li><a href="https://github.com/caspar-chen/swagger-ui-layer" target="_blank" rel="noopener">https://github.com/caspar-chen/swagger-ui-layer</a></li>
<li><a href="https://github.com/battcn/swagger-spring-boot" target="_blank" rel="noopener">https://github.com/battcn/swagger-spring-boot</a></li>
</ul>
</li>
</ol>
<h2 id="快速集成"><a href="#快速集成" class="headerlink" title="快速集成"></a>快速集成</h2><ol>
<li><p>添加依赖（修改pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用注解配置使能Swagger（添加swagger配置类）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerApp</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.wander.swagger.swagger"</span>))</span><br><span class="line">         <span class="comment">// .apis(RequestHandlerSelectors.any())</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建 api文档的详细信息函数,注意这里的注解引用的是哪个</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">//页面标题</span></span><br><span class="line">                .title(<span class="string">"Spring Boot 使用 Swagger2 构建RESTful API"</span>)</span><br><span class="line">                <span class="comment">//创建人</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"WanderROS"</span>, <span class="string">"https://wanderros.github.io"</span>, <span class="string">""</span>))</span><br><span class="line">                <span class="comment">//版本号</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                <span class="comment">//描述</span></span><br><span class="line">                .description(<span class="string">"API 描述"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>apis()</code> ：可以通过指定包名的方式，让 Swagger 只去某些包下面扫描</p>
</li>
<li><p><code>paths()</code> ：可以通过筛选 API 的 url 来进行过滤</p>
</li>
<li><p>过滤示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.apis(RequestHandlerSelectors.basePackage(<span class="string">"cn.example.sbswagger.controller"</span>))</span><br><span class="line">.paths(Predicates.or(PathSelectors.ant(<span class="string">"/user/add"</span>),</span><br><span class="line">        PathSelectors.ant(<span class="string">"/user/find/*"</span>)))</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>在控制器中添加swagger注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags=<span class="string">"用户相关接口"</span>, description = <span class="string">"提供用户相关的 Rest API"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"GET 请求示例"</span>, notes = <span class="string">"/GET请求说明"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, defaultValue = <span class="string">"WanderROS"</span>,paramType=<span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"address"</span>, value = <span class="string">"用户地址"</span>, defaultValue = <span class="string">"无锡"</span>, required = <span class="keyword">true</span>,paramType=<span class="string">"query"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;Object,Object&gt; <span class="title">addUser</span><span class="params">(@RequestParam String username, @RequestParam(required = <span class="keyword">true</span>)</span> String address) </span>&#123;</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"username"</span>,username);</span><br><span class="line">        map.put(<span class="string">"address"</span>,address);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// @ApiIgnore</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test2"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@ApiIgnore</code>可以屏蔽掉不想展示的接口</p>
</li>
<li><p>自定义接口过滤：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加过滤条件，谓词过滤predicate，这里是自定义注解进行过滤</span></span><br><span class="line">.apis(not(withMethodAnnotation(SwaggerCustomIgnore<span class="class">.<span class="keyword">class</span>)))</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>Swagger 允许我们通过 Docket 的 <code>globalResponseMessage()</code> 方法全局覆盖 HTTP 方法的响应消息，但是首先我们得通过 Docket 的 <code>useDefaultResponseMessages</code> 方法告诉 Swagger 不使用默认的 HTTP 响应消息，假设我们现在需要覆盖所有 GET 方法的 500 和 403 错误的响应消息，我们只需要在 SwaggerConfig.java 类中的 Docket Bean 下添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">.useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">.globalResponseMessage(RequestMethod.GET, newArrayList(</span><br><span class="line"><span class="keyword">new</span> ResponseMessageBuilder()</span><br><span class="line">              .code(<span class="number">500</span>)</span><br><span class="line">              .message(<span class="string">"服务器发生异常"</span>)</span><br><span class="line">              .responseModel(<span class="keyword">new</span> ModelRef(<span class="string">"Error"</span>))</span><br><span class="line">              .build(),</span><br><span class="line">       <span class="keyword">new</span> ResponseMessageBuilder()</span><br><span class="line">              .code(<span class="number">403</span>)</span><br><span class="line">              .message(<span class="string">"资源不可用"</span>)</span><br><span class="line">              .build()</span><br><span class="line">));</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>接口统一添加参数，比如token:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 添加请求参数，我们这里把token作为请求头部参数传入后端</span></span><br><span class="line">    ParameterBuilder parameterBuilder = <span class="keyword">new</span> ParameterBuilder();  </span><br><span class="line">    List&lt;Parameter&gt; parameters = <span class="keyword">new</span> ArrayList&lt;Parameter&gt;();  </span><br><span class="line">    parameterBuilder.name(<span class="string">"token"</span>).description(<span class="string">"令牌"</span>)</span><br><span class="line">        .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">"string"</span>)).parameterType(<span class="string">"header"</span>).required(<span class="keyword">false</span>).build();  </span><br><span class="line">    parameters.add(parameterBuilder.build());  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">            .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any())</span><br><span class="line">            .build().globalOperationParameters(parameters);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>编译运行项目，<strong>访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></strong></p>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/250e9cb31d6e3b46266daeaa54143976-342585" alt="swagger主页"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a7bfc5d46d4996878e85bf9d82dfe3a5-329449" alt="接口测试"></p>
</li>
<li><p>优势：</p>
<ul>
<li>可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档</li>
<li>既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体</li>
<li>Swagger2也提供了强大的页面测试功能来调试每个RESTful API</li>
</ul>
</li>
<li><p>整体流程：</p>
<ul>
<li>通过<code>@Configuration</code>注解，让Spring来加载该类配置，再通过<code>@EnableSwagger2</code>注解来启用Swagger2</li>
<li>再通过<code>createRestApi</code>函数创建<code>Docket</code>的Bean之后，<code>apiInfo()</code>用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。<code>select()</code>函数返回一个<code>ApiSelectorBuilder</code>实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<code>@ApiIgnore</code>指定的请求）</li>
<li>控制器添加swagger注解</li>
</ul>
</li>
</ol>
<h2 id="Swagger注解说明"><a href="#Swagger注解说明" class="headerlink" title="Swagger注解说明"></a>Swagger注解说明</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><ol>
<li>用来设置对控制器的描述，修饰整个类，用于<code>Controller</code>类上</li>
<li>tags=”说明该类的作用，可以在UI界面上看到的注解”</li>
<li>value=”该参数没什么意义，在UI界面上也看到，所以不需要配置”</li>
</ol>
<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><ol>
<li>用来设置对接口的描述，用在<code>Controller</code>类的方法上</li>
<li>value=”说明方法的用途、作用”</li>
<li>notes=”方法的备注说明”</li>
</ol>
<h3 id="ApiIgnore"><a href="#ApiIgnore" class="headerlink" title="@ApiIgnore"></a>@ApiIgnore</h3><ol>
<li>Swagger 文档不会显示拥有该注解的接口</li>
</ol>
<h3 id="ApiImplicitParams-amp-ApiImplicitParam"><a href="#ApiImplicitParams-amp-ApiImplicitParam" class="headerlink" title="@ApiImplicitParams &amp; @ApiImplicitParam"></a>@ApiImplicitParams &amp; @ApiImplicitParam</h3><ol>
<li><p>@ApiImplicitParams用于描述接口的非对象参数集</p>
</li>
<li><p>@ApiImplicitParam用于描述接口的非对象参数</p>
</li>
<li><p>可以配置参数的中文含义，也可以给参数设置默认值，这样在接口测试的时候可以避免手动输入</p>
</li>
<li><p>有多个参数，则需要使用多个@ApiImplicitParam注解来描述，多个@ApiImplicitParam注解需要放在一个@ApiImplicitParams注解中</p>
</li>
<li><p><strong>@ApiImplicitParam注解中虽然可以指定参数是必填的，但是却不能代替@RequestParam(required = true)，必填只是在Swagger2框架内必填，抛弃了Swagger2，这个限制就没用了</strong></p>
</li>
<li><p>示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"GET 请求示例"</span>, notes = <span class="string">"/GET请求说明"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, defaultValue = <span class="string">"WanderROS"</span>,paramType=<span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"address"</span>, value = <span class="string">"用户地址"</span>, defaultValue = <span class="string">"无锡"</span>, required = <span class="keyword">true</span>,paramType=<span class="string">"query"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;Object,Object&gt; <span class="title">addUser</span><span class="params">(@RequestParam String username, @RequestParam(required = <span class="keyword">true</span>)</span> String address,@<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">true</span>)</span>   User user) </span>&#123;</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"username"</span>,username);</span><br><span class="line">        map.put(<span class="string">"address"</span>,address);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明:</p>
<ol>
<li>paramType的类型只有以下几种（参数放在哪个地方）:<ul>
<li>header –&gt; 请求参数的获取：@RequestHeader</li>
<li>query –&gt; 请求参数的获取：@RequestParam</li>
<li>path（用于restful接口）–&gt; 请求参数的获取：@PathVariable</li>
<li>body（不常用）–&gt; 以流的形式提交 仅支持POST</li>
<li>form（不常用）–&gt; 以form表单的形式提交 仅支持POST   </li>
</ul>
</li>
<li>defaultValue：参数默认值</li>
<li>name：参数名</li>
<li>value：参数的汉字说明、解释</li>
<li>required：参数是否必须传</li>
</ol>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a05d92099d0e5d73d306cc386bc07b14-157506" alt="@ApiImplicitParams"></p>
</li>
</ol>
<h3 id="ApiModel-amp-ApiModelProperty"><a href="#ApiModel-amp-ApiModelProperty" class="headerlink" title="@ApiModel &amp; @ApiModelProperty"></a>@ApiModel &amp; @ApiModelProperty</h3><ol>
<li><p>一般用在post创建使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候</p>
</li>
<li><p>@ApiModel用来设置接口相关实体的描述</p>
</li>
<li><p>@ApiModelProperty用来设置实体属性的相关描述</p>
</li>
<li><p>示例:</p>
<ul>
<li>模型：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户id"</span>,example=<span class="string">"12"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户名"</span>,example = <span class="string">"WanderROS"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户地址"</span>,example = <span class="string">"无锡"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>控制接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"根据id更新用户的接口"</span>)</span><br><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">usertest</span><span class="params">(@RequestBody  User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>模型必须要有构造体，不然在Model中是显示不出来的</li>
<li>使用@RequestBody能够进行类的写入，能在Data Type中显示，并且能传参</li>
</ul>
</li>
</ul>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f3869e16e99d07e875810ae1f0f7885f-217719" alt="Model效果"></p>
</li>
</ol>
<h3 id="ApiResponses-amp-ApiResponse"><a href="#ApiResponses-amp-ApiResponse" class="headerlink" title="@ApiResponses &amp; @ApiResponse"></a>@ApiResponses &amp; @ApiResponse</h3><ol>
<li><p>@ApiResponses：用于请求的方法上，表示一组响应</p>
</li>
<li><p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</p>
</li>
<li><p>参数：</p>
<ol>
<li>code：数字，例如400</li>
<li>message：信息，例如”请求参数没填好”</li>
<li>response：抛出异常的类</li>
</ol>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"select1请求"</span>,notes = <span class="string">"多个参数，多种的查询参数类型"</span>)</span><br><span class="line"><span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code=<span class="number">400</span>,message=<span class="string">"请求参数没填好"</span>),</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code=<span class="number">404</span>,message=<span class="string">"请求路径没有或页面跳转路径不对"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>节省了大量手写接口文档的时间</li>
<li>通过注解自动生成在线文档</li>
<li>接口在线调用调试</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>代码耦合，需要注解支持</li>
<li>代码侵入性比较强</li>
<li>无法测试错误的请求方式、参数等</li>
</ol>
<h3 id="手动写API文档的痛点"><a href="#手动写API文档的痛点" class="headerlink" title="手动写API文档的痛点"></a>手动写API文档的痛点</h3><ol>
<li>文档更新交流不及时</li>
<li>接口返回结果不明确</li>
<li>不能直接在线测试接口，通常需要使用工具，比如postman</li>
<li>接口文档太多，不好管理</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>没有编写Swagger配置类，会出现错误</li>
<li>如果paramType与方法参数获取使用的注解不一致，会直接影响到参数的接收</li>
<li>API列表中同一个方法出现多个，需要在RequestMapping中指定method类型</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>体上来说，Swagger的配置还是比较简单的，并且Swagger能够自动帮我们生成文档确实为我们节省了不少工作，对后续的维护也提供了很大的帮助。除此之外，Swagger还能根据配置自动为我们生成测试的数据，并且提供对应的HTTP方法，这对我们的自测和联调工作也有不少的帮助，所以我还是推荐大家在日常的开发中去使用Swagger，应该可以帮助大家在一定程度上提高工作效率。Springfox-Swagger2可以通过扫描代码去生成描述文件，这样连描述文件都不需要再去维护了，所有的信息都在代码里面了！做到了<strong>代码即接口文档，接口文档即代码。</strong>在项目里使用这个能够大大方便自己的开发！希望以后多多使用，不要忘记了接口类还有这么一个好的工具！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Thymeleaf Qucik Start</title>
    <url>/2020/05/25/SpringBoot-Thymeleaf-Qucik-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a>是用来开发Web和独立环境项目的服务器端的Java模版引擎，Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，只用关注Thymeleaf的语法即可！这使得使用SpringBoot开发带有前端页面展示的B/S结构的项目非常的简单！SpringBoot官方推荐使用Thymeleaf模板引擎，对于它的支持度真的是没话说，那么多的模板引擎技术，学会其中的一种就可以了，不管好坏，这里开始学习Thymleaf，如果有需求也会优先考虑使用Thymeleaf模板引擎技术！Thymeleaf is a modern server-side Java template engine for both web and standalone environments.</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bb95d9de992453f9311b9de3d245537e-29003" alt="Thymeleaf官方LOGO"></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ol>
<li><p>目标：将优雅的自然模板带到开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作；</p>
</li>
<li><p>支持：能够处理HTML，XML，JavaScript，CSS甚至纯文本；</p>
</li>
<li><p>SpringBoot支持的模板引擎：</p>
<ul>
<li>Thymeleaf</li>
<li>FreeMarker</li>
<li>Velocity</li>
<li>Groovy</li>
<li><del>JSP</del>（真的不太推荐使用，必须打包为war类型，各种坑）</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li>动静结合：在有网络和无网络的环境下皆可运行，支持html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式</li>
<li>开箱即用：提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改jstl、改标签的困扰</li>
<li>多方言支持：提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能</li>
<li>SpringBoot完美整合：SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器</li>
</ul>
</li>
<li><p>在SpringBoot中可以非常方便地使用Thymeleaf以及Bootstrap开发非常好看的前端页面，并且Thymleaf模板语言看起来和HTML语言没太大区别！</p>
</li>
<li><p>有很多公司都在使用Thymeleaf</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/60f4a4cba749288238620de4f3346f80-78943" alt="谁在使用"></p>
</li>
</ol>
<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><ol>
<li><p>添加依赖（修改pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置（修改application.properties）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### Thymeleaf 配置 #####</span></span><br><span class="line"><span class="comment">#开发配置为false，避免修改模板还需要重启服务器</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.resources.chain.strategy.content.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.chain.strategy.content.paths</span>=<span class="string">/**</span></span><br><span class="line"><span class="comment">#模板的模式，支持HTML、XML、TEXT、JavaScript</span></span><br><span class="line"><span class="meta">spring.thymeleaf.mode</span>=<span class="string">HTML</span></span><br><span class="line"><span class="comment">#编码格式</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#内容类别</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="comment">#后缀</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加模板（在resources/templates目录下添加模板html文件）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是Thyme leaf 命名空间，通过引入该--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 命名空间就可以在HTML 文件中使用Thymeleaf 标签语言，用关键字“ th ” 来标注。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Show Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入公共顶栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"common::topbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>--年龄--<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>边框表格布局<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮编<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tanmay<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bangalore<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>560001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sachin<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mumbai<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>400003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Uma<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Pune<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>411027<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>悬停表格布局<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮编<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tanmay<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bangalore<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>560001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sachin<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mumbai<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>400003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Uma<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Pune<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>411027<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#calendars.format(today,'dd-MMMM-yyyy')&#125;"</span>&gt;</span>13 May 2011<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入公共底部栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"common::bottombar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- common.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是Thyme leaf 命名空间，通过引入该--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 命名空间就可以在HTML 文件中使用Thymeleaf 标签语言，用关键字“ th ” 来标注。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--顶栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>  <span class="attr">th:fragment</span>=<span class="string">"topbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-sign"</span>  <span class="attr">style</span>=<span class="string">"vertical-align:middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>免费注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-log"</span> <span class="attr">style</span>=<span class="string">"vertical-align:middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>马上登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--底部信息展示栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">th:fragment</span>=<span class="string">"bottombar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot"</span> <span class="attr">style</span>=<span class="string">"background-color:#323232 ;margin-top: 20px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: #C7C7C7"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: #556666;"</span>&gt;</span>wanderros@xx.com<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>wanderros<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#556666"</span> <span class="attr">align</span>=<span class="string">"center"</span> ;&gt;</span>XXXX公司注册<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:#C7C7C7;"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>客服电话:+86-xxxxxxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wanderros.thymeleaf.thymeleaf.thymeleafcontroller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">module</span>.ModuleDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"age"</span>,<span class="number">23</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"wanderros3"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"wander"</span>;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>,<span class="number">24</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"today"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"test"</span>;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>,<span class="number">24</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"today"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意控制器的注解只能使用@Controller，不能使用@RestController</li>
<li>SpringBoot默认是在resources目录下的templates下查找Thymeleaf模板引擎</li>
</ul>
</li>
<li><p>编译并运行:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1d585ca2631ae3938076f5e0b248a58d-82317" alt="运行效果"></p>
</li>
</ol>
<h2 id="Thymeleaf语法（基础）"><a href="#Thymeleaf语法（基础）" class="headerlink" title="Thymeleaf语法（基础）"></a>Thymeleaf语法（基础）</h2><ol>
<li><p>在使用thymleaf时，必须要在模板中添加头：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf将后端的值在html页面上显示很方便， 不管是字符串、数组、对象、集合大致都差不多，可以直接在页面上进行数据校验，逻辑判断等等，在JS里面取后端的值也很简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var levle = [[$&#123;level&#125;]];   //thymeleaf在Js里面获取SpringMVCModel里面写的值</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态文件引用：</p>
<ul>
<li><p>文件路径：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d39c6a6ba720a5c610431891f0484965-34695" alt="静态文件路径"></p>
</li>
<li><p>在页面中可以使用”@{路径}”来引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/main.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 引入css，虽然上面的css路径不存在，但是可以类推 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>页面之间的跳转可以通过@{}来实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/show&#125;"</span>&gt;</span>访问controller方法<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/static_index.html&#125;"</span>&gt;</span>访问静态页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑处理：所有的页面模版都存在各种基础逻辑处理，例如：判断、循环处理操作</p>
<ul>
<li><p>运算符——and、or、关系比较（&gt;、&lt;、&gt;=、&lt;=、==、!=、lt、gt、le、ge、eq、ne）等</p>
</li>
<li><p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;member.age lt 18&#125;"</span>&gt;</span></span><br><span class="line">	未成年人！</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;member.name eq '阿三'&#125;"</span>&gt;</span></span><br><span class="line">	欢迎阿三来访问！</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>页面引入：常常需要在一个页面当中引入另一个页面，例如，公用的导航栏以及页脚页面</p>
<ul>
<li><p>th:replace</p>
</li>
<li><p>th:include</p>
</li>
<li><p>上述样例代码中有使用页面引入，主要是要注意这两种引入的区别</p>
</li>
<li><p>引入需要有内容，内容通过使用 th:fragment=” xxx” 对一部分代码块命名，抽取到一个html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是Thyme leaf 命名空间，通过引入该--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 命名空间就可以在HTML 文件中使用Thymeleaf 标签语言，用关键字“ th ” 来标注。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--顶栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>  <span class="attr">th:fragment</span>=<span class="string">"topbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-sign"</span>  <span class="attr">style</span>=<span class="string">"vertical-align:middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>免费注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn-log"</span> <span class="attr">style</span>=<span class="string">"vertical-align:middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>马上登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取请求域、Session域里面的数据：</p>
<ul>
<li>${param.x} 返回名为x 的 request参数。（可能有多个值）</li>
<li>${session.x} 返回名为x的Session参数</li>
<li>${application.x} 返回名为 servlet context 的参数</li>
</ul>
</li>
<li><p>日期的输出:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#calendars.format(today,'dd MMMM yyyy')&#125;"</span>&gt;</span>25 May 2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>循环：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>switch判断：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Thymeleaf内置对象（获取这些对象，需要使用<code>#对象名</code>来引用）：</p>
<ol>
<li><p>环境对象：</p>
<ul>
<li>#ctx：获取Thymeleaf自己的Context对象</li>
<li>#requset：如果是web程序，可以获取HttpServletRequest对象</li>
<li>#response：如果是web程序，可以获取HttpServletReponse对象</li>
<li>#session：如果是web程序，可以获取HttpSession对象</li>
<li>#servletContext：如果是web程序，可以获取HttpServletContext对象</li>
</ul>
</li>
<li><p>全局对象：</p>
<ul>
<li>#dates：处理java.util.date的工具对象</li>
<li>#calendars：处理java.util.calendar的工具对象</li>
<li>#numbers：用来对数字格式化的方法</li>
<li>#strings：用来处理字符串的方法</li>
<li>#bools：用来判断布尔值的方法</li>
<li>#arrays：用来护理数组的方法</li>
<li>#lists：用来处理List集合的方法</li>
<li>#sets：用来处理set集合的方法</li>
<li>#maps：用来处理map集合的方法</li>
</ul>
</li>
<li><p>样例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  今天是: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(today,'yyyy-MM-dd')&#125;"</span>&gt;</span>2018-04-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>三元运算符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; ? '男':'女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置默认值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前面的表达式值为null时，就会使用后面的默认值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：?:之间没有空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125; ?: '二狗'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JS模板：模板引擎不仅可以渲染html，也可以对JS中的进行预处理，为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> user = <span class="comment">/*[[$&#123;user&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> age = <span class="comment">/*[[$&#123;user.age&#125;]]*/</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</li>
<li>Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值，并且User对象会被直接处理为json格式</li>
</ul>
</li>
<li><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#introducing-thymeleaf" target="_blank" rel="noopener">官方文档</a></p>
</li>
</ol>
<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><ol>
<li><p>创建交互数据类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        id=<span class="number">1</span>;</span><br><span class="line">        content=<span class="string">"Hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表单输入数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Handling Form Submission<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/greeting&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;greeting&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Id: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;id&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:field</span>=<span class="string">"*&#123;content&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建提交的表单数据显示模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Display Result<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Result<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'id: ' + $&#123;greeting.id&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'content: ' + $&#123;greeting.content&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/greeting&#125;"</span>&gt;</span>Submit another message<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greetingForm</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"greeting"</span>, <span class="keyword">new</span> Greeting());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"greeting"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greetingSubmit</span><span class="params">(@ModelAttribute Greeting greeting)</span> </span>&#123;</span><br><span class="line">        System.out.println(greeting.getId());</span><br><span class="line">        greeting.setContent(<span class="string">"Fuck"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/88818b9ddc8d22d466544814ea192d23-7812" alt="运行效果"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e1692159b2343e83bffdd9d54e85bd3c-7926" alt="post"></p>
</li>
<li><p>主要是HTML模板中的表单链接，这部分需要学习HTML5的基础知识！</p>
</li>
<li><p>模板解释：</p>
<ul>
<li>action = “#” 是form标签的属性，代表提交数据到本页</li>
<li>其他的可以查阅HTML文档</li>
</ul>
</li>
</ol>
<h2 id="创建一个简单的登录页面"><a href="#创建一个简单的登录页面" class="headerlink" title="创建一个简单的登录页面"></a>创建一个简单的登录页面</h2><ol>
<li><p>引入Bootstrap，添加bootstrap样例中的登录模板到项目中</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/74b64a4f0d6b918cb97c8ffdea5e8c2e-69216" alt="引入登录模板"></p>
</li>
<li><p>修改登录页面内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Mark Otto, Jacob Thornton, and Bootstrap contributors"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"Jekyll v4.0.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template · Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"https://getbootstrap.com/docs/4.5/examples/sign-in/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/bootstrap/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.bd-placeholder-img</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 1<span class="selector-class">.125rem</span>;</span></span><br><span class="line">        text-anchor: middle;</span><br><span class="line">        -webkit-user-select: none;</span><br><span class="line">        -moz-user-select: none;</span><br><span class="line">        -ms-user-select: none;</span><br><span class="line">        user-select: none;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.bd-placeholder-img-lg</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="selector-tag">font-size</span>: 3<span class="selector-class">.5rem</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/bootstrap/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/test&#125;"</span>  <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/bootstrap/bootstrap-solid.svg&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Email address"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;id&#125;"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;password&#125;"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span><span class="symbol">&amp;copy;</span> 2017-2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：为了控制器能获取输入的数据，添加了name属性，然后修改了form的属性</li>
</ul>
</li>
<li><p>修改控制器，添加登录页面方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"id"</span>, <span class="string">"1194409532@qq.com"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"password"</span>, <span class="string">"helloworld"</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"login.html"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testpasswd</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(<span class="string">"++++++++++++++"</span>+id+<span class="string">"###################"</span>);</span><br><span class="line">    System.out.println(<span class="string">"++++++++++++++"</span>+password+<span class="string">"###################"</span>);</span><br><span class="line">    <span class="keyword">if</span>(id.equals(<span class="string">"1194409532@qq.com"</span>)&amp;&amp;password.equals(<span class="string">"helloworld"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/test2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">"_______________________"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：测试代码，别太当真</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/736f52f75bbab0173a96a257607dd429-53555" alt="登录效果"></li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要介绍了部分的Thymeleaf的语法，以及如何在SpringBoot快速整合Thymeleaf，但是还没有进行完整的项目上的开发，还有很多东西可以深入，比如Thymeleaf表单处理，数据库的联合等等等，那样就是一个完整的小项目了！根据需要进行深入，这里暂时介绍到这里，因为想要深入还是需要学点html5以及javascript的知识！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot WebSocket Quick Start</title>
    <url>/2020/09/30/SpringBoot-WebSocket-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议,使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。有了WebSocket技术之后，后端就可以像客户端推送消息，比如向商家客户端推送订单消息等。这里记录在SpringBoot中使用WebSocket的过程。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
</li>
<li><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p>
</li>
<li><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p>
</li>
<li><p>WebSocket 使用 ws 或 wss 的统一资源标志符，类似于 HTTPS，其中 wss 表示在 TLS 之上的 Websocket,如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ws:<span class="comment">//example.com/wsapi</span></span><br><span class="line">wss:<span class="comment">//secure.example.com/wsapi</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>从分层的角度来讲，Socket 是传输控制层协议，WebSocket 是应用层协议。</p>
</li>
<li><p>WebSocket的调试可以安装一个谷歌浏览器插件<code>Browser WebSocket Client</code>（印象笔记中文档服务笔记本有保存），或者访问在线调试网址：<a href="http://www.websocket-test.com/。" target="_blank" rel="noopener">http://www.websocket-test.com/。</a></p>
</li>
<li><p>SpringFramework官方中文介绍WebSocket网址：<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket" target="_blank" rel="noopener">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket</a></p>
</li>
<li><p>尽管 WebSocket 设计为与 HTTP 兼容并以 HTTP 请求开头，但重要的是要了解这两个协议导致了截然不同的体系结构和应用程序编程模型。</p>
</li>
<li><p>应用场景：</p>
<ul>
<li>可以使网页具有动态性和交互性</li>
<li>新闻，邮件和社交订阅源</li>
<li>协作，游戏和金融应用程序</li>
</ul>
</li>
<li><p>服务器与Web客户端之间的双向通行策略：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/47bfa9136df7ac80c4ef082f95d28ebe-35615" alt="Web服务客户端互通策略"></p>
</li>
</ol>
<h2 id="创建一个WebSocket-Server端"><a href="#创建一个WebSocket-Server端" class="headerlink" title="创建一个WebSocket Server端"></a>创建一个<code>WebSocket Server</code>端</h2><ol>
<li><p>在创建的项目中引入maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WebSocket处理器用来处理客户端发送的消息,常用有<code>TextWebSocketHandler</code>和<code>BinaryWebSocketHandler</code>，这里创建一个<code>TextWebSocketHandler</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"建立连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = message.getPayload();</span><br><span class="line">        System.out.println(<span class="string">"收到消息： "</span>+msg);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"Hello"</span>+msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>afterConnectionEstablished</code> 成功创建连接后调用</li>
<li><code>handleTextMessage</code> 收到客户端消息后调用</li>
<li><code>handleTransportError</code> 连接异常时调用</li>
<li><code>afterConnectionClosed</code> 连接关闭后调用</li>
<li><code>sendMessage</code>用于向客户端发送消息</li>
<li><code>WebSocketSession</code>是客户端与服务端建立的回话，可以通过<code>close()</code>方法主动关闭连接</li>
<li><code>TextMessage</code>为收到的消息，可以通过<code>getPayload()</code>方法获取消息内容</li>
</ul>
</li>
<li><p>配置WebSocket，将处理器映射到指定的path上，还可以添加一些额外的配置，通过实现<code>WebSocketConfigurer</code>以及添加注解<code>@EnableWebSocket</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(chatWebSocketHandler(), <span class="string">"chat"</span>,<span class="string">"chat1"</span>) <span class="comment">// 添加消息处理器,可以添加多个path</span></span><br><span class="line">                <span class="comment">//.addInterceptors(chatHandshakeInterceptor()) // 添加握手拦截器</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>); <span class="comment">// 设置跨域</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatWebSocketHandler <span class="title">chatWebSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatHandshakeInterceptor <span class="title">chatHandshakeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line">        container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line">        container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>addHandler()</code>用于添加消息处理器，并指定映射<code>path</code>，服务端WebSocket地址为 <code>ws://host:port/path</code></li>
<li><code>setAllowedOrigins</code>用于设置跨域</li>
<li><code>addInterceptors</code>用于添加拦截器</li>
</ul>
</li>
<li><p>创建一个握手拦截器（可选），只要实现<code>HandshakeInterceptor</code>即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------握手前拦截"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------完成握手"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>beforeHandshake</code>握手前，该方法返回<code>true</code>表示继续建立连接，返回<code>false</code>则终止</li>
<li><code>afterHandshake</code>握手后动作</li>
</ul>
</li>
<li><p>Session空闲失效时间配置，可以增加一些配置来约束超时时间；还可以设置消息缓冲区大小等(<code>WebSocketConfigurer</code>实现的配置中注入Bean)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line"> container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line"> container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line"> <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前还没有在真实业务中使用WebSocket，但是查看调试信息可以看到公司邮箱系统是有用到WebSocket的，在后续需要的时候再继续深入吧！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot 处理微软文档和表格</title>
    <url>/2020/07/01/SpringBoot-%E5%A4%84%E7%90%86%E5%BE%AE%E8%BD%AF%E6%96%87%E6%A1%A3%E5%92%8C%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>“Apache POI - the Java API for Microsoft Documents!”因为有POI项目的存在，使得我们可以在服务器端读取微软的word和excel内容以及生成微软的word和excel文档。比如需求中需要生成Microsoft Excel文件格式的报告，甚至希望将Excel文件作为输入数据，这个时候就能体现出POI的价值了，本文主要介绍POI项目以及如何使用POI的API生成需要的文档以及读取文档内容。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Apache POI是一种流行的API，允许程序员使用Java程序创建，修改和显示MS Office文件！</p>
</li>
<li><p>组件：</p>
<ul>
<li>HSSF － 提供读写Microsoft Excel XLS格式档案的功能</li>
<li>XSSF － 提供读写Microsoft Excel OOXML XLSX格式档案的功能</li>
<li>HWPF － 提供读写Microsoft Word DOC格式档案的功能</li>
<li>HSLF － 提供读写Microsoft PowerPoint格式档案的功能。</li>
<li>HDGF － 提供读Microsoft Visio格式档案的功能</li>
<li>HPBF － 提供读Microsoft Publisher格式档案的功能</li>
<li>HSMF － 提供读Microsoft Outlook格式档案的功能</li>
</ul>
</li>
<li><p>官方网址：<a href="http://poi.apache.org/" target="_blank" rel="noopener">http://poi.apache.org/</a></p>
</li>
<li><p>HSSF组件中的类：</p>
<ul>
<li>HSSFWorkbook——excel的文档对象</li>
<li>HSSFSheet——excel的表单</li>
<li>HSSFRow——excel的行</li>
<li>HSSFCell——excel的格子单元</li>
<li>HSSFFont——excel字体</li>
<li>HSSFCellStyle——cell样式</li>
</ul>
</li>
<li><p>一个Excel文件对应一个workbook，一个workbook中有多个sheet组成，一个sheet是由多个行(row)和列(cell)组成，正确操作顺序：</p>
<ol>
<li>用HSSFWorkbook打开或者创建“Excel文件对象”</li>
<li>用HSSFWorkbook对象返回或者创建“Sheet对象”</li>
<li>用“Sheet对象”返回行对象，用行对象得到“Cell对象”</li>
<li>对“Cell对象”读写</li>
</ol>
</li>
<li><p>样式参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置字体;  </span></span><br><span class="line">        XSSFFont font = workbook.createFont();  </span><br><span class="line">        <span class="comment">//设置字体大小;  </span></span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">10</span>);  </span><br><span class="line">        <span class="comment">//设置字体名字;  </span></span><br><span class="line">        font.setFontName(<span class="string">"Courier New"</span>);  </span><br><span class="line">        <span class="comment">//font.setItalic(true);  </span></span><br><span class="line">        <span class="comment">//font.setStrikeout(true);  </span></span><br><span class="line">        <span class="comment">//设置样式;  </span></span><br><span class="line">        XSSFCellStyle style = workbook.createCellStyle();  </span><br><span class="line">        <span class="comment">//设置底边框;  </span></span><br><span class="line">        style.setBorderBottom(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        <span class="comment">//设置底边框颜色;  </span></span><br><span class="line">        style.setBottomBorderColor( <span class="keyword">new</span> XSSFColor(Color.BLACK));  </span><br><span class="line">        <span class="comment">//设置左边框;  </span></span><br><span class="line">        style.setBorderLeft(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        <span class="comment">//设置左边框颜色;  </span></span><br><span class="line">        style.setLeftBorderColor(<span class="keyword">new</span> XSSFColor(Color.BLACK));  </span><br><span class="line">        <span class="comment">//设置右边框;  </span></span><br><span class="line">        style.setBorderRight(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        <span class="comment">//设置右边框颜色;  </span></span><br><span class="line">        style.setRightBorderColor(<span class="keyword">new</span> XSSFColor(Color.BLACK));  </span><br><span class="line">        <span class="comment">//设置顶边框;  </span></span><br><span class="line">        style.setBorderTop(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        <span class="comment">//设置顶边框颜色;  </span></span><br><span class="line">        style.setTopBorderColor(<span class="keyword">new</span> XSSFColor(Color.BLACK));  </span><br><span class="line">        <span class="comment">//在样式用应用设置的字体;  </span></span><br><span class="line">        style.setFont(font);  </span><br><span class="line">        <span class="comment">//设置自动换行;  </span></span><br><span class="line">        style.setWrapText(<span class="keyword">true</span>);  </span><br><span class="line">        <span class="comment">//设置水平对齐的样式为居中对齐;  </span></span><br><span class="line">        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);  </span><br><span class="line">        <span class="comment">//设置垂直对齐的样式为居中对齐;  </span></span><br><span class="line">        style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        style.setFillForegroundColor(IndexedColors.WHITE.getIndex());</span><br><span class="line">		style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//小数点保留两位</span></span><br><span class="line">		style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"0.00"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意：使用POI相关的jar包版本一定要相同！</strong></p>
</li>
<li><p>官方教程：<a href="http://poi.apache.org/components/spreadsheet/quick-guide.html" target="_blank" rel="noopener">http://poi.apache.org/components/spreadsheet/quick-guide.html</a></p>
</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建工程（SpringBoot-Maven）"><a href="#创建工程（SpringBoot-Maven）" class="headerlink" title="创建工程（SpringBoot Maven）"></a>创建工程（SpringBoot Maven）</h2><ol>
<li><p>额外添加POI相关依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-examples<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-excelant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方便文件操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>基础测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPoiCreateExcel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建表头</span></span><br><span class="line">        String[] title = &#123;<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"sex"</span>&#125;;</span><br><span class="line">        <span class="comment">//创建Excel工作薄</span></span><br><span class="line">        HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">        HSSFSheet sheet = workbook.createSheet();</span><br><span class="line">        <span class="comment">//创建第一行</span></span><br><span class="line">        HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        HSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 插入第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.length; i++) &#123;</span><br><span class="line">            cell = row.createCell(i);</span><br><span class="line">            cell.setCellValue(title[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 追加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 这里的int 起始是1 也就是第二行开始</span></span><br><span class="line">            HSSFRow nexTrow = sheet.createRow(i);</span><br><span class="line">            HSSFCell cell2 = nexTrow.createCell(<span class="number">0</span>);</span><br><span class="line">            cell2.setCellValue(<span class="string">"a"</span>+i);</span><br><span class="line">            cell2 = nexTrow.createCell(<span class="number">1</span>);</span><br><span class="line">            cell2.setCellValue(<span class="string">"user"</span>);</span><br><span class="line">            cell2 = nexTrow.createCell(<span class="number">2</span>);</span><br><span class="line">            cell2.setCellValue(<span class="string">"男"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/poi.xls"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            <span class="comment">// 将内容存盘</span></span><br><span class="line">            FileOutputStream stream = FileUtils.openOutputStream(file);</span><br><span class="line">            workbook.write(stream);</span><br><span class="line"></span><br><span class="line">            stream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成的EXCEL文件内容如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/63f38366ec2325afd6574c0b23806257-726454" alt="生成的EXCEL内容"></p>
</li>
</ol>
<h2 id="读取与写入docx"><a href="#读取与写入docx" class="headerlink" title="读取与写入docx"></a>读取与写入docx</h2><h3 id="读取docx："><a href="#读取docx：" class="headerlink" title="读取docx："></a>读取docx：</h3><ol>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadDocx</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream in;</span><br><span class="line">    String text = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        OPCPackage opcPackage = POIXMLDocument.openPackage(<span class="string">"/Users/wander/Desktop/test.docx"</span>);</span><br><span class="line">        POIXMLTextExtractor extractor = <span class="keyword">new</span> XWPFWordExtractor(opcPackage);</span><br><span class="line">        text = extractor.getText();</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadDocx</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//解析docx模板并获取document对象</span></span><br><span class="line">        XWPFDocument document = <span class="keyword">new</span> XWPFDocument(POIXMLDocument.openPackage(<span class="string">"/Users/wander/Desktop/test.docx"</span>));</span><br><span class="line">        <span class="comment">//获取整个文本对象</span></span><br><span class="line">        List&lt;XWPFParagraph&gt; allParagraph = document.getParagraphs();</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//获取XWPFRun对象输出整个文本内容</span></span><br><span class="line">        StringBuffer tempText = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (XWPFParagraph xwpfParagraph : allParagraph) &#123;</span><br><span class="line">            List&lt;XWPFRun&gt; runList = xwpfParagraph.getRuns();</span><br><span class="line">            <span class="keyword">for</span> (XWPFRun xwpfRun : runList) &#123;</span><br><span class="line">                tempText.append(xwpfRun.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(tempText.toString());</span><br><span class="line">   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文档内容：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6bcd50fd7e034164ca11e07456112441-400366" alt="文档内容"></p>
</li>
<li><p>测试输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2020-07-01 20:01:35.198  INFO 68808 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : Starting TesthttpclientApplicationTests on WanderROSiMac.local with PID 68808 (started by wander in /Volumes/Daily/Project/testhttpclient)</span><br><span class="line">2020-07-01 20:01:35.199  INFO 68808 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : No active profile set, falling back to default profiles: default</span><br><span class="line">2020-07-01 20:01:36.161  INFO 68808 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span><br><span class="line">2020-07-01 20:01:36.366  INFO 68808 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : Started TesthttpclientApplicationTests in 1.705 seconds (JVM running for 3.191)</span><br><span class="line"></span><br><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.dom4j.io.SAXContentHandler (file:/usr/local/apache-maven-3.6.3/respository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar) to method com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$LocatorProxy.getEncoding()</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of org.dom4j.io.SAXContentHandler</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line">测试读取文档内容</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="创建（修改）docx"><a href="#创建（修改）docx" class="headerlink" title="创建（修改）docx"></a>创建（修改）docx</h3><ol>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testChangeDocx</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取word文档解析对象</span></span><br><span class="line">        XWPFDocument doucument = <span class="keyword">new</span> XWPFDocument(POIXMLDocument.openPackage(<span class="string">"/Users/wander/Desktop/test.docx"</span>));</span><br><span class="line">        <span class="comment">//获取段落文本对象</span></span><br><span class="line">        List&lt;XWPFParagraph&gt; paragraph = doucument.getParagraphs();</span><br><span class="line">        <span class="comment">//获取首行run对象</span></span><br><span class="line">        XWPFRun run = paragraph.get(<span class="number">0</span>).getRuns().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置文本内容</span></span><br><span class="line">        run.setText(<span class="string">"修改了的word"</span>);</span><br><span class="line">        <span class="comment">//生成新的word</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/test2.docx"</span>);</span><br><span class="line">   </span><br><span class="line">        FileOutputStream stream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        doucument.write(stream);</span><br><span class="line">        stream.close();</span><br><span class="line">   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文档内容：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6bcd50fd7e034164ca11e07456112441-400366" alt="文档内容"></p>
</li>
<li><p>修改输出文档：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3feffbef59a8bb13f02f82fe01e49a1d-414946" alt="修改输出文档"></p>
</li>
</ol>
<h3 id="读取doc文档"><a href="#读取doc文档" class="headerlink" title="读取doc文档"></a>读取doc文档</h3><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadDoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream in;</span><br><span class="line">    String text = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        in = <span class="keyword">new</span> FileInputStream(<span class="string">"/Users/wander/Desktop/test.doc"</span>);</span><br><span class="line">        WordExtractor extractor = <span class="keyword">new</span> WordExtractor(in);</span><br><span class="line">        text = extractor.getText();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">   log.info(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2020-07-01 20:17:19.352  INFO 69101 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : Starting TesthttpclientApplicationTests on WanderROSiMac.local with PID 69101 (started by wander in /Volumes/Daily/Project/testhttpclient)</span><br><span class="line">2020-07-01 20:17:19.353  INFO 69101 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : No active profile set, falling back to default profiles: default</span><br><span class="line">2020-07-01 20:17:20.790  INFO 69101 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'</span><br><span class="line">2020-07-01 20:17:21.068  INFO 69101 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : Started TesthttpclientApplicationTests in 2.338 seconds (JVM running for 4.422)</span><br><span class="line"></span><br><span class="line">2020-07-01 20:17:21.848  INFO 69101 --- [           main] c.w.t.t.TesthttpclientApplicationTests   : 测试读取文档内容</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="创建（修改）doc"><a href="#创建（修改）doc" class="headerlink" title="创建（修改）doc"></a>创建（修改）doc</h3><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWriteDoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String text=<span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取到文档</span></span><br><span class="line">        HWPFDocument doc = <span class="keyword">new</span> HWPFDocument(<span class="keyword">new</span> FileInputStream(<span class="string">"/Users/wander/Desktop/test.doc"</span>));</span><br><span class="line">        Range range = doc.getRange();</span><br><span class="line">        <span class="comment">//查看段落数量</span></span><br><span class="line">        <span class="keyword">int</span> paraNum = range.numParagraphs();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;paraNum;i++)&#123;</span><br><span class="line">            <span class="comment">//获取段落</span></span><br><span class="line">            Paragraph paragraph =range.getParagraph(i);</span><br><span class="line">            paragraph.replaceText(<span class="string">"文档"</span>,text);</span><br><span class="line">        &#125;</span><br><span class="line">        doc.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/test2.doc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改输出文档：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/048bc71aed08e5598885ceba5627b588-407075" alt="输出doc内容"></p>
</li>
</ol>
<h2 id="读取写入XLSX"><a href="#读取写入XLSX" class="headerlink" title="读取写入XLSX"></a>读取写入XLSX</h2><h3 id="读取xlsx"><a href="#读取xlsx" class="headerlink" title="读取xlsx"></a>读取xlsx</h3><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPoiReadExcel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 引入需要解析的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/poi.xls"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Excel 读取文件内容</span></span><br><span class="line">            HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook(FileUtils.openInputStream(file));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 第一种方式读取Sheet页</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"><span class="comment">//            HSSFSheet sheet = workbook.getSheet("Sheet0");</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 第二种方式读取Sheet页</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            HSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> firstRowNum = <span class="number">0</span>;<span class="comment">// 起始行第0行</span></span><br><span class="line">            <span class="keyword">int</span> lasrRowNum = sheet.getLastRowNum();<span class="comment">// 一直读到最后一行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lasrRowNum; i++) &#123;</span><br><span class="line">                HSSFRow row = sheet.getRow(i);</span><br><span class="line">                <span class="comment">// 获取当前最后单元格列号</span></span><br><span class="line">                <span class="keyword">int</span> lastCellNum = row.getLastCellNum();</span><br><span class="line">                log.error(Integer.toString(lastCellNum));</span><br><span class="line">               <span class="comment">// for (int j = 0; j &lt; lastCellNum; j++) &#123;</span></span><br><span class="line">                    HSSFCell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">double</span> value = cell.getNumericCellValue();<span class="comment">// 注意！ 如果Excel 里面的值是String 那么getStringCellValue 如果是其他类型 则需要修改</span></span><br><span class="line">                    log.info(value + <span class="string">"  "</span>);</span><br><span class="line">              <span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="写入xlsx"><a href="#写入xlsx" class="headerlink" title="写入xlsx"></a>写入xlsx</h3><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPoiCreateExcel</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建表头</span></span><br><span class="line">    String[] title = &#123;<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"sex"</span>&#125;;</span><br><span class="line">    <span class="comment">//创建Excel工作薄</span></span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet();</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    HSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 插入第一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.length; i++) &#123;</span><br><span class="line">        cell = row.createCell(i);</span><br><span class="line">        cell.setCellValue(title[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 追加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 这里的int 起始是1 也就是第二行开始</span></span><br><span class="line">        HSSFRow nexTrow = sheet.createRow(i);</span><br><span class="line">        HSSFCell cell2 = nexTrow.createCell(<span class="number">0</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"a"</span>+i);</span><br><span class="line">        cell2 = nexTrow.createCell(<span class="number">1</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"user"</span>);</span><br><span class="line">        cell2 = nexTrow.createCell(<span class="number">2</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"男"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/poi.xls"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        <span class="comment">// 将内容存盘</span></span><br><span class="line">        FileOutputStream stream = FileUtils.openOutputStream(file);</span><br><span class="line">        workbook.write(stream);</span><br><span class="line">   </span><br><span class="line">        stream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h3><ol>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPoiExcelStyle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建表头</span></span><br><span class="line">    String[] title = &#123;<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"sex"</span>&#125;;</span><br><span class="line">    <span class="comment">//创建Excel工作薄</span></span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    <span class="keyword">short</span> colorIndex = <span class="number">10</span>;</span><br><span class="line">    HSSFPalette palette = workbook.getCustomPalette();<span class="comment">//自定义颜色</span></span><br><span class="line">    Color rgb = Color.GREEN;</span><br><span class="line">    <span class="keyword">short</span> bgIndex = colorIndex ++; <span class="comment">//背景颜色下标值</span></span><br><span class="line">    palette.setColorAtIndex(bgIndex, (<span class="keyword">byte</span>) rgb.getRed(), (<span class="keyword">byte</span>) rgb.getGreen(), (<span class="keyword">byte</span>) rgb.getBlue());</span><br><span class="line">    <span class="keyword">short</span> bdIndex = colorIndex ++; <span class="comment">//边框颜色下标值</span></span><br><span class="line">    rgb = Color.BLACK;</span><br><span class="line">    palette.setColorAtIndex(bdIndex, (<span class="keyword">byte</span>) rgb.getRed(), (<span class="keyword">byte</span>) rgb.getGreen(), (<span class="keyword">byte</span>) rgb.getBlue());</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet();</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    HSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 插入第一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.length; i++) &#123;</span><br><span class="line">        cell = row.createCell(i);</span><br><span class="line">        cell.setCellValue(title[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 追加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 这里的int 起始是1 也就是第二行开始</span></span><br><span class="line">        HSSFRow nexTrow = sheet.createRow(i);</span><br><span class="line">        HSSFCell cell2 = nexTrow.createCell(<span class="number">0</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"a"</span>+i);</span><br><span class="line">        cell2 = nexTrow.createCell(<span class="number">1</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"user"</span>);</span><br><span class="line">        cell2 = nexTrow.createCell(<span class="number">2</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"男"</span>);</span><br><span class="line">        HSSFCellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">        cellStyle.setFillForegroundColor(bgIndex); <span class="comment">//bgIndex 背景颜色下标值</span></span><br><span class="line">        cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">   </span><br><span class="line">        cellStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);</span><br><span class="line">        cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);</span><br><span class="line">        cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);</span><br><span class="line">        cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);</span><br><span class="line">        <span class="comment">//bdIndex 边框颜色下标值</span></span><br><span class="line">        cellStyle.setBottomBorderColor(bdIndex);</span><br><span class="line">        cellStyle.setLeftBorderColor(bdIndex);</span><br><span class="line">        cellStyle.setRightBorderColor(bdIndex);</span><br><span class="line">        cellStyle.setTopBorderColor(bdIndex);</span><br><span class="line">   </span><br><span class="line">        cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">        cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">   </span><br><span class="line">        cell2.setCellStyle(cellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/poi.xls"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        <span class="comment">// 将内容存盘</span></span><br><span class="line">        FileOutputStream stream = FileUtils.openOutputStream(file);</span><br><span class="line">        workbook.write(stream);</span><br><span class="line">   </span><br><span class="line">        stream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置单元格效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4c72733ffddb63ca3b756a13b3ceb0fa-380472" alt="单元格效果"></p>
</li>
<li><p>单元格可以设置居左、居中、居右、上下居中、设置边框、设置边框颜色、设置单元格背景颜色等, excel设置单元格有一个HSSFCellStyle类可以设置样式，单元格颜色比较麻烦，excel颜色对应一个下标值，我们可以使用自定义颜色，但下标值从11开始，前1-10被poi已经使用，通过palette.setColorAtIndex方法将颜色与下标值对应，下面cellStyle.setFillForegroundColor(bgIndex)设置背景颜色时set 下标值并不是颜色Color，一个下标值如11不能被重复设置颜色，否则excel单元格显示的都是黑色。</p>
</li>
<li><p>设置单元格字体样式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFCellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line"> </span><br><span class="line">HSSFFont font = workbook.createFont();</span><br><span class="line">font.setItalic(<span class="keyword">true</span>);</span><br><span class="line">font.setUnderline(HSSFFont.U_SINGLE);</span><br><span class="line">font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</span><br><span class="line">font.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">14</span>);</span><br><span class="line">cellStyle.setFont(font);</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并单元格：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CellRangeAddress region = <span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="comment">// first row</span></span><br><span class="line">        <span class="number">0</span>, <span class="comment">// last row</span></span><br><span class="line">        <span class="number">0</span>, <span class="comment">// first column</span></span><br><span class="line">        <span class="number">2</span> <span class="comment">// last column</span></span><br><span class="line">);</span><br><span class="line">sheet.addMergedRegion(region);</span><br></pre></td></tr></table></figure>
</li>
<li><p>单元格中加入图片:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入图片</span></span><br><span class="line"><span class="keyword">byte</span>[] bt = FileUtils.readFileToByteArray(<span class="keyword">new</span> File(<span class="string">"/test/pie.png"</span>));</span><br><span class="line"><span class="keyword">int</span> pictureIdx = wb.addPicture(bt, Workbook.PICTURE_TYPE_PNG);</span><br><span class="line">CreationHelper helper = wb.getCreationHelper();</span><br><span class="line">Drawing drawing = sheet.createDrawingPatriarch();</span><br><span class="line">ClientAnchor anchor = helper.createClientAnchor();</span><br><span class="line">anchor.setCol1(<span class="number">0</span>); <span class="comment">//图片开始列数</span></span><br><span class="line">anchor.setRow1(<span class="number">4</span>); <span class="comment">//图片开始行数</span></span><br><span class="line">anchor.setCol2(<span class="number">3</span>); <span class="comment">//图片结束列数</span></span><br><span class="line">anchor.setRow2(<span class="number">25</span>);<span class="comment">//图片结束行数</span></span><br><span class="line">drawing.createPicture(anchor, pictureIdx);</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入浮动层图片类似html中div:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入图片</span></span><br><span class="line"><span class="keyword">int</span> pictureIdx = wb.addPicture(bt, Workbook.PICTURE_TYPE_PNG);</span><br><span class="line">CreationHelper helper = wb.getCreationHelper();</span><br><span class="line">Drawing drawing = sheet.createDrawingPatriarch();</span><br><span class="line">ClientAnchor anchor = helper.createClientAnchor();</span><br><span class="line">anchor.setCol1(<span class="number">0</span>); <span class="comment">//图片开始列数</span></span><br><span class="line">anchor.setRow1(<span class="number">4</span>); <span class="comment">//图片开始行数</span></span><br><span class="line">Picture picture = drawing.createPicture(anchor, pictureIdx);</span><br><span class="line">picture.resize();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="XLSX操作细节"><a href="#XLSX操作细节" class="headerlink" title="XLSX操作细节"></a>XLSX操作细节</h2><h3 id="创建Workbook和Sheet"><a href="#创建Workbook和Sheet" class="headerlink" title="创建Workbook和Sheet"></a>创建Workbook和Sheet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">HSSFSheet sheet = workbook.createSheet();<span class="comment">//创建工作表(Sheet)</span></span><br><span class="line">sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">//创建工作表(Sheet)</span></span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(filePath);</span><br><span class="line">workbook.write(out);<span class="comment">//保存Excel文件</span></span><br></pre></td></tr></table></figure>

<h3 id="创建单元格"><a href="#创建单元格" class="headerlink" title="创建单元格"></a>创建单元格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet),表格名称为Test</span></span><br><span class="line">HSSFRow row = sheet.createRow(<span class="number">0</span>);<span class="comment">// 创建行,从0开始</span></span><br><span class="line">HSSFCell cell = row.createCell(<span class="number">0</span>);<span class="comment">// 创建行的单元格,也是从0开始</span></span><br><span class="line">cell.setCellValue(<span class="string">"TestContent"</span>);<span class="comment">// 设置单元格内容</span></span><br><span class="line">row.createCell(<span class="number">1</span>).setCellValue(<span class="keyword">false</span>);<span class="comment">// 设置单元格内容,重载</span></span><br><span class="line">row.createCell(<span class="number">2</span>).setCellValue(<span class="keyword">new</span> Date());<span class="comment">// 设置单元格内容,重载</span></span><br><span class="line">row.createCell(<span class="number">3</span>).setCellValue(<span class="number">12.345</span>);<span class="comment">// 设置单元格内容,重载</span></span><br></pre></td></tr></table></figure>

<h3 id="创建文档摘要信息"><a href="#创建文档摘要信息" class="headerlink" title="创建文档摘要信息"></a>创建文档摘要信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDocumentDesc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    workbook.createSheet();</span><br><span class="line">    workbook.createInformationProperties();<span class="comment">//创建文档信息</span></span><br><span class="line">    DocumentSummaryInformation dsi=workbook.getDocumentSummaryInformation();<span class="comment">//摘要信息</span></span><br><span class="line">    dsi.setCategory(<span class="string">"类别:Excel文件"</span>);<span class="comment">//类别</span></span><br><span class="line">    dsi.setManager(<span class="string">"管理者:W"</span>);<span class="comment">//管理者</span></span><br><span class="line">    dsi.setCompany(<span class="string">"公司:--"</span>);<span class="comment">//公司</span></span><br><span class="line">    SummaryInformation si =workbook.getSummaryInformation();<span class="comment">//摘要信息</span></span><br><span class="line">    si.setSubject(<span class="string">"主题:--"</span>);<span class="comment">//主题</span></span><br><span class="line">    si.setTitle(<span class="string">"标题:测试文档"</span>);<span class="comment">//标题</span></span><br><span class="line">    si.setAuthor(<span class="string">"作者:w"</span>);<span class="comment">//作者</span></span><br><span class="line">    si.setComments(<span class="string">"备注:POI测试文档"</span>);<span class="comment">//备注</span></span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e3f2e05dc95cb0c1e670572b0cc20967-189990" alt="文档信息"></p>
<h3 id="创建批注"><a href="#创建批注" class="headerlink" title="创建批注"></a>创建批注</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateNotation</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">    HSSFPatriarch patr = sheet.createDrawingPatriarch();</span><br><span class="line">    HSSFClientAnchor anchor = patr.createAnchor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>);<span class="comment">//创建批注位置</span></span><br><span class="line">    HSSFComment comment = patr.createCellComment(anchor);<span class="comment">//创建批注</span></span><br><span class="line">    comment.setString(<span class="keyword">new</span> HSSFRichTextString(<span class="string">"这是一个批注段落！"</span>));<span class="comment">//设置批注内容</span></span><br><span class="line">    comment.setAuthor(<span class="string">"W"</span>);<span class="comment">//设置批注作者</span></span><br><span class="line">    comment.setVisible(<span class="keyword">true</span>);<span class="comment">//设置批注默认显示</span></span><br><span class="line">    HSSFCell cell = sheet.createRow(<span class="number">2</span>).createCell(<span class="number">1</span>);</span><br><span class="line">    cell.setCellValue(<span class="string">"测试"</span>);</span><br><span class="line">    cell.setCellComment(comment);<span class="comment">//把批注赋值给单元格</span></span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建批注位置HSSFPatriarch.createAnchor(dx1, dy1, dx2, dy2, col1, row1, col2, row2)方法参数说明：<ul>
<li>dx1 第1个单元格中x轴的偏移量</li>
<li>dy1 第1个单元格中y轴的偏移量</li>
<li>dx2 第2个单元格中x轴的偏移量</li>
<li>dy2 第2个单元格中y轴的偏移量</li>
<li>col1 第1个单元格的列号</li>
<li>row1 第1个单元格的行号</li>
<li>col2 第2个单元格的列号</li>
<li>row2 第2个单元格的行号</li>
</ul>
</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7b935176de472835b15c1eef6e5be473-369124" alt="创建批注"></p>
<h3 id="设置页眉页脚"><a href="#设置页眉页脚" class="headerlink" title="设置页眉页脚"></a>设置页眉页脚</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFooter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">    HSSFHeader header=sheet.getHeader();<span class="comment">//得到页眉</span></span><br><span class="line">    header.setLeft(<span class="string">"页眉左边"</span>);</span><br><span class="line">    header.setRight(<span class="string">"页眉右边"</span>);</span><br><span class="line">    header.setCenter(<span class="string">"页眉中间"</span>);</span><br><span class="line">    HSSFFooter footer=sheet.getFooter();<span class="comment">//得到页脚</span></span><br><span class="line">    footer.setLeft(<span class="string">"页脚左边"</span>);</span><br><span class="line">    footer.setRight(<span class="string">"页脚右边"</span>);</span><br><span class="line">    footer.setCenter(<span class="string">"页脚中间"</span>);</span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cde5996c5b72fab7389b92160aae6cea-165247" alt="页眉页脚"></p>
<h3 id="单元格格式"><a href="#单元格格式" class="headerlink" title="单元格格式"></a>单元格格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"第一个sheet"</span>);</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    HSSFCell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">    HSSFCellStyle style=workbook.createCellStyle();</span><br><span class="line">    <span class="comment">// 设置日期格式--使用Excel内嵌的格式</span></span><br><span class="line">    style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"m/d/yy h:mm"</span>));</span><br><span class="line">    <span class="comment">// 设置保留2位小数--使用Excel内嵌的格式</span></span><br><span class="line">    style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"0.00"</span>));</span><br><span class="line">    <span class="comment">//设置货币格式--使用自定义的格式</span></span><br><span class="line">    style.setDataFormat(workbook.createDataFormat().getFormat(<span class="string">"￥#,##0"</span>));</span><br><span class="line">    <span class="comment">//设置百分比格式--使用自定义的格式</span></span><br><span class="line">    style.setDataFormat(workbook.createDataFormat().getFormat(<span class="string">"0.00%"</span>));</span><br><span class="line">    <span class="comment">//设置中文大写格式--使用自定义的格式</span></span><br><span class="line">    style.setDataFormat(workbook.createDataFormat().getFormat(<span class="string">"[DbNum2][$-804]0"</span>));</span><br><span class="line">    <span class="comment">//设置科学计数法格式--使用自定义的格式</span></span><br><span class="line">    style.setDataFormat(workbook.createDataFormat().getFormat(<span class="string">"0.00E+00"</span>));</span><br><span class="line">    cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line"><span class="comment">//创建一个工作表sheet</span></span><br><span class="line">HSSFSheet sheet = workbook.createSheet(<span class="string">"第一个sheet"</span>);</span><br><span class="line"><span class="comment">//创建第一行</span></span><br><span class="line">HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//合并列</span></span><br><span class="line">HSSFCell cell=row.createCell(<span class="number">0</span>);</span><br><span class="line">cell.setCellValue(<span class="string">"合并列"</span>);</span><br><span class="line">CellRangeAddress region=<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">sheet.addMergedRegion(region);</span><br><span class="line"><span class="comment">//合并行</span></span><br><span class="line">cell=row.createCell(<span class="number">6</span>);</span><br><span class="line">cell.setCellValue(<span class="string">"合并行"</span>);</span><br><span class="line">region=<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">sheet.addMergedRegion(region);</span><br></pre></td></tr></table></figure>

<ul>
<li>CellRangeAddress对象其实就是表示一个区域，其构造方法如下：CellRangeAddress(firstRow, lastRow, firstCol, lastCol)，参数的说明：<ul>
<li>firstRow 区域中第一个单元格的行号</li>
<li>lastRow 区域中最后一个单元格的行号</li>
<li>firstCol 区域中第一个单元格的列号</li>
<li>lastCol 区域中最后一个单元格的列号</li>
</ul>
</li>
</ul>
<h3 id="单元格对齐"><a href="#单元格对齐" class="headerlink" title="单元格对齐"></a>单元格对齐</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFCell cell=row.createCell(<span class="number">0</span>);</span><br><span class="line">cell.setCellValue(<span class="string">"单元格对齐"</span>);</span><br><span class="line">HSSFCellStyle style=workbook.createCellStyle();</span><br><span class="line">style.setAlignment(HSSFCellStyle.ALIGN_CENTER);<span class="comment">//水平居中</span></span><br><span class="line">style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">//垂直居中</span></span><br><span class="line">style.setWrapText(<span class="keyword">true</span>);<span class="comment">//自动换行</span></span><br><span class="line">style.setIndention((<span class="keyword">short</span>)<span class="number">5</span>);<span class="comment">//缩进</span></span><br><span class="line">style.setRotation((<span class="keyword">short</span>)<span class="number">60</span>);<span class="comment">//文本旋转，这里的取值是从-90到90，而不是0-180度。</span></span><br><span class="line">cell.setCellStyle(style);</span><br></pre></td></tr></table></figure>

<ul>
<li>水平对齐相关参数:<ul>
<li>如果是左侧对齐就是 HSSFCellStyle.ALIGN_FILL</li>
<li>如果是居中对齐就是 HSSFCellStyle.ALIGN_CENTER</li>
<li>如果是右侧对齐就是 HSSFCellStyle.ALIGN_RIGHT</li>
<li>如果是跨列举中就是 HSSFCellStyle.ALIGN_CENTER_SELECTION</li>
<li>如果是两端对齐就是 HSSFCellStyle.ALIGN_JUSTIFY</li>
<li>如果是填充就是 HSSFCellStyle.ALIGN_FILL</li>
</ul>
</li>
<li>垂直对齐相关参数:<ul>
<li>如果是靠上就是 HSSFCellStyle.VERTICAL_TOP</li>
<li>如果是居中就是 HSSFCellStyle.VERTICAL_CENTER;</li>
<li>如果是靠下就是 HSSFCellStyle.VERTICAL_BOTTOM</li>
<li>如果是两端对齐就是 HSSFCellStyle.VERTICAL_JUSTIFY</li>
</ul>
</li>
</ul>
<h3 id="单元格边框"><a href="#单元格边框" class="headerlink" title="单元格边框"></a>单元格边框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBorder</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"第一个sheet"</span>);</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">    HSSFCell cell=row.createCell(<span class="number">1</span>);</span><br><span class="line">    cell.setCellValue(<span class="string">"设置边框"</span>);</span><br><span class="line">    HSSFCellStyle style=workbook.createCellStyle();</span><br><span class="line">    style.setBorderTop(HSSFCellStyle.BORDER_DOTTED);<span class="comment">//上边框</span></span><br><span class="line">    style.setBorderBottom(HSSFCellStyle.BORDER_THICK);<span class="comment">//下边框</span></span><br><span class="line">    style.setBorderLeft(HSSFCellStyle.BORDER_DOUBLE);<span class="comment">//左边框</span></span><br><span class="line">    style.setBorderRight(HSSFCellStyle.BORDER_SLANTED_DASH_DOT);<span class="comment">//右边框</span></span><br><span class="line">    style.setTopBorderColor(HSSFColor.RED.index);<span class="comment">//上边框颜色</span></span><br><span class="line">    style.setBottomBorderColor(HSSFColor.BLUE.index);<span class="comment">//下边框颜色</span></span><br><span class="line">    style.setLeftBorderColor(HSSFColor.GREEN.index);<span class="comment">//左边框颜色</span></span><br><span class="line">    style.setRightBorderColor(HSSFColor.PINK.index);<span class="comment">//右边框颜色</span></span><br><span class="line">    cell.setCellStyle(style);</span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6b9373f5fede0ebe8d04975b38b56214-364988" alt="边框样式"></p>
<ul>
<li><p>边框类型分为以下几种：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/083e62a03a338b97ad91db084d26039b-163337" alt="边框类型"></p>
</li>
</ul>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFont</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    <span class="comment">//创建一个工作表sheet</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"第一个sheet"</span>);</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">    HSSFCell cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">    cell.setCellValue(<span class="string">"设置字体"</span>);</span><br><span class="line">    HSSFCellStyle style =workbook.createCellStyle();</span><br><span class="line">    HSSFFont font = workbook.createFont();</span><br><span class="line">    font.setFontName(<span class="string">"华文行楷"</span>);<span class="comment">//设置字体名称</span></span><br><span class="line">    font.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">28</span>);<span class="comment">//设置字号</span></span><br><span class="line">    font.setColor(HSSFColor.RED.index);<span class="comment">//设置字体颜色</span></span><br><span class="line">    font.setUnderline(FontFormatting.U_SINGLE);<span class="comment">//设置下划线</span></span><br><span class="line">    font.setTypeOffset(FontFormatting.SS_SUPER);<span class="comment">//设置上标下标</span></span><br><span class="line">    font.setStrikeout(<span class="keyword">true</span>);<span class="comment">//设置删除线</span></span><br><span class="line">    style.setFont(font);</span><br><span class="line">    cell.setCellStyle(style);</span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/503863e6eb17f698060bbb7dc2f0ba1b-362963" alt="设置字体效果"></p>
<ul>
<li>下划线选项值：<ul>
<li>单下划线 FontFormatting.U_SINGLE</li>
<li>双下划线 FontFormatting.U_DOUBLE</li>
<li>会计用单下划线 FontFormatting.U_SINGLE_ACCOUNTING</li>
<li>会计用双下划线 FontFormatting.U_DOUBLE_ACCOUNTING</li>
<li>无下划线 FontFormatting.U_NONE</li>
</ul>
</li>
<li>上标下标选项值：<ul>
<li>上标 FontFormatting.SS_SUPER</li>
<li>下标 FontFormatting.SS_SUB</li>
<li>普通，默认值 FontFormatting.SS_NONE</li>
</ul>
</li>
</ul>
<h3 id="背景和纹理"><a href="#背景和纹理" class="headerlink" title="背景和纹理"></a>背景和纹理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">style.setFillForegroundColor(HSSFColor.GREEN.index);<span class="comment">//设置图案颜色</span></span><br><span class="line">style.setFillBackgroundColor(HSSFColor.RED.index);<span class="comment">//设置图案背景色</span></span><br><span class="line">style.setFillPattern(HSSFCellStyle.SQUARES);<span class="comment">//设置图案样式</span></span><br><span class="line">cell.setCellStyle(style);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>图案样式和对应的值：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a7d694439db575ec7919aba2d9a5ebe0-238741" alt="图案样式"></p>
</li>
</ul>
<h3 id="设置宽度和高度"><a href="#设置宽度和高度" class="headerlink" title="设置宽度和高度"></a>设置宽度和高度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">HSSFRow row = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">HSSFCell cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">cell.setCellValue(<span class="string">"123456789012345678901234567890"</span>);</span><br><span class="line">sheet.setColumnWidth(<span class="number">1</span>, <span class="number">31</span> * <span class="number">256</span>);<span class="comment">//设置第一列的宽度是31个字符宽度</span></span><br><span class="line">row.setHeightInPoints(<span class="number">50</span>);<span class="comment">//设置行的高度是50个点</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置行高使用HSSFRow对象的setHeight和setHeightInPoints方法，这两个方法的区别在于setHeightInPoints的单位是点，而setHeight的单位是1/20个点，所以setHeight的值永远是setHeightInPoints的20倍；</li>
<li>可以使用HSSFSheet.setDefaultColumnWidth、HSSFSheet.setDefaultRowHeight和HSSFSheet.setDefaultRowHeightInPoints方法设置默认的列宽或行高；</li>
</ul>
<h3 id="Excel公式的使用"><a href="#Excel公式的使用" class="headerlink" title="Excel公式的使用"></a>Excel公式的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">    HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    HSSFCell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">    cell.setCellFormula(<span class="string">"2+3*4"</span>);<span class="comment">//设置公式</span></span><br><span class="line">    cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">    cell.setCellValue(<span class="number">10</span>);</span><br><span class="line">    cell = row.createCell(<span class="number">2</span>);</span><br><span class="line">    cell.setCellFormula(<span class="string">"A1*B1"</span>);<span class="comment">//设置公式</span></span><br><span class="line">    row.createCell(<span class="number">0</span>).setCellFormula(<span class="string">"sum(A1,C1)"</span>);<span class="comment">//等价于"A1+C1"</span></span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellFormula(<span class="string">"sum(B1:D1)"</span>);<span class="comment">//等价于"B1+C1+D1"</span></span><br><span class="line">    cell.setCellFormula(<span class="string">"CONCATENATE(DATEDIF(A1,B1,\"y\"),\"年\")"</span>);</span><br><span class="line">    cell=row.createCell(<span class="number">4</span>);</span><br><span class="line">    cell.setCellFormula(<span class="string">"CONCATENATE(DATEDIF(A1,B1,\"m\"),\"月\")"</span>);</span><br><span class="line">    cell=row.createCell(<span class="number">5</span>);</span><br><span class="line">    cell.setCellFormula(<span class="string">"CONCATENATE(DATEDIF(A1,B1,\"d\"),\"日\")"</span>);</span><br><span class="line">    row.createCell(<span class="number">3</span>).setCellFormula(<span class="string">"UPPER(A1)"</span>);</span><br><span class="line">    row.createCell(<span class="number">4</span>).setCellFormula(<span class="string">"PROPER(B1)"</span>);</span><br><span class="line">    row.createCell(<span class="number">3</span>).setCellFormula(<span class="string">"IF(A1&gt;B1,\"A1大于B1\",\"A1小于等于B1\")"</span>);</span><br><span class="line">    row.createCell(<span class="number">7</span>).setCellFormula(<span class="string">"COUNTIF(A1:F1,\"&gt;=60\")"</span>);</span><br><span class="line">    row.createCell(<span class="number">8</span>).setCellFormula(<span class="string">"SUMIF(A1:F1,\"&gt;=60\",A1:F1)"</span>);</span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellFormula(<span class="string">"LOOKUP(A5,$A$1:$A$4,$C$1:$C$4)"</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellFormula(<span class="string">"VLOOKUP(A5,$A$1:$C$4,3,true)"</span>);</span><br><span class="line">    row.createCell(<span class="number">0</span>).setCellFormula(<span class="string">"RAND()"</span>);<span class="comment">//取0-1之间的随机数</span></span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellFormula(<span class="string">"int(RAND()*100)"</span>);<span class="comment">//取0-100之间的随机整数</span></span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellFormula(<span class="string">"rand()*10+10"</span>);<span class="comment">//取10-20之间的随机实数</span></span><br><span class="line">    row.createCell(<span class="number">3</span>).setCellFormula(<span class="string">"CHAR(INT(RAND()*26)+97)"</span>);<span class="comment">//随机小写字母</span></span><br><span class="line">    row.createCell(<span class="number">4</span>).setCellFormula(<span class="string">"CHAR(INT(RAND()*26)+65)"</span>);<span class="comment">//随机大写字母</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Excel图形"><a href="#Excel图形" class="headerlink" title="Excel图形"></a>Excel图形</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFigure</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建Excel文件(Workbook)</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet(<span class="string">"Test"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">    HSSFPatriarch patriarch=sheet.createDrawingPatriarch();</span><br><span class="line">    HSSFClientAnchor anchor = <span class="keyword">new</span> HSSFClientAnchor(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,(<span class="keyword">short</span>)<span class="number">1</span>,<span class="number">0</span>,(<span class="keyword">short</span>)<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    HSSFSimpleShape line = patriarch.createSimpleShape(anchor);</span><br><span class="line">    line.setShapeType(HSSFSimpleShape.OBJECT_TYPE_PICTURE);<span class="comment">//设置图形类型</span></span><br><span class="line"> 	  line.setShapeType(HSSFSimpleShape.OBJECT_TYPE_RECTANGLE); <span class="comment">//矩形</span></span><br><span class="line">    line.setShapeType(HSSFSimpleShape.OBJECT_TYPE_OVAL); <span class="comment">//圆形</span></span><br><span class="line">    line.setLineStyle(HSSFShape.LINESTYLE_SOLID);<span class="comment">//设置图形样式</span></span><br><span class="line">    line.setLineWidth(<span class="number">6350</span>);<span class="comment">//在POI中线的宽度12700表示1pt,所以这里是0.5pt粗的线条。</span></span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>利用POI画图主要有以下几个步骤：<ul>
<li>创建一个Patriarch（注意，一个sheet中通常只创建一个Patriarch对象）；</li>
<li>创建一个Anchor，以确定图形的位置</li>
<li>调用Patriarch创建图形</li>
<li>设置图形类型(直线，矩形，圆形等)及样式（颜色，粗细等）</li>
</ul>
</li>
</ul>
<h3 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置默认工作表</span></span><br><span class="line">  HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">// 创建Excel文件(Workbook)</span></span><br><span class="line">  workbook.createSheet(<span class="string">"Test0"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  workbook.createSheet(<span class="string">"Test1"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  workbook.createSheet(<span class="string">"Test2"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  workbook.createSheet(<span class="string">"Test3"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  workbook.setActiveSheet(<span class="number">2</span>);<span class="comment">//设置默认工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名工作表</span></span><br><span class="line">	workbook.setSheetName(<span class="number">2</span>, <span class="string">"1234"</span>);<span class="comment">//重命名工作表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整表单显示比例</span></span><br><span class="line">  HSSFSheet sheet1= workbook.createSheet(<span class="string">"Test0"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  HSSFSheet sheet2=workbook.createSheet(<span class="string">"Test1"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  HSSFSheet sheet3=workbook.createSheet(<span class="string">"Test2"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">  sheet1.setZoom(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//50%显示比例</span></span><br><span class="line">  sheet2.setZoom(<span class="number">2</span>,<span class="number">1</span>);<span class="comment">//200%显示比例</span></span><br><span class="line">  sheet3.setZoom(<span class="number">1</span>,<span class="number">10</span>);<span class="comment">//10%显示比例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示/隐藏网格线</span></span><br><span class="line">	sheet1.setDisplayGridlines(<span class="keyword">false</span>);<span class="comment">//隐藏Excel网格线,默认值为true</span></span><br><span class="line">	sheet2.setGridsPrinted(<span class="keyword">true</span>);<span class="comment">//打印时显示网格线,默认值为false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历Sheet</span></span><br><span class="line"> HSSFSheet sheet = workbook.getSheet(<span class="string">"Test0"</span>);<span class="comment">//得到指定名称的Sheet</span></span><br><span class="line">        <span class="keyword">for</span> (Row row : sheet) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : row) &#123;</span><br><span class="line">                System.out.print(cell + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="单元格密码"><a href="#单元格密码" class="headerlink" title="单元格密码"></a>单元格密码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPasswd</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();<span class="comment">// 创建Excel文件(Workbook)</span></span><br><span class="line">    HSSFSheet sheet= workbook.createSheet(<span class="string">"Test0"</span>);<span class="comment">// 创建工作表(Sheet)</span></span><br><span class="line">    HSSFRow row=sheet.createRow(<span class="number">1</span>);</span><br><span class="line">    HSSFCell cell=row.createCell(<span class="number">1</span>);</span><br><span class="line">    cell.setCellValue(<span class="string">"已锁定"</span>);</span><br><span class="line">    HSSFCellStyle locked = workbook.createCellStyle();</span><br><span class="line">    locked.setLocked(<span class="keyword">true</span>);<span class="comment">//设置锁定</span></span><br><span class="line">    cell.setCellStyle(locked);</span><br><span class="line">    cell=row.createCell(<span class="number">2</span>);</span><br><span class="line">    cell.setCellValue(<span class="string">"未锁定"</span>);</span><br><span class="line">    HSSFCellStyle unlocked = workbook.createCellStyle();</span><br><span class="line">    unlocked.setLocked(<span class="keyword">false</span>);<span class="comment">//设置不锁定</span></span><br><span class="line">    cell.setCellStyle(unlocked);</span><br><span class="line">    sheet.protectSheet(<span class="string">"password"</span>);<span class="comment">//设置保护密码</span></span><br><span class="line">    workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/wander/Desktop/poi2.xls"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e89c8af42d00108f7d49d559ba0a30a5-507232" alt="单元格保护效果"></p>
<h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CellRangeAddressList regions = <span class="keyword">new</span> CellRangeAddressList(<span class="number">0</span>, <span class="number">65535</span>,<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">DVConstraint constraint =DVConstraint.createExplicitListConstraint(<span class="keyword">new</span> String[] &#123; <span class="string">"C++"</span>,<span class="string">"Java"</span>, <span class="string">"C#"</span> &#125;);</span><br><span class="line">HSSFDataValidation dataValidate = <span class="keyword">new</span> HSSFDataValidation(regions,constraint);</span><br><span class="line">sheet.addValidationData(dataValidate);</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5ef724590f58ecf36cce0bd4f1e8d040-250458" alt="下拉列表效果"></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        CreationHelper createHelper = workbook.getCreationHelper();</span><br><span class="line"><span class="comment">// 关联到网站</span></span><br><span class="line">        Hyperlink link =createHelper.createHyperlink(Hyperlink.LINK_URL);</span><br><span class="line">        link.setAddress(<span class="string">"https://wanderros.github.io/"</span>);</span><br><span class="line">        sheet.createRow(<span class="number">0</span>).createCell(<span class="number">0</span>).setHyperlink(link);</span><br><span class="line"><span class="comment">// 关联到当前目录的文件</span></span><br><span class="line">        link = createHelper.createHyperlink(Hyperlink.LINK_FILE);</span><br><span class="line">        link.setAddress(<span class="string">"sample.xls"</span>);</span><br><span class="line">        sheet.createRow(<span class="number">3</span>).createCell(<span class="number">1</span>).setHyperlink(link);</span><br><span class="line"><span class="comment">// e-mail 关联</span></span><br><span class="line">        link = createHelper.createHyperlink(Hyperlink.LINK_EMAIL);</span><br><span class="line">        link.setAddress(<span class="string">"mailto:poi@apache.org?subject=Hyperlinks"</span>);</span><br><span class="line">        sheet.createRow(<span class="number">3</span>).createCell(<span class="number">2</span>).setHyperlink(link);</span><br><span class="line"><span class="comment">//关联到工作簿中的位置</span></span><br><span class="line">        link = createHelper.createHyperlink(Hyperlink.LINK_DOCUMENT);</span><br><span class="line">        link.setAddress(<span class="string">"'Test0'!C3"</span>);<span class="comment">//Sheet名为Test0的C3位置</span></span><br><span class="line">        sheet.createRow(<span class="number">3</span>).createCell(<span class="number">3</span>).setHyperlink(link);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用Java开源库生成word、excel真的是很方便！这部分学习花费的时间是非常值得的！后续可以在自己的项目中使用。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot 异步消息</title>
    <url>/2020/05/22/SpringBoot-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>异步消息主要为了系统与系统之间的通信。异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无须关心消息是否发送成功！消息总线(Message Queue)，是一种跨进程、异步的通信机制，用于上下游传递消息。由消息系统来确保消息的可靠传递。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>消息代理（message broker）：当消息发送者发送消息之后，消息将会由消息代理接管，消息代理保证消息传递到指定的目的地（destination）；</li>
<li>异步消息主要有两种形式的目的地：队列（queue）和主题（topic）<ol>
<li>队列用于点对点式（point-to-point）的消息通信</li>
<li>主题用于发布/订阅式（publish/subsrcibe）的消息通信</li>
</ol>
</li>
<li>当消息发送者发送消息，消息代理获得消息后将消息放进一个队列（queue）里，当有消息接收者来接收消息的时候，消息将从队列里取出来传递给接收者，这时候队列里就没有了这条消息；</li>
<li>注意：<strong>点对点式只保证每一条消息只有唯一的发送者和接收者；</strong></li>
<li>发布/订阅式是消息发送者发送消息到主题，而多个消息接收者监听这个主题；</li>
<li>JMS(Java Message Service，Java消息服务)，基于JVM消息代理的规范，ActiveMQ、HornetQ是一个JMS消息代理的实现；</li>
<li>AMQP（Advanced Message Queuing Protocol）也是一个消息代理的规范，不仅兼容JMS，而且还支持跨语言和平台，主要实现有RabbitMQ；</li>
<li>Spring为JMS、AMQP提供了@JmsListener、@RabbitListener注解在方法上监听消息代理发布的消息，需要分别通过@EnableJms、@EnableRabbit开启支持;</li>
</ol>
<h2 id="启动ActiveMQ服务"><a href="#启动ActiveMQ服务" class="headerlink" title="启动ActiveMQ服务"></a>启动ActiveMQ服务</h2><ol>
<li><p>Docker下载镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull webcenter/activemq</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -d -p 61616:61616 -p 8161:8161 webcenter/activemq</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过<a href="http://localhost:8161" target="_blank" rel="noopener">http://localhost:8161</a> 访问服务，账户和密码都是admin</p>
</li>
</ol>
<h2 id="创建SpringBoot异步消息项目"><a href="#创建SpringBoot异步消息项目" class="headerlink" title="创建SpringBoot异步消息项目"></a>创建SpringBoot异步消息项目</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.activemq.broker-url</span>=<span class="string">tcp://localhost:61616</span></span><br><span class="line"><span class="meta">spring.activemq.user</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.activemq.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.jms.pub-sub-domain</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.activemq.pool.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableJms</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsTemplate jmsTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        jmsTemplate.send(<span class="string">"my-destination"</span>,<span class="keyword">new</span> Msg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收消息类"><a href="#接收消息类" class="headerlink" title="接收消息类"></a>接收消息类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"my-destination"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> <span class="keyword">implements</span> <span class="title">MessageCreator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session.createTextMessage(<span class="string">"测试消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/31469ff63dfdc9fa671912c8957b4b01-76910" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/950e215ff18c1819ae87efeabaaf01fc-55933" alt=""></p>
<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>RocketMQ 是阿里巴巴在2012年开源的分布式消息中间件，目前已经捐赠给 Apache 软件基金会，并于2017年9月25日成为 Apache 的顶级项目！</p>
</li>
<li><p>一个典型的消息中间件收发消息的模型如下所示，RocketMQ也是按照这种模型进行的设计；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f9890ccbf0daaf661bb14714d74cbda0-26350" alt="典型消息中间件收发消息的模型"></p>
</li>
<li><p>RocketMQ的特点：</p>
<ul>
<li>一个队列模型的消息中间件，具有高性能、高可靠、高实时、分布式特点</li>
<li>Producer、Consumer、队列都可以分布式</li>
<li>Producer向一些队列轮流发送消息，队列集合称为Topic，Consumer如果做广播消费，则一个Consumer实例消费这个Topic对应的所有队列，如果做集群消费，则多个Consumer实例平均消费这个topic对应的队列集合</li>
<li>支持事务消息，这个特性对于分布式事务来说提供了又一种解决思路</li>
<li>回溯消费，消费者已经消费成功的消息，由于业务上需求需要重新消费，RocketMQ 支持按照时间回溯消费，时间维度精确到毫秒，可以向前回溯，也可以向后回溯</li>
<li>能够保证严格的消息顺序</li>
<li>提供丰富的消息拉取模式</li>
<li>高效的订阅者水平扩展能力</li>
<li>实时的消息订阅机制</li>
<li>亿级消息堆积能力</li>
<li>较少的依赖</li>
</ul>
</li>
<li><p>RocketMQ的物理部署结构如下所示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2f6234928a8897dbd9878e653486d88b-132764" alt="RocketMQ的物理部署结构"></p>
<ul>
<li>Name Server是一个几乎无状态节点，可集群部署，节点之间无任何信息同步</li>
<li>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与Name Server集群中的所有节点建立长连接，定时注册Topic信息到所有Name Server</li>
<li>Producer与Name Server集群中的其中一个节点（随机选择）建立长连接，定期从Name Server取Topic路由信息，并向提供Topic服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署</li>
</ul>
</li>
<li><p><strong>生产者：</strong>负责产生消息，生产者向消息服务器发送由业务应用程序系统生成的消息。RocketMQ 提供了三种方式发送消息：同步、异步和单向；</p>
</li>
<li><p><strong>同步发送：</strong>消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信；</p>
</li>
<li><p><strong>异步发送：</strong>发送方发出数据后，不等接收方发回响应，接着发送下个数据包。一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务；</p>
</li>
<li><p><strong>单向发送：</strong>只负责发送消息而不等待服务器回应且没有回调函数触发。适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集；</p>
</li>
<li><p><strong>消费者：</strong>负责消费消息，消费者从消息服务器拉取信息并将其输入用户应用程序。站在用户应用的角度消费者有两种类型：拉取型消费者、推送型消费者；</p>
</li>
<li><p><strong>拉取型消费者：</strong>主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程；</p>
</li>
<li><p><strong>推送型消费者：</strong>封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现；</p>
</li>
<li><p><strong>消息服务器（Broker）：</strong>消息存储中心，主要作用是接收来自 Producer 的消息并存储， Consumer 从这里取得消息；</p>
</li>
<li><p><strong>名称服务器（NameServer）：</strong>用来保存 Broker 相关元信息并给 Producer 和 Consumer 查找 Broker 信息；</p>
</li>
<li><p><strong>消息（Message）：</strong>要传输的信息。一条消息必须有一个主题（Topic），主题可以看做是信件要邮寄的地址。一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 key 并在 Broker 上查找此消息以便在开发期间查找问题；</p>
</li>
<li><p>通信关系如下所示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7f9d07fec27304367e55f9899f1e9fe2-33277" alt="通信关系"></p>
</li>
<li><p>GitHub网址：<a href="https://github.com/apache/rocketmq" target="_blank" rel="noopener">https://github.com/apache/rocketmq</a></p>
</li>
<li><p>目前在 Spring 框架中集成 RocketMQ 有三种方式：</p>
<ul>
<li>将消息生产者和消费者定义成 bean 对象交由 Spring 容器管理</li>
<li>使用 RocketMQ 社区的外部项目 rocketmq-jms（<a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-jms）然后通过" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-jms）然后通过</a> spring-jms 方式集成使用</li>
<li>应用如果是基于SpringBoot开发的，可以使用 RocketMQ 的外部项目 rocketmq-spring-boot-starter（<a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-spring-boot-starter）比较方便的收发消息" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-spring-boot-starter）比较方便的收发消息</a></li>
</ul>
</li>
</ol>
<h3 id="Docker快速部署RocketMQ"><a href="#Docker快速部署RocketMQ" class="headerlink" title="Docker快速部署RocketMQ"></a>Docker快速部署RocketMQ</h3><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ac7614b8fce87cc9bfc9814b7d6aabb4-23397" alt="Docker和RocketMQ"></p>
<h4 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h4><ol>
<li><p>下载RocketMQ镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rocketmqinc/rocketmq</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载RocketMQ可视化控制台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull pangliang/rocketmq-console-ng</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：这里下载的RocketMQ版本是4.4.0，SpringBoot中的依赖版本要和这个版本一致；</p>
</li>
</ol>
<h4 id="启动名称服务以及消息服务"><a href="#启动名称服务以及消息服务" class="headerlink" title="启动名称服务以及消息服务"></a>启动名称服务以及消息服务</h4><ol>
<li><p>启动名称服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9876:9876 -v &#123;RmHome&#125;/data/namesrv/logs:/root/logs -v &#123;RmHome&#125;/data/namesrv/store:/root/store --name rmqnamesrv -e "MAX_POSSIBLE_HEAP=100000000" rocketmqinc/rocketmq:4.4.0 sh mqnamesrv</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>{RmHome}</strong> 要替换成你的宿主机想保存 MQ 的日志与数据的地方</li>
<li>如果不保存的话，所有数据都默认保存在容器运行时的内存中，重启之后就又回到最初的起点</li>
</ul>
</li>
<li><p>启动消息服务：</p>
<ol>
<li><p>在 {RmHome}/conf 目录下创建 broker.conf 文件</p>
</li>
<li><p>在 broker.conf 中写入如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span> = <span class="string">DefaultCluster</span></span><br><span class="line"><span class="attr">brokerName</span> = <span class="string">broker-a</span></span><br><span class="line"><span class="attr">brokerId</span> = <span class="string">0</span></span><br><span class="line"><span class="attr">deleteWhen</span> = <span class="string">04</span></span><br><span class="line"><span class="attr">fileReservedTime</span> = <span class="string">48</span></span><br><span class="line"><span class="attr">brokerRole</span> = <span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span> = <span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">brokerIP1</span> = <span class="string">&#123;本地外网 IP&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>brokerIP1 要修改成你自己宿主机的 IP</li>
</ul>
</li>
<li><p>启动容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10911:10911 -p 10909:10909 -v  &#123;RmHome&#125;/data/broker/logs:/root/logs -v  &#123;RmHome&#125;/rocketmq/data/broker/store:/root/store -v  &#123;RmHome&#125;/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e "NAMESRV_ADDR=namesrv:9876" -e "MAX_POSSIBLE_HEAP=200000000" rocketmqinc/rocketmq:4.4.0 sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>{RmHome}</strong>要替换成你的宿主机想保存 MQ 的日志与数据的地方</li>
<li>broker.conf 的文件中的 brokerIP1 是 broker 注册到 Namesrv 中的 ip</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="启动RocketMQ控制台"><a href="#启动RocketMQ控制台" class="headerlink" title="启动RocketMQ控制台"></a>启动RocketMQ控制台</h4><ol>
<li><p>启动容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -e "JAVA_OPTS=-Drocketmq.namesrv.addr=&#123;本地外网 IP&#125;:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false" -p 8080:8080 -t pangliang/rocketmq-console-ng</span><br></pre></td></tr></table></figure>

<ul>
<li>{本地外网 IP}为本机IP地址</li>
</ul>
</li>
</ol>
<h3 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h3><ol>
<li><p>创建一个SpringBoot项目，然后添加RocketMQ依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意： 这里的版本,要和部署在服务器上的版本号一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置类JmsConfig(连接RocketMQ服务器配置类)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 安装实际开发这里的信息 都是应该写在配置里，来读取，这里为了方便所以写成常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Name Server 地址，因为是集群部署 所以有多个用 分号 隔开</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_SERVER = <span class="string">"127.12.15.6:9876;127.12.15.6:9877"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题名称 主题一般是服务器设置好 而不能在代码里去新建topic（ 如果没有创建好，生产者往该主题发送消息 会报找不到topic错误）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"topic_family"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者类Producer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String producerGroup = <span class="string">"test_producer"</span>;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//示例生产者</span></span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(producerGroup);</span><br><span class="line">        <span class="comment">//不开启vip通道</span></span><br><span class="line">        producer.setVipChannelEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//绑定name server</span></span><br><span class="line">        producer.setNamesrvAddr(JmsConfig.NAME_SERVER);</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象在使用之前必须要调用一次，只能初始化一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.producer.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultMQProducer <span class="title">getProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.producer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一般在应用上下文，使用上下文监听器，进行关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者类Consumer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONSUMER_GROUP = <span class="string">"test_consumer"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过构造函数 实例化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        consumer = <span class="keyword">new</span> DefaultMQPushConsumer(CONSUMER_GROUP);</span><br><span class="line">        consumer.setNamesrvAddr(JmsConfig.NAME_SERVER);</span><br><span class="line">        <span class="comment">//消费模式:一个新的订阅组第一次启动从队列的最后位置开始消费 后续再启动接着上次消费的进度开始消费</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);</span><br><span class="line">        <span class="comment">//订阅主题和 标签（ * 代表所有标签)下信息</span></span><br><span class="line">        consumer.subscribe(JmsConfig.TOPIC, <span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// //注册消费的监听 并在此监听中消费信息，并返回消费的状态信息</span></span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -&gt; &#123;</span><br><span class="line">            <span class="comment">// msgs中只收集同一个topic，同一个tag，并且key相同的message</span></span><br><span class="line">            <span class="comment">// 会把不同的消息分别放置到不同的队列中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Message msg : msgs) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//消费者获取消息 这里只输出 不做后面逻辑处理</span></span><br><span class="line">                    String body = <span class="keyword">new</span> String(msg.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line">                    log.info(<span class="string">"Consumer-获取消息-主题topic为=&#123;&#125;, 消费消息为=&#123;&#125;"</span>, msg.getTopic(), body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">"消费者 启动成功======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试控制器Controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mesList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Controller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mesList.add(<span class="string">"小小"</span>);</span><br><span class="line">        mesList.add(<span class="string">"爸爸"</span>);</span><br><span class="line">        mesList.add(<span class="string">"妈妈"</span>);</span><br><span class="line">        mesList.add(<span class="string">"爷爷"</span>);</span><br><span class="line">        mesList.add(<span class="string">"奶奶"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/text/rocketmq"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">callback</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//总共发送五次消息</span></span><br><span class="line">        <span class="keyword">for</span> (String s : mesList) &#123;</span><br><span class="line">            <span class="comment">//创建生产信息</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(JmsConfig.TOPIC, <span class="string">"testtag"</span>, (<span class="string">"小小一家人的称谓:"</span> + s).getBytes());</span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            SendResult sendResult = producer.getProducer().send(message);</span><br><span class="line">            log.info(<span class="string">"输出生产者信息=&#123;&#125;"</span>,sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"成功"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试的时候需要注意的是在发送消息时要先创建一个TOPIC，名称是topic_family；</p>
</li>
</ol>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>RabbitMQ 是目前应用相当广泛的消息中间件，在企业级应用、微服务应用中充当着重要的角色。特别是在一些典型的应用场景以及业务模块中具有重要的作用，比如业务服务模块解耦、异步通信、高并发限流、超时业务、数据延迟处理等；</p>
</li>
<li><p>RabbitMQ是一个开源的消息代理和队列服务器，用来在不同的应用之间共享数据(跨平台跨语言)，基于AMQP协议实现；</p>
</li>
<li><p>RabbitMQ的优点：</p>
<ul>
<li>可靠性(Reliablity)，使用了一些机制来保证可靠性，比如持久化、传输确认、发布确认</li>
<li>灵活的路由(Flexible Routing)，在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，Rabbit已经提供了一些内置的Exchange来实现。针对更复杂的路由功能，可以将多个Exchange绑定在一起，也通过插件机制实现自己的Exchange</li>
<li>消息集群(Clustering)，多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker</li>
<li>高可用(Highly Avaliable Queues)，队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用</li>
<li>多种协议(Multi-protocol)，支持多种消息队列协议，如STOMP、MQTT等</li>
<li>多种语言客户端(Many Clients)，几乎支持所有常用语言，比如Java、.NET、Ruby等</li>
<li>管理界面(Management UI)，提供了易用的用户界面，使得用户可以监控和管理消息Broker的许多方面</li>
<li>跟踪机制(Tracing)，如果消息异常，RabbitMQ提供了消息的跟踪机制，使用者可以找出发生了什么</li>
<li>插件机制(Plugin System)，提供了许多插件，来从多方面进行扩展，也可以编辑自己的插件</li>
</ul>
</li>
<li><p>RabbitMQ的整体架构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4de694ab2161fa40bb6d67ad0185d740-136300" alt="整体架构"></p>
</li>
<li><p>RabbitMQ各组件功能：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fba8977266cb8a29d3d42b942b0c4c4e-27124" alt="各组件功能"></p>
<ul>
<li>Broker——标识消息队列服务器实体</li>
<li>Virtual Host——标识一批交换机、消息队列和相关对象，虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是 /</li>
<li>Exchange——用来接收生产者发送的消息并将这些消息路由给服务器中的队列</li>
<li>Queue——用来保存消息直到发送给消费者。是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走</li>
<li>Banding——用于消息队列和交换机之间的关联。一个绑定就是基于路由键将交换机和消息队列连接起来的路由规则</li>
<li>Channel——信道是建立在真实的TCP连接内地虚拟链接，AMQP命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说，建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接</li>
<li>Connection——网络连接，比如一个TCP连接</li>
<li>Publisher——消息的生产者，也是一个向交换器发布消息的客户端应用程序</li>
<li>Consumer——消息的消费者，表示一个从一个消息队列中取得消息的客户端应用程序</li>
<li>Message——消息是不具名的，是由消息头和消息体组成。消息体是不透明的，而消息头则是由一系列的可选属性组成，这些属性包括routing-key(路由键)、priority(优先级)、delivery-mode(消息可能需要持久性存储[消息的路由模式])等</li>
</ul>
</li>
<li><p>一个消息推送到接收的流程如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/77371d3dff941e1fbcfc30866ce0acd7-182833" alt="一个消息推送到接收的流程"></p>
<ul>
<li>黄色的圈圈就是消息推送服务，将消息推送到 中间方框里面也就是 RabbitMQ的服务器，然后经过服务器里面的交换机、队列等各种关系将数据处理入列后，最终右边的蓝色圈圈消费者获取对应监听的消息</li>
</ul>
</li>
<li><p>RabbitMQ提供了一个Web管理页面（http:localhost:15672），可以手动创建虚拟host，创建用户，分配权限，创建交换机，创建队列等，还有查看队列消息，消费效率，推送效率等等功能；</p>
</li>
</ol>
<h3 id="Docker运行RabbitMQ"><a href="#Docker运行RabbitMQ" class="headerlink" title="Docker运行RabbitMQ"></a>Docker运行RabbitMQ</h3><ol>
<li><p>下载RabbitMQ镜像，需要访问web管理页面，就选择tag为management的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq：management</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个RabbitMQ实例，运行如下的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -e RABBITMQ_DEFAULT_VHOST=my_vhost  -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure>

<ul>
<li>15672是管理界面的端口</li>
<li>5672是服务的端口</li>
<li>管理系统的用户名和密码设置为admin admin</li>
<li>vhost设置为my_vhost</li>
</ul>
</li>
</ol>
<h3 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><ol>
<li><p>创建一个SpringBoot项目，添加RabbitMQ依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-provider</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">my_vhost</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置类DirectRabbitConfig：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//队列 起名：TestDirectQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">TestDirectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span></span><br><span class="line">        <span class="comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line">        <span class="comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span></span><br><span class="line">        <span class="comment">//   return new Queue("TestDirectQueue",true,true,false);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//一般设置一下队列的持久化就好,其余两个就是默认false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"TestDirectQueue"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Direct交换机 起名：TestDirectExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">TestDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//  return new DirectExchange("TestDirectExchange",true,true);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"TestDirectExchange"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(<span class="string">"TestDirectRouting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">lonelyDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"lonelyDirectExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写个简单的接口进行消息推送SendMessageController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;  <span class="comment">//使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendDirectMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendDirectMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String messageId = String.valueOf(UUID.randomUUID());</span><br><span class="line">        String messageData = <span class="string">"test message, hello!"</span>;</span><br><span class="line">        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"messageId"</span>,messageId);</span><br><span class="line">        map.put(<span class="string">"messageData"</span>,messageData);</span><br><span class="line">        map.put(<span class="string">"createTime"</span>,createTime);</span><br><span class="line">        <span class="comment">//将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"TestDirectExchange"</span>, <span class="string">"TestDirectRouting"</span>, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><ol>
<li><p>创建一个SpringBoot项目，添加RabbitMQ依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-consumer</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">my_vhost</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置类DirectRabbitConfig：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//队列 起名：TestDirectQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">TestDirectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"TestDirectQueue"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Direct交换机 起名：TestDirectExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">TestDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"TestDirectExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(<span class="string">"TestDirectRouting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费者单纯的使用，其实可以不用添加这个配置，使用注解来让监听器监听对应的队列即可</li>
<li>配置上了的话，其实消费者也是生产者的身份，也能推送该消息</li>
</ul>
</li>
<li><p>创建消息接收监听类DirectReceiver：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"TestDirectQueue"</span>)<span class="comment">//监听的队列名称 TestDirectQueue</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DirectReceiver消费者收到消息  : "</span> + testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行生产者和消费者项目即可进行测试。</p>
</li>
<li><p>推荐博客：<a href="https://blog.csdn.net/qq_35387940/article/details/100514134" target="_blank" rel="noopener">https://blog.csdn.net/qq_35387940/article/details/100514134</a></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>异步消息还是有很多用处的，目前就当了解一下异步消息在SpringBoot中的快速开发，这部分没有RabbitMQ的Demo样例，如果有需要可以考虑在学习下！这部分挺简单的，但是也出现了程序无法运行的情况，主要是配置文件properties这个文件的配置，以后的项目还是多多使用yml文件吧！</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot 整合Redis</title>
    <url>/2020/05/26/SpringBoot-%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，可以用作数据库、缓存和消息中间件，频繁使用MySQL进行数据持久化非常的费时，一般会考虑使用Redis进行缓存。Spring Boot可以非常快速的整合Redis，优化自己的项目！这里主要介绍一下使用DataGrip进行Redis数据库的可视化以及如何配置Mac上的Redis服务器。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>异常快 - Redis非常快</li>
<li>支持丰富的数据类型 - Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等</li>
<li>操作具有原子性 - 所有Redis操作都是原子操作，这确保如果两个客户端并发访问，Redis服务器能接收更新的值</li>
<li>多实用工具 - Redis是一个多实用工具，可用于多种用例，如：缓存，消息队列(Redis本地支持发布/订阅)，应用程序中的任何短期数据</li>
</ul>
<h3 id="Mac上安装及配置"><a href="#Mac上安装及配置" class="headerlink" title="Mac上安装及配置"></a>Mac上安装及配置</h3><ol>
<li><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装好的redis的配置文件在/usr/local/ect目录下，可以修改配置文件redis.conf，添加比如密码（下面是部分原配置文件修改添加密码，默认没有密码）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line">#</span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"># started with the file path as first argument:</span><br><span class="line">#</span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># This should stay commented out for backward compatibility and because most</span><br><span class="line"># people do not need auth (e.g. they run their own servers).</span><br><span class="line">#</span><br><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"># 150k passwords per second against a good box. This means that you should</span><br><span class="line"># use a very strong password otherwise it will be very easy to break.</span><br><span class="line">#</span><br><span class="line"># 设置密码</span><br><span class="line"> requirepass 123456</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="DataGrip配置Redis可视化"><a href="#DataGrip配置Redis可视化" class="headerlink" title="DataGrip配置Redis可视化"></a>DataGrip配置Redis可视化</h3><ol>
<li><p>插件搜索并安装</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fc48ec14475c7210705c9ff7335ca053-381339" alt="安装ledis插件"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2d851cf1c74b115c1197dd435a8506c9-322296" alt="安装redis插件"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b05670b501baa4c2004bf83915be7f3a-385595" alt="重新启动DataGrip"></p>
</li>
<li><p>开启本地redis服务器，然后使用DataGrip的redis插件去连接redis服务器，选择Views-&gt;Tool Windows -&gt;Redis Explorer</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4bfca65f921b2a4e8e338c238adc51bb-256667" alt="redis数据展示"></p>
</li>
</ol>
<h2 id="快速使用Redis-单数据源"><a href="#快速使用Redis-单数据源" class="headerlink" title="快速使用Redis(单数据源)"></a>快速使用Redis(单数据源)</h2><ol>
<li><p>SpringBoot中默认的redis配置是只能对单个redis库进行操作的；</p>
</li>
<li><p>添加redis相关依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中添加redis相关配置（application.properties）:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Redis配置 ###</span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Redis配置类RedisConfig:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis template相关配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 值采用json序列化</span></span><br><span class="line">        template.setValueSerializer(jacksonSeial);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置hash key 和value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(jacksonSeial);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对hash类型的数据操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对redis字符串类型数据操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对链表类型的数据操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对无序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Redis工具类RedisUtil:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String ... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key!=<span class="keyword">null</span>&amp;&amp;key.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length==<span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key==<span class="keyword">null</span>?<span class="keyword">null</span>:redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key,String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object,Object&gt; <span class="title">hmget</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String,Object&gt; map, <span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value,<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key,item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item,-by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key,<span class="keyword">long</span> time,Object...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object ...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key,<span class="keyword">long</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key,<span class="keyword">long</span> count,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询获取key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set <span class="title">keys</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Redis的消息队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAndSend</span><span class="params">(String channel, Object message)</span></span>&#123;</span><br><span class="line">        redisTemplate.convertAndSend(channel,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========BoundListOperations 用法 start============</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据起始结束序号遍历Redis中的list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start  起始序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end  结束序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">rangeList</span><span class="params">(String listKey, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//绑定操作</span></span><br><span class="line">        BoundListOperations&lt;String, Object&gt; boundValueOperations = redisTemplate.boundListOps(listKey);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        <span class="keyword">return</span> boundValueOperations.range(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹出右边的值 --- 并且移除这个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rifhtPop</span><span class="params">(String listKey)</span></span>&#123;</span><br><span class="line">        <span class="comment">//绑定操作</span></span><br><span class="line">        BoundListOperations&lt;String, Object&gt; boundValueOperations = redisTemplate.boundListOps(listKey);</span><br><span class="line">        <span class="keyword">return</span> boundValueOperations.rightPop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========BoundListOperations 用法 End============</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建实体类UserEntity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String guid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> guid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGuid</span><span class="params">(String guid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.guid = guid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器RedisController:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ExpireTime = <span class="number">60</span>;   <span class="comment">// redis中存储的过期时间60s</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"set"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">redisset</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        UserEntity userEntity =<span class="keyword">new</span> UserEntity();</span><br><span class="line">        userEntity.setId(Long.valueOf(<span class="number">1</span>));</span><br><span class="line">        userEntity.setGuid(String.valueOf(<span class="number">1</span>));</span><br><span class="line">        userEntity.setName(<span class="string">"wanderros"</span>);</span><br><span class="line">        userEntity.setAge(String.valueOf(<span class="number">20</span>));</span><br><span class="line">        userEntity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisUtil.set(key,userEntity,ExpireTime);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// return redisUtil.set(key,value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">redisget</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtil.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"expire"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtil.expire(key,ExpireTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译并运行</p>
<ol>
<li><p>访问链接：<a href="http://localhost:8080/redis/set?key=test&amp;value=fuck" target="_blank" rel="noopener">http://localhost:8080/redis/set?key=test&amp;value=fuck</a></p>
</li>
<li><p>查看redis服务器：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/48a17bc9dca335565bd68663d5e89ca4-277962" alt="插入数据成功"></p>
</li>
<li><p>使用postman获取redis数据：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/afbb2543e7f10dbd562ebf16a73a9a7d-37139" alt="postman获取"></p>
</li>
<li><p>设置超时就删除数据：<a href="http://localhost:8080/redis/expire?key=hello" target="_blank" rel="noopener">http://localhost:8080/redis/expire?key=hello</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/950a7c03c6504afe545a71516391b898-35457" alt="超时删除"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/498286337d3b1007f391a35159b54ad7-257765" alt="删除成功"></p>
</li>
</ol>
</li>
</ol>
<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><ol>
<li><p>添加依赖（Maven中的pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器中使用jedis：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/jedistest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jedisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个jedis对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 直接调用jedis对象的方法，方法名称和redis的命令一致</span></span><br><span class="line">        jedis.set(<span class="string">"key1"</span>, <span class="string">"test01"</span>);</span><br><span class="line">        String key1 = jedis.get(<span class="string">"key1"</span>);</span><br><span class="line">        log.info(key1);</span><br><span class="line">        <span class="comment">// 关闭jedis</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> key1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">2020-07-01</span> <span class="string">16:26:24.863 DEBUG 65597 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.wander.testredis.testredis.RedisController#jedisTest()</span></span><br><span class="line"><span class="meta">2020-07-01</span> <span class="string">16:26:24.878  INFO 65597 --- [nio-8080-exec-1] c.w.testredis.testredis.RedisController  : test01</span></span><br><span class="line"><span class="meta">2020-07-01</span> <span class="string">16:26:24.894 DEBUG 65597 --- [nio-8080-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Using 'text/html', given [text/html, application/xhtml+xml, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8] and supported [text/plain, */*, text/plain, */*, application/json, application/*+json, application/json, application/*+json]</span></span><br><span class="line"><span class="meta">2020-07-01</span> <span class="string">16:26:24.894 DEBUG 65597 --- [nio-8080-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Writing ["test01"]</span></span><br><span class="line"><span class="meta">2020-07-01</span> <span class="string">16:26:24.901 DEBUG 65597 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Redis多数据源"><a href="#Redis多数据源" class="headerlink" title="Redis多数据源"></a>Redis多数据源</h2><hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://www.jianshu.com/p/c79b65b253fa" target="_blank" rel="noopener">https://www.jianshu.com/p/c79b65b253fa</a></p>
<p><a href="https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html" target="_blank" rel="noopener">https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html</a></p>
<p><a href="https://blog.csdn.net/weixin_44018338/article/details/99948158" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44018338/article/details/99948158</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1441532" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1441532</a></p>
<p>主数据源<strong>@Primary</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot中的JPA</title>
    <url>/2020/04/19/SpringBoot%E4%B8%AD%E7%9A%84JPA/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>JPA(Java Persistence API)</strong>是Sun公司提出的一种Java持久化规范。使得Java开发人员可以以一种对象/关系映射的方式来管理Java应用中的关系数据。</p>
<ul>
<li>持久化（Persistence）：把数据保存到可以永久存储的设备中。JDBC就是一种持久化机制；文件I/O也是一种持久化机制。</li>
<li>规范：明文规定或者约定俗成的标准。</li>
<li>Hibernate是一个开源的对象关系映射框架，对JDBC进行了非常轻量级的对象封装，将POJO与数据库表建立映射关系，能自动生成SQL语句，自动执行。</li>
<li>ORM（Object Relational Mapping）：用于实现面向对象编程语言里不同系统类型的系统之间的数据转换。</li>
<li>Spring Data：用于简化数据库访问，并支持云服务的开源框架。</li>
</ul>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li><strong>Spring Data JPA的优势：</strong></li>
</ol>
<ul>
<li>可以极大简化JPA的写法；</li>
<li>支持CRUD,分页、排序等常用的功能；</li>
<li>只需要编写一个接口继承一个类就能够实现CRUD操作了。</li>
</ul>
<ol start="2">
<li><strong>Spring Data JPA依赖：</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>创建JPA可以访问的类，我这里是Girl类:</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> wander</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String cupSize;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCupSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cupSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCupSize</span><span class="params">(String cupSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cupSize = cupSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>创建继承于JpaRepository的类：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> wander</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GirlRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Girl</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> List&lt;Girl&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>创建访问类（增删改查）：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">girlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GirlRepository girlRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/girls"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">girlList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> girlRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/girls"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">girlAdd</span><span class="params">(@RequestParam(<span class="string">"cupSize"</span>)</span> String cupSize,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Girl girl=<span class="keyword">new</span> Girl();</span><br><span class="line">        girl.setCupSize(cupSize);</span><br><span class="line">        girl.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Girl&gt; <span class="title">girlSearch</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> girlRepository.findById(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">updateGirl</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id,@<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age,@<span class="title">RequestParam</span><span class="params">(<span class="string">"cupSize"</span>)</span>String cupSize)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Girl girl=<span class="keyword">new</span> Girl();</span><br><span class="line">        girl.setId(id);</span><br><span class="line">        girl.setAge(age);</span><br><span class="line">        girl.setCupSize(cupSize);</span><br><span class="line">        <span class="keyword">return</span> girlRepository.save(girl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/girls/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">deleteGirl</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Girl girl=<span class="keyword">new</span> Girl();</span><br><span class="line">        girl.setId(id);</span><br><span class="line">        girlRepository.delete(girl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/girls/&#123;age&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Girl&gt; <span class="title">findgirlbyage</span><span class="params">(@PathVariable(<span class="string">"age"</span>)</span> Integer age)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> girlRepository.findByAge(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong><em>配置参数：</em></strong></li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">helloworld</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hibernate</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">ddl-auto</span>: <span class="string">validate</span></span><br><span class="line">    <span class="meta">show-sql</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>JPA事务：</strong>使用@Transactional进行事务的绑定。</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从配置的角度可以看到使用Spring Boot的JPA进行数据库的操作非常方便，都没有去写数据库的操作函数，这就是自动化配置带来的魔力，虽然可以快速进行使用，但是还是需要花时间去进行学习。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot 注解说明</title>
    <url>/2020/07/01/SpringBoot-%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringBoot中大量使用注解，通过使用注解来实现零配，虽然简化了配置，但是需要学习注解，下面介绍的是常用的注解，然后进行了分类与区别，平时使用的时候稍稍注意就能深入理解！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Resource-Autowired-Inject"><a href="#Resource-Autowired-Inject" class="headerlink" title="@Resource,@Autowired,@Inject"></a>@Resource,@Autowired,@Inject</h2><ol>
<li><p>功能：都是用来注入bean的注解；</p>
</li>
<li><p>区别：</p>
<table>
<thead>
<tr>
<th>annotation</th>
<th>package</th>
<th>source</th>
<th>作用域</th>
<th>实现方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@AutoWired</td>
<td>org.springframework.bean.factory，Spring自带的方式</td>
<td>Spring 2.5+</td>
<td>可以用在构造器、方法、属性、参数、注解上面</td>
<td>通过AutowireAnnotationBeanPostProcessor类实现依赖注入</td>
<td>注入可以根据名字/类型，可以设置required属性为false指定找不到相应bean时不抛异常</td>
</tr>
<tr>
<td>@Resource</td>
<td>javax.annotation,是JSR-250标准，JDK6以上自带，Spring版本要求2.5以上</td>
<td>Java JSR-250</td>
<td>可以用在方法、属性、类上</td>
<td>通过CommonAnnotationBeanPostProcessor类实现依赖注入</td>
<td>与@AutoWired一致。但可以指定name属性来指定beanName,但如果name对应的bean不存在，则会抛出异常，且没有required属性</td>
</tr>
<tr>
<td>@Inject</td>
<td>javax.inject,是JSR-303标准，Spring版本3以上，需要导入外部依赖</td>
<td>Java JSR-330</td>
<td>可以用在方法、属性、构造器上</td>
<td>通过AutowiredAnnotationBeanPostProcessor类实现依赖注入</td>
<td>与@AutoWired一致，区别在于@Inject没有required属性</td>
</tr>
</tbody></table>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不加@Named注解，则需要配置与变量名一致</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"mongo"</span>)</span><br><span class="line"><span class="keyword">private</span> Mongo mongo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性required，可以配置为false，如果配置为false之后，当没有找到相应bean的时候，系统不会抛错</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般会指定一个name属性</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"testMapper"</span>)</span><br><span class="line"><span class="keyword">private</span> TestMapper testMapper;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Repository-Service-Controller-Component"><a href="#Repository-Service-Controller-Component" class="headerlink" title="@Repository,@Service,@Controller,@Component"></a>@Repository,@Service,@Controller,@Component</h2><ol>
<li><p>在目前的 Spring 版本中，@Repository、@Service 和 @Controller注解和 @Component 是等效的；</p>
</li>
<li><p>命名规则：</p>
<ul>
<li>@Service用于标注业务层组件</li>
<li>@Controller用于标注控制层组件（如struts中的action)</li>
<li>@Repository用于标注数据访问组件，即DAO组件</li>
<li>@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注</li>
</ul>
</li>
<li><p>通过在类上使用 @Service、@Controller、@Repository和@Component注解，Spring会自动创建相应的 BeanDefinition 对象，并注册到 ApplicationContext 中。当一个 Bean 被自动检测到时，会根据那个扫描器的 BeanNameGenerator 策略生成它的 bean名称；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;     </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserUtil</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Value-Import-ImportResource-PropertySource"><a href="#Value-Import-ImportResource-PropertySource" class="headerlink" title="@Value, @Import,@ImportResource,@PropertySource"></a>@Value, @Import,@ImportResource,@PropertySource</h2><ol>
<li><p>通过@Value可以将外部的值动态注入到Bean中,比如application.properties中的属性；</p>
</li>
<li><p>@Import 用于将指定的类实例注入之Spring IOC Container中；</p>
</li>
<li><p>Spring Boot里面没有Spring的配置文件，自己编写的配置文件，也不能自动识别。想让Spring的配置文件生效，加载进来，需要使用@ImportResource标注在一个配置类上；</p>
</li>
<li><p>自定义配置文件时，使用@PropertySource来将配置文件与实体属性映射；</p>
</li>
<li><p>样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"字符串1"</span>)</span><br><span class="line"><span class="keyword">private</span> String testName; <span class="comment">// 注入普通字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String systemPropertiesName; <span class="comment">// 注入操作系统属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> randomNumber; <span class="comment">//注入表达式结果</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;domain.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String domainName; <span class="comment">// 注入application.properties的配置属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="comment">/*把用到的资源导入到当前容器中*/</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Dog<span class="class">.<span class="keyword">class</span>, <span class="title">Cat</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> </span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        System.out.println(context.getBean(Dog<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(context.getBean(Cat<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBoss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">   <span class="comment">// ...setter/getter/toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot之Web文件上传</title>
    <url>/2020/07/14/SpringBoot%E4%B9%8BWeb%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>文件上传一般有两种策略，一种是通过IO流上传，还有一种是通过表单上传。这里主要是记录后台如何处理文件上传问题！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="功能实现步骤"><a href="#功能实现步骤" class="headerlink" title="功能实现步骤"></a>功能实现步骤</h3><ol>
<li>引入依赖</li>
<li>创建文件上传页面</li>
<li>Web配置</li>
<li>编写控制器</li>
</ol>
<h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><ol>
<li><p>引入文件上传依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一个用来解决文件上传，一个简化IO操作</li>
</ul>
</li>
<li><p>创建文件上传页面，偷懒直接静态页面，放置在resources，static目录下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">path</span>=<span class="string">"file_upload"</span>&gt;</span>Select a file to upload<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file_upload"</span> <span class="attr">id</span>=<span class="string">"upload_file"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意enctype=”multipart/form-data”</li>
</ul>
</li>
<li><p>自定义文件上传配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//显示声明CommonsMultipartResolver为mutipartResolver</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"multipartResolver"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CommonsMultipartResolver resolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">        resolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//resolveLazily属性启用是为了推迟文件解析，以在在UploadAction中捕获文件大小异常</span></span><br><span class="line">        resolver.setResolveLazily(<span class="keyword">true</span>);</span><br><span class="line">        resolver.setMaxInMemorySize(<span class="number">50</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//上传文件大小 5M 5*1024*1024</span></span><br><span class="line">        resolver.setMaxUploadSize(<span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>排除自动化配置@SpringBootApplication(exclude = {MultipartAutoConfiguration.class})</li>
</ul>
</li>
<li><p>定义文件上传的控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file_upload"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">        System.out.println(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uploadDir=<span class="string">"/Users/wander/test/files"</span>;</span><br><span class="line">            File dir=<span class="keyword">new</span> File(uploadDir);</span><br><span class="line">            <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">                dir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            String filename=file.getOriginalFilename();</span><br><span class="line">            File serverFile=<span class="keyword">new</span> File(uploadDir+File.separator+filename);</span><br><span class="line">            file.transferTo(serverFile);</span><br><span class="line">           <span class="comment">// FileUtils.writeByteArrayToFile(new File("/Users/wander/test/files"+file.getOriginalFilename()),file.getBytes());</span></span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译并运行项目以及测试，测试效果如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9efeb52cffda35d72225916c38869832-43520" alt="上传文件"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/487ca2cdd07f17d479a0805bab3d8762-98896" alt="上传结果"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot国际化快速入门</title>
    <url>/2020/07/12/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>国际化，国际化英文是 internationalization ，在 i 和 n 之间有 18 个字母，因此也叫 i18n。开发的应用如果做了国际化就可以在不同的语言环境下，方便的进行切换，最常见的就是中文和英文之间的切换，国际化这个功能也是相当的常见！这里主要记录如何快速使用SpringBoot进行支持国际化的应用的开发。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>在 Spring 中，通过 AcceptHeaderLocaleResolver 对国际化提供了支持，开发者通过简单配置，就可以在项目中直接使用国际化功能了，默认是通过请求头的 Accept-Language 字段来判断当前请求所属的环境的，进而给出合适的响应；</li>
<li>在 Spring Boot 中对国际化进一步的简化，使得更方便的进行国际化项目的开发；</li>
<li>项目中的国际化往往需要多方面的支持，例如后端做国际化、前端页面也要做国际化，共同搭配，才能真正实现国际化的功能！</li>
</ol>
<h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><h3 id="创建一个SpringBoot项目"><a href="#创建一个SpringBoot项目" class="headerlink" title="创建一个SpringBoot项目"></a>创建一个SpringBoot项目</h3><ol>
<li><p>在resources目录下创建多个messages.properties文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># messages.properties</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># messages_en_US.properties</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># messages_zh_CN.properties</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># messages_zh_TW.properties</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">測試</span></span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/516a8bbb77860be49aa111ef9278f6d8-79349" alt="注意事项"></p>
</li>
<li><p>项目依赖配置（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> 	  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个RESTful控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(<span class="string">"user.name"</span>, <span class="keyword">null</span>, LocaleContextHolder.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>POSTMAN测试：</p>
<ul>
<li>在接口调用时，通过请求头的 Accept-Language 来配置当前的环境</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e60892c483b8875931fab58de00081b4-47927" alt="测试中文"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b789c2610fad2016b5435d851de241fa-47484" alt="测试英文"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e686583f295d69ba7d49be161d6a1127-48595" alt="测试繁体"></p>
</li>
</ol>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><ol>
<li><p>配置代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        LocaleChangeInterceptor interceptor = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">        interceptor.setParamName(<span class="string">"lang"</span>);</span><br><span class="line">        registry.addInterceptor(interceptor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver localeResolver = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        localeResolver.setDefaultLocale(Locale.SIMPLIFIED_CHINESE);</span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>首先提供了一个 SessionLocaleResolver 实例，这个实例会替换掉默认的 AcceptHeaderLocaleResolver，不同于 AcceptHeaderLocaleResolver 通过请求头来判断当前的环境信息，SessionLocaleResolver 将客户端的 Locale 保存到 HttpSession 对象中，并且可以进行修改（这意味着当前环境信息，前端给浏览器发送一次即可记住，只要 session 有效，浏览器就不必再次告诉服务端当前的环境信息）;</p>
</li>
<li><p>还配置了一个拦截器，这个拦截器会拦截请求中 key 为 lang 的参数（不配置的话是 locale），这个参数则指定了当前的环境信息；</p>
</li>
<li><p>POSTMAN测试：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/034fdad84ab122fc286d2940a60f940e-45659" alt="中文测试"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7158f8a7bef094101c171444b2a48ecc-44547" alt="英文测试"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b7976407767de49c6644d8c5ee729805-44628" alt="繁体测试"></p>
</li>
<li><p>默认情况下，配置文件放在 resources 目录下，如果想自定义，则可以修改application.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/messages</span></span><br><span class="line"><span class="meta">spring.messages.cache-duration</span>=<span class="string">3600</span></span><br><span class="line"><span class="meta">spring.messages.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.messages.fallback-to-system-locale</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>spring.messages.cache-duration 表示 messages 文件的缓存失效时间，如果不配置则缓存一直有效</li>
<li>spring.messages.fallback-to-system-locale 属性在找不到当前系统对应的资源文件时，如果该属性为 true，则会默认查找当前系统对应的资源文件，否则就返回 null，返回 null 之后，最终又会调用到系统默认的 messages.properties 文件</li>
</ul>
</li>
<li><p>语言简称：</p>
<table>
<thead>
<tr>
<th align="left">语言</th>
<th align="left">简称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">简体中文(中国)</td>
<td align="left">zh_CN</td>
</tr>
<tr>
<td align="left">繁体中文(中国台湾)</td>
<td align="left">zh_TW</td>
</tr>
<tr>
<td align="left">繁体中文(中国香港)</td>
<td align="left">zh_HK</td>
</tr>
<tr>
<td align="left">英语(中国香港)</td>
<td align="left">en_HK</td>
</tr>
<tr>
<td align="left">英语(美国)</td>
<td align="left">en_US</td>
</tr>
<tr>
<td align="left">英语(英国)</td>
<td align="left">en_GB</td>
</tr>
<tr>
<td align="left">英语(全球)</td>
<td align="left">en_WW</td>
</tr>
<tr>
<td align="left">英语(加拿大)</td>
<td align="left">en_CA</td>
</tr>
<tr>
<td align="left">英语(澳大利亚)</td>
<td align="left">en_AU</td>
</tr>
<tr>
<td align="left">英语(爱尔兰)</td>
<td align="left">en_IE</td>
</tr>
<tr>
<td align="left">英语(芬兰)</td>
<td align="left">en_FI</td>
</tr>
<tr>
<td align="left">芬兰语(芬兰)</td>
<td align="left">fi_FI</td>
</tr>
<tr>
<td align="left">英语(丹麦)</td>
<td align="left">en_DK</td>
</tr>
<tr>
<td align="left">丹麦语(丹麦)</td>
<td align="left">da_DK</td>
</tr>
<tr>
<td align="left">英语(以色列)</td>
<td align="left">en_IL</td>
</tr>
<tr>
<td align="left">希伯来语(以色列)</td>
<td align="left">he_IL</td>
</tr>
<tr>
<td align="left">英语(南非)</td>
<td align="left">en_ZA</td>
</tr>
<tr>
<td align="left">英语(印度)</td>
<td align="left">en_IN</td>
</tr>
<tr>
<td align="left">英语(挪威)</td>
<td align="left">en_NO</td>
</tr>
<tr>
<td align="left">英语(新加坡)</td>
<td align="left">en_SG</td>
</tr>
<tr>
<td align="left">英语(新西兰)</td>
<td align="left">en_NZ</td>
</tr>
<tr>
<td align="left">英语(印度尼西亚)</td>
<td align="left">en_ID</td>
</tr>
<tr>
<td align="left">英语(菲律宾)</td>
<td align="left">en_PH</td>
</tr>
<tr>
<td align="left">英语(泰国)</td>
<td align="left">en_TH</td>
</tr>
<tr>
<td align="left">英语(马来西亚)</td>
<td align="left">en_MY</td>
</tr>
<tr>
<td align="left">英语(阿拉伯)</td>
<td align="left">en_XA</td>
</tr>
<tr>
<td align="left">韩文(韩国)</td>
<td align="left">ko_KR</td>
</tr>
<tr>
<td align="left">日语(日本)</td>
<td align="left">ja_JP</td>
</tr>
<tr>
<td align="left">荷兰语(荷兰)</td>
<td align="left">nl_NL</td>
</tr>
<tr>
<td align="left">荷兰语(比利时)</td>
<td align="left">nl_BE</td>
</tr>
<tr>
<td align="left">葡萄牙语(葡萄牙)</td>
<td align="left">pt_PT</td>
</tr>
<tr>
<td align="left">葡萄牙语(巴西)</td>
<td align="left">pt_BR</td>
</tr>
<tr>
<td align="left">法语(法国)</td>
<td align="left">fr_FR</td>
</tr>
<tr>
<td align="left">法语(卢森堡)</td>
<td align="left">fr_LU</td>
</tr>
<tr>
<td align="left">法语(瑞士)</td>
<td align="left">fr_CH</td>
</tr>
<tr>
<td align="left">法语(比利时)</td>
<td align="left">fr_BE</td>
</tr>
<tr>
<td align="left">法语(加拿大)</td>
<td align="left">fr_CA</td>
</tr>
<tr>
<td align="left">西班牙语(拉丁美洲)</td>
<td align="left">es_LA</td>
</tr>
<tr>
<td align="left">西班牙语(西班牙)</td>
<td align="left">es_ES</td>
</tr>
<tr>
<td align="left">西班牙语(阿根廷)</td>
<td align="left">es_AR</td>
</tr>
<tr>
<td align="left">西班牙语(美国)</td>
<td align="left">es_US</td>
</tr>
<tr>
<td align="left">西班牙语(墨西哥)</td>
<td align="left">es_MX</td>
</tr>
<tr>
<td align="left">西班牙语(哥伦比亚)</td>
<td align="left">es_CO</td>
</tr>
<tr>
<td align="left">西班牙语(波多黎各)</td>
<td align="left">es_PR</td>
</tr>
<tr>
<td align="left">德语(德国)</td>
<td align="left">de_DE</td>
</tr>
<tr>
<td align="left">德语(奥地利)</td>
<td align="left">de_AT</td>
</tr>
<tr>
<td align="left">德语(瑞士)</td>
<td align="left">de_CH</td>
</tr>
<tr>
<td align="left">俄语(俄罗斯)</td>
<td align="left">ru_RU</td>
</tr>
<tr>
<td align="left">意大利语(意大利)</td>
<td align="left">it_IT</td>
</tr>
<tr>
<td align="left">希腊语(希腊)</td>
<td align="left">el_GR</td>
</tr>
<tr>
<td align="left">挪威语(挪威)</td>
<td align="left">no_NO</td>
</tr>
<tr>
<td align="left">匈牙利语(匈牙利)</td>
<td align="left">hu_HU</td>
</tr>
<tr>
<td align="left">土耳其语(土耳其)</td>
<td align="left">tr_TR</td>
</tr>
<tr>
<td align="left">捷克语(捷克共和国)</td>
<td align="left">cs_CZ</td>
</tr>
<tr>
<td align="left">斯洛文尼亚语</td>
<td align="left">sl_SL</td>
</tr>
<tr>
<td align="left">波兰语(波兰)</td>
<td align="left">pl_PL</td>
</tr>
<tr>
<td align="left">瑞典语(瑞典)</td>
<td align="left">sv_SE</td>
</tr>
<tr>
<td align="left">西班牙语(智利)</td>
<td align="left">es_CL</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot定时任务快速入门</title>
    <url>/2020/07/12/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在后台开发中经常用到定时任务，在SpringBoot中实现定时任务有两种方式：一种是使用 Spring 自带的定时任务处理器 @Scheduled 注解，另一种就是使用第三方框架 Quartz。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h2><ol>
<li><p>使用 @Scheduled 非常容易，直接创建一个 Spring Boot 项目，项目创建成功后，添加 @EnableScheduling 注解，开启定时任务；</p>
</li>
<li><p>然后使用 @Scheduled 注解开启一个定时任务；</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestscheduleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestscheduleApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fixtimedout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello fixed 2000ms！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fixtimedout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"hello fixed 2000ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cron5s</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"cron 5 sec task!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fixedRate 表示任务执行之间的时间间隔，具体是指两次任务的开始时间间隔，即第二次任务开始时，第一次任务可能还没结束；</p>
</li>
<li><p>fixedDelay 表示任务执行之间的时间间隔，具体是指本次任务结束到下次任务开始之间的时间间隔；</p>
</li>
<li><p>initialDelay 表示首次任务启动的延迟时间；</p>
</li>
<li><p>所有时间的单位都是毫秒。</p>
</li>
<li><p>@Scheduled 注解也支持 cron 表达式，使用 cron 表达式，可以非常丰富的描述定时任务的时间。cron 表达式格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[秒] [分] [小时] [日] [月] [周] [年]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Cron规则：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e5fcad3a8029f66b52b397b0516e35ea-36157" alt="cron规则"></p>
</li>
<li><p>通配符含义：</p>
<ul>
<li>? 表示不指定值，即不关心某个字段的取值时使用。需要注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 ?</li>
<li>* 表示所有值，例如:在秒的字段上设置 *,表示每一秒都会触发</li>
<li>, 用来分开多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</li>
<li>- 表示区间，例如在秒上设置 “10-12”,表示 10,11,12秒都会触发</li>
<li>/ 用于递增触发，如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)</li>
<li><code>#</code> 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六，(用在母亲节和父亲节再合适不过了)</li>
<li>周字段的设置，若使用英文字母是不区分大小写的 ，即 MON 与mon相同</li>
<li><code>L</code> 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会自动判断是否是润年), 在周字段上表示星期六，相当于”7”或”SAT”（注意周日算是第一天）。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示”本月最后一个星期五”</li>
<li><code>W</code> 表示离指定日期的最近工作日(周一至周五)，例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发，如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“)</li>
<li><code>L</code> 和 <code>W</code> 可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发(一般指发工资 )</li>
</ul>
</li>
<li><p>执行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5a5a443888904f4806f8b17bc026712a-47105" alt="执行效果"></p>
</li>
</ol>
<h2 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h2><ol>
<li><p>一般在项目中，除非定时任务涉及到的业务实在是太简单，使用 @Scheduled 注解来解决定时任务；</p>
</li>
<li><p>在 Spring Boot 中使用 Quartz ，只需要在创建项目时，添加 Quartz 依赖即可；</p>
</li>
<li><p>Quartz 在使用过程中，有两个关键概念，一个是JobDetail（要做的事情），另一个是触发器（什么时候做）；</p>
</li>
<li><p>需要添加开启定时任务的注解@EnableScheduling；</p>
</li>
<li><p>定义 JobDetail，需要先定义 Job，Job 的定义有两种方式：</p>
<ol>
<li><p>直接定义一个Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"MyJob1&gt;&gt;&gt;"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先将这个 Job 注册到 Spring 容器中</li>
<li>这种定义方式有一个缺陷，就是无法传参</li>
</ul>
</li>
<li><p>继承 QuartzJobBean 并实现默认的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello service &gt;&gt;&gt;"</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob2</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这种方式支持传参，任务启动时，executeInternal 方法将会被执行</li>
</ul>
</li>
<li><p>Job 有了之后，接下来创建类，配置 JobDetail 和 Trigger 触发器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.JobDataMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MethodInvokingJobDetailFactoryBean <span class="title">methodInvokingJobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInvokingJobDetailFactoryBean bean = <span class="keyword">new</span> MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        bean.setTargetBeanName(<span class="string">"myJob1"</span>);</span><br><span class="line">        bean.setTargetMethod(<span class="string">"sayHello"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean bean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        bean.setJobClass(MyJob2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        JobDataMap map = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        map.put(<span class="string">"helloService"</span>, helloService());</span><br><span class="line">        bean.setJobDataMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SimpleTriggerFactoryBean <span class="title">simpleTriggerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleTriggerFactoryBean bean = <span class="keyword">new</span> SimpleTriggerFactoryBean();</span><br><span class="line">        bean.setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">        bean.setRepeatCount(<span class="number">5</span>);</span><br><span class="line">        bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject());</span><br><span class="line">        bean.setRepeatInterval(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CronTriggerFactoryBean <span class="title">cronTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean bean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        bean.setCronExpression(<span class="string">"0/10 * * * * ?"</span>);</span><br><span class="line">        bean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SchedulerFactoryBean bean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        bean.setTriggers(cronTrigger().getObject(), simpleTriggerFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JobDetail 的配置有两种方式：MethodInvokingJobDetailFactoryBean 和 JobDetailFactoryBean</li>
<li>使用 MethodInvokingJobDetailFactoryBean 可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参</li>
<li>使用 JobDetailFactoryBean 可以配置 JobDetail ，任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递</li>
<li>Trigger 是指触发器，Quartz 中定义了多个触发器，这里向大家展示其中两种的用法，SimpleTrigger 和 CronTrigger</li>
<li>SimpleTrigger 有点类似于前面说的 @Scheduled 的基本用法</li>
<li>CronTrigger 则有点类似于 @Scheduled 中 cron 表达式的用法</li>
</ul>
</li>
<li><p>Quartz架构图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eefde60c34d56673f4aa501f4e4928d2-95878" alt="Quartz架构图"></p>
</li>
<li><p>执行效果图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/465108d969a2ccdca04799b41b448f5f-61804" alt="执行效果图"></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot快速整合httpClient</title>
    <url>/2020/07/01/SpringBoot%E5%BF%AB%E9%80%9F%E6%95%B4%E5%90%88httpClient/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HTTP协议过去以及现在都是 Internet 上使用得最多、最重要的协议，越来越多的 Java 应用程序需要直接通过 HTTP 协议来访问网络资源。虽然在 JDK 中已经提供了访问 HTTP 协议的基本功能，但是对于大部分应用程序来说，JDK 库本身提供的功能还不够丰富和灵活！HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>HttpClient是一个HTTP客户端编程工具，是一个HTTP通信库，因此只提供一个通用浏览器应用程序所期望的功能子集，只能以编程的方式通过其API用于传输和接收HTTP消息；</p>
</li>
<li><p>HttpClient已经应用在很多的项目中，比如Apache Jakarta上很著名的另外两个开源项目Cactus和HTMLUnit都使用了HttpClient！</p>
</li>
<li><p><strong>HttpClient的主要功能：</strong></p>
<ul>
<li>实现了所有 HTTP 的方法（GET、POST、PUT、HEAD、DELETE、HEAD、OPTIONS 等）</li>
<li>支持 HTTPS 协议</li>
<li>支持代理服务器（Nginx等）等</li>
<li>支持自动（跳转）转向</li>
</ul>
</li>
<li><p>官方网址：<a href="http://hc.apache.org/" target="_blank" rel="noopener">http://hc.apache.org/</a></p>
</li>
<li><p>官方教程：<a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/" target="_blank" rel="noopener">http://hc.apache.org/httpcomponents-client-ga/tutorial/html/</a></p>
</li>
<li><p>官方样例：<a href="http://hc.apache.org/httpcomponents-client-ga/examples.html" target="_blank" rel="noopener">http://hc.apache.org/httpcomponents-client-ga/examples.html</a></p>
</li>
<li><p>异步httpClient：<a href="http://hc.apache.org/httpcomponents-asyncclient-dev/index.html" target="_blank" rel="noopener">http://hc.apache.org/httpcomponents-asyncclient-dev/index.html</a></p>
</li>
<li><p>使用HttpClient发送请求、接收响应的步骤大致如下：</p>
<ol>
<li>创建HttpClient对象</li>
<li>创建请求方法的实例，并指定请求URL。如果需要发送GET请求，创建HttpGet对象；如果需要发送POST请求，创建HttpPost对象</li>
<li>如果需要发送请求参数，可调用HttpGet、HttpPost共同的setParams(HttpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数</li>
<li>调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse</li>
<li>调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容，程序可通过该对象获取服务器的响应内容</li>
<li><strong>释放连接。无论执行方法是否成功，都必须释放连接</strong></li>
</ol>
</li>
<li><p>如果HttpClient不主动发起close，链接会维持一段时间，而该链接又没有进行复用，在维持的时间内，其他并发一进来，可能就会抛出句柄不够用的异常，一般处理办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient(<span class="keyword">new</span> HttpClientParams(),<span class="keyword">new</span> SimpleHttpConnectionManager(<span class="keyword">true</span>));</span><br><span class="line"><span class="comment">// 每次调用完成都会关闭 HttpClient</span></span><br><span class="line"><span class="comment">// 每次new\close的流程对JVM的内存消耗很大，在一定程度上十分影响性能,可以考虑HttpClient池</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>还有一个开源项目jsoup，它是一个简单的HTML解析器，可以直接解析指定URL请求地址的内容，可以通过DOM方式来取数据，通常会用HttpClient配合Jsoup做网页爬虫；</p>
</li>
<li><p>HttpCore是对HTTP协议的基础封装的一套组件。可以用HttpCore来建立客户端、代理、服务端Http服务；支持同步异步服务；一系列基于阻塞和非阻塞IO模型等；</p>
</li>
<li><p>应用场景（包含但不限于此）：</p>
<ul>
<li>模拟浏览器发送HTTP请求，并接收响应</li>
<li>RPC接口调用</li>
<li>爬取网页源码</li>
<li>批量事务请求</li>
</ul>
</li>
</ol>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><ol>
<li><p>WebSocket 是基于TCP/IP协议，独立于HTTP协议的通信协议。WebSocket 是双向通讯，有状态，客户端一（多）个与服务端一（多）双向实时响应（客户端 ⇄ 服务端）！</p>
</li>
<li><p>工作流程：</p>
<ol>
<li>用户打开Web浏览器，并访问Web站点</li>
<li>Web浏览器（客户端）与Web服务端建立连接</li>
<li>Web浏览器（客户端）能定时收发Web服务端数据，Web服务端也能定时收发Web浏览器数据</li>
</ol>
<ul>
<li>WebSocket协议不受同源策略影响</li>
</ul>
</li>
<li><p>请求消息体：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 请求头部分</span><br><span class="line"># [请求方式] [资源路径] [版本]</span><br><span class="line">GET /xxx HTTP/1.1</span><br><span class="line"># 主机。</span><br><span class="line">Host: server.example.com</span><br><span class="line"># 协议升级。</span><br><span class="line">Upgrade: websocket</span><br><span class="line"># 连接状态。</span><br><span class="line">Connection: Upgrade</span><br><span class="line"># websocket客户端生成的随机字符。</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line"># websocket协议的子协议，自定义字符，可以理解为频道。</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line"># websocket协议的版本是13。</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应消息体：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 响应头部分</span><br><span class="line"># [版本] [状态码]</span><br><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line"># 协议升级。</span><br><span class="line">Upgrade: websocket</span><br><span class="line"># 连接状态。</span><br><span class="line">Connection: Upgrade</span><br><span class="line"># WebSocket服务端根据Sec-WebSocket-Key生成的随机字符。</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span><br><span class="line"># WebSocket协议的子协议，自定义字符，可以理解为频道。</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="基础工程（Maven）"><a href="#基础工程（Maven）" class="headerlink" title="基础工程（Maven）"></a>基础工程（Maven）</h2><ol>
<li><p>创建一个基础的SpingBoot工程，在pom.xml中添加httpClient相关的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTTP请求插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--FastJson转POJO--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jsoup生成dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 如果需要灵活的传输文件，引入此依赖后会更加方便 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试GET请求（无参数）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取http客户端</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">    <span class="comment">// 创建一个http get请求</span></span><br><span class="line">    HttpGet httpGet=<span class="keyword">new</span> HttpGet(<span class="string">"http://t.weather.sojson.com/api/weather/city/101030100"</span>);</span><br><span class="line">    <span class="comment">// 响应模型</span></span><br><span class="line">    CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">        response = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 头部内容</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;response.getAllHeaders().length;++i)</span><br><span class="line">       &#123;</span><br><span class="line">           System.out.println(response.getAllHeaders()[i]);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">        HttpEntity responseEntity = response.getEntity();</span><br><span class="line">        System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">        <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">            System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源 一定要释放</span></span><br><span class="line">            <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">                System.out.println(<span class="string">"释放资源 httpclient！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">                System.out.println(<span class="string">"释放资源 response！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试GET请求（有参数）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testGetParam1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 获取http客户端</span></span><br><span class="line">      CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">      StringBuffer params=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">      params.append(<span class="string">"province=上海"</span>);</span><br><span class="line">      <span class="comment">// 创建Get请求</span></span><br><span class="line">      HttpGet httpGet = <span class="keyword">new</span> HttpGet(<span class="string">"http://test2.zhinengxiyifang.cn:12316/price"</span> + <span class="string">"?"</span> + params);</span><br><span class="line">      <span class="comment">// 响应模型</span></span><br><span class="line">      CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 配置信息</span></span><br><span class="line">          RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                  <span class="comment">// 设置连接超时时间(单位毫秒) --&gt;指的是连接一个url的连接等待时间</span></span><br><span class="line">                  .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// 设置请求超时时间(单位毫秒)  --&gt;指的是连接上一个url，获取response的返回等待时间</span></span><br><span class="line">                  .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// socket读写超时时间(单位毫秒) --&gt;从连接池获取连接的超时时间</span></span><br><span class="line">                  .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                  .setRedirectsEnabled(<span class="keyword">true</span>).build();</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">          httpGet.setConfig(requestConfig);</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">          response = httpClient.execute(httpGet);</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">          HttpEntity responseEntity = response.getEntity();</span><br><span class="line">          System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">          <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">              System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">              System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 释放资源</span></span><br><span class="line">              <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  httpClient.close();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  response.close();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testGetParam2</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 获取http客户端</span></span><br><span class="line">      CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">      <span class="comment">// uri</span></span><br><span class="line">      URI uri=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          List&lt;NameValuePair&gt; params=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">          params.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"province"</span>,<span class="string">"上海"</span>));</span><br><span class="line">          uri=<span class="keyword">new</span> URIBuilder().setScheme(<span class="string">"http"</span>).setHost(<span class="string">"test2.zhinengxiyifang.cn"</span>)</span><br><span class="line">                  .setPort(<span class="number">12316</span>).setPath(<span class="string">"/price"</span>)</span><br><span class="line">                  .setParameters(params).build();</span><br><span class="line">      &#125;<span class="keyword">catch</span> (URISyntaxException e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建Get请求</span></span><br><span class="line">      HttpGet httpGet=<span class="keyword">new</span> HttpGet(uri);</span><br><span class="line">      <span class="comment">// 响应模型</span></span><br><span class="line">      CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 配置信息</span></span><br><span class="line">          RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                  <span class="comment">// 设置连接超时时间(单位毫秒)</span></span><br><span class="line">                  .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// 设置请求超时时间(单位毫秒)</span></span><br><span class="line">                  .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// socket读写超时时间(单位毫秒)</span></span><br><span class="line">                  .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                  <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                  .setRedirectsEnabled(<span class="keyword">true</span>).build();</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">          httpGet.setConfig(requestConfig);</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">          response = httpClient.execute(httpGet);</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">          HttpEntity responseEntity = response.getEntity();</span><br><span class="line">          System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">          <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">              System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">              System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;  <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 释放资源</span></span><br><span class="line">              <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  httpClient.close();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  response.close();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试POST请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">       CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 参数</span></span><br><span class="line">       StringBuffer params = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       <span class="comment">// 字符数据最好encoding以下;这样一来，某些特殊字符才能传过去(如:某人的名字就是“&amp;”,不encoding的话,传不过去)</span></span><br><span class="line">       params.append(<span class="string">"applianceid=12345"</span>);</span><br><span class="line">       params.append(<span class="string">"&amp;"</span>);</span><br><span class="line">       params.append(<span class="string">"peakvalleyswitch=true"</span>);</span><br><span class="line">       params.append(<span class="string">"&amp;"</span>);</span><br><span class="line">       params.append(<span class="string">"userphone=1234"</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 创建Post请求</span></span><br><span class="line">       HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://test2.zhinengxiyifang.cn:12316/update/db/12345?"</span>  + params);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 设置ContentType(注:如果只是传普通参数的话,ContentType不一定非要用application/json)</span></span><br><span class="line">       httpPost.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf8"</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 响应模型</span></span><br><span class="line">       CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">           response = httpClient.execute(httpPost);</span><br><span class="line">           <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">           HttpEntity responseEntity = response.getEntity();</span><br><span class="line">   </span><br><span class="line">           System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">           <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">               System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">               System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 释放资源</span></span><br><span class="line">               <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   httpClient.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   response.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意处理响应字符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主动设置编码，防止响应乱码</span></span><br><span class="line">String responsestr=EntityUtils.toString(responseEntity, StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试上传文件：</p>
<ul>
<li>服务端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProcess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">fileController</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age, @<span class="title">RequestParam</span><span class="params">(<span class="string">"files"</span>)</span>List&lt;MultipartFile&gt; multipartFiles) <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder(<span class="number">64</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">"\n"</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">"name="</span>).append(name);</span><br><span class="line">        stringBuilder.append(<span class="string">"\t age="</span>).append(age);</span><br><span class="line">        String fileName;</span><br><span class="line">        <span class="keyword">for</span>(MultipartFile file:multipartFiles)&#123;</span><br><span class="line">            stringBuilder.append(<span class="string">"\n 文件信息： \n"</span>);</span><br><span class="line">            fileName=file.getOriginalFilename();</span><br><span class="line">            <span class="keyword">if</span>(fileName==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fileName= URLDecoder.decode(fileName,<span class="string">"utf-8"</span>);</span><br><span class="line">            stringBuilder.append(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUploadFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">    HttpPost httpPost = <span class="keyword">new</span> HttpPost(<span class="string">"http://localhost:8080/file"</span>);</span><br><span class="line">    CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();</span><br><span class="line">        <span class="comment">// 第一个文件</span></span><br><span class="line">        String filesKey = <span class="string">"files"</span>;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/docker_zookeeper/myid"</span>);</span><br><span class="line">        multipartEntityBuilder.addBinaryBody(filesKey, file1);</span><br><span class="line">        <span class="comment">// 第二个文件(多个文件的话，使用同一个key就行，后端用数组或集合进行接收即可)</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"/Users/wander/Desktop/docker_zookeeper/zoo.cfg"</span>);</span><br><span class="line">        <span class="comment">// 防止服务端收到的文件名乱码。 我们这里可以先将文件名URLEncode，然后服务端拿到文件名时在URLDecode。就能避免乱码问题。</span></span><br><span class="line">        <span class="comment">// 文件名其实是放在请求头的Content-Disposition里面进行传输的，如其值为form-data; name="files"; filename="头像.jpg"</span></span><br><span class="line">        multipartEntityBuilder.addBinaryBody(filesKey, file2, ContentType.DEFAULT_BINARY, URLEncoder.encode(file2.getName(), <span class="string">"utf-8"</span>));</span><br><span class="line">        <span class="comment">// 其它参数(注:自定义contentType，设置UTF-8是为了防止服务端拿到的参数出现乱码)</span></span><br><span class="line">        ContentType contentType = ContentType.create(<span class="string">"text/plain"</span>, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">        multipartEntityBuilder.addTextBody(<span class="string">"name"</span>, <span class="string">"邓沙利文"</span>, contentType);</span><br><span class="line">        multipartEntityBuilder.addTextBody(<span class="string">"age"</span>, <span class="string">"25"</span>, contentType);</span><br><span class="line">     </span><br><span class="line">        HttpEntity httpEntity = multipartEntityBuilder.build();</span><br><span class="line">        httpPost.setEntity(httpEntity);</span><br><span class="line">     </span><br><span class="line">        response = httpClient.execute(httpPost);</span><br><span class="line">        HttpEntity responseEntity = response.getEntity();</span><br><span class="line">        System.out.println(<span class="string">"HTTPS响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">        <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HTTPS响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">            <span class="comment">// 主动设置编码，来防止响应乱码</span></span><br><span class="line">            String responseStr = EntityUtils.toString(responseEntity, StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(<span class="string">"HTTPS响应内容为:"</span> + responseStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot整合Dubbo&amp;Zookeeper</title>
    <url>/2020/07/03/SpringBoot%E6%95%B4%E5%90%88Dubbo-Zookeeper/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在大规模服务化之前，应用可能只是通过 RMI 或 Hessian 等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过 F5 等硬件进行负载均衡。随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行。SpringBoot可以非常方便地集成Dubbo与Zookeeper进行分布式服务！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="架构分类"><a href="#架构分类" class="headerlink" title="架构分类"></a>架构分类</h3><ol>
<li><strong>单一应用架构</strong>：当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键</li>
<li><strong>垂直应用架构</strong>：当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC等)是关键</li>
<li><strong>分布式服务架构</strong>：当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键</li>
<li><strong>流动计算架构</strong>：当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/23791576e8f92918933e5ec1909d4538-33931" alt="架构的发展路线"></p>
<h3 id="分布式服务需求"><a href="#分布式服务需求" class="headerlink" title="分布式服务需求"></a>分布式服务需求</h3><ol>
<li>架构是根据需求不断迭代升级的，分布式服务架构的演进也是需求促进的！</li>
<li>当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大；</li>
<li>当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系；</li>
<li>服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</li>
<li>解决问题：<ol>
<li>要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标</li>
<li>要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阈值，记录此时的访问量</li>
<li>再以此访问量乘以机器数反推总容量</li>
</ol>
</li>
</ol>
<h3 id="Dubbo信息"><a href="#Dubbo信息" class="headerlink" title="Dubbo信息"></a>Dubbo信息</h3><ol>
<li>官网：<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></li>
<li>Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC（一种远程调用） 分布式服务框架（SOA），致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案！</li>
<li>Dubbo和SpringCloud的区别：<ul>
<li>通信方式不同：Dubbo 使用的是 RPC 通信，而Spring Cloud 使用的是HTTP RESTFul 方式</li>
<li>组成不一样：dubbo的服务注册中心为Zookeerper，服务监控中心为dubbo-monitor,无消息总线，服务跟踪、批量任务等组件；spring-cloud的服务注册中心为spring-cloud netflix  enruka，服务监控中心为spring-boot admin,有消息总线，数据流、服务跟踪、批量任务等组件</li>
</ul>
</li>
<li>dubbo都支持的协议：<ul>
<li>dubbo</li>
<li>http</li>
<li>rest</li>
<li>redis</li>
<li>memcached</li>
</ul>
</li>
<li>Dubbo负载均衡策略:<ul>
<li>random loadbalance：按权重设置随机概率（默认）</li>
<li>roundrobin loadbalance：轮寻，按照公约后权重设置轮训比例</li>
<li>lastactive loadbalance：最少活跃调用数，若相同则随机</li>
<li>consistenthash loadbalance：一致性hash，相同参数的请求总是发送到同一提供者</li>
</ul>
</li>
<li>RPC（Remote Procedure Call，远程过程调用）是一种进程间通信方式，一种技术思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同；</li>
</ol>
<h2 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h2><h3 id="Dubbo说明"><a href="#Dubbo说明" class="headerlink" title="Dubbo说明"></a>Dubbo说明</h3><ol>
<li><p>节点角色说明：</p>
<ul>
<li>Provider——暴露服务的服务提供方</li>
<li>Consumer——调用远程服务的服务消费方</li>
<li>Registry——服务注册与发现的注册中心</li>
<li>Monitor——统计服务的调用次数和调用时间的监控中心</li>
<li>Container——服务运行容器</li>
</ul>
</li>
<li><p>Dubbo架构图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f07431ff8daafff6906882197d395a2a-18810" alt="Dubbo架构图"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/834268c031cf5cbbfafa1a7fe0377e81-67000" alt="服务治理"></p>
</li>
<li><p>服务启动流程：</p>
<ol>
<li>服务容器负责启动，加载，运行服务提供者</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li>
</ol>
</li>
</ol>
<h3 id="Dubbo特点"><a href="#Dubbo特点" class="headerlink" title="Dubbo特点"></a>Dubbo特点</h3><ol>
<li>连通性：<ul>
<li>注册中心负责服务地址的注册与查找，相当于<strong>目录服务</strong>，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li>
<li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li>
<li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li>
<li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li>
<li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li>
<li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li>
<li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li>
<li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li>
</ul>
</li>
<li>健壮性：<ul>
<li>监控中心宕掉不影响使用，只是丢失部分采样数据</li>
<li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li>
<li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li>
<li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li>
<li>服务提供者无状态，任意一台宕掉后，不影响使用</li>
<li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li>
</ul>
</li>
<li>伸缩性：<ul>
<li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li>
<li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li>
</ul>
</li>
<li>升级性：<ul>
<li>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力</li>
</ul>
</li>
<li>未来的架构（可能）：<ul>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fba33dd6b7e20c35b1a04fb368f33224-55605" alt="未来可能架构"></li>
<li>Deployer——自动部署服务的本地代理</li>
<li>Repository——仓库用于存储服务应用发布包</li>
<li>Scheduler——调度中心基于访问压力自动增减服务提供者</li>
<li>Admin——统一管理控制台</li>
<li>Registry——服务注册与发现的注册中心</li>
<li>Monitor——统计服务的调用次数和调用时间的监控中心</li>
</ul>
</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建接口项目"><a href="#创建接口项目" class="headerlink" title="创建接口项目"></a>创建接口项目</h2><ol>
<li><p>目的：用于存放消费者与提供者调用的接口；</p>
</li>
<li><p>直接创建一个测试的service的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CostService</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">add</span><span class="params">(<span class="keyword">int</span> cost)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>xml中主要内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo.api<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以打包生成jar或者在自己的项目里作为module添加。</p>
</li>
</ol>
<h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><ol>
<li><p>创建一个Spring项目，添加Dubbo等的依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- API自建包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo.api<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@EnableDubbo注解开启Dubbo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件中配置Dubbo（application.properties）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">dubbo.application.name=dubbo-provider</span><br><span class="line">dubbo.registry.address=127.0.0.1:2181</span><br><span class="line">dubbo.registry.protocol=zookeeper</span><br><span class="line">dubbo.registry.check=false</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=30003</span><br><span class="line">dubbo.monitor.protocol=register</span><br><span class="line">dubbo.consumer.check=false</span><br><span class="line">dubbo.consumer.timeout=3000</span><br><span class="line">dubbo.scan.base-packages=com.dubbo.provider</span><br><span class="line">server.port=8061</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostServiceImpl</span> <span class="keyword">implements</span> <span class="title">CostService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer totalCost=<span class="number">1200</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalCost+cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><ol>
<li><p>创建一个Spring项目,添加Dubbo等的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- API自建包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo.api<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入dubbo环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@EnableDubbo注解开启Dubbo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件中配置Dubbo（application.properties）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">dubbo.application.name=dubbo-consumer</span><br><span class="line">dubbo.registry.address=127.0.0.1:2181</span><br><span class="line">dubbo.registry.protocol=zookeeper</span><br><span class="line">dubbo.registry.check=false</span><br><span class="line">dubbo.monitor.protocol=register</span><br><span class="line">dubbo.consumer.check=false</span><br><span class="line">dubbo.consumer.timeout=3000</span><br><span class="line">server.port=8062</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">getCost</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>远端服务实例化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">   <span class="keyword">private</span> CostService costService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCost</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> costService.add(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCost</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"该产品共消费： "</span>+productService.getCost(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Docker注册中心"><a href="#Docker注册中心" class="headerlink" title="Docker注册中心"></a>Docker注册中心</h2><ol>
<li><p>下载官方镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例化zookeeper：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d  -p 2181:2181 -p 2888:2888 -p 3888:3888 --name zook1 zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dubbo管理中心docker下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull webuilder/dubboadmin</span><br></pre></td></tr></table></figure>
</li>
<li><p>dubboadmin docker官方网址：<a href="https://hub.docker.com/r/webuilder/dubboadmin/" target="_blank" rel="noopener">https://hub.docker.com/r/webuilder/dubboadmin/</a></p>
</li>
<li><p>实例化dubboadmin：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 8080:8080 --add-host zookeeper-server:172.17.0.2 --link zook1:zook1 webuilder/dubboadmin</span><br></pre></td></tr></table></figure>
</li>
<li><p>zookeeper以及dubboadmin都运行成功的话就可以访问管理界面了，网址：<a href="http://127.0.0.1:8080/，账户：root，密码：root" target="_blank" rel="noopener">http://127.0.0.1:8080/，账户：root，密码：root</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8b62f93bd267cca0ef99e87f636bb414-199091" alt="管理界面"></p>
</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><p>运行消费者服务，可以看管理界面的变化；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8cb38b8520f3de6a83c0124e1407f8ad-220283" alt="消费者启动"></p>
</li>
<li><p>运行生产者，再次查看管理界面的变化；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8e34a4145daca064c3c7818c2b3cc33f-179424" alt="生产者启动"></p>
</li>
<li><p>访问消费者的网址：<a href="http://localhost:8062/add?a=1012" target="_blank" rel="noopener">http://localhost:8062/add?a=1012</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/79ab03639c981f0a45ef65309ccbf86f-32682" alt="访问消费者"></p>
</li>
<li><p>查看zookeeper状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it zook1 /bin/bash</span><br><span class="line">bin/.zkCli.sh</span><br><span class="line">ls /</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a86729b0053a9bc84c837b7b268a7e5a-460406" alt="zookeeper状态"></p>
</li>
<li><p>停止docker的zookeeper容器，虽然连接不上注册中心了，但是服务还是能运行！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/45e33e22ce8cdaff7e7a6465f0d1678a-59903" alt="停止docker容器"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot管理工具Maven基础学习</title>
    <url>/2020/07/08/SpringBoot%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Maven%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Maven是一个项目管理工具，它包含了一个项目对象模型（POM），一组标准集合，一个项目生命周期，一个依赖管理系统和用来运行定义在生命周期阶段中插件目标的逻辑。SpringBoot可以使用Maven或者Gradle来管理项目，在最初接触SpringBoot的时候使用的就是Maven管理工具，这里学习一下Maven管理工具相关内容。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Maven解决的问题"><a href="#Maven解决的问题" class="headerlink" title="Maven解决的问题"></a>Maven解决的问题</h2><ol>
<li>在项目中经常需要引入各种jar包，尤其是比较大的工程，引用的jar包往往有几十乃至上百个，每用到一种jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar包冲突，版本冲突等；</li>
<li>java代码文件的编译，如果手动一个个编译，简直要抓狂了；</li>
<li>开发人员需要写一些单元测试，然后一个个地运行来检测代码质量；</li>
<li>开发人员需要把代码和各种配置文件、资源整合到一起，定型打包；</li>
<li>Maven能帮助我们构建工程，管理jar包，编译代码，还能帮我们自动运行单元测试，打包，生成报表，甚至能帮我们部署项目，生成web站点！</li>
</ol>
<h2 id="Maven经典应用"><a href="#Maven经典应用" class="headerlink" title="Maven经典应用"></a>Maven经典应用</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ol>
<li><p>当我们设计到多模块的项目（包含成千上百个模块或者子项目），管理依赖就会变成一项困难的任务。Maven展示了它对处理这种情形的高度控制；</p>
</li>
<li><p>Maven工程中不直接将jar包导入到工程中，而是通过在pom.xml文件中添加所需要的jar包的坐标，避免了jar包的直接引入，在需要用到jar包的时候，只要查找pom.xml文件 ,再根据pom.xml文件中的坐标，到一个专门用于“存放jar包的仓库（Maven仓库）”中根据坐标从而找到所需要的jar包，再拿这些jar包运行即可！</p>
</li>
<li><p>依赖管理：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/51e490aab31b3a99a16755c6934269bf-32114" alt="依赖管理"></p>
</li>
</ol>
<h3 id="一键构建项目"><a href="#一键构建项目" class="headerlink" title="一键构建项目"></a>一键构建项目</h3><ol>
<li><p>项目开发过程中总是进行着编译、测试、运行、打包、安装、部署等一系列过程；</p>
</li>
<li><p>构建指的是项目从编译、测试、运行、打包、安装、部署整个过程都交给Maven进行管理；</p>
</li>
<li><p>一键构建指的是整个构建过程，使用Maven一个命令就可以轻松完成整个工作；</p>
</li>
<li><p>Maven构建流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/77d9d75fc6ff713d027f802daa9d969c-25646" alt="Maven构建流程"></p>
</li>
</ol>
<h2 id="Maven的其他信息"><a href="#Maven的其他信息" class="headerlink" title="Maven的其他信息"></a>Maven的其他信息</h2><ol>
<li><p>Maven的目录结构如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0891ba575cfd0744f88b358476f232f3-40089" alt="Maven目录结构"></p>
</li>
<li><p>本地的项目都会通过Maven软件从远程仓库（可以理解为互联网上的仓库）下载jar包并存放到本地仓库（本地仓库其实就是本地的一个文件夹而已）。当第二次需要jar包的时候就不需要再从远程仓库下载了，因为本地仓库已经存在了（可以将本地仓库理解为缓存）；</p>
</li>
<li><p>仓库分类：</p>
<ul>
<li>远程仓库：如果本地需要插件或者jar包，在本地仓库没有找到，默认会去远程仓库下载。远程仓库可以在互联网内也可以在局域网内</li>
<li>中央仓库：在maven软件中内置了一个远程仓库地址，它是中央仓库，服务于整个互联网，它是由Maven团队自己维护，里面存储了非常全的jar包，包含了世界上大部分流行的开源项目组件</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6339375732ed0c74775d2c01db61110d-46648" alt="仓库分类"></p>
</li>
<li><p>Maven工程目录结构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9b5eb1e3908db5bb02287e2e7fdcc3ed-43420" alt="Maven工程目录结构"></p>
</li>
<li><p>Maven项目文件目录说明:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/58d51e7c96c1acf783ae034f24b525b5-51861" alt="Maven项目文件目录说明"></p>
</li>
<li><p>Maven包含了一个项目对象模型（Project Object Model），一组标准集合，一个项目生命周期（Project Lifecycle），一个依赖管理系统（Dependency Management System），和用来运行定义在生命周期阶段中插件目标的逻辑</p>
<ul>
<li>项目对象模型：一个Maven工程都有一个pom.xml，通过pom.xml文件定义项目的坐标、项目依赖、项目信息、插件目标等</li>
<li>依赖管理系统：通过Maven的依赖管理对项目所依赖的jar包进行统一管理</li>
<li>一个项目生命周期：使用Maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，Maven将这些过程规范为一个生命周期</li>
<li>一组标准集合：Maven将整个项目管理过程定义为一组标准。比如：通过Maven构建工程有标准的目录结构，有标准的生命周期阶段，有标准的依赖管理坐标定义等</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5604719533e44ae67ad5877478d27528-285772" alt="Maven概念模型"></p>
</li>
<li><p>jar包的坐标在pom.xml文件上属于靠上的位置，这个jar包就是先声明的。先声明的jar包坐标下的依赖包，可以优先进入项目中；</p>
</li>
<li><p>项目中直接导入的jar包就是该项目的直接依赖包，项目中没有直接导入的jar包，可以通过项目的直接依赖jar包传递到项目中；</p>
</li>
<li><p>pom.xml中可以使用exclusions标签来排除依赖；</p>
</li>
<li><p>使用&lt;properties&gt;标签、&lt;dependencyManagement&gt;、&lt;depencencies&gt;、EL表达式来进行版本锁定；</p>
</li>
<li><p>Spring模块划分的好处：</p>
<ul>
<li>功能划分清晰，模块化开发</li>
<li>使用者不需要将整个Spring完全导入到本项目中，需要哪个模块就导入哪个模块</li>
</ul>
</li>
<li><p>修改SpringBoot配置，使得打包过程跳过测试步骤，修改pom.xml文件，在 <strong>properties</strong> 节点中增加 <strong>skipTests</strong> 设置即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Maven管理项目还是挺简单的，可以在管理仓库中搜索依赖，搜索网址为：<a href="https://search.maven.org/，上述介绍的知识还是比较基础的，需要了解一下，能更好的帮助我们管理自己的工程" target="_blank" rel="noopener">https://search.maven.org/，上述介绍的知识还是比较基础的，需要了解一下，能更好的帮助我们管理自己的工程</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot管理Docker快速入门</title>
    <url>/2020/08/26/SpringBoot%E7%AE%A1%E7%90%86Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker提供了Remote API，可以通过REST接口进行Docker服务的控制，包括pull/push等所有操作，结果与本机的操作完全一样。使用Docker Remote API可以通过脚本进行Docker集群的自动化控制。在SpringBoot项目中可以通过引入Docker-Java相关的依赖然后就可以进行Docker的管理，本文主要记录如何在Mac上开启Docker Remote API以及使用Docker-Java进行Docker的管理。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ol>
<li><p>连接服务器、获取信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接docker服务器</span></span><br><span class="line">DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">  .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务器信息</span></span><br><span class="line">Info info = dockerClient.infoCmd().exec();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取服务器上所有的镜像：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取服务器上的镜像</span></span><br><span class="line">List&lt;Image&gt; images = dockerClient.listImagesCmd().exec();</span><br><span class="line"><span class="keyword">for</span>(Image image : images) &#123;</span><br><span class="line">    System.out.println(image.getRepoTags()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断服务器上是否存在某个镜像：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 筛选服务器上的镜像</span></span><br><span class="line">List&lt;Image&gt; images = dockerClient.listImagesCmd().withImageNameFilter(<span class="string">"busybox"</span>).exec();</span><br><span class="line"><span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"不存在 busybox 镜像。"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"存在 busybox 镜像。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索镜像：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搜索镜像</span></span><br><span class="line">List&lt;SearchItem&gt; dockerSearch = dockerClient.searchImagesCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line"><span class="keyword">for</span>(SearchItem item : dockerSearch) &#123;</span><br><span class="line">    System.out.println(item.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载镜像：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dockerClient.pullImageCmd(<span class="string">"busybox:latest"</span>).exec(<span class="keyword">new</span> ResultCallback&lt;PullResponseItem&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Closeable closeable)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始下载!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(PullResponseItem object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实时显示出下载信息</span></span><br><span class="line">        System.out.println(object.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下载完毕!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除镜像</span></span><br><span class="line">dockerClient.removeImageCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">System.out.println(<span class="string">"删除完毕"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建、运行容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"httpd:latest"</span>)</span><br><span class="line">        .withName(<span class="string">"hangge_http_server"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">        .withPortBindings(PortBinding.parse(<span class="string">"8080:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">        .withBinds(Bind.parse(<span class="string">"/home/user/htdocs:/usr/local/apache2/htdocs"</span>)) <span class="comment">//目录挂载</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">dockerClient.startContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建命令</span></span><br><span class="line">ExecCreateCmdResponse execCreateCmdResponse = dockerClient.execCreateCmd(container1.getId())</span><br><span class="line">        .withAttachStdout(<span class="keyword">true</span>)</span><br><span class="line">        .withAttachStderr(<span class="keyword">true</span>)</span><br><span class="line">        .withCmd(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>) <span class="comment">//当前目录下列出所有文件</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(</span><br><span class="line">        <span class="keyword">new</span> ExecStartResultCallback(System.out, System.err));</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取服务器上所有运行的容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有运行的容器</span></span><br><span class="line">List&lt;Container&gt; containers = dockerClient.listContainersCmd().exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取服务器上所有运行结束的容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有运行的容器</span></span><br><span class="line">List&lt;Container&gt; containers = dockerClient.listContainersCmd().withStatusFilter(<span class="string">"exited"</span>).exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定名字的容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取指定名字的容器</span></span><br><span class="line">ListContainersCmd listContainersCmd = dockerClient.listContainersCmd();</span><br><span class="line">listContainersCmd.getFilters().put(<span class="string">"name"</span>, Arrays.asList(<span class="string">"jenkins"</span>));</span><br><span class="line">List&lt;Container&gt; containers = listContainersCmd.exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止、重启、暂停/恢复、删除容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 停止容器</span></span><br><span class="line">dockerClient.stopContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 重启容器</span></span><br><span class="line">dockerClient.restartContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 暂停容器</span></span><br><span class="line">dockerClient.pauseContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 恢复容器</span></span><br><span class="line">dockerClient.unpauseContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 删除容器</span></span><br><span class="line">dockerClient.removeContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为 java-docker-mssql 的自定义网络：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CreateNetworkResponse networkResponse = dockerClient.createNetworkCmd()</span><br><span class="line">        .withName(<span class="string">"java-docker-mssql"</span>)</span><br><span class="line">        .withDriver(<span class="string">"bridge"</span>).exec();</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行容器的时候使用 java-docker-mssql 这个自定义网络：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"busybox"</span>)</span><br><span class="line">        .withNetworkMode(<span class="string">"java-docker-mssql"</span>) <span class="comment">//设置网络</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">dockerClient.startContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Mac开启Docker-Remote-API"><a href="#Mac开启Docker-Remote-API" class="headerlink" title="Mac开启Docker Remote API"></a>Mac开启Docker Remote API</h2><h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><ol>
<li><p>安装socat：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install socat</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动socat：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -d TCP-LISTEN:2375,range=127.0.0.1/32,reuseaddr,fork UNIX:/var/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放全部端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socat -d TCP-LISTEN:2375,reuseaddr,fork UNIX:/var/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:2375/version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">&#123;"Platform":&#123;"Name":"Docker Engine - Community"&#125;,"Components":[&#123;"Name":"Engine","Version":"19.03.12","Details":&#123;"ApiVersion":"1.40","Arch":"amd64","BuildTime":"2020-06-22T15:49:27.000000000+00:00","Experimental":"false","GitCommit":"48a66213fe","GoVersion":"go1.13.10","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"&#125;&#125;,&#123;"Name":"containerd","Version":"v1.2.13","Details":&#123;"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"&#125;&#125;,&#123;"Name":"runc","Version":"1.0.0-rc10","Details":&#123;"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"&#125;&#125;,&#123;"Name":"docker-init","Version":"0.18.0","Details":&#123;"GitCommit":"fec3683"&#125;&#125;],"Version":"19.03.12","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"48a66213fe","GoVersion":"go1.13.10","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","BuildTime":"2020-06-22T15:49:27.000000000+00:00"&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ol>
<li><p>下载镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull bobrik/socat</span><br><span class="line">docker pull shipyard/docker-proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建镜像bobrik/socat实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 2375:2375 \</span><br><span class="line"> bobrik/socat TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建镜像shipyard/docker-proxy实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 2375:2375 -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"> -d -e PORT=2375 shipyard/docker-proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：上述两个镜像只要启动其中的一个即可，功能都是一样的！</p>
</li>
<li><p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:2375/version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">&#123;"Platform":&#123;"Name":"Docker Engine - Community"&#125;,"Components":[&#123;"Name":"Engine","Version":"19.03.12","Details":&#123;"ApiVersion":"1.40","Arch":"amd64","BuildTime":"2020-06-22T15:49:27.000000000+00:00","Experimental":"false","GitCommit":"48a66213fe","GoVersion":"go1.13.10","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"&#125;&#125;,&#123;"Name":"containerd","Version":"v1.2.13","Details":&#123;"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"&#125;&#125;,&#123;"Name":"runc","Version":"1.0.0-rc10","Details":&#123;"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"&#125;&#125;,&#123;"Name":"docker-init","Version":"0.18.0","Details":&#123;"GitCommit":"fec3683"&#125;&#125;],"Version":"19.03.12","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"48a66213fe","GoVersion":"go1.13.10","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","BuildTime":"2020-06-22T15:49:27.000000000+00:00"&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><ol>
<li><p>docker-java 是 Docker的 Java 版本 API；</p>
</li>
<li><p>创建一个SpringBoot项目，添加Docker开发相关的依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--docker client begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.docker-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.ws.rs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.ws.rs-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-hk2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--docker client end--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接docker服务器</span></span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取服务器信息</span></span><br><span class="line">        Info info = dockerClient.infoCmd().exec();</span><br><span class="line"></span><br><span class="line">        System.out.println(info.toString());</span><br><span class="line">        <span class="keyword">return</span> info.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/images"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">images</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;Image&gt; images = dockerClient.listImagesCmd().exec();</span><br><span class="line">        <span class="keyword">for</span>(Image image : images) &#123;</span><br><span class="line">            System.out.println(image.getRepoTags()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/exist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagesexist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;Image&gt; images = dockerClient.listImagesCmd().withImageNameFilter(<span class="string">"jenkins"</span>).exec();</span><br><span class="line">        <span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不存在 jenkins 镜像。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"存在 jenkins 镜像。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/search"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagesearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;SearchItem&gt; dockerSearch = dockerClient.searchImagesCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">        <span class="keyword">for</span>(SearchItem item : dockerSearch) &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageload</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        dockerClient.pullImageCmd(<span class="string">"busybox:latest"</span>).exec(<span class="keyword">new</span> ResultCallback&lt;PullResponseItem&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Closeable closeable)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(PullResponseItem object)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 实时显示出下载信息</span></span><br><span class="line">                System.out.println(object.getStatus());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"下载完毕!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagedelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        <span class="comment">// 删除镜像</span></span><br><span class="line">        dockerClient.removeImageCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">        System.out.println(<span class="string">"删除完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/run"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagerun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">        CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"nginx:latest"</span>)</span><br><span class="line">                .withName(<span class="string">"nginx"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">                .withPortBindings(PortBinding.parse(<span class="string">"8081:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">              <span class="comment">//  .withBinds(Bind.parse("/home/user/htdocs:/usr/local/apache")) //目录挂载</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">        dockerClient.startContainerCmd(container1.getId()).exec();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/exec"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageexec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"nginx:latest"</span>)</span><br><span class="line">                .withName(<span class="string">"nginx"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">                .withPortBindings(PortBinding.parse(<span class="string">"8081:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">                <span class="comment">//  .withBinds(Bind.parse("/home/user/htdocs:/usr/local/apache")) //目录挂载</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">        dockerClient.startContainerCmd(container1.getId()).exec();</span><br><span class="line"><span class="comment">// 创建命令</span></span><br><span class="line">        ExecCreateCmdResponse execCreateCmdResponse = dockerClient.execCreateCmd(container1.getId())</span><br><span class="line">                .withAttachStdout(<span class="keyword">true</span>)</span><br><span class="line">                .withAttachStderr(<span class="keyword">true</span>)</span><br><span class="line">                .withCmd(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>) <span class="comment">//当前目录下列出所有文件</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">        dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(</span><br><span class="line">                <span class="keyword">new</span> ExecStartResultCallback(System.out, System.err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有运行的容器</span></span><br><span class="line">        List&lt;Container&gt; containers = dockerClient.listContainersCmd().withStatusFilter(<span class="string">"exited"</span>).exec();</span><br><span class="line">        <span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">            System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/some"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerlistsome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        ListContainersCmd listContainersCmd = dockerClient.listContainersCmd();</span><br><span class="line">        listContainersCmd.getFilters().put(<span class="string">"name"</span>, Arrays.asList(<span class="string">"nginx"</span>));</span><br><span class="line">        List&lt;Container&gt; containers = listContainersCmd.exec();</span><br><span class="line">        <span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">            System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 停止容器</span></span><br><span class="line">            dockerClient.stopContainerCmd(container.getId()).exec();</span><br><span class="line">            dockerClient.removeContainerCmd(container.getId()).exec();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目即可测试！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot远程访问http服务方法汇总</title>
    <url>/2020/08/07/SpringBoot%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEhttp%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>进行微服务开发时，可以使用@Controller以及@RestController注解来对外提供服务，但是也避免不了要使用HTTP客户端访问其他服务提供者获取一些内容。在Spring中有很多封装好的工具来进行HTTP内容获取，本文将记录这些访问方法，并对各种方法的优劣进行分析。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程HTTP服务的方法，简化了开发人员与HTTP服务的通信方式，统一了RESTful得到标准，封装了HTTP链接；</p>
</li>
<li><p>相较于之前常用的 HttpClient，RestTemplate 是一种更优雅的调用 RESTful 服务的方式；</p>
</li>
<li><p>RestTemplate 默认依赖JDK的HTTP连接工具(HttpURLConnection)，如果有需要的话也可以通过setRequestFactory方法替换为例如 Apache HttpComponents、Netty或OkHttp等其它HTTP库；</p>
</li>
<li><p>RestTemplate默认使用HttpMessageConverter实例将HTTP消息转换成POJO或者从POJO转换成HTTP消息；</p>
</li>
<li><p>RestTemplate是Spring的一个RESTful客户端，只要包含了spring-web就可以在项目中使用了；</p>
</li>
<li><p>RestTemplate使用流程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/873f83a509d8f64d97aae2480b87008b-155759" alt="RestTemplate使用流程"></p>
</li>
<li><p>主要方法：</p>
<table>
<thead>
<tr>
<th>HTTPMethod</th>
<th>RestTemplate Method</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Post</td>
<td><strong>postForLocation</strong></td>
<td>POST 数据到一个URL，返回新创建资源的URL</td>
</tr>
<tr>
<td>Post</td>
<td><strong>postForEntity</strong></td>
<td>POST 数据到一个URL，返回包含一个对象的ResponseEntity</td>
</tr>
<tr>
<td>Post</td>
<td><strong>postForObject</strong></td>
<td>POST 数据到一个URL，返回根据响应体匹配形成的对象</td>
</tr>
<tr>
<td>Get</td>
<td><strong>getForObject</strong></td>
<td>发送一个HTTP GET请求，返回的请求体将映射为一个对象</td>
</tr>
<tr>
<td>Get</td>
<td><strong>getForEntity</strong></td>
<td>发送一个HTTP GET请求，返回的ResponseEntity包含了响应体所映射成的对象</td>
</tr>
<tr>
<td>Delete</td>
<td><strong>delete</strong></td>
<td></td>
</tr>
<tr>
<td>head</td>
<td><strong>headForHeaders</strong></td>
<td></td>
</tr>
<tr>
<td>put</td>
<td><strong>put</strong></td>
<td></td>
</tr>
<tr>
<td>any</td>
<td><strong>exchange</strong></td>
<td></td>
</tr>
<tr>
<td>any</td>
<td><strong>execute</strong></td>
<td>所有的get、post、delete、put、options、head、exchange方法最终调用的都是excute方法</td>
</tr>
</tbody></table>
</li>
<li><p>需要注意的是<strong>RestTemplate只是对其它Rest客户端的一个封装，本身并没有自己的实现</strong>，最常用的几种客户端有：</p>
<ul>
<li>SimpleClientHttpRequestFactory（封装URLConnection）</li>
<li>HttpComponentsClientHttpRequestFactory（封装HttpClient）</li>
<li>OkHttp3ClientHttpRequestFactory(封装OKHttp)</li>
</ul>
</li>
<li><p>常用HTTP客户端的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>httpclient——HttpComponentsClientHttpRequestFactory</li>
<li>okhttp——OkHttp3ClientHttpRequestFactory</li>
<li>使用某个工厂方法初始化RestTemplate时必须对应添加底层依赖</li>
<li>使用的时候一般都会只选择其中的一种方式</li>
</ul>
</li>
<li><p>RestTemplate在使用前可以做一些初始化操作，比如设置超时时间、响应参数转换器等！</p>
</li>
</ol>
<h3 id="基础请求"><a href="#基础请求" class="headerlink" title="基础请求"></a>基础请求</h3><ol>
<li><p>创建一个SpringBoot项目，添加依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建RestTemplate配置类（默认配置）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"urlConnection"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">urlConnectionRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> SimpleClientHttpRequestFactory());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"httpClient"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">httpClientRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> HttpComponentsClientHttpRequestFactory());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"OKHttp3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">OKHttp3RestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>带有配置的RestTemplate配置类（自定义配置）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.config.Registry;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.config.RegistryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.socket.ConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.socket.PlainConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicHeader;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wander</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 建立连接的超时时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>	connectTimeout		= <span class="number">20000</span>;</span><br><span class="line">    <span class="comment">/** 连接不够用的等待时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>	requestTimeout		= <span class="number">20000</span>;</span><br><span class="line">    <span class="comment">/** 每次请求等待返回的超时时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>	socketTimeout		= <span class="number">3000</span>;</span><br><span class="line">    <span class="comment">/** 每个主机最大连接数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>	defaultMaxPerRoute	= <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/** 最大连接数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>	maxTotalConnections	= <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">buildRestTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> DefaultResponseErrorHandler());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpComponentsClientHttpRequestFactory <span class="title">createFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// httpClient连接配置</span></span><br><span class="line">        SSLContextBuilder builder = <span class="keyword">new</span> SSLContextBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TrustStrategy acceptingTrustStrategy = <span class="keyword">new</span> TrustStrategy() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            builder.loadTrustMaterial(<span class="keyword">null</span>, acceptingTrustStrategy);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"Pooling Connection Manager Initialisation failure because of "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SSLConnectionSocketFactory socketFactory = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketFactory = <span class="keyword">new</span> SSLConnectionSocketFactory(builder.build(), NoopHostnameVerifier.INSTANCE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyManagementException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Pooling Connection Manager Initialisation failure because of "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册http和https请求</span></span><br><span class="line">        Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt; create()</span><br><span class="line">                .register(<span class="string">"http"</span>, PlainConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                .register(<span class="string">"https"</span>, socketFactory).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始设置连接池</span></span><br><span class="line">        PoolingHttpClientConnectionManager phccm = <span class="keyword">new</span> PoolingHttpClientConnectionManager(registry);</span><br><span class="line">        <span class="comment">// 最大连接数</span></span><br><span class="line">        phccm.setMaxTotal(maxTotalConnections);</span><br><span class="line">        <span class="comment">// 同路由并发数</span></span><br><span class="line">        phccm.setDefaultMaxPerRoute(defaultMaxPerRoute);</span><br><span class="line"></span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClients.custom();</span><br><span class="line">        httpClientBuilder.setSSLSocketFactory(socketFactory);</span><br><span class="line">        httpClientBuilder.setConnectionManager(phccm);</span><br><span class="line">        httpClientBuilder.setConnectionManagerShared(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 重试次数，默认是3次，没有开启</span></span><br><span class="line">        httpClientBuilder.setRetryHandler(<span class="keyword">new</span> DefaultHttpRequestRetryHandler(<span class="number">3</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 保持长连接配置，需要在头添加Keep-Alive</span></span><br><span class="line">        httpClientBuilder.setKeepAliveStrategy(DefaultConnectionKeepAliveStrategy.INSTANCE);</span><br><span class="line"></span><br><span class="line">        List&lt;Header&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"User-Agent"</span>,</span><br><span class="line">                <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36"</span>));</span><br><span class="line">        headers.add(<span class="keyword">new</span> BasicHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>));</span><br><span class="line"></span><br><span class="line">        httpClientBuilder.setDefaultHeaders(headers);</span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpClient = httpClientBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// httpClient连接配置，底层是配置RequestConfig</span></span><br><span class="line">        HttpComponentsClientHttpRequestFactory factory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory();</span><br><span class="line"></span><br><span class="line">        factory.setHttpClient(httpClient);</span><br><span class="line">        <span class="comment">// 连接超时</span></span><br><span class="line">        factory.setConnectTimeout(connectTimeout);</span><br><span class="line">        <span class="comment">// 数据读取超时时间，即SocketTimeout</span></span><br><span class="line">        factory.setReadTimeout(socketTimeout);</span><br><span class="line">        <span class="comment">// 连接不够用的等待时间，不宜过长，必须设置，比如连接不够用时，时间过长将是灾难性的</span></span><br><span class="line">        factory.setConnectionRequestTimeout(requestTimeout);</span><br><span class="line">        <span class="comment">// 缓冲请求数据，默认值是true。通过POST或者PUT大量发送数据时，建议将此属性更改为false，以免耗尽内存。</span></span><br><span class="line">        factory.setBufferRequestBody(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置RestController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">mainRequest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; ret=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ret.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        ret.put(<span class="string">"msg"</span>,<span class="string">"OK"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>); <span class="comment">// 故意睡眠5秒返回，测试配置类</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译项目并运行，使用浏览器测试接口（<a href="http://localhost:8080）：">http://localhost:8080）：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/643ddaac77abcec75dd1c84fab99332c-45541" alt="浏览器请求"></p>
</li>
<li><p>编写测试请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     String res=restTemplate.getForObject(<span class="string">"http://localhost:8080"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">     log.info(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/06d894f2d6c803746aa66f84d34f9c25-380316" alt="restTemplate访问"></p>
</li>
<li><p>屏蔽mainRequest中的 Thread.sleep(5000); 再次测试访问接口：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1822cb00c40e9aa20b1798d96a9f7f21-41651" alt="屏蔽睡眠效果"></p>
</li>
</ol>
<h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><h4 id="getForObject"><a href="#getForObject" class="headerlink" title="getForObject"></a>getForObject</h4><ol>
<li><p>getForObject是对getForEntity函数的进一步封装，返回值返回的是请求的响应体，省去了再去调用getBody；</p>
</li>
<li><p>实操：</p>
<ol>
<li><p>创建一个Info类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hello;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHello</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RestTemplate配置类使用基础请求的配置类；</p>
</li>
<li><p>创建测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Info res=restTemplate.getForObject(<span class="string">"http://localhost:8080"</span>,Info<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        log.info(res.getHello());</span><br><span class="line">        log.info(res.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求结果：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-08</span><span class="number">-07</span> <span class="number">10</span><span class="string">:02:14.615</span>  <span class="string">INFO</span> <span class="number">52858</span> <span class="string">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="attr">c.w.t.r.ResttemplateApplicationTests     :</span> <span class="string">world</span></span><br><span class="line"><span class="number">2020</span><span class="number">-08</span><span class="number">-07</span> <span class="number">10</span><span class="string">:02:14.615</span>  <span class="string">INFO</span> <span class="number">52858</span> <span class="string">---</span> <span class="string">[</span>           <span class="string">main]</span> <span class="attr">c.w.t.r.ResttemplateApplicationTests     :</span> <span class="string">OK</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="getForEntity"><a href="#getForEntity" class="headerlink" title="getForEntity"></a>getForEntity</h4><ol>
<li><p>返回值类型 ResponseEntity，继承自HttpEntity，封装了返回的响应信息，包括响应状态、响应头、响应体等；</p>
</li>
<li><p>实操：</p>
<ol>
<li><p>Info类上面的getForObject已经创建了；</p>
</li>
<li><p>配置类沿用；</p>
</li>
<li><p>创建测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity response=restTemplate.getForEntity(<span class="string">"http://localhost:8080"</span>,Info<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        HttpHeaders resheader=response.getHeaders(); <span class="comment">// 响应头</span></span><br><span class="line">        HttpStatus httpStatus=response.getStatusCode(); <span class="comment">// 响应码</span></span><br><span class="line">        Info info=(Info)response.getBody(); <span class="comment">// 响应体</span></span><br><span class="line">        System.out.println(resheader);</span><br><span class="line">        System.out.println(httpStatus);</span><br><span class="line">        System.out.println(info.getHello());</span><br><span class="line">        System.out.println(info.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求结果：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[Content-Type:"application/json",</span> <span class="string">Transfer-Encoding:"chunked",</span> <span class="string">Date:"Fri,</span> <span class="number">07</span> <span class="string">Aug</span> <span class="number">2020</span> <span class="number">02</span><span class="string">:22:45</span> <span class="string">GMT",</span> <span class="string">Keep-Alive:"timeout=60",</span> <span class="string">Connection:"keep-alive"]</span></span><br><span class="line"><span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">OK</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><ol>
<li><p>postForObject发送一个POST请求，并返回一个Object对象；</p>
</li>
<li><p>postForEntity发送一个POST请求，并返回一个ResponseEntity对象；</p>
</li>
<li><p>postForLocation提交新资源，提交成功之后，返回新资源的URI。参数和前面两种的参数基本一致，只不过该方法的返回值为URI。服务提供者需要在Headers中添加Location字段才能输出URI；</p>
</li>
<li><p>实操：</p>
<ol>
<li><p>创建一个POST路由：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">mainPost</span><span class="params">( @RequestBody String body,String hello)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt;ret=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ret.put(<span class="string">"put"</span>,hello);</span><br><span class="line">    ret.put(<span class="string">"msg"</span>,<span class="string">"OK"</span>);</span><br><span class="line">    ret.put(<span class="string">"body"</span>,body);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类沿用Get请求的配置类；</p>
</li>
<li><p>创建测试postForObject的样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ret=restTemplate.postForObject("http://localhost:8080?hello=&#123;1&#125;","null",String.class,"test");</span><br><span class="line">        System.out.println(ret);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>postForObject测试输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;"msg":"OK","body":"null","put":"test"&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试postForEntity的样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity=restTemplate.postForEntity("http://localhost:8080?hello=&#123;1&#125;","null",String.class,"test");</span><br><span class="line">        System.out.println(responseEntity.getStatusCode());</span><br><span class="line">        System.out.println(responseEntity.getHeaders());</span><br><span class="line">        System.out.println(responseEntity.getBody());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>postForEntity测试输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="string">[Content-Type:"application/json",</span> <span class="string">Transfer-Encoding:"chunked",</span> <span class="string">Date:"Fri,</span> <span class="number">07</span> <span class="string">Aug</span> <span class="number">2020</span> <span class="number">02</span><span class="string">:50:57</span> <span class="string">GMT",</span> <span class="string">Keep-Alive:"timeout=60",</span> <span class="string">Connection:"keep-alive"]</span></span><br><span class="line"><span class="string">&#123;"msg":"OK","body":"null","put":"test"&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的POST服务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uri"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> URI <span class="title">mainPostUri</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line">    response.setHeader(<span class="string">"Location"</span>,<span class="string">"test"</span>);</span><br><span class="line">    URI uri=<span class="keyword">new</span> URI(<span class="string">"https://www.hao123.com"</span>);</span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试postForLocation的样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        URI uri=restTemplate.postForLocation(<span class="string">"http://localhost:8080/uri"</span>,<span class="string">"null"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>postForLocation测试输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">test</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从测试输出可以看到响应体的Location得到输出</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol>
<li><p>delete方法测试：</p>
<ol>
<li><p>创建一个delete路由：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainDelete</span><span class="params">(String hello)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt;ret=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ret.put(<span class="string">"put"</span>,hello);</span><br><span class="line">    ret.put(<span class="string">"msg"</span>,<span class="string">"OK"</span>);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类沿用Get请求的配置类；</p>
</li>
<li><p>创建delete测试样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        restTemplate.delete(<span class="string">"http://localhost:8080?hello=hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试样例时，应用输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;msg=OK,</span> <span class="string">put=hello&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>put方法测试：</p>
<ol>
<li><p>创建一个put路由：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainPut</span><span class="params">(String hello)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt;ret=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ret.put(<span class="string">"put"</span>,hello);</span><br><span class="line">    ret.put(<span class="string">"msg"</span>,<span class="string">"OK"</span>);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类沿用Get请求的配置类；</p>
</li>
<li><p>创建put测试样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        restTemplate.put(<span class="string">"http://localhost:8080?hello=hello"</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试样例时，应用输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;msg=OK,</span> <span class="string">put=hello&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>exchange方法测试：</p>
<ol>
<li><p>exchange方法跟getForObject、getForEntity、postForObject、postForEntity等方法不同之处在于它可以指定请求的HTTP类型；</p>
</li>
<li><p>创建exchange测试样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity=restTemplate.exchange(<span class="string">"http://localhost:8080"</span>, HttpMethod.GET,<span class="keyword">null</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(responseEntity.getBody());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试样例时输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"msg"</span>:<span class="string">"OK"</span>,<span class="attr">"hello"</span>:<span class="string">"world"</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>excute的用法与 exchange大同小异了，它同样可以指定不同的 HttpMethod，不同的是它返回的对象是响应体所映射成的对象 ，而不是 ResponseEntity!</p>
</li>
<li><p>可以通过下面的方法设置Headers：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPostHeaders</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置请求头</span></span><br><span class="line">       HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">       httpHeaders.add(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//设置请求参数</span></span><br><span class="line">       Map&lt;String, Object&gt; postData = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       postData.put(<span class="string">"id"</span>, <span class="number">1L</span>);</span><br><span class="line">       postData.put(<span class="string">"name"</span>, <span class="string">"测试"</span>);</span><br><span class="line">       postData.put(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//将请求头和请求参数设置到HttpEntity中</span></span><br><span class="line">       HttpEntity&lt;Map&lt;String, Object&gt;&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(postData, httpHeaders);</span><br><span class="line">   </span><br><span class="line">       User user = restTemplate.postForObject(<span class="string">"http://localhost:8080/getUser"</span>, httpEntity, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>微服务场景：项目中经常调用基于Http协议的服务，常使用的框架可能有HttpURLConnection、Apache HttpComponnets、OkHttp3 、Netty等！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c9c774b00744eba08980fdcd8e6e779b-37844" alt="HTTP客户端流程"></p>
</li>
<li><p>Feign 是Netflix提供的一个实现了REST API 客户端的声明式开发框架，Feign允许使用标签注解接口达到声明式的创建REST客户端，具体的实现在运行时提供。Feign将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求；</p>
</li>
<li><p>目的：让REST调用更加简单，可以和SpringCloud进行无缝集成，非常方便地进行服务熔断等操作；</p>
</li>
<li><p>Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息；</p>
</li>
<li><p>Feign会完全代理HTTP请求，只需要像调用方法一样调用它就可以完成服务请求及相关处理；</p>
</li>
<li><p>SpringCloud对Feign进行了封装，支持了SpringMVC标准注解和HttpMessageConverters，Feign可以与Eureka和Ribbon组合使用从而能支持负载均衡。Feign被广泛应用在Spring Cloud 的解决方案中，是学习基于Spring Cloud 微服务架构不可或缺的重要组件；</p>
</li>
<li><p>Feign处理HTTP请求流程如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ac828770011b727ac1cc6cc15a073da2-92628" alt="Feign结构"></p>
</li>
<li><p>在Feign 底层，通过基于面向接口的动态代理方式生成实现类，将请求调用委托到动态代理实现类，基本原理如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/93d962fc3be45e9eec3f8373e26abecf-21999" alt="Feign底层原理"></p>
</li>
<li><p><strong>用了Feign之后调用接口只需要定义相同的接口即可实现调用！</strong></p>
</li>
<li><p>使用Feign需要引入依赖，然后还要在启动类上加上<code>@EnableFeignClients</code>注解，如果定义的Feign接口跟启动类不在一个包名下，还需要指定扫描的包名@EnableFeignClients(basePackages = “xx.xx.xx.xx”)。@EnableFeignClients注解的主要功能是初始化FeignClient的配置和动态执行client的请求；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建议将接口定义单独抽出来，单独成为一个接口项目，这样无论是哪个项目需要调用接口时，引入公共的接口Jar包即可，而无需再重新定义一次！</p>
</li>
<li><p>Feign的使用非常简单，和普通的Service的类一样使用，注入进来，然后直接调用方法就相当于调用远程接口了；</p>
</li>
<li><p>Feign的GitHub源码地址：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p>
</li>
</ol>
<h3 id="SpringBoot基础使用"><a href="#SpringBoot基础使用" class="headerlink" title="SpringBoot基础使用"></a>SpringBoot基础使用</h3><ol>
<li><p>创建一个SpringBoot项目，添加依赖(pom.xml)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建RESTful服务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getString"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String src)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file_upload"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">        System.out.println(file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uploadDir=<span class="string">"/home/wanderros/vue_learn/"</span>;</span><br><span class="line">            File dir=<span class="keyword">new</span> File(uploadDir);</span><br><span class="line">            <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">                dir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            String filename=file.getOriginalFilename();</span><br><span class="line">            File serverFile=<span class="keyword">new</span> File(uploadDir+File.separator+filename);</span><br><span class="line">            file.transferTo(serverFile);</span><br><span class="line">            <span class="comment">// FileUtils.writeByteArrayToFile(new File("/Users/wander/test/files"+file.getOriginalFilename()),file.getBytes());</span></span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加注解@EnableFeignClients：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;MultipartAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Feign接口类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"myFeignClient"</span>, url = <span class="string">"http://127.0.0.1:8080"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/getString"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getCategorys</span><span class="params">(@RequestParam String src)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试类，自动注入接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyFeignClient myFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = myFeignClient.getCategorys(<span class="string">"hello-world"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hello-world</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Feign单文件上传（基础使用外拓）"><a href="#Feign单文件上传（基础使用外拓）" class="headerlink" title="Feign单文件上传（基础使用外拓）"></a>Feign单文件上传（基础使用外拓）</h3><ol>
<li><p>这部分需要理解之前的记录（SpringBoot之Web文件上传），创建项目时添加这部分的支持；</p>
</li>
<li><p>在新项目中添加Feign文件上传的依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：前面基础的依赖也需要添加，如果创建一个新项目的话</li>
</ul>
</li>
<li><p>由于在之前的项目上创建的，因此只需修改接口等：</p>
<ol>
<li><p>Feign接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"myFeignClient"</span>, url = <span class="string">"http://127.0.0.1:8080"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">Map&lt;String,String&gt; <span class="title">getCategorys</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST,value = <span class="string">"upload"</span>, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function">String <span class="title">upload</span><span class="params">(@RequestPart(<span class="string">"file_upload"</span>)</span> MultipartFile file)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file_upload"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">    System.out.println(file.getOriginalFilename());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uploadDir=<span class="string">"/Users/wander/test/file"</span>;</span><br><span class="line">        File dir=<span class="keyword">new</span> File(uploadDir);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        String filename=file.getOriginalFilename();</span><br><span class="line">        File serverFile=<span class="keyword">new</span> File(uploadDir+ File.separator+filename);</span><br><span class="line">        file.transferTo(serverFile);</span><br><span class="line">       <span class="comment">//  FileUtils.writeByteArrayToFile(new File("/Users/wander/test/files"+file.getOriginalFilename()),file.getBytes());</span></span><br><span class="line">        System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MyFeignClient myFeignClient;</span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/upload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload2</span><span class="params">(@RequestPart(<span class="string">"file_upload"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span>   myFeignClient.upload(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：接口的参数注解是@RequestPart。@RequestParam是不可以的</p>
</li>
<li><p>添加控制器upload2是为了测试Feign客户端的单文件上传，真的是踩了不少坑之后才解决</p>
</li>
</ol>
</li>
<li><p>测试文件编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResttemplateApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyFeignClient myFeignClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        File file=<span class="keyword">new</span> File(<span class="string">"/Volumes/Daily/Project/MideaLua/midea/src/D9/T_0000_D9_14.lua"</span>);</span><br><span class="line">        MultipartFile multipartFile = <span class="keyword">new</span> MockMultipartFile(<span class="string">"file_upload"</span>,file.getName(),toString(),<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        System.out.println(myFeignClient.upload(multipartFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意MockMultipartFile的函数的参数，第一个”file_upload”必须和接口的参数名称一致</li>
</ul>
</li>
<li><p>测试效果如下：</p>
<ol>
<li><p>未运行之前：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7957b5ba0ba864dcf6684f0b909485ac-108323" alt="未运行之前"></p>
</li>
<li><p>运行测试之后：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fabbe96d7b96d718a09a0e2ff389e93f-120781" alt="运行测试之后"></p>
</li>
<li><p>浏览器上传：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/314fce51363618078c0c394962141f87-28690" alt="浏览器上传"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/04404220141069a623f894344ece1467-135941" alt="上传结果"></p>
</li>
</ol>
</li>
</ol>
<ol start="8">
<li></li>
</ol>
<p>使用Apache的httpclient的连接池–启用Apache的httpclient替换其内嵌httpclient，启用Httpclient的连接池方式可能会比Ribbon的客户端loadbalance方式更好。</p>
<p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加属性配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span> </span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">maxConnections:</span> <span class="number">20480</span></span><br><span class="line">    <span class="attr">maxConnectionsPerRoute:</span> <span class="number">512</span></span><br><span class="line">    <span class="attr">timeToLive:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">connectionTimeout:</span> <span class="number">10000</span></span><br><span class="line">    <span class="attr">userAgent:</span> <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0'</span></span><br></pre></td></tr></table></figure>

<p>引入FeignAutoConfiguration配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(FeignAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>启用hystrix熔断降级</p>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span> </span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">15000</span></span><br><span class="line">  <span class="attr">threadpool:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">coreSize:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">maximumSize:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">maxQueueSize:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>降级策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFeignClientFallback</span> <span class="keyword">implements</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnResult&lt;ImageVO&gt; <span class="title">uploadFile</span><span class="params">(MultipartFile file, String bucketName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult&lt;&gt;(<span class="number">5001</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Bean配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HystrixFeign.builder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyFeignClientFallback <span class="title">fb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyFeignClientFallback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@FeignClient</span>(</span></span><br><span class="line"><span class="comment">    name = "myFeignClient", </span></span><br><span class="line"><span class="comment">    url = "http://127.0.0.1:8001",</span></span><br><span class="line"><span class="comment">    fallback = MyFeignClientFallback.class,</span></span><br><span class="line"><span class="comment">    configuration = &#123;FeignConfig.class&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>想处理熔断的具体原因,更新熔断策略代码实现FallbackFactory接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFeignClientFallback</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">MyFeignClient</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyFeignClient <span class="title">create</span><span class="params">(<span class="keyword">final</span> Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyFeignClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ReturnResult&lt;ImageVO&gt; <span class="title">uploadFile</span><span class="params">(MultipartFile file, String bucketName)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 处理cause</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReturnResult&lt;&gt;(<span class="number">5001</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyFeignClientFallback <span class="title">fbf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyFeignClientFallback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@FeignClient</span>(</span></span><br><span class="line"><span class="comment">    name = "myFeignClient", </span></span><br><span class="line"><span class="comment">    url = "http://127.0.0.1:8001",</span></span><br><span class="line"><span class="comment">    fallbackFactory = MyFeignClientFallback.class,</span></span><br><span class="line"><span class="comment">    configuration = &#123;FeignConfig.class&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot遗忘点速记</title>
    <url>/2020/08/10/SpringBoot%E9%81%97%E5%BF%98%E7%82%B9%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringBoot虽然简化了配置，但是还是有很多速配的地方容易被忘记，导致项目编译不过去，这里记录一下SpringBoot中的一些容易忘记的点，方便出问题速查！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li><p>SpringBoot默认扫描包的机制是：从启动类开始，扫描启动类所在包和子包中的所有类。如果想要扫描其他包下的类，可以修改@SpringBootApplication(scanBasePackages = {“demo.test”, “demo.spring”})；</p>
</li>
<li><p>通过修改application.yml设置输出的级别，默认情况下，Spring Boot仅记录到控制台，不会写入日志文件。如果需要输出到文件，则需要设置 logging.file或logging.path属性：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span> </span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment">#root日志以error级别输出</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">error</span></span><br><span class="line">    <span class="comment">#demo.springboot包下的日志以debug级别输出</span></span><br><span class="line">    <span class="attr">demo.springboot:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">xxx-log.log</span></span><br></pre></td></tr></table></figure>

<ul>
<li>logging.file：会在项目的当前路径下生成一个 xxx.log 日志文件</li>
<li>logging.path：在指定文件夹生成一个日志文件为spring.log</li>
<li>二者不能同时使用，如若同时使用，则只有logging.file生效</li>
</ul>
</li>
<li><p>根据不同的日志系统，如果有以下文件，将默认加载：</p>
<ul>
<li><p>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</p>
</li>
<li><p>Log4j2：log4j2-spring.xml, log4j2.xml</p>
</li>
<li><p>JDK (Java Util Logging)：logging.properties</p>
</li>
<li><p>SpringBoot建议使用-spring变量进行日志记录配置</p>
</li>
<li><p>如果不使用以上文件名，则需要在application.yml配置加载</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span> </span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log-config.xml</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>SpringBoot不会自动注册RestTemplate，需要自己注册bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringBoot内置支持的Web容器有Tomcat、Undertow、Jetty和Netty，默认情况下，这些Web服务的Access日志是不开启的，如果需要开启日志的话就需要进行相应的配置：</p>
<ol>
<li><p><strong>Tomcat容器日志配置</strong>：默认支持的是Tomcat Web容器，配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">basedir:</span> <span class="string">/home/wanderros/tomcat</span></span><br><span class="line">    <span class="attr">background-processor-delay:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">port-header:</span> <span class="string">X-Forwarded-Port</span></span><br><span class="line">    <span class="attr">protocol-header:</span> <span class="string">X-Forwarded-Proto</span></span><br><span class="line">    <span class="attr">protocol-header-https-value:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">redirect-context-root:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">remote-ip-header:</span> <span class="string">X-Forwarded-For</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">accesslog:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">buffered:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">directory:</span> <span class="string">./log</span></span><br><span class="line">      <span class="attr">file-date-format:</span> <span class="string">.yyyy-MM-dd</span></span><br><span class="line">      <span class="attr">pattern:</span> <span class="string">'%h %l %u %t "%r" %s %b "<span class="template-variable">%&#123;Referer&#125;</span>i" "<span class="template-variable">%&#123;User-Agent&#125;</span>i" %D ms'</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">access_log</span></span><br><span class="line">      <span class="attr">rename-on-rotate:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">request-attributes-enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">rotate:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.log</span></span><br></pre></td></tr></table></figure>

<ul>
<li>server.tomcat.basedir属性是必须要配置的，如果不配置该属性，日志是不会输出的</li>
</ul>
</li>
<li><p><strong>Undertow容器日志配置</strong>：引入Undertow依赖包后，在配置文件添加如下配置（注意需要排除tomcat依赖包）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">undertow:</span> </span><br><span class="line">    <span class="attr">max-http-post-size:</span> <span class="string">10MB</span></span><br><span class="line">    <span class="attr">buffer-size:</span> <span class="string">1024KB</span></span><br><span class="line">    <span class="attr">io-threads:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">worker-threads:</span> <span class="number">64</span></span><br><span class="line">    <span class="attr">direct-buffers:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">eager-filter-init:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">accesslog:</span> </span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">pattern:</span> <span class="string">common</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">access_log.</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">log</span></span><br><span class="line">      <span class="attr">dir:</span> <span class="string">/var/undertow/logs</span></span><br><span class="line">      <span class="attr">rotate:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Jetty容器日志配置</strong>：引入Jetty依赖包后，在配置文件添加如下配置（注意需要排除tomcat依赖包）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">jetty:</span> </span><br><span class="line">    <span class="attr">max-http-post-size:</span> <span class="string">4MB</span></span><br><span class="line">    <span class="attr">acceptors:</span> <span class="number">32</span></span><br><span class="line">    <span class="attr">selectors:</span> <span class="number">32</span></span><br><span class="line">    <span class="attr">accesslog:</span> </span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">filename:</span> <span class="string">/var/jetty/logs/access_log.yyyy_MM_dd.log</span></span><br><span class="line">      <span class="attr">file-date-format:</span> <span class="string">yyyy-MM-dd</span></span><br><span class="line">      <span class="attr">retention-period:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">extended-format:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">date-format:</span> <span class="string">'dd/MMM/yyyy:HH:mm:ss Z'</span></span><br><span class="line">      <span class="attr">locale:</span> <span class="string">zh</span></span><br><span class="line">      <span class="attr">timeZone:</span> <span class="string">GMT+8</span></span><br><span class="line">      <span class="attr">log-cookies:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">log-server:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">log-latency:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
  </entry>
  <entry>
    <title>SpringBoot集成邮件发送</title>
    <url>/2020/07/10/SpringBoot%E9%9B%86%E6%88%90%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>邮件发送是一个非常常见的需求，在一个服务系统中进行用户注册，找回密码等行为时都会用到。Spring Boot 中对于邮件发送提供了相关的自动化配置类，使得邮件发送变得非常容易，这部分主要记录如何使用SpringBoot发送邮件！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>经常用到的邮件协议有SMTP、POP3、IMAP；</p>
</li>
<li><p>SMTP （ Simple Mail Transfer Protocol，简单邮件传输协议）是一个基于 TCP/IP 的应用层协议，定义了邮件客户端软件与 SMTP 服务器之间，以及 SMTP 服务器与 SMTP 服务器之间的通信规则。江湖地位有点类似于 HTTP，SMTP 服务器默认监听的端口号为 25；</p>
</li>
<li><p>POP3 （Post Office Protocol ，邮局协议）定义了邮件客户端与 POP3 服务器之间的通信规则；</p>
</li>
<li><p>邮件服务商会为每一个用户提供专门的邮件存储空间，SMTP 服务器收到邮件之后，就将邮件保存到相应用户的邮件存储空间中，如果用户要读取邮件，就需要通过邮件服务商的 POP3 邮件服务器来完成；</p>
</li>
<li><p>IMAP 协议，这个协议是对 POP3 协议的扩展，功能更强，作用类似；</p>
</li>
<li><p>目前国内大部分的邮件服务商都不允许直接使用用户名/密码的方式来在代码中发送邮件，都是要先申请授权码，然后使用授权码进行邮件的发送！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/51fcdef174009fb54d405a77cbee28dc-85900" alt="QQ邮箱授权码申请"></p>
</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建一个SpringBoot项目"><a href="#创建一个SpringBoot项目" class="headerlink" title="创建一个SpringBoot项目"></a>创建一个SpringBoot项目</h2><ol>
<li><p>添加相关的依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 邮件发送相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- web依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf模板引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置邮件属性：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 SMTP 服务器地址</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># SMTP 服务器的端口</span></span><br><span class="line"><span class="meta">spring.mail.port</span>=<span class="string">465</span></span><br><span class="line"><span class="comment"># 配置邮箱用户名</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">1194409532@qq.com</span></span><br><span class="line"><span class="comment"># 配置密码，注意，不是真正的密码，而是刚刚申请到的授权码</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">buvoyedfresigfjf</span></span><br><span class="line"><span class="comment"># 默认的邮件编码</span></span><br><span class="line"><span class="meta">spring.mail.default-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment"># SSL加密使能，必须</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置 SSL 加密工厂</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.socketFactoryClass</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line"><span class="comment"># 开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>腾讯的邮箱文档：<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=371" target="_blank" rel="noopener">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=371</a></p>
</li>
<li><p>配置完这些之后，Spring Boot 就会自动帮我们配置好邮件发送类，相关的配置在org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration 类中；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; MimeMessage<span class="class">.<span class="keyword">class</span>, <span class="title">MimeType</span>.<span class="title">class</span>, <span class="title">MailSender</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">MailSender</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Conditional</span>(<span class="title">MailSenderCondition</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">MailProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; MailSenderJndiConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MailSenderPropertiesConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MailSenderAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类<code>MailSenderPropertiesConfiguration</code>提供了邮件发送相关的工具类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mail"</span>, name = <span class="string">"host"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSenderPropertiesConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MailProperties properties;</span><br><span class="line">        MailSenderPropertiesConfiguration(MailProperties properties) &#123;</span><br><span class="line">                <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> JavaMailSenderImpl <span class="title">mailSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                JavaMailSenderImpl sender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">                applyProperties(sender);</span><br><span class="line">                <span class="keyword">return</span> sender;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h2><ol>
<li><p>简单邮件就是指邮件内容是一个普通的文本文档；</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender javaMailSender;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 构建一个邮件对象</span></span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">// 设置邮件主题</span></span><br><span class="line">        message.setSubject(<span class="string">"这是一封测试邮件"</span>);</span><br><span class="line">      	<span class="comment">// 设置邮件发送者</span></span><br><span class="line">        message.setFrom(<span class="string">"1194409532@qq.com"</span>);</span><br><span class="line">      	<span class="comment">// 设置邮件接收者，可以有多个接收者</span></span><br><span class="line">        message.setTo(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">      	<span class="comment">// 设置邮件抄送人，可以有多个抄送人</span></span><br><span class="line">        message.setCc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">      	<span class="comment">// 设置隐秘抄送人，可以有多个</span></span><br><span class="line">        message.setBcc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">      	<span class="comment">// 设置邮件发送日期</span></span><br><span class="line">        message.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">      	<span class="comment">// 设置邮件的正文</span></span><br><span class="line">        message.setText(<span class="string">"这是测试邮件的正文"</span>);</span><br><span class="line">      	<span class="comment">// 发送邮件</span></span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问网页执行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a12c4aa629f3c6eee1072290a59f8e98-39237" alt="简单邮件"></p>
</li>
</ol>
<h2 id="发送复杂邮件"><a href="#发送复杂邮件" class="headerlink" title="发送复杂邮件"></a>发送复杂邮件</h2><ol>
<li><p>通过 javaMailSender 来获取一个复杂邮件对象，然后再利用 MimeMessageHelper 对邮件进行配置，MimeMessageHelper 是一个邮件配置的辅助工具类，创建时候的 true 表示构建一个 multipart message 类型的邮件，有了 MimeMessageHelper 之后，我们针对邮件的配置都是由 MimeMessageHelper 来代劳；</p>
</li>
<li><p>通过 addAttachment 方法来添加一个附件；</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/sendimg"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">sendPicture</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">     MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">     MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">     helper.setSubject(<span class="string">"这是一封测试邮件"</span>);</span><br><span class="line">     helper.setFrom(<span class="string">"1194409532@qq.com"</span>);</span><br><span class="line">     helper.setTo(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">     helper.setCc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">     helper.setBcc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">     helper.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">     helper.setText(<span class="string">"这是测试邮件的正文"</span>);</span><br><span class="line">     helper.addAttachment(<span class="string">"test.jpg"</span>,<span class="keyword">new</span> File(<span class="string">"/Users/wander/Downloads/test.jpg"</span>));</span><br><span class="line">     javaMailSender.send(mimeMessage);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"success two!"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问网页执行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/805267f91d2623d0f29b8abd80b3a4bd-38110" alt="访问网页执行效果"></p>
</li>
</ol>
<h2 id="邮件内容插入图片"><a href="#邮件内容插入图片" class="headerlink" title="邮件内容插入图片"></a>邮件内容插入图片</h2><ol>
<li><p>邮件 text 是一个 HTML 文本，里边涉及到的图片资源先用一个占位符占着，setText 方法的第二个参数 true 表示第一个参数是一个 HTML 文本；</p>
</li>
<li><p>setText 之后，再通过 addInline 方法来添加图片资源；</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/inline"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendInPicture</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">"这是一封测试邮件"</span>);</span><br><span class="line">    helper.setFrom(<span class="string">"1194409532@qq.com"</span>);</span><br><span class="line">    helper.setTo(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setCc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setBcc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">    helper.setText(<span class="string">"&lt;p&gt;hello 大家好，这是一封测试邮件，这封邮件包含两种图片，分别如下&lt;/p&gt;&lt;p&gt;第一张图片：&lt;/p&gt;&lt;img src='cid:p01'/&gt;&lt;p&gt;第二张图片：&lt;/p&gt;&lt;img src='cid:p02'/&gt;"</span>,<span class="keyword">true</span>);</span><br><span class="line">    helper.addInline(<span class="string">"p01"</span>,<span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"/Users/wander/Downloads/test.jpg"</span>)));</span><br><span class="line">    helper.addInline(<span class="string">"p02"</span>,<span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"/Users/wander/Downloads/test.jpg"</span>)));</span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Inline success!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问网页执行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d151dd088d4f482ec02cd71e06be9fe9-199681" alt="访问网页执行效果"></p>
</li>
</ol>
<h2 id="使用-Thymeleaf-作邮件模板"><a href="#使用-Thymeleaf-作邮件模板" class="headerlink" title="使用 Thymeleaf 作邮件模板"></a>使用 Thymeleaf 作邮件模板</h2><ol>
<li><p>Thymeleaf 的自动化配置提供了一个 TemplateEngine，通过 TemplateEngine 可以方便的将 Thymeleaf 模板渲染为 HTML ;</p>
</li>
<li><p>HTML模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello 欢迎加入 xxx 大家庭，您的入职信息如下：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;num&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>薪水<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;salary&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: #ff1a0e"</span>&gt;</span>一起努力创造辉煌<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TemplateEngine templateEngine;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/model"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendThymleaf</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">    MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">"这是一封测试邮件"</span>);</span><br><span class="line">    helper.setFrom(<span class="string">"1194409532@qq.com"</span>);</span><br><span class="line">    helper.setTo(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setCc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setBcc(<span class="string">"wangshipeng100@163.com"</span>);</span><br><span class="line">    helper.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">    Context context = <span class="keyword">new</span> Context();</span><br><span class="line">    context.setVariable(<span class="string">"username"</span>, <span class="string">"test"</span>);</span><br><span class="line">    context.setVariable(<span class="string">"num"</span>,<span class="string">"000001"</span>);</span><br><span class="line">    context.setVariable(<span class="string">"salary"</span>, <span class="string">"99999"</span>);</span><br><span class="line">    String process = templateEngine.process(<span class="string">"mail.html"</span>, context);</span><br><span class="line">    helper.setText(process,<span class="keyword">true</span>);</span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"model success!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问网页执行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/291207ca23b8e7675fddfc6978d0e774-54814" alt="访问网页执行效果"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud Consul Quick Start</title>
    <url>/2020/08/28/SpringCloud-Consul-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在微服务架构体系中，服务发现是非常重要的组件。Euerka、Consul、zookeeper、etcd、Nacos等都是注册中心，本主要记录Consul作为注册中心，如何进行服务注册以及进行配置中心配置。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>服务网格（Service Mesh）是用于控制和监控微服务应用程序中的内部服务到服务流量的软件基础结构层。在此模型中，服务网格对于开发人员 (服务所有者) 是透明的， 而运维人员 (平台工程师) 则被授予一套新的工具，以确保可靠性、安全性和可见性；</p>
</li>
<li><p>服务网格的由来：对许多公司来说，Docker 和 Kubernetes 这样的工具已经 “解决了部署问题”（Docker 和 Kubernetes 所提供了强大的抽象，并且将服务打包和部署模式过程标准化了），但是还没有解决运行时问题，服务网格为了解决该问题而产生；</p>
</li>
<li><p>服务网格的核心：提供统一的全局方法来控制和测量应用或服务之间的所有请求流量（东西流量，East-West Traffic）。在微服务架构中，东西流量在系统运行中发挥着至关重要的作用，该流量是决定应用程序在运行时行为的关键因素。因此标准化此流量的管理将成为标准化应用程序运行时操作的切入口；</p>
<ul>
<li>客户端和服务器之间的流量被称为南北流量（South-North Traffic）</li>
<li>不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量（East-West Traffic）</li>
<li>东西流量和南北流量的命名源于典型Network Diagrams的习惯，在图表中，通常核心网络组件绘制在顶部（North），客户端绘制在底部（South），而数据中心内的不同服务器水平（East-West）绘制</li>
</ul>
</li>
<li><p>Consul是一个服务网格解决方案，提供了一个功能齐全的控制平面，主要特点是：服务发现、健康检查、键值存储、安全服务通信、多数据中心；</p>
</li>
<li><p>Consul工作原理如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b37089065f72f6cfc8cddf0bdf8aa006-45510" alt="Consul工作原理"></p>
</li>
<li><p>Consul的使用场景包括服务发现、服务隔离、服务配置：</p>
<ul>
<li>服务发现场景中consul作为注册中心，服务地址被注册到consul中以后，可以使用consul提供的dns、http接口查询，consul支持health check</li>
<li>服务隔离场景中consul支持以服务为单位设置访问策略，能同时支持经典的平台和新兴的平台，支持tls证书分发，service-to-service加密</li>
<li>服务配置场景中consul提供key-value数据存储功能，并且能将变动迅速地通知出去，借助consul可以实现配置共享，需要读取配置的服务可以从consul中读取到准确的配置信息</li>
<li>consul可以帮助系统管理者更清晰的了解复杂系统内部的系统架构，运维人员可以将consul看成一种监控软件，也可以看成一种资产（资源）管理系统</li>
</ul>
</li>
<li><p>Consul 和其他注册中心的对比：</p>
<table>
<thead>
<tr>
<th align="left">Feature</th>
<th align="left">euerka</th>
<th align="left">Consul</th>
<th align="left">zookeeper</th>
<th align="left">etcd</th>
</tr>
</thead>
<tbody><tr>
<td align="left">服务健康检查</td>
<td align="left">可配支持</td>
<td align="left">服务状态，内存，硬盘等</td>
<td align="left">(弱)长连接，keepalive</td>
<td align="left">连接心跳</td>
</tr>
<tr>
<td align="left">多数据中心</td>
<td align="left">—</td>
<td align="left">支持</td>
<td align="left">—</td>
<td align="left">—</td>
</tr>
<tr>
<td align="left">kv 存储服务</td>
<td align="left">—</td>
<td align="left">支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">一致性</td>
<td align="left">—</td>
<td align="left">raft</td>
<td align="left">paxos</td>
<td align="left">raft</td>
</tr>
<tr>
<td align="left">cap</td>
<td align="left">ap</td>
<td align="left">ca</td>
<td align="left">cp</td>
<td align="left">cp</td>
</tr>
<tr>
<td align="left">使用接口(多语言能力)</td>
<td align="left">http（sidecar）</td>
<td align="left">支持 http 和 dns</td>
<td align="left">客户端</td>
<td align="left">http/grpc</td>
</tr>
<tr>
<td align="left">watch 支持</td>
<td align="left">支持 long polling/大部分增量</td>
<td align="left">全量/支持long polling</td>
<td align="left">支持</td>
<td align="left">支持 long polling</td>
</tr>
<tr>
<td align="left">自身监控</td>
<td align="left">metrics</td>
<td align="left">metrics</td>
<td align="left">—</td>
<td align="left">metrics</td>
</tr>
<tr>
<td align="left">安全</td>
<td align="left">—</td>
<td align="left">acl /https</td>
<td align="left">acl</td>
<td align="left">https 支持（弱）</td>
</tr>
<tr>
<td align="left">spring cloud 集成</td>
<td align="left">已支持</td>
<td align="left">已支持</td>
<td align="left">已支持</td>
<td align="left">已支持</td>
</tr>
</tbody></table>
</li>
<li><p>Consul的优势：</p>
<ul>
<li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接</li>
<li>支持多数据中心，内外网的服务采用不同的端口进行监听</li>
<li>支持健康检查</li>
<li>支持 http 和 dns 协议接口</li>
<li>官方提供 web 管理界面</li>
</ul>
</li>
<li><p>SpringCloud官网说明文档：<a href="https://cloud.spring.io/spring-cloud-consul/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-consul/reference/html/</a></p>
</li>
<li><p>Eureka闭源了：<a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki</a></p>
</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><ol>
<li><p>下载consul的Docker镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull consul</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建consul镜像实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name consul -d -p 8500:8500 consul</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个consul服务端应用程序，包含consul注册依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置（application.yml）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8501</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类添加注解@EnableDiscoveryClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helle consul"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helle consul2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务即可在<a href="http://localhost:8500/ui观察注册情况了，可以修改配置再启动一个服务，效果如下：" target="_blank" rel="noopener">http://localhost:8500/ui观察注册情况了，可以修改配置再启动一个服务，效果如下：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/467b4ded29d20ea4a7bfd30cbac9c5a3-68256" alt="consul中注册服务"></p>
<ul>
<li></li>
</ul>
</li>
</ol>
<h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><ol>
<li><p>创建一个Consul服务消费者，依赖和服务一致；</p>
</li>
<li><p>配置文件如下（application.properties）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.application.name=customer</span></span><br><span class="line"><span class="string">server.port=8504</span></span><br><span class="line"><span class="string">spring.cloud.consul.host=127.0.0.1</span></span><br><span class="line"><span class="string">spring.cloud.consul.port=8500</span></span><br><span class="line"><span class="comment">#设置不需要注册到 consul 中</span></span><br><span class="line"><span class="string">spring.cloud.consul.discovery.register=true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类添加注解@EnableDiscoveryClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulCustomerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulCustomerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建ServiceController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/services"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">services</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discoveryClient.getInstances(<span class="string">"service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从所有服务中选择一个服务（轮询）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/discover"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadBalancer.choose(<span class="string">"service"</span>).getUri().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建服务消费CallHelloController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallHelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/call"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancer.choose(<span class="string">"service"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务地址："</span> + serviceInstance.getUri());</span><br><span class="line">        System.out.println(<span class="string">"服务名称："</span> + serviceInstance.getServiceId());</span><br><span class="line"></span><br><span class="line">        String callServiceResult = <span class="keyword">new</span> RestTemplate().getForObject(serviceInstance.getUri().toString() + <span class="string">"/hello2"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(callServiceResult);</span><br><span class="line">        <span class="keyword">return</span> callServiceResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务即可！然后就可以访问<a href="http://localhost:8504/call" target="_blank" rel="noopener">http://localhost:8504/call</a></p>
</li>
</ol>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><ol>
<li><p>创建一个使用consul的配置项目，添加相关依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件如下（application.yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>    <span class="comment"># 启用配置中心</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">yaml</span>     <span class="comment"># 指定配置格式为 yaml</span></span><br><span class="line">        <span class="attr">data-key:</span> <span class="string">config_get</span> <span class="comment"># 也就是 consul 中 key/value 中的 key</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">config</span>         <span class="comment"># 可以理解为配置文件所在的最外层目录</span></span><br><span class="line">        <span class="attr">defaultContext:</span> <span class="string">consul-config</span>  <span class="comment"># 可以理解为 mysql_config 的上级目录</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">register:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-get</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类添加注解@EnableDiscoveryClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Consul配置中心添加配置，配置如图所示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/430a649526c7053038b83598cfd17e71-121736" alt="Consul配置"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目即可，然后实时修改Consul配置的Key/Vaule中的配置，会实时配置应用程序，这个和Eureka还不是太一样。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud Eureka Quick Start</title>
    <url>/2020/08/05/SpringCloud-Eureka-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>服务发现是基于微服务体系结构的关键原则之一。尝试手工配置每个客户端或某种形式的约定可能很困难，而且很脆弱。Eureka是Netflix的服务发现服务器和客户端，可以将服务器配置和部署为高可用性，每个服务器将注册服务的状态复制到其他服务器。本文主要记录SpringCloud Eureka相关技术的操作，真实的使用还需要进行实战才能强化！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>服务发现的两种方式：</p>
<ul>
<li><p>客户端发现</p>
<ul>
<li>Eureka</li>
</ul>
</li>
<li><p>服务端发现</p>
<ul>
<li>Nginx</li>
<li>Zookeeper</li>
<li>Kubernetes</li>
</ul>
</li>
</ul>
</li>
<li><p>康威定律：任何组织在设计一套系统时，所交付的设计方案在结构上都与该组织的沟通结构保持一致！——沟通的问题会影响架构结构。</p>
</li>
<li><p>微服务特点之一是异构，主要表现在：</p>
<ul>
<li>不同语言</li>
<li>不同类型的数据库</li>
</ul>
</li>
<li><p>应用间通信方式有HTTP和RPC，典型代表有：</p>
<ul>
<li>HTTP——SpringCloud</li>
<li>RPC——Dubbo</li>
</ul>
</li>
<li><p>SpringCloud中服务间有两种RESTful调用方式：</p>
<ul>
<li>RestTemplate</li>
<li>Feign</li>
</ul>
</li>
<li><p>SpringCloud中各种组件的功能描述：</p>
<ul>
<li>Eureka Client——负责将服务的信息注册到Eureka Server中</li>
<li>Eureka Server——注册中心，里面有一个注册表，保存了各个服务所在的机器和端口号</li>
<li>Feign——使用动态代理技术，来动态构造出请求的服务的地址</li>
<li>Ribbon——和Feign以及Eureka紧密协作完成负载均衡的功能</li>
<li>Hystrix——隔离、熔断以及降级的一个框架</li>
<li>Zuul——（微服务网关组件）负责网络路由，一般微服务架构中都必然会设计一个网关在里面</li>
</ul>
</li>
</ol>
<h2 id="网关Zuul"><a href="#网关Zuul" class="headerlink" title="网关Zuul"></a>网关Zuul</h2><ol>
<li><p>Zuul是Netflix开源的微服务网关，可以和Eureka、Ribbon、Hystrix等组件配合使用，Spring Cloud对Zuul进行了整合与增强，Zuul默认使用的HTTP客户端是Apache HTTPClient，也可以使用RestClient或okhttp3.OkHttpClient；</p>
</li>
<li><p>主要功能：路由转发和过滤器</p>
</li>
<li><p>工作原理：在把请求路由到网关之后的服务过程中，通过一系列的过滤器进行处理，达到预期的效果，和Servlet框架的Filter以及AOP类似；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/06b983e45d45493ba85a05ad9a34476b-109561" alt="Zuul原理"></p>
</li>
<li><p>过滤器的主要应用：</p>
<ul>
<li>身份验证和安全性 - 确定每个资源的身份验证要求并拒绝不满足这些要求的请求</li>
<li>洞察和监控 - 在边缘跟踪有意义的数据和统计数据，以便为我们提供准确的生产视图</li>
<li>动态路由 - 根据需要动态地将请求路由到不同的后端集群</li>
<li>压力测试 - 逐渐增加集群的流量以衡量性能</li>
<li>Load Shedding - 为每种类型的请求分配容量并删除超过限制的请求</li>
<li>静态响应处理 - 直接在边缘构建一些响应，而不是将它们转发到内部集群</li>
</ul>
</li>
<li><p>过滤器的生命周期：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c1ecae7ac44b251fbda1c7d696fe5da5-38780" alt="过滤器的生命周期"></p>
</li>
<li><p>Zuul的组件：</p>
<ul>
<li>zuul-core——zuul核心库，包含编译和执行过滤器的核心功能</li>
<li>zuul-simple-webapp——zuul Web应用程序示例，展示了如何使用zuul-core构建应用程序</li>
<li>zuul-netflix——lib包，将其他NetflixOSS组件添加到Zuul中，例如使用功能区进去路由请求处理</li>
<li>zuul-netflix-webapp——webapp，它将zuul-core和zuul-netflix封装成一个简易的webapp工程包</li>
</ul>
</li>
<li><p>在zuul中，路由匹配的路径表达式采用ant风格定义</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>？</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配任意数量的字符</td>
</tr>
<tr>
<td>**</td>
<td>匹配任意数量的字符，支持多级目录</td>
</tr>
</tbody></table>
<ul>
<li><p>默认情况下，Zuul在请求路由时，会过滤掉http请求头信息中一些敏感信息，防止它们被传递到下游的外部服务器，通过zuul.sensitive-headers来进行配置，不过滤掉直接填空值即可</p>
</li>
<li><p>参考配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建路由地址</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment"># 这里可以自定义</span></span><br><span class="line">    <span class="attr">demo2:</span></span><br><span class="line">      <span class="comment"># 匹配的路由规则</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/demo/**</span></span><br><span class="line">      <span class="comment"># 路由的目标服务名</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">demo</span></span><br><span class="line"><span class="comment"># 关闭使用eureka负载路由</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 如果不使用eureka的话，需要自己定义路由的那个服务的其他负载服务</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="限流、熔断和降级Hystrix-hɪst’rɪks"><a href="#限流、熔断和降级Hystrix-hɪst’rɪks" class="headerlink" title="限流、熔断和降级Hystrix [hɪst’rɪks]"></a>限流、熔断和降级Hystrix [hɪst’rɪks]</h2><ol>
<li><p>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性、容错性与局部应用的弹性，是一个实现了超时机制和断路器模式的工具类库！</p>
</li>
<li><p>在理想状态下，一个应用依赖的服务都是健康可用的，可以正常的处理所有的请求。但是当某一个服务出现延迟时，所有的请求都阻塞在依赖的服务上，会导致服务阻塞，可能引起服务雪崩；</p>
</li>
<li><p>使用了Hystrix时，Hystrix将所有的外部调用都封装成一个HystrixCommand或者HystrixObservableCommand对象，这些外部调用将会在一个独立的线程中运行。可以将出现问题的服务通过熔断、降级等手段隔离开来，这样不影响整个系统的主业务；</p>
</li>
<li><p>Hystrix工作原理：</p>
<ul>
<li>使用命令模式将所有对外部服务（或依赖关系）的调用包装在HystrixCommand或HystrixObservableCommand对象中，并将该对象放在单独的线程中执行</li>
<li>每个依赖都维护着一个线程池（或信号量），线程池被耗尽则拒绝请求（而不是让请求排队）</li>
<li>记录请求成功，失败，超时和线程拒绝</li>
<li>服务错误百分比超过了阈值，熔断器开关自动打开，一段时间内停止对该服务的所有请求</li>
<li>请求失败，被拒绝，超时或熔断时执行降级逻辑</li>
<li>近实时地监控指标和配置的修改</li>
</ul>
</li>
<li><p>Hystrix配置示例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线程池大小</span></span><br><span class="line"><span class="meta">hystrix.threadpool.default.coreSize</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 缓冲区大小， 如果为-1，则不缓冲，直接进行降级 fallback</span></span><br><span class="line"><span class="meta">hystrix.threadpool.default.maxQueueSize</span>=<span class="string">200</span></span><br><span class="line"><span class="comment"># 缓冲区大小超限的阈值，超限就直接降级</span></span><br><span class="line"><span class="meta">hystrix.threadpool.default.queueSizeRejectionThreshold</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行策略</span></span><br><span class="line"><span class="comment"># 资源隔离模式，默认thread。 还有一种叫信号量</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.strategy</span>=<span class="string">THREAD</span></span><br><span class="line"><span class="comment"># 是否打开超时</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.timeout.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 超时时间，默认1000毫秒</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">15000</span></span><br><span class="line"><span class="comment"># 超时时中断线程</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.thread.interruptOnTimeout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消时候中断线程</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.thread.interruptOnFutureCancel</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 信号量模式下，最大并发量</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 降级策略</span></span><br><span class="line"><span class="comment"># 是否开启服务降级</span></span><br><span class="line"><span class="meta">hystrix.command.default.fallback.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># fallback执行并发量</span></span><br><span class="line"><span class="meta">hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 熔断策略</span></span><br><span class="line"><span class="comment"># 启用/禁用熔断机制</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 强制开启熔断</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.forceOpen</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 强制关闭熔断</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.forceClosed</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 前提条件，一定时间内发起一定数量的请求。  也就是5秒钟内(这个5秒对应下面的滚动窗口长度)至少请求4次，熔断器才发挥起作用。  默认20</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.requestVolumeThreshold</span>=<span class="string">4</span></span><br><span class="line"><span class="comment"># 错误百分比。达到或超过这个百分比，熔断器打开。  比如：5秒内有4个请求，2个请求超时或者失败，就会自动开启熔断</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.errorThresholdPercentage</span>=<span class="string">50</span></span><br><span class="line"><span class="comment"># 10秒后，进入半打开状态（熔断开启，间隔一段时间后，会让一部分的命令去请求服务提供者，如果结果依旧是失败，则又会进入熔断状态，如果成功，就关闭熔断）。 默认5秒</span></span><br><span class="line"><span class="meta">hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</span>=<span class="string">10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 度量策略</span></span><br><span class="line"><span class="comment"># 5秒为一次统计周期，术语描述：滚动窗口的长度为5秒</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingStats.timeInMilliseconds</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 统计周期内 度量桶的数量，必须被timeInMilliseconds整除。作用：</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingStats.numBuckets</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 是否收集执行时间，并计算各个时间段的百分比</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingPercentile.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置执行时间统计周期为多久，用来计算百分比</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds</span>=<span class="string">60000</span></span><br><span class="line"><span class="comment"># 执行时间统计周期内，度量桶的数量</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingPercentile.numBuckets</span>=<span class="string">6</span></span><br><span class="line"><span class="comment"># 执行时间统计周期内，每个度量桶最多统计多少条记录。设置为50，有100次请求，则只会统计最近的10次</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.rollingPercentile.bucketSize</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 数据取样时间间隔</span></span><br><span class="line"><span class="meta">hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds</span>=<span class="string">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置是否缓存请求，request-scope内缓存</span></span><br><span class="line"><span class="meta">hystrix.command.default.requestCache.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置HystrixCommand执行和事件是否打印到HystrixRequestLog中</span></span><br><span class="line"><span class="meta">hystrix.command.default.requestLog.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限流策略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有定义HystrixThreadPoolKey，HystrixThreadPoolKey会默认定义为HystrixCommandGroupKey的值</span></span><br><span class="line"><span class="meta">hystrix.threadpool.userGroup.coreSize</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">hystrix.threadpool.userGroup.maxQueueSize</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">hystrix.threadpool.userGroup.queueSizeRejectionThreshold</span>=<span class="string">800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">hystrix.threadpool.userThreadPool.coreSize</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">hystrix.threadpool.userThreadPool.maxQueueSize</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">hystrix.threadpool.userThreadPool.queueSizeRejectionThreshold</span>=<span class="string">800</span></span><br><span class="line"><span class="meta">hystrix.command.userCommandKey.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Hystrix支持以注解的形式配置，通过@HystrixCommand注解的fallbackMethod属性指定降级方法；通过@HystrixProperty的name value键值对进行配置commandProperties<code>和</code>threadPoolProperties；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"timeoutFallback"</span>, threadPoolProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"20"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"20"</span>)</span><br><span class="line">    &#125;, commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"8000"</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在客户端需要使用@EnableCircuitBreaker启用熔断机制；</p>
</li>
<li><p>Hystrix配置属性说明：<a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p>
</li>
</ol>
<h2 id="配置ConfigServer"><a href="#配置ConfigServer" class="headerlink" title="配置ConfigServer"></a>配置ConfigServer</h2><ol>
<li><p>在分布式系统中，Spring Cloud提供一个Config子项目，该项目核心就是配置中心，通过一个服务端和多个客户端实现配置服务！</p>
</li>
<li><p>功能：使用配置服务器集中的管理所有服务的各种环境配置文件；</p>
</li>
<li><p>需要使用@EnableConfigServer来启动配置服务；配合Eureke可实现服务发现，配合Cloud Bus可实现配置推送更新；</p>
</li>
<li><p>需要添加bootstrap.yml配置文件，文件内容类似下面的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/hellxz/SpringCloudlearn</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config-repo</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">username</span> </span><br><span class="line">          <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<ul>
<li>search-paths指定的是匹配查询的路径名</li>
<li>username和password是访问仓库的用户名和密码</li>
</ul>
</li>
<li><p>Config支持使用的请求的参数规则有：</p>
<ul>
<li>/ { 应用名 } / { 环境名 } [ / { 分支名 } ]</li>
<li>/ { 应用名 } - { 环境名 }.yml</li>
<li>/ { 应用名 } - { 环境名 }.properties</li>
<li>/ { 分支名 } / { 应用名 } - { 环境名 }.yml</li>
<li>/ { 分支名 } / { 应用名 } - { 环境名 }.properties</li>
</ul>
</li>
<li><p>Config Server工作原理：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a4de5d67c6fdab86808d2cd3ba8ce204-26808" alt="Config Server工作原理"></p>
<ul>
<li>远程git仓库——用来存储配置文件的地方</li>
<li>Config Server——分布式配置中心</li>
<li>微服务应用——配置了ConfigClient的微服务</li>
</ul>
</li>
<li><p>Config Server启动流程：</p>
<ol>
<li>微服务应用启动，根据bootstrap.yml（properties）中配置的应用名（application）、环境名（profile）、分支名（label），向Config Server请求配置信息</li>
<li>Config Server 根据自己bootstrap.yml（properties）中的Git（或SVN）仓库信息加上客户端传来的配置定位信息去查配置信息的路径</li>
<li>Config Server 执行git clone命令，将配置信息下载到本地Git仓库中，将配置信息加载到Spring的ApplicationContext读取内容返回给客户端（微服务应用）</li>
<li>客户端将内容加载到ApplicationContext，配置内容的优先级大于客户端内部的配置内容，进行忽略</li>
</ol>
<ul>
<li>当Config Server因为网络原因无法连接到Git或SVN时，客户端的请求过来后，会先连接Git或SVN，如果没连上，就使用本地仓库的配置文件内容进行返回给客户端</li>
</ul>
</li>
<li><p>Config Server可以配置多个仓库，配置示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/spring-cloud-samples/config-repo</span>   <span class="comment">#默认的仓库</span></span><br><span class="line">          <span class="attr">repos:</span></span><br><span class="line">            <span class="attr">simple:</span> <span class="string">https://github.com/simple/config-repo</span></span><br><span class="line">            <span class="attr">special:</span></span><br><span class="line">              <span class="attr">pattern:</span> <span class="string">special*/dev*,*special*/dev*</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">https://github.com/special/config-repo</span></span><br><span class="line">            <span class="attr">local:</span></span><br><span class="line">              <span class="attr">pattern:</span> <span class="string">local*</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">file:/home/configsvc/config-repo</span></span><br><span class="line">            <span class="attr">test:</span> </span><br><span class="line">              <span class="attr">pattern:</span> </span><br><span class="line">                <span class="bullet">-</span> <span class="string">'*/development'</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">'*/staging'</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">https://github.com/development/config-repo</span></span><br></pre></td></tr></table></figure>

<ul>
<li>simple 仓库自动匹配到 simple/*</li>
<li>special 仓库的pattern，第一个是应用名以special开头，环境名以dev开头；第二个是应用名包含special，环境名以dev开头；多个匹配到同一uri的pattern用逗号分割</li>
<li>local 仓库的的pattern也会自动补全为local<em>/</em></li>
<li>test仓库中的 pattern 是以通配符开始的，需要使用单引号</li>
<li><strong>配置多个仓库时，Config Server 在启动时会直接克隆第一个仓库的配置库，其他配置库只有请求时才会clone到本地</strong></li>
</ul>
</li>
</ol>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li><p><strong>SpringCloud Config的手动刷新：</strong>在Config Server以及Config Client都在运行的情况下，修改GitHub中的配置文件中的内容，然后再手动刷新Config Client就可以不重启任何服务的情况达到效果，但是需要注意以下点：</p>
<ul>
<li><p>Config Client需要添加actuator依赖，并且暴露refresh端点的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">	<span class="attr">endpoint:</span></span><br><span class="line">		<span class="attr">web:</span></span><br><span class="line">			<span class="attr">exposure:</span></span><br><span class="line">				<span class="attr">include:</span> <span class="string">refresh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于引用了GitHub配置文件的类上加上注解@RefreshScope</p>
</li>
<li><p>手动POST Config Client的/actuator/refresh接口</p>
</li>
</ul>
</li>
<li><p>在配置使用Feign时，添加了之前可以使用的一些依赖但是导致在项目中一直出现如下错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nested exception is java.lang.NoClassDefFoundError</span><br></pre></td></tr></table></figure>

<ul>
<li>只添加spring-cloud-starter-openfeign即可，其他的依赖项添加不对的话，会导致依赖出现问题</li>
</ul>
</li>
<li><p>Ribbon的负载均衡策略主要有以下几种：</p>
<ul>
<li>com.netflix.loadbalancer.RandomRule #配置规则 随机</li>
<li>com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询</li>
<li>com.netflix.loadbalancer.RetryRule #配置规则 重试</li>
<li>com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重</li>
<li>com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略</li>
</ul>
</li>
<li><p>@FeignClient注解参数说明：</p>
<ul>
<li>name——指定FeignClient的名称，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现</li>
<li>fallback——定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback指定的类必须实现@FeignClient标记的接口</li>
<li>fallbackFactory——工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码</li>
<li>path——定义当前FeignClient的统一前缀，类似于注解到类上的@RequestMapping的功能</li>
<li><strong>注意：</strong>出现fallback method wasn’t found异常时，是因为指定的备用方法和原方法的参数个数或类型不同造成的，需要统一参数的类型和个数</li>
</ul>
</li>
<li><p>在注册完服务之后，服务提供者会维护一个心跳用来持续告诉 Eureka Server“我还活着”，以防止 Eureka Server 的“剔除任务”将该服务实例从服务列表中排除出去，我们称该操作为服务续约（Renew），关于服务续约有如下两个重要属性，可以根据需求来调整：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义服务续约任务的调用时间间隔（即发送心跳给server端的频率），默认为30秒</span></span><br><span class="line"><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">30</span></span><br><span class="line"><span class="comment"># 定于服务失效的时间（即server端多长时间没收到心跳后就将此实例剔除)，默认为90秒</span></span><br><span class="line"><span class="meta">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">90</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h2><ol>
<li><p>创建一个SpringCloud Eureka的注册中心服务端项目，选中Spring Cloud Discovery下的Eureka Server即可；</p>
</li>
<li><p>开启注解@EnableEurekaServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接启动能够打开<a href="http://localhost:8080，但是终端会报错误，效果如下：">http://localhost:8080，但是终端会报错误，效果如下：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2822219a5796fa99ab43b0ff472d5dc7-121093" alt="Eureka网页"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br><span class="line">	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:<span class="number">112</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$<span class="number">1</span>.execute(EurekaHttpClientDecorator.java:<span class="number">59</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:<span class="number">77</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:<span class="number">56</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:<span class="number">857</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:<span class="number">121</span>) ~[eureka-client-<span class="number">1.9</span><span class="number">.21</span>.jar:<span class="number">1.9</span><span class="number">.21</span>]</span><br><span class="line">	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">515</span>) ~[na:na]</span><br><span class="line">	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">264</span>) ~[na:na]</span><br><span class="line">	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">304</span>) ~[na:na]</span><br><span class="line">	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1128</span>) ~[na:na]</span><br><span class="line">	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">628</span>) ~[na:na]</span><br><span class="line">	at java.base/java.lang.Thread.run(Thread.java:<span class="number">834</span>) ~[na:na]</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置如下（application.yml）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 本身也是客户端，注册到自己的服务中心</span></span><br><span class="line">   <span class="comment"># register-with-eureka: false # 关闭在注册中心的显示</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka</span> <span class="comment"># 修改应用名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span> <span class="comment"># 修改端口号</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EurekaClientConfigBean.class    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EurekaClientConfigBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceUrl.put(<span class="string">"defaultZone"</span>, <span class="string">"http://localhost:8761/eureka/"</span>);</span><br><span class="line">        <span class="keyword">this</span>.gZipContent = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.useDnsForFetchingServiceUrls = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.registerWithEureka = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.preferSameZoneEureka = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.availabilityZones = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">this</span>.filterOnlyUpInstances = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.fetchRegistry = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.dollarReplacement = <span class="string">"_-"</span>;</span><br><span class="line">        <span class="keyword">this</span>.escapeCharReplacement = <span class="string">"__"</span>;</span><br><span class="line">        <span class="keyword">this</span>.allowRedirects = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.onDemandUpdateStatusChange = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.clientDataAccept = EurekaAccept.full.name();</span><br><span class="line">        <span class="keyword">this</span>.shouldUnregisterOnShutdown = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.shouldEnforceRegistrationAtInit = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.order = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动服务之后，等待一段时间就可以查看<a href="http://localhost:8761，效果如下：">http://localhost:8761，效果如下：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/79d1fd2acf5008e79aaa18086e7bf20d-122728" alt="Eureka自注册"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">00.893</span>  INFO <span class="number">25750</span> --- [freshExecutor-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">00.897</span>  INFO <span class="number">25750</span> --- [freshExecutor-<span class="number">0</span>] com.netflix.discovery.DiscoveryClient    : The response status is <span class="number">200</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">44</span>:<span class="number">01.041</span>  INFO <span class="number">25750</span> --- [      Thread-<span class="number">16</span>] c.n.e.registry.AbstractInstanceRegistry  : Registered instance EUREKA/<span class="number">192.168</span><span class="number">.3</span><span class="number">.108</span>:eureka:<span class="number">8761</span> <span class="function">with status <span class="title">UP</span> <span class="params">(replication=<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">2020-08-05 09:44:01.041  INFO 25750 --- [      Thread-16] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node</span></span><br><span class="line"><span class="function">2020-08-05 09:44:01.041  INFO 25750 --- [      Thread-16] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1</span></span><br><span class="line"><span class="function">2020-08-05 09:44:01.041  INFO 25750 --- [      Thread-16] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP</span></span><br><span class="line"><span class="function">2020-08-05 09:44:01.047  INFO 25750 --- [      Thread-16] e.s.EurekaServerInitializerConfiguration : Started Eureka Server</span></span><br><span class="line"><span class="function">2020-08-05 09:45:01.044  INFO 25750 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过终端可以看到自己注册到了服务中</li>
<li>使用register-with-eureka: false 可以关闭自注册，取消配置文件中的注释就看不到自注册了</li>
</ul>
</li>
<li><p><strong>修改配置，支持密码保护：</strong></p>
<ul>
<li><p>添加安全依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件（application.yml）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@127.0.0.1:8761/eureka/</span> <span class="comment"># 本身也是客户端，注册到自己的服务中心 username : password@</span></span><br><span class="line">    <span class="comment"># register-with-eureka: false # 关闭在注册中心的显示</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka</span> <span class="comment"># 修改应用名</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span> <span class="comment"># 修改端口号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安全配置（跨域问题，账户登录问题）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果不将csrf检验关闭，会出现其他服务无法注册进 eureka注册中心的情况</li>
<li>如果不添加父类的配置，则无法进行安全认证的情况</li>
</ul>
</li>
<li><p>客户端的注册地址要修改成<a href="http://admin:admin@127.0.0.1:8761/eureka/类似的地址" target="_blank" rel="noopener">http://admin:admin@127.0.0.1:8761/eureka/类似的地址</a></p>
</li>
</ul>
</li>
</ol>
<h2 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h2><ol>
<li><p>创建一个SpringCloud项目，选择Web下的Spring Web以及Spring Cloud Discovery下的Eureka Discovery Client；</p>
</li>
<li><p>开启注解@EnableDiscoveryClient：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaclientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaclientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置文件（application.yml）:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    hostname: test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaclient</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务，查看Eureka服务端网址<a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1968f2b0984809bf464876564eef9f14-116933" alt="Eureka客户端注册"></p>
</li>
<li><p>开发过程中可以关闭Eureka服务的自我保护模式，在注册中心配置application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 本身也是客户端，注册到自己的服务中心</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 关闭在注册中心的显示</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka</span> <span class="comment"># 修改应用名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span> <span class="comment"># 修改端口号</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Eureka高可用注册"><a href="#Eureka高可用注册" class="headerlink" title="Eureka高可用注册"></a>Eureka高可用注册</h2><ol>
<li><p>多个注册中心相互注册自己的客户端，修改application.yml即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个注册中心,注册中心配置文件</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端注册的时候要注册到<strong>每个注册中心</strong>，防止其中任何一个注册中心宕机都还是可用的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端配置文件</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    hostname: test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaclient</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/732ec4bbbf754ffaedb2cdc4f9bc93cf-137465" alt="Eureka1号注册中心"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a12149d58adf941cebceaca9406b2bf0-140073" alt="Eureka2号注册中心"></p>
</li>
<li><p>在开发的项目的正式发布环境中一般至少保证有两个注册中心。</p>
</li>
</ol>
<h2 id="ConfigServer服务"><a href="#ConfigServer服务" class="headerlink" title="ConfigServer服务"></a>ConfigServer服务</h2><ol>
<li><p>创建一个SpringCloud ConfigServer服务的项目，主要依赖如下（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud 整合 config-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud 整合 eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加Eureka客户端以及ConfigServer注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigserverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigserverApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在GitHub上创建一个github配置文件项目，可以公开或者私有，私有的话，SpringCloud的ConfigServer项目配置文件中就要输入密码；</p>
</li>
<li><p>修改应用配置文件（application.yml）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 使用ip</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span>  <span class="comment"># 修改了安全，这个会单独说明</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 使用ip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configserver</span>  <span class="comment"># 项目名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/WanderROS/cloudconfig</span> <span class="comment"># 配置git仓库的地址（最后不需要带/，否则会出现：No custom http config found for URL: XXX）</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">/</span> <span class="comment"># git仓库地址下的相对搜索地址（可用使用通配符），可以配置多个，用,分割。可以&#123;application&#125;实现按应用查配置</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">wanderros</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">******</span></span><br><span class="line">          <span class="attr">default-label:</span> <span class="string">master</span> <span class="comment">#选择分支</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置好了就可以直接启动配置服务器了，然后访问配置服务器的地址：<a href="http://localhost:8080/service-dev.json，注意这个是要在github配置中有，不然是访问不到的：" target="_blank" rel="noopener">http://localhost:8080/service-dev.json，注意这个是要在github配置中有，不然是访问不到的：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/67ff71ae722b14068bf54ec71013db35-35448" alt="github内容"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d3cd3bf9c1169c1c7a60a3a7c6d06cc9-21040" alt="config网址内容"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/90d1ce032ea695483d0bc7ae1a41c05e-120477" alt="config添加到注册中心"></p>
</li>
</ol>
<h2 id="ConfigClient"><a href="#ConfigClient" class="headerlink" title="ConfigClient"></a>ConfigClient</h2><ol>
<li><p>创建一个服务，使用ConfigServer的配置，项目主要依赖如下（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上添加Eureka客户端注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientserviceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientserviceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置文件bootstrap.yml，并添加内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service</span>   <span class="comment">#指定了配置文件的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8080/</span>  <span class="comment">#Config server的uri </span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>     <span class="comment">#指定的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>                      <span class="comment">#指定分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个RESTful控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hello&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">serviceHello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; ret = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ret.put(<span class="string">"test"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        ret.put(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">        ret.put(<span class="string">"status"</span>, <span class="string">"success"</span>);</span><br><span class="line">        ret.put(<span class="string">"hello"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意注入了配置服务器中的hello字段的内容，如果配置服务器没启动会报错的</li>
<li>还添加了@RefreshScope注解，这个是github配置文件修改后进行手动刷新之后必须要配置的（坑点之一），有用到配置服务器的内容的类都要添加</li>
<li>将所有的actuator接口都暴露出来，是为了POST actuator/refresh接口，这样就能够手动刷新服务，而无需重新启动服务就更新配置了</li>
</ul>
</li>
<li><p>启动服务，需要注意的是前面的EurekaServer服务以及ConfigServer服务都要是启动的，然后访问<a href="http://localhost:8081：">http://localhost:8081：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/771cc7a70145406b92427b148d684592-18014" alt="访问Service服务"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5393c5d00ad35c6d857235785be3cc7c-42683" alt="修改github配置文件"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f519dacdf40981351c0a16f9e3a7b881-110812" alt="POST刷新配置"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/dca44713c7e8eba2be6f80be99ea50a6-20091" alt="刷新后访问Service服务"></p>
</li>
</ol>
<h2 id="Feign服务"><a href="#Feign服务" class="headerlink" title="Feign服务"></a>Feign服务</h2><ol>
<li><p>创建这个项目主要为了使用Feign进行服务的访问，主要依赖配置如下（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是要添加的是spring-cloud-starter-openfeign，其他的会默认添加上，不要乱添加，否则会出现问题</li>
</ul>
</li>
<li><p>在启动类上添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置（使用配置服务，因此文件要为bootstrap.yml）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span>   <span class="comment">#指定了配置文件的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8080/</span>  <span class="comment">#Config server的uri</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>     <span class="comment">#指定的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>                      <span class="comment">#指定分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="comment"># feign熔断器开关</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span>  <span class="comment">#1秒</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#配置规则 随机</span></span><br><span class="line">    <span class="comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询</span></span><br><span class="line">    <span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment">#请求连接超时时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment">#请求处理的超时时间</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#对所有请求都进行重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment">#切换实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#对当前实例的重试次数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意fegin和hystrix结合的比较好，要配置服务降级的话，添加feign.hystrix.enabled=true即可</li>
<li>默认负载均衡是轮询，也是可以修改的</li>
</ul>
</li>
<li><p>配置Feign接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"myFeignClient"</span>)</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service"</span>,fallback=ServiceFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加降级类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFallback</span> <span class="keyword">implements</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"err"</span>,<span class="string">"服务崩溃"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置RESTful控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyFeignClient myFeignClient;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// @HystrixCommand(fallbackMethod = "getHello")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; ret=myFeignClient.hello();</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>,ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"启动熔断"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，前面的EurekaServer服务、Service服务以及ConfigServer服务都要是启动的，访问<a href="http://localhost:9000即可：">http://localhost:9000即可：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ff198fc22593c8807723ca380df04410-21126" alt="Feign服务"></p>
<ul>
<li><p>关闭Service服务，访问服务：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ff0e8a419bf054dbc4b6c5a06ef84d94-15952" alt="Feign服务降级"></p>
</li>
<li><p>EurekaServer展示页面：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bbb3d2ee423a1060a64b7cb96428814c-112832" alt="EurekaServer展示页面"></p>
</li>
</ul>
</li>
</ol>
<h2 id="RestTemplate服务"><a href="#RestTemplate服务" class="headerlink" title="RestTemplate服务"></a>RestTemplate服务</h2><ol>
<li><p>创建这个项目主要为了使用RestTemplate进行服务的访问，主要依赖配置如下（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上注解并添加RestTemplate的Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestconsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestconsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@LoadBalanced是Ribbon的注解，用于负载均衡</li>
<li>@EnableHystrix是开启Hystrix的注解，用于服务熔断</li>
</ul>
</li>
<li><p>添加配置（application.yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">restconsumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod=<span class="string">"consumerServiceRibbonFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ret=restTemplate.getForObject(<span class="string">"http://service/"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>,ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">consumerServiceRibbonFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>,<span class="string">"error"</span>);</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"err"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，前面的EurekaServer服务、Service服务以及ConfigServer服务都要是启动的，访问<a href="http://localhost:9500即可：">http://localhost:9500即可：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3d4b9eb96de8e029a50c38f583ccb396-23085" alt="restTemplate客户端"></p>
</li>
</ol>
<h2 id="zuul网关"><a href="#zuul网关" class="headerlink" title="zuul网关"></a>zuul网关</h2><ol>
<li><p>创建项目，添加主要依赖如下(不添加配置客户端)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上开启zuul服务以及Eureka客户端注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulgatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulgatewayApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件(application.yml)：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul</span>   <span class="comment">#指定了配置文件的应用名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">    <span class="attr">connect-timeout-millis:</span> <span class="number">15000</span> <span class="comment">#HTTP连接超时要比Hystrix的大</span></span><br><span class="line">    <span class="attr">socket-timeout-millis:</span> <span class="number">60000</span>   <span class="comment">#socket超时</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">120000</span>  <span class="comment">#请求处理的超时时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">30000</span>  <span class="comment">#请求连接的超时时间</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zuul服务，然后就可以通过Eureka中注册的服务名称添加接口地址访问服务了，比如：<a href="http://localhost:9001/consumer/" target="_blank" rel="noopener">http://localhost:9001/consumer/</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/99d9a830b1de9837c1e1b15756ffbd43-25199" alt="zuul访问服务"></p>
<ul>
<li><p>访问超时的服务时会崩溃，比如：<a href="http://localhost:9001/configserver/service-dev.json，因此添加了配置" target="_blank" rel="noopener">http://localhost:9001/configserver/service-dev.json，因此添加了配置</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">    <span class="attr">connect-timeout-millis:</span> <span class="number">15000</span> <span class="comment">#HTTP连接超时要比Hystrix的大</span></span><br><span class="line">    <span class="attr">socket-timeout-millis:</span> <span class="number">60000</span>   <span class="comment">#socket超时</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">120000</span>  <span class="comment">#请求处理的超时时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">30000</span>  <span class="comment">#请求连接的超时时间</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>超时错误：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9c0f83fb94488c19d9ee0594b84272d4-195280" alt="未配置超时效果"></p>
</li>
<li><p>修改配置后：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ad92ee11c226e8ca816f947e2182660a-28278" alt="配置之后"></p>
</li>
<li><p>网关默认的等待时间为1秒，时间到了还没有响应就会报错</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>创建一个服务过滤器serviceFilter继承自ZuulFilter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serviceFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;<span class="comment">// 定义filter的类型，有pre、route、post、error四种</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 定义filter的顺序，数字越小表示顺序越高，越先执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 表示是否需要执行该filter，true表示执行，false表示不执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123; <span class="comment">// filter需要执行的具体操作</span></span><br><span class="line">        <span class="comment">// filter需要执行的具体操作</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="keyword">if</span>(token==<span class="keyword">null</span>)&#123;</span><br><span class="line">            log.warn(<span class="string">"there is no request token"</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(<span class="string">"there is no request token"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"ok"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加玩上述过滤器之后，重启网关服务</li>
<li>现在所有经过网关的服务中必须添加参数token，否则不允许访问任何服务</li>
</ul>
</li>
<li><p>测试过滤器：</p>
<ul>
<li><p>不带token参数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/273facdf1cf67f2e34655f7fe6c24ed7-16109" alt="不带token参数"></p>
</li>
<li><p>带token参数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fa9f6138ca8d8607fb92a57f44d4596c-26046" alt="带token参数"></p>
</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SpringCloud相关的技术真的很繁琐，内容比较多，这里还有和SpringCloud相关的组件没有使用过，而且这些使用都是非常简单的实现，复杂的配置选项以及源码都没有阅读理解。在后续的学习过程中还需要不断扩充这部分的内容，感觉理解还是不够深入，无法比较好地去叙述这部分内容！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud Stream Quick Start</title>
    <url>/2020/08/27/SpringCloud-Stream-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringCloud Stream是⼀款用于构建消息驱动的微服务应用程序的轻量级框架。目前常见的消息中间件的配置都不太相同，使用也各异，而SpringCloud Stream类似于VFS（虚拟文件系统）一样屏蔽底层差异，提供统一的使用方式来发布订阅消息。本文主要介绍以及使用SpringCloud Stream进行消息的发布与订阅。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>消息中间件主要解决应用解耦、异步消息、流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。不同的中间件其实现方式，内部结构是不一样的，这就导致了SpringCloud Stream的出现。可以使用SpringCloud Stream来整合消息中间件，来降低系统和中间件的耦合性；</p>
</li>
<li><p>SpringCloud Stream 为一些开发商的消息中间件产品提供了个性化的自动化配置实现，并引入了发布-订阅、消费组、分区这三个核心概念。通过使用 SpringCloud Stream可以有效简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理！</p>
</li>
<li><p>SpringCloud Stream应用模型如下所示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7589631dca02dc399a94401b1ba974d3-16266" alt="SpringCloud Stream应用模型"></p>
<ul>
<li>可以看到SpringCloud Stream在应用和中间件之间通过Binder进行通信，从而避免了不同中间件的差异化</li>
</ul>
</li>
<li><p>SpringCloud Stream提供很多的消息中间件的集成，截止2020年8月支持的消息中间件有：</p>
<ul>
<li>RabbitMQ</li>
<li>Apache Kafka</li>
<li>Kafka Streams</li>
<li>Amazon Kinesis</li>
<li>Google PubSub（合作伙伴维护）</li>
<li>Solace PubSub+（合作伙伴维护）</li>
<li>Azure Event Hubs（合作伙伴维护）</li>
<li>Apache RocketMQ（合作伙伴维护）</li>
</ul>
</li>
<li><p>SpringCloud Stream特性：</p>
<ul>
<li>声明式编程模型</li>
<li>引入多种概念抽象</li>
<li>支持多种消息中间件</li>
</ul>
</li>
<li><p>在 SpringCloud Stream中，不同的消息中间件统一封装成binder的类型。有了这些binder之后，应用程序只需要跟binder打交道，并不需要去关注底层的细节。如果需要使用到消息中间件独有的特性，SpringCloud Stream 提供了一些配置，可以去做一个定制；</p>
</li>
<li><p>注解 @EnableBinding：应用中生产者、消费者与消息系统之间的桥梁，通过注解的方式去定义一个接口；</p>
</li>
<li><p>注解 @Input：注解要订阅的消息的方法，返回值类型是SubscribableChannel；</p>
</li>
<li><p>注解 @Output：注解要发送消息的方法，返回值类型是MessageChannel。使用MessageChannel 中的 send() 可以发送消息；</p>
</li>
<li><p>注解 @SendTo：注解在方法上，会将这个方法的返回值发送到特定的消息队列中去；</p>
</li>
<li><p>注解 @StreamListener：注解在方法上，会去消费指定的消息队列；</p>
</li>
<li><p>在现实的业务场景中，每一个微服务应用为了实现高可用和负载均衡，都会集群部署，消息可能会被重复消费。为了解决这个问题，SpringCloud Stream提供了消费组，通过配置即可指定组名；</p>
</li>
<li><p>SpringCloud Stream官方网址：<a href="https://spring.io/projects/spring-cloud-stream" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-stream</a></p>
</li>
</ol>
<h2 id="重点概念"><a href="#重点概念" class="headerlink" title="重点概念"></a>重点概念</h2><ol>
<li><strong>group</strong>：组内只有1个实例会消费消息，组内的每个实例都会有机会消费消息（轮询负载均衡）。如果不设置group，则stream会自动为每个实例创建匿名且独立的group，则每个实例都会消费消息；</li>
<li><strong>destination binder</strong>：与外部消息系统通信的组件，为构造 Binding提供了 2 个方法，分别是 bindConsumer 和 bindProducer ，用于构造生产者和消费者。Binder使SpringCloud Stream应用程序可以灵活地连接到中间件；</li>
<li><strong>destination binding</strong>：Binding 是连接应用程序跟消息中间件的桥梁，用于消息的消费和生产，由binder创建；</li>
<li><strong>partition</strong>：一个或多个生产者将数据发送到多个消费者，并确保有共同特征标识的数据由同一个消费者处理。默认是对消息进行hashCode，然后根据分区个数取余，所以对于相同的消息，总会落到同一个消费者上；</li>
</ol>
<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="SCS整合RabbitMQ"><a href="#SCS整合RabbitMQ" class="headerlink" title="SCS整合RabbitMQ"></a>SCS整合RabbitMQ</h2><ol>
<li><p>启动RabbitMQ的Docker镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbit rabbitmq:management</span><br></pre></td></tr></table></figure>

<ul>
<li>账户名：admin</li>
<li>密码：admin</li>
<li>Web管理页面端口15672</li>
</ul>
</li>
<li><p>创建一个SCS项目，添加主要依赖如下（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置（application.yml）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>  <span class="comment"># 注意，这里是5672，不是访问界面用的15672，这个是默认值</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 增加该配置，对队列进行分组。保证一个服务只有一台实例接受到消息。</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 监听的消息队列的名称。</span></span><br><span class="line">        <span class="attr">testMessage:</span></span><br><span class="line">          <span class="comment"># 服务的名称</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">order</span></span><br><span class="line">          <span class="comment"># 将发送的对象消息转化为json，方便调试</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建消息接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StreamClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"testMessage"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;  <span class="comment">//用于接受消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(<span class="string">"testMessage"</span>)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;  <span class="comment">//用于发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"responseMessage"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">responseinput</span><span class="params">()</span></span>;  <span class="comment">//用于接受消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建消息监听类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(StreamClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">StreamReceiver</span> </span>&#123;  <span class="comment">//消息接受类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(<span class="string">"testMessage"</span>)  <span class="comment">//监听testMessage这个消息队列, StreamClient类中必须定义相应的Input。</span></span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"responseMessage"</span>)  <span class="comment">//该注解会在消息处理完成后，向responseMessage这个队列发送消息。消息内容就是该方法的返回值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiver</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"完成消息处理"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@StreamListener</span>(<span class="string">"responseMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverResponse</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到转发消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamClient streamClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//org.springframework.messaging.support.MessageBuilder;</span></span><br><span class="line">        streamClient.output().send(MessageBuilder.withPayload(<span class="string">"it is test message."</span>).build()); <span class="comment">//构建消息并且发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，访问<a href="http://localhost:8080/sendMessage可以看到控制台输出消息，效果如下：" target="_blank" rel="noopener">http://localhost:8080/sendMessage可以看到控制台输出消息，效果如下：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1d8e27d9264c0209c663258e51935f26-171738" alt="消息输出"></p>
</li>
<li><p>因为设置了组，因此，该项目的多个实例每次只会有一个消费消息！</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SCS的使用远不止如此，还有许多高级的特性没有使用，后续有用到再详细学习！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud Hystrix仪表盘</title>
    <url>/2020/08/18/SpringCloud-Hystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在微服务架构中，为了保证微服务的高可用性，防止服务出现故障导致线程阻塞，而出现了熔断器模型，熔断器的状况反应了某个程序的可用性和健壮性。在SpringCloud中经常用到的熔断器组件是Hystrix，Hystrix的基础使用在SpringCloud Eureka Quick Start中已有涉及。Hystrix仪表盘（Hystrix Dashboard）是监控Hystrix的熔断器状况的一个组件，提供了数据监控和友好的图形化展示界面，这部分主要记录如何使用Hystrix Dashboard。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>SpringBoot版本：2.3.3</li>
<li>SpringCloud版本：Hoxton.SR7</li>
<li>IDEA版本：2019.02</li>
<li>Maven版本：3.6.3</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>Hystrix提供了对于微服务调用状态的监控信息，Hystrix Dashboard提供了断路器的监控面板，可以更好的监控服务和集群的状态。</li>
<li>功能：Hystrix Dashboard主要用来实时监控Hystrix的各项指标信息。通过Hystrix Dashboard反馈的实时信息，可以快速发现系统中存在的问题！</li>
<li>访问被@HystrixCommand注解的接口时，都会记录是否成功以及最近10s错误百分比、超时数、熔断数、线程拒绝数、错误请求数、失败/异常数、服务请求频率等相关信息；</li>
<li>Hystrix DashBoard作为监控软件一般单独开启一个服务，这里注解了环境信息是因为版本会导致一些异常情况的出现，在使用过程中出现的问题都会一一记录下来；</li>
<li>Hystrix Dashboard共支持三种不同的监控方式：<ul>
<li>默认的集群监控：<code>http://turbine-hostname:port/turbine.stream</code></li>
<li>指定的集群监控：<code>http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</code></li>
<li>单体应用的监控： <code>http://hystrix-app:port/actuator/hystrix.stream</code></li>
</ul>
</li>
</ol>
<h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><h3 id="DashBoard项目"><a href="#DashBoard项目" class="headerlink" title="DashBoard项目"></a>DashBoard项目</h3><ol>
<li><p>在SpringCloud Eureka Quick Start项目的基础上创建一个单独的DashBoard项目，添加主要依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hystrix以及hystrix-dashboard依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件application.yml中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 端口号，默认的已经被占用了</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 微服务名称配置以及eureka 客户端配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dashboard</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># actuator暴露所有端口</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># dashboard允许访问的接口组，必须要添加</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxyStreamAllowList:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hystrix.dashboard.proxyStreamAllowList必须要添加，否则无法监控到对应服务的状态</li>
</ul>
</li>
<li><p>配置启动类，添加Hystrix DashBoard注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DashboardApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目之后访问<a href="http://localhost:9600/hystrix/，效果如下：" target="_blank" rel="noopener">http://localhost:9600/hystrix/，效果如下：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9cb80a912abc3d61266d834c65be8260-135211" alt="Hystrix DashBoard界面"></p>
</li>
</ol>
<h3 id="Consumer项目改造"><a href="#Consumer项目改造" class="headerlink" title="Consumer项目改造"></a>Consumer项目改造</h3><ol>
<li><p>这个项目是之前的SpringCloud项目中的子项目Consumer，之前已经加了熔断组件Hystrix，因此依赖不需要怎么修改(pom.xml)，主要依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改启动类，添加重要的Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>registrationBean.addUrlMappings(“/actuator/hystrix.stream”);是为了接口地址和DashBoard上的保持一致，可以修改为其他的，比如registrationBean.addUrlMappings(“/hystrix.stream”);</li>
<li>feign的配置中已经使能了hystrix，因此没有添加注解@EnableHystrix</li>
</ul>
</li>
<li><p>配置文件（application.yml）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span>   <span class="comment">#指定了配置文件的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8080/</span>  <span class="comment">#Config server的uri</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>     <span class="comment">#指定的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>                      <span class="comment">#指定分支</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="comment"># feign熔断器开关</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span>  <span class="comment">#1秒</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#配置规则 随机</span></span><br><span class="line">    <span class="comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询</span></span><br><span class="line">    <span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment">#请求连接超时时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment">#请求处理的超时时间</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#对所有请求都进行重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment">#切换实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#对当前实例的重试次数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>java文件如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyFeignClient.java</span></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"myFeignClient"</span>)</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service"</span>,fallback=ServiceFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceFallback.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFallback</span> <span class="keyword">implements</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"err"</span>,<span class="string">"服务崩溃"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyFeignClient myFeignClient;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  @HystrixCommand(fallbackMethod = "getHello")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; ret=myFeignClient.hello();</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>,ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"启动熔断"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监控效果如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f24031e83ae023a0029aac5f927079b7-81636" alt="Hystrix DashBoard监控consumer"></p>
</li>
</ol>
<h3 id="restconsumer项目改造"><a href="#restconsumer项目改造" class="headerlink" title="restconsumer项目改造"></a>restconsumer项目改造</h3><ol>
<li><p>这个项目是之前的SpringCloud项目中的子项目restconsumer，之前已经加了熔断组件Hystrix，因此依赖不需要怎么修改(pom.xml)，主要依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改启动类，添加重要的Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestconsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestconsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">restconsumer</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制器（修改）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"consumerServiceRibbonFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest2"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"consumerServiceRibbonFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering2"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering2"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">consumerServiceRibbonFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, <span class="string">"error"</span>);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"err"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动x项目，然后访问接口<code>http://localhost:9500/rest</code>，<code>http://localhost:9500/rest2</code>，<code>http://localhost:9500/rest3</code>，多次刷新，然后在dashboard项目的界面添加监控<code>http://localhost:9500/actuator/hystrix.stream</code>，效果如下：</p>
<ul>
<li><p>注意要启动service等多个服务</p>
</li>
<li><p>启动service服务情况：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/259b1e96b606dd83481137bce2ddee83-83349" alt="Hystrix DashBoard监控restconsumer"></p>
</li>
<li><p>关闭service服务情况：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3b77d5450d7e534bab78d4f3f9b6ca14-52511" alt="Hystrix DashBoard监控restconsumer关闭Service"></p>
</li>
</ul>
</li>
<li><p>页面各部分代表的含义：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c779814896174c8c085b41e8fe4e7ffd-108497" alt="各部分含义"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Hystrix DashBoard能够更方便地观看断路器状态，也能看应用的负载以及健康程度等各种有用信息，几乎实时，虽然只是记录了单体应用的监控，后续如果有需要再学习集群的！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud之负载均衡</title>
    <url>/2020/08/08/SpringCloud%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>负载均衡是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。一个没有负载均衡的 web 架构类似下面这样：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/72d53920aa8e46ab55dbd28ff29c6158-14613" alt="没有负载均衡的架构"></p>
<p>带有负载均衡功能的架构可能如下所示：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/35ff5e196b0940021676361bbb294b51-24012" alt="有负载均衡的架构"></p>
<p>这部分主要介绍常见的负载均衡，以及如何使用负载均衡提供高可用服务。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>负载均衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的；</p>
</li>
<li><p>任何的负载均衡技术都要想办法建立某种一对多的映射机制：一个请求的入口映射到多个处理请求的节点，从而实现分而治之（Divide and Conquer）；</p>
</li>
<li><p>日常场景：在日常生活中经常免不了要去一些比较拥挤的地方，比如地铁站、火车站、电影院、银行等。无论是买票，还是排队入场，这些场所一般都会设置多个服务点或者入口的，如果没有人引导的话，大多数情况下，最近的入口会挤满人就会大大浪费资源；如果可以把这些排队的人很好的分散到各个入口的话会大大缩短排队时间；</p>
</li>
<li><p>网络场景：为了提升服务能力，很多服务采用集群部署，就像话剧院有多个入口一样。这时候，就需要一个协调者，来均衡的分配这些用户的请求，可以让用户的可以均匀的分派到不同的服务器上；</p>
</li>
<li><p>定义：<strong>将负载（工作任务、访问请求）进行平衡、分摊到多个操作单元（服务器、组件）上进行执行，解决高性能，单点故障（高可用），扩展性（水平伸缩）的一种解决方案；</strong></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a7b7c780f6b2a4d9d8e87cb2dc4ab99a-37718" alt="负载均衡原理"></p>
</li>
<li><p><strong>负载均衡是要在网络传输中做文章的</strong>，这样必须对网络的七层模型有所了解；</p>
</li>
<li><p>OSI是一个开放性的通信系统互连参考模型，是一个定义得非常好的协议规范，当然协议的实现不会完全按照OSI规范来实施。OSI模型有7层结构，每层都可以有几个子层，7层从上到下分别是 应用层、表示层、会话层、传输层、网络层、数据链路层、物理层；</p>
</li>
<li><p>在OSI七层模型中，高层次都是依赖于低层次的，层次越高，使用起来越方便，各个层的功能如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3c2ea551a8fa53076e7d2cbbd08fbc58-93389" alt="OSI七层功能"></p>
</li>
<li><p>计算机网络有关的概念：</p>
<ul>
<li>TELNET、HTTP、FTP、NFS、SMTP、DNS等属于应用层的协议</li>
<li>TCP、UDP、SPX等属于传输层的协议</li>
<li>IP、IPX等属于网络层的协议</li>
<li>ATM、FDDI等属于数据链路层的协议</li>
</ul>
</li>
<li><p>根据OSI分层模型对负载均衡进行分类：</p>
<ul>
<li>工作在应用层的负载均衡，通常称之为七层负载均衡</li>
<li>工作在传输层的负载均衡，通常称之为四层负载均衡</li>
<li>工作在数据链路的负载均衡，通常称之为二层负载均衡</li>
</ul>
</li>
<li><p><strong>二层负载均衡</strong>对外依然提供一个VIP（虚拟IP），但是集群中不同的机器采用不同的IP地址。当负载均衡器接受到请求之后，根据不同的负载均衡算法，通过IP将请求转发至不同的真实服务器；</p>
</li>
<li><p><strong>四层负载均衡</strong>工作在传输层（TCP/UDP协议），TCP/UDP协议除了包含源IP、目标IP以外，还包含源端口号及目的端口号。四层负载均衡器在接受到客户端请求后，以后通过修改数据包的地址信息（IP+端口号）将流量转发到应用服务器；</p>
</li>
<li><p><strong>七层负载均衡</strong>工作在应用层，应用层协议较多，常用的有http、radius、dns等。七层负载均衡能够基于这些协议来负载，这些应用层协议中会包含很多有意义的内容，比如同一个Web服务器的负载均衡，除了根据IP和端口进行负载外，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡；</p>
</li>
<li><p>负载均衡根据实现方式来分有硬件负载均衡和软件负载均衡；硬件负载均衡器有F5和A10，非常贵。市面上有很多开源的负载均衡的工具或软件，Nginx、LVS、HAProxy是目前使用最广泛的三种负载均衡软件；</p>
</li>
<li><p>LVS（Linux Virtual Server）主要用来做四层负载均衡，通过LVS提供的负载均衡技术和Linux操作系统实现一个高性能、高可用的服务器群集，具有良好可靠性、可扩展性和可操作性；</p>
</li>
<li><p>Nginx主要用来做七层负载均衡，能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，还能进行负载均衡以及HTTP缓存；</p>
</li>
<li><p>HAProxy主要用来做七层负载均衡，能提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理；</p>
</li>
<li><p>单点负载均衡器如果宕机了，则整个系统无法提供服务，常用的方案是使用多个负载均衡器实现负载均衡器，将第二个以上的负载均衡器连接到第一个上，从而形成一个集群。一个使用浮动 IP 的负载均衡架构示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/802345231a8459cb0834a83df042da40-618422" alt="浮动IP负载均衡器"></p>
</li>
</ol>
<h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><ol>
<li>负载均衡算法是负载均衡的核心，负载均衡服务器在决定将请求转发到具体哪台真实服务器的时候是通过负载均衡算法来实现的；</li>
<li>负载均衡算法可以分为两类：静态负载均衡算法和动态负载均衡算法；</li>
<li>静态负载均衡算法包括：轮询、比率、优先权<ul>
<li>轮询（Round Robin）——将请求按照顺序循环地分发给每个服务器</li>
<li>比率（Ratio）——给每个服务器分配一个加权值，根椐这个权值把用户的请求分配到每个服务器</li>
<li>优先权（Priority）——将所有服务器分组，给每个组定义优先权。BIG-IP 用户的请求，分配给优先级最高的服务器组（在同一组内，采用轮询或比率算法，分配用户的请求）；当最高优先级中所有服务器出现故障，BIG-IP 才将请求送给次优先级的服务器组</li>
</ul>
</li>
<li>动态负载均衡算法包括: 最少连接数、最快响应速度、观察方法、预测法、动态性能分配、动态服务器补充、服务质量、服务类型、规则模式<ul>
<li>最少连接数（Least Connection）——传递新的连接给那些进行最少连接处理的服务器</li>
<li>最快模式（Fastest）——传递连接给那些响应最快的服务器</li>
<li>观察模式（Observed）——连接数目和响应时间以这两项的最佳平衡为依据为新的请求选择服务器</li>
<li>预测模式（Predictive）——BIG-IP利用收集到的服务器当前的性能指标，进行预测分析，选择一台服务器在下一个时间片内，其性能将达到最佳的服务器响应用户的请求</li>
<li>动态性能分配(Dynamic Ratio-APM)——BIG-IP 收集应用程序和应用服务器的各项性能参数，动态调整流量分配</li>
<li>动态服务器补充(Dynamic Server Act.)——当主服务器群中因故障导致数量减少时，动态地将备份服务器补充至主服务器群</li>
<li>服务质量(QoS）——按不同的优先级对数据流进行分配</li>
<li>服务类型(ToS)——按不同的服务类型（在Type of Field中标识）负载均衡对数据流进行分配</li>
<li>规则模式——用户可以针对不同的数据流设置导向规则</li>
</ul>
</li>
<li>不同的负载均衡服务器会选择不同的算法，不同的负载均衡器也支持不同的算法，根据业务需求进行配置即可！</li>
</ol>
<h2 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ol>
<li><p>nginx通过从upstream模板定义的后端服务器列表中选取一台服务器接收用户的请求从而达到负载均衡；</p>
</li>
<li><p>一个基本的upstream模块如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在upstream模块配置完成后，要让指定的访问反向代理到服务器列表，格式如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">location ~ .*$ &#123;</span><br><span class="line">　　index index.jsp index.html;</span><br><span class="line">　　proxy_pass http://[服务器组名称];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上述配置就完成了最基础的负载均衡，但是并不满足实际的需求。目前Nginx的upstream模块支持6种负载均衡策略（算法）：轮询（默认方式）、weight（权重方式）、ip_hash（依据ip分配方式）、least_conn（最少连接方式）、fair（第三方提供的响应时间方式）、url_hash（第三方通过的依据URL分配方式）</p>
</li>
</ol>
<h3 id="轮询-默认"><a href="#轮询-默认" class="headerlink" title="轮询(默认)"></a>轮询(默认)</h3><ol>
<li><p>upstream模块默认的负载均衡策略，每个请求会按时间顺序平均分配到不同的后端服务器；</p>
</li>
<li><p>参数：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">max_fails</td>
<td align="center">在fail_timeout参数设置的时间内最大失败次数。如果在这个时间内，所有该服务器的请求都失败了，那么认为该服务器停机</td>
</tr>
<tr>
<td align="center">fail_time</td>
<td align="center">服务器被认为停机的时长，默认10s</td>
</tr>
<tr>
<td align="center">backup</td>
<td align="center">标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里</td>
</tr>
<tr>
<td align="center">down</td>
<td align="center">标记服务器永久停机</td>
</tr>
<tr>
<td align="center">fail_timeout</td>
<td align="center">与max_fails结合使用</td>
</tr>
</tbody></table>
</li>
<li><p>注意：</p>
<ul>
<li>down标记的服务器会自动剔除</li>
<li>缺省就是轮询</li>
<li>此策略适合服务器配置无状态且短平块的服务使用</li>
</ul>
</li>
</ol>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><ol>
<li><p>在轮询策略的基础上指定轮询的几率，在轮询的基础上新增了一个weight的参数，此参数指定轮询的几率，值为number；</p>
</li>
<li><p>upstream模块配置模板如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　server [IP地址]:[端口号] weight=2;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有weight参数的服务器默认为1，weight的数值与访问比例成正比，所有weight值的总和为一个循环单位，服务器自身的weight值为循环单位内的轮询次数；</p>
</li>
<li><p>注意：</p>
<ul>
<li>权重越高分配到的请求越多</li>
<li>此策略可以和least_conn策略、iphash策略结合使用</li>
<li><strong>此策略比较适合服务器硬件配置差距较大的情况</strong></li>
</ul>
</li>
</ol>
<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><ol>
<li><p>依据ip分配方式，指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端请求一致发送到相同的服务器，以保证session会话。每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题；</p>
</li>
<li><p>upstream模块配置模板如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　ip_hash;</span><br><span class="line">　　server [IP地址]:[端口号] weight=2;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>nginx1.3.1之前的版本不能在ip_hash中使用权重（weight）</li>
<li>ip_hash不能与backup同时使用</li>
<li><strong>此策略适合有状态服务的程序，比如session</strong></li>
<li>当有服务器需要剔除，必须手动down掉</li>
</ul>
</li>
</ol>
<h3 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h3><ol>
<li><p>把请求发给链接数最少的后端服务器。有些请求占用的时间很长，会导致其所在的后端负载较高，在这种情况下使用这种方式可以达到更好的负载均衡效果；</p>
</li>
<li><p>upstream模块配置模板如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　least_conn;</span><br><span class="line">　　server [IP地址]:[端口号] weight=2;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>此策略适合请求处理时间长短不一造成的服务器过载情况</li>
</ul>
</li>
</ol>
<h3 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h3><ol>
<li><p>响应时间方式，按照服务器端的响应时间来分配请求，响应时间短的优先分配；</p>
</li>
<li><p>upstream模块配置模板如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　server [IP地址]:[端口号] weight=2;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">　　fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>需要安装第三方插件</li>
</ul>
</li>
</ol>
<h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h3><ol>
<li><p>url分配方式，按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用；</p>
</li>
<li><p>同一个资源多次请求可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再次收到请求，就可以在缓存中读取；</p>
</li>
<li><p>upstream模块配置模板如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream [服务器组名称]&#123;</span><br><span class="line">　　hash $request_uri;</span><br><span class="line">　　server [IP地址]:[端口号] weight=2;</span><br><span class="line">　　server [IP地址]:[端口号];</span><br><span class="line">　　....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>需要安装第三方插件</li>
</ul>
</li>
</ol>
<h3 id="样例配置（实体机）"><a href="#样例配置（实体机）" class="headerlink" title="样例配置（实体机）"></a>样例配置（实体机）</h3><ol>
<li><p>nginx.conf（部分）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">	##</span><br><span class="line">	# Basic Settings</span><br><span class="line">	##</span><br><span class="line"></span><br><span class="line">	sendfile on;</span><br><span class="line">	tcp_nopush on;</span><br><span class="line">	tcp_nodelay on;</span><br><span class="line">	keepalive_timeout 65;</span><br><span class="line">	types_hash_max_size 2048;</span><br><span class="line">	# server_tokens off;</span><br><span class="line"></span><br><span class="line">	# server_names_hash_bucket_size 64;</span><br><span class="line">	# server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">	include /etc/nginx/mime.types;</span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">	##</span><br><span class="line">	# SSL Settings</span><br><span class="line">	##</span><br><span class="line"></span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">	##</span><br><span class="line">	# Logging Settings</span><br><span class="line">	##</span><br><span class="line"></span><br><span class="line">	upstream org.tonny.balance &#123;</span><br><span class="line">        server 192.168.31.171:8081 weight=1;</span><br><span class="line">        server 192.168.31.171:8089 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       log_format main '&#123;"@timestamp":"$time_iso8601",'</span><br><span class="line">	       '"host": "$server_addr",'</span><br><span class="line">	       '"client": "$remote_addr",'</span><br><span class="line">	       '"size": $body_bytes_sent,'</span><br><span class="line">	       '"responsetime": $request_time,'</span><br><span class="line">	       '"domain": "$host",'</span><br><span class="line">	       '"url":"$request_uri",'</span><br><span class="line">	       '"referer": "$http_referer",'</span><br><span class="line">	       '"agent": "$http_user_agent",'</span><br><span class="line">	       '"status":"$status",'</span><br><span class="line">	       '"x_forwarded_for":"$http_x_forwarded_for"&#125;';</span><br><span class="line"></span><br><span class="line">	access_log /var/log/nginx/access.log main;</span><br><span class="line">	error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">	##</span><br><span class="line">	# Gzip Settings</span><br><span class="line">	##</span><br><span class="line"></span><br><span class="line">	gzip on;</span><br><span class="line"></span><br><span class="line">	# gzip_vary on;</span><br><span class="line">	# gzip_proxied any;</span><br><span class="line">	# gzip_comp_level 6;</span><br><span class="line">	# gzip_buffers 16 8k;</span><br><span class="line">	# gzip_http_version 1.1;</span><br><span class="line">	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">	##</span><br><span class="line">	# Virtual Host Configs</span><br><span class="line">	##</span><br><span class="line"></span><br><span class="line">	include /etc/nginx/conf.d/*.conf;</span><br><span class="line">	include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>site-available/default（重要部分）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">	# SSL configuration</span><br><span class="line">	#</span><br><span class="line">	# listen 443 ssl default_server;</span><br><span class="line">	# listen [::]:443 ssl default_server;</span><br><span class="line">	#</span><br><span class="line">	# Note: You should disable gzip for SSL traffic.</span><br><span class="line">	# See: https://bugs.debian.org/773332</span><br><span class="line">	#</span><br><span class="line">	# Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class="line">	# See: https://bugs.debian.org/765782</span><br><span class="line">	#</span><br><span class="line">	# Self signed certs generated by the ssl-cert package</span><br><span class="line">	# Don't use them in a production server!</span><br><span class="line">	#</span><br><span class="line">	# include snippets/snakeoil.conf;</span><br><span class="line"></span><br><span class="line">	root /var/www/html;</span><br><span class="line"></span><br><span class="line">	# Add index.php to the list if you are using PHP</span><br><span class="line">	index index.html index.htm index.nginx-debian.html;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		# First attempt to serve request as file, then</span><br><span class="line">		# as directory, then fall back to displaying a 404.</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">		#  visit mapping</span><br><span class="line">		proxy_pass   http://org.tonny.balance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	# pass PHP scripts to FastCGI server</span><br><span class="line">	#</span><br><span class="line">	#location ~ \.php$ &#123;</span><br><span class="line">	#	include snippets/fastcgi-php.conf;</span><br><span class="line">	#</span><br><span class="line">	#	# With php-fpm (or other unix sockets):</span><br><span class="line">	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span><br><span class="line">	#	# With php-cgi (or other tcp sockets):</span><br><span class="line">	#	fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">	#&#125;</span><br><span class="line"></span><br><span class="line">	# deny access to .htaccess files, if Apache's document root</span><br><span class="line">	# concurs with nginx's one</span><br><span class="line">	#</span><br><span class="line">	#location ~ /\.ht &#123;</span><br><span class="line">	#	deny all;</span><br><span class="line">	#&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li>upstream模板是配置在http中的</li>
<li>log_format模板也是配置在http中的</li>
<li>niginx版本为nginx/1.18.0 (Ubuntu)</li>
</ul>
</li>
</ol>
<h3 id="Docker上负载均衡"><a href="#Docker上负载均衡" class="headerlink" title="Docker上负载均衡"></a>Docker上负载均衡</h3><ol>
<li><p>下载nginx官方镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行nginx镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入镜像中进行配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps </span></span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">deb661196722        nginx               "/docker-entrypoint.…"   19 hours ago        Up 18 hours         0.0.0.0:8089-&gt;80/tcp   cool_torvalds</span><br><span class="line">d68d1fd15626        nginx               "/docker-entrypoint.…"   19 hours ago        Up 18 hours         0.0.0.0:8080-&gt;80/tcp   trusting_lovelace</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it d68d1fd15626 bash</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置nginx实例的配置，然后重启(真机类似)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart d68d1fd15626</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试输入地址<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
</li>
</ol>
<h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><ol>
<li>Ribbon 是Netflix 公司开源的一款基于客户端的负载均衡组件，是Spring Cloud大家庭中非常重要的一个模块。Ribbon应该也是整个Spring Cloud大家庭中相对而言比较复杂的模块，直接影响到服务调度的质量和性能；</li>
<li>掌握Ribbon有助于了解在分布式微服务集群工作模式下，服务调度应该考虑的各个环节；</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud服务链路追踪</title>
    <url>/2020/08/18/SpringCloud%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>微服务架构是通过业务来划分服务的，应用之间通过REST调用，对外则暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能。如果链路上任何一个服务出现问题或者网络超时，都会导致接口调用失败，随着业务的不断扩张，服务之间互相调用会越来越复杂，定位出现问题的服务就越来越复杂，因此在微服务架构中非常需要进行链路追踪。在SpringCloud中使用SpringCloud Sleuth来提供分布式系统的链路追踪，本文将进行这部分的内容的记录。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol>
<li>SpringBoot版本：2.3.3</li>
<li>SpringCloud版本：Hoxton.SR7</li>
<li>IDEA版本：2019.02</li>
<li>Maven版本：3.6.3</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>微服务现状：</p>
<ul>
<li>随着业务的发展，单体架构变为微服务架构，并且系统规模也变得越来越大，各微服务间的调用关系也变得越来越复杂</li>
<li>在微服务的应用中，一个由客户端发起的请求在后端系统中会经过多个不同的微服务调用来协同产生最后的请求结果</li>
<li>在复杂的微服务架构系统中，几乎每一个前端请求都会形成一个复杂的分布式服务调用链路，在每条链路中任何一个依赖服务出现延迟超时或者错误都有可能引起整个请求最后的失败</li>
</ul>
</li>
<li><p>微服务跟踪(sleuth)在整个分布式系统中能跟踪一个用户请求的过程(包括数据采集，数据传输，数据存储，数据分析，数据可视化)，捕获这些跟踪数据，就能构建微服务的整个调用链的视图！</p>
</li>
<li><p>SpringCloud Sleuth特点：</p>
<table>
<thead>
<tr>
<th>特点</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>提供链路追踪</td>
<td>通过sleuth可以很清楚的看出一个请求经过了哪些服务， 可以方便的理清服务间的调用关系</td>
</tr>
<tr>
<td>性能分析</td>
<td>通过sleuth可以很方便的看出每个请求的耗时， 分析出哪些服务调用比较耗时，当服务调用的耗时随着请求量的增大而增大时，也可以对服务的扩容提供一定的提醒作用</td>
</tr>
<tr>
<td>数据分析优化链路</td>
<td>对于频繁地调用一个服务或者并行地调用等， 可以针对业务做一些优化措施</td>
</tr>
<tr>
<td>可视化</td>
<td>对于程序未捕获的异常，可以在zipkpin界面上看到</td>
</tr>
</tbody></table>
</li>
<li><p>SpringCloud Sleuth官网文档地址：<a href="https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/#overview" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/#overview</a></p>
</li>
<li><p>调用链路：一个请求过来，调用服务，一条链路通过Trace Id唯一标识，Span标识发起的请求，各Span通过parent id关联起来</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/aca290210457f33d8488424c5bcfc16d-84961" alt="调用链路"></p>
</li>
<li><p>zipkin的作用：</p>
<ul>
<li>zipkin为分布式链路调用监控系统，聚合各业务系统调用延迟数据，达到链路调用监控跟踪</li>
<li>zipkin通过采集跟踪数据可以帮助开发者深入了解在分布式系统中某一个特定的请求时如何执行的。假如现在有一个用户请求超时，就可以将这个超时的请求调用链展示在界面当中，可以很快度的定位到导致响应很慢的服务究竟是什么，如果对这个服务细节也很很清晰，那么还可以定位是服务中的哪个问题导致超时</li>
<li>zipkin系统让开发者可通过一个Web前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈</li>
</ul>
</li>
<li><p>zipkin核心数据结构：</p>
<ul>
<li>Span——一次链路调用 (可以是RPC，DB等没有特定的限制) 创建一个span，通过一个64位ID标识</li>
<li>Trace——类似于树结构的Span集合，表示一条调用链路，存在唯一标识traceId</li>
<li>Annotation——用于定位一个request的开始和结束，cs/sr/ss/cr含有额外的信息<ul>
<li>cs（Client Start）表示客户端发起请求一个span的开始</li>
<li>sr（Server Receive）表示服务端收到请求</li>
<li>ss（Server Send）表示服务端完成处理，并将结果发送给客户端</li>
<li>cr（Client Received）表示客户端获取到服务端返回信息一个span的结束</li>
</ul>
</li>
<li>BinaryAnnotation——用于提供一些额外信息</li>
</ul>
</li>
</ol>
<h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><h3 id="ZipkinServer"><a href="#ZipkinServer" class="headerlink" title="ZipkinServer"></a>ZipkinServer</h3><ol>
<li><p>官方不推荐自己搭建ZipkinServer，推荐下载jar包或者Docker进行ZipkinServer的部署；</p>
</li>
<li><p>Jar包下载地址：<code>https://dl.bintray.com/openzipkin/maven/io/zipkin/zipkin-server/</code>，下载带有exec字段的jar包在本地运行。比如下载的zipkin-server-2.21.6-exec.jar；</p>
</li>
<li><p>直接运行jar包，默认端口9411：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar</span><br></pre></td></tr></table></figure>

<ul>
<li><p>输出信息：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                  oo</span><br><span class="line">                 oooo</span><br><span class="line">                oooooo</span><br><span class="line">               oooooooo</span><br><span class="line">              oooooooooo</span><br><span class="line">             oooooooooooo</span><br><span class="line">           ooooooo  ooooooo</span><br><span class="line">          oooooo     ooooooo</span><br><span class="line">         oooooo       ooooooo</span><br><span class="line">        oooooo   o  o   oooooo</span><br><span class="line">       oooooo   oo  oo   oooooo</span><br><span class="line">     ooooooo  oooo  oooo  ooooooo</span><br><span class="line">    oooooo   ooooo  ooooo  ooooooo</span><br><span class="line">   oooooo   oooooo  oooooo  ooooooo</span><br><span class="line">  oooooooo      oo  oo      oooooooo</span><br><span class="line">  ooooooooooooo oo  oo ooooooooooooo</span><br><span class="line">      oooooooooooo  oooooooooooo</span><br><span class="line">          oooooooo  oooooooo</span><br><span class="line">              oooo  oooo</span><br><span class="line"></span><br><span class="line">     ________ ____  _  _____ _   _</span><br><span class="line">    |__  /_ _|  _ \| |/ /_ _| \ | |</span><br><span class="line">      / / | || |_) | ' / | ||  \| |</span><br><span class="line">     / /_ | ||  __/| . \ | || |\  |</span><br><span class="line">    |____|___|_|   |_|\_\___|_| \_|</span><br><span class="line"></span><br><span class="line">:: version 2.21.6 :: commit 263c266 ::</span><br><span class="line"></span><br><span class="line">2020-08-18 15:40:54.690  INFO 15507 --- [oss-http-*:9411] c.l.a.s.Server                           : Serving HTTP at /0:0:0:0:0:0:0:0:9411 - http://127.0.0.1:9411/</span><br></pre></td></tr></table></figure>
</li>
<li><p>界面如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/72da12603ce4232ac0671714a8f113b5-189879" alt="zipkin界面"></p>
</li>
</ul>
</li>
<li><p>Jar包运行参数设置：</p>
<ul>
<li><p>端口设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar --server.port=8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>RabbitMQ配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar --zipkin.collector.rabbitmq.addresses=192.168.3.108:5672 --zipkin.collector.rabbitmq.username=admin --zipkin.collector.rabbitmq.password=admin</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Docker镜像下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull openzipkin/zipkin</span><br></pre></td></tr></table></figure>
</li>
<li><p>Docker运行zipkin Server镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name zipkin -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>

<ul>
<li><p>带有RabbitMQ参数的运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name zipkin -d -p 9411:9411 -e RABBIT_ADDRESSES=192.168.3.108:5672 -e RABBIT_USER=admin -e RABBIT_PASSWORD=admin openzipkin/zipkin</span><br></pre></td></tr></table></figure>
</li>
<li><p>RabbitMQ服务器运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbit rabbitmq:management</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="添加Sleuth以及zipkin支持"><a href="#添加Sleuth以及zipkin支持" class="headerlink" title="添加Sleuth以及zipkin支持"></a>添加Sleuth以及zipkin支持</h3><ol>
<li><p>在SpringCloud Eureka的基础上添加SpringCloud Sleuth支持，添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span> <span class="comment"># 默认0.1</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置完成重启项目之后日志输出类似下面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2020-08-18 16:38:56.940 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] c.n.e.r.r.AlwaysMatchInstanceStatusRule  : Returning the default instance status UP for instance 10.157.14.39:configserver</span><br><span class="line">2020-08-18 16:38:56.940 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] c.n.eureka.resources.InstanceResource    : Found (Renew): CONFIGSERVER - 10.157.14.39:configserver; reply status=200</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] o.s.s.w.header.writers.HstsHeaderWriter  : Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@4b54c259</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] o.s.s.w.a.ExceptionTranslationFilter     : Chain processed normally</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] s.s.w.c.SecurityContextPersistenceFilter : SecurityContextHolder now cleared, as request processing completed</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用consumer接口调用服务，然后刷新zipkin Server接口获得效果如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cd051ef43402ca06888e53d467fb16b5-132327" alt="Zipkin追踪"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/18b8261fb3f04e5ac7557732a19c203e-249606" alt="链路详情"></p>
</li>
<li><p>配置RabbitMQ的话，需要做如下改动：</p>
<ul>
<li><p>添加RabbitMQ依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">sender:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">queue:</span> <span class="string">zipkin</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">direct:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然实现了链路追踪，但是具体的使用还是以实际工程展现优势！仅仅在测试过程中使用并没有感觉到太大的用处，但是这部分的功能应该是非常重要的！</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringSecurity&amp;SpringDataJPA快速整合</title>
    <url>/2020/07/03/SpringSecurity-SpringDataJPA%E5%BF%AB%E9%80%9F%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="创建一个SpringSecurity项目"><a href="#创建一个SpringSecurity项目" class="headerlink" title="创建一个SpringSecurity项目"></a>创建一个SpringSecurity项目</h2><ol>
<li><p>重要的依赖（pom.xml）:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件配置JPA（application.properties）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server.port=80</span><br><span class="line"></span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=12345678</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Entity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String login;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> login;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogin</span><span class="params">(String login)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.login = login;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建自定义JpaRepository：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> User <span class="title">findOneByLogin</span><span class="params">(String login)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建SpringSecurity中的自定义UserDetailsService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDetailsService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String login)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 查询用户</span></span><br><span class="line">        User userFromDatabase = userRepository.findOneByLogin(login);</span><br><span class="line">        <span class="keyword">if</span> (userFromDatabase == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//log.warn("User: &#123;&#125; not found", login);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"User "</span> + login + <span class="string">" was not found in db"</span>);</span><br><span class="line">            <span class="comment">//这里找不到必须抛异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 设置角色</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 角色必须以`ROLE_`开头，数据库中没有，则在这里加</span></span><br><span class="line">        GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span>+userFromDatabase.getRole());</span><br><span class="line">        grantedAuthorities.add(grantedAuthority);</span><br><span class="line">        <span class="keyword">for</span>(GrantedAuthority test:grantedAuthorities)&#123;</span><br><span class="line">            log.error(<span class="string">"111..."</span>+test.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//log.error(userFromDatabase.getPassword());</span></span><br><span class="line">        log.error(login);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(login,</span><br><span class="line">                userFromDatabase.getPassword(), grantedAuthorities);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里只做了单角色添加，实际上是可以进行多角色添加，看代码就知道如何添加了；</li>
<li><strong>数据库里配置的角色需要以”ROLE_”开头，比如”ROLE_test”，对应着hasRole(“test”);</strong></li>
</ul>
</li>
<li><p>修改安全相关的配置（因为是在基础项目上修改的）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/home"</span>,<span class="string">"/test"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/hello/**"</span>).hasRole(<span class="string">"test"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .usernameParameter(<span class="string">"user"</span>)</span><br><span class="line">                .passwordParameter(<span class="string">"passwd"</span>)</span><br><span class="line">               <span class="comment">// .defaultSuccessUrl("/",true)</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling().accessDeniedPage(<span class="string">"/403"</span>);</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.rememberMe().tokenValiditySeconds(<span class="number">120</span>).key(<span class="string">"key"</span>);</span><br><span class="line">        http</span><br><span class="line">            .logout().logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/"</span>)</span><br><span class="line">                .deleteCookies(<span class="string">"JSESSIONID"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置自定义的userDetailsService</span></span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line"><span class="comment">        auth</span></span><br><span class="line"><span class="comment">                .inMemoryAuthentication()</span></span><br><span class="line"><span class="comment">                .passwordEncoder(new BCryptPasswordEncoder()).withUser("user").password(new BCryptPasswordEncoder().encode("123456")).roles("test");</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加模板页面：</p>
<ul>
<li>login.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.error&#125;"</span>&gt;</span></span><br><span class="line">    Invalid username and password.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.logout&#125;"</span>&gt;</span></span><br><span class="line">    You have been logged out.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户账号 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户密码 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"remeber-me"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>home.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/hello&#125;"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to see a greeting.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hello.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>Hello [[$&#123;#httpServletRequest.remoteUser&#125;]]!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>403.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Access Denied<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>用户 [[$&#123;#httpServletRequest.remoteUser&#125;]]，你没有权限访问！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用测试生成加密后的密码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestsecApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123456"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">2020-07-03 15:36:04.513  INFO 6192 --- [           main] DeferredRepositoryInitializationListener : Spring Data repositories initialized!</span></span><br><span class="line"><span class="comment">2020-07-03 15:36:04.520  INFO 6192 --- [           main] c.w.t.testsec.TestsecApplicationTests    : Started TestsecApplicationTests in 4.673 seconds (JVM running for 6.457)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2020-07-03 15:36:04.757  INFO 6192 --- [           main] c.w.t.testsec.TestsecApplicationTests    : $2a$10$H8Wb28F9XUiS.TkG0h2RuebIZYT33AqrHMJmb7uXPiRmBHR/MBQ4S</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库中插入数据：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f4ab68f04d34364e13b69161feb627f7-75749" alt="数据库"></p>
</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><p>打开网址：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e644505681de43238438f5428a7f2d90-110806" alt="主页"></p>
</li>
<li><p>登录界面：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/04ee0085a9f3e6b58df69d5c4886e74c-122849" alt="登录"></p>
</li>
<li><p>admin登录（密码：123456）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c9e84af6043130c0388098480c232b48-105665" alt="admin登录"></p>
</li>
<li><p>user1登录（密码：123456）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3897d0a3fbae2a6047402b6c2214aa7e-133085" alt="user1登录"></p>
</li>
<li><p>可以访问<a href="http://localhost/test查看用户登录信息，比如admin：" target="_blank" rel="noopener">http://localhost/test查看用户登录信息，比如admin：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2fd7da86d68ee32807c5dbc45a61d206-118171" alt="admin信息"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Team Code</title>
    <url>/2020/04/21/Team-Code/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>想必大家都知道，一个人也可以进行软件开发 ，自由软件以及共享 软件的开发人员大多都是个人开发者  。在软件规模较小的前提下，全部流程由一个人把控还是可能的。但是如果软件的规模超过一定程度 ，由多人组成团队进行开发是非常普遍的。团队开发会遇到格式各样的问题，比如多人编写同一个产品的代码造成开发内容冲突等。             </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="团队开发管理工具"><a href="#团队开发管理工具" class="headerlink" title="团队开发管理工具"></a>团队开发管理工具</h2><ol>
<li>用于高效推进团队开发的各类工具和方法数量众多 ，工具的话有版本管理系统（ Version Control System， VCS）和缺陷管理系统（Issue Tracking System、 Bug Tracking System， ITS/BTS）；方法的话有持续集成（ Continuous Integration， CI）以及持续交付（ Continuous Delivery， CD）；         </li>
<li>项目混乱是由于某些问题造成的，其中一个比较严重的问题就是没有共享信息及有效管理课题的机制 ；    </li>
<li>重构（ refactoring）是指计算机编程中，在不影响输出结果的前提下对代码内部的构造进行整理；       </li>
<li>使用缺陷管理系统而非邮件对课题、要做的任务、发生的故障等进行统筹管理，其中，对优先度和重要度进行明确地管理，以及清楚地掌握每一个 bug 票的状态；    </li>
<li>首先要正确使用版本管理系统，避免无意中将他人的修正覆盖 ，其次要合理地管理分支，明确正式环境中使用的是哪个分支，最近修正bug 所用的是哪个分支，新功能开发使用的是哪个分支；      </li>
<li>通过合理地管理标签，将某个时间点发布状态的截面保存下来，这样无论多久之前的状态都能够进行回滚；       </li>
<li>用版本管理系统来统筹数据库的变更管理和环境相关的配置文件的管理；</li>
</ol>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><ol>
<li><p>合理、有效地利用版本管理系统是顺利进行团队开发必不可少的、最基础的工作；    </p>
</li>
<li><p>使用版本管理系统的优点 ：</p>
<ol>
<li>能够保留修改内容这一最基本的记录 ；</li>
<li>能够方便地查看版本之间的差异 ； </li>
<li>能够防止错误地覆盖别人修改的代码 ； </li>
<li>能够还原到任意时间点的状态 ； </li>
<li>能够生成多个派生（分支和标签），保留当时项目状态的截面 。</li>
</ol>
</li>
<li><p>使用 svn diff或 git diff这样的命令就能方便地确认各个版本之间的差异 ；</p>
</li>
<li><p>合理使用版本管理系统都能够防止无意识地覆盖他人修改的代码 ；  </p>
</li>
<li><p>管理的信息主要包括 ：</p>
</li>
</ol>
<ul>
<li>代码  </li>
<li>需求定义、设计资料等文档  </li>
<li>数据库模式、数据  </li>
<li>中间件等的配置文件  </li>
<li>库的依赖关系定义  </li>
</ul>
<ol start="6">
<li>命令git checkout .放弃自最后一次提 交后所做的所有修改，将项目恢复到最后一次提交的状态；</li>
</ol>
<h2 id="缺陷管理"><a href="#缺陷管理" class="headerlink" title="缺陷管理"></a>缺陷管理</h2><ol>
<li>项目“进展不顺利、结束不了”的原因各种各样，大致有下面这些 ：</li>
</ol>
<ul>
<li>目标错误  </li>
<li>估计错误，时间过紧，人员不足  </li>
<li>没有定义项目的结束  </li>
<li>成员的积极性不足，进度停滞不前  </li>
</ul>
<ol start="2">
<li>失败的项目的共同特征：</li>
</ol>
<ul>
<li>项目无法可视化  </li>
<li>没有进行任务整理、进度管理和信息共享等  </li>
</ul>
<ol start="3">
<li>导入缺陷管理系统的优点 ：</li>
</ol>
<ul>
<li>具有任务管理所需的基本功能  </li>
<li>直观性、检索性较强  </li>
<li>能够对信息进行统一管理及共享  </li>
<li>能够生成各类报表  </li>
<li>能够和其他系统进行关联，具有可扩展性  </li>
</ul>
<ol start="4">
<li>使用缺陷管理系统，以问题票（ ticket）为中心构建开发流程的方法论称为缺陷驱动开发（ TiDD）  ；</li>
<li>缺陷管理系统 A包括 OSS（ Open Source Software）以及商用软件在内，有很多可供选择的产品 ：</li>
</ol>
<ul>
<li>Trac  </li>
<li>Redmine  </li>
<li>Bugzilla  </li>
<li>Mantis  </li>
<li>JIRA  </li>
<li>YouTRACK  </li>
<li>Pivotal Tracker  </li>
<li>Backlog  </li>
<li>GitHub  </li>
</ul>
<h2 id="持续集成-CI"><a href="#持续集成-CI" class="headerlink" title="持续集成(CI)"></a>持续集成(CI)</h2><ol>
<li>将各个成员的工作成果集中到一处进行集成，直到形成可以运行的系统，各个成员的开发工作才有了意义，才能进行测试，最终才能以产品的形式向顾客提供价值;</li>
<li>执行build和测试的流程：</li>
</ol>
<ul>
<li>将所有的代码集中到一处  </li>
<li>设置依赖程序库等的路径  </li>
<li>必要的情况下进行编译  </li>
<li>进行数据库构建和数据加载  </li>
<li>必要的情况下对中间件进行配置和启动  </li>
<li>实施单元测试、集成测试、用户验收测试等  </li>
</ul>
<ol start="3">
<li>实施CI的必要性：</li>
</ol>
<ul>
<li>版本管理系统  </li>
<li>build 工具  </li>
<li>测试代码  </li>
<li>CI 工具  </li>
</ul>
<ol start="4">
<li>软件测试分类：</li>
</ol>
<ul>
<li>单元测试（Unit Test，UT）  </li>
<li>集成测试（Integration Test，IT）  </li>
<li>用户验收测试（User Acceptance Test，UAT）  </li>
<li>回归测试  </li>
</ul>
<ol start="5">
<li>Web 应用程序方面， 有一款名为 Selenium 的模拟浏览器动作并进行测试的著名工具 ；</li>
<li>Jenkins 是一款为实施 CI 提供支持的工具，通过和各类插件组合使用，可以实现非常丰富的功能；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分只是介绍一些团队合作开发的基础知识，以及对于代码管理以及测试的工具的介绍，如果需要某些工具的使用，还需深入学习，进行详细的总结，有些关键词不是行业的不太清楚，但是通过这篇文章的总结能大致知道一些工具，后续需要的时候深入学习！</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>Vue&amp;SpringBoot前后端分离项目开发</title>
    <url>/2020/07/29/Vue-SpringBoot%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前后端分离已成为互联网项目开发的业界标准使用方式，为什么进行前后端分离也无需多言，本文主要记录前端流行的框架Vue.js和后端流行框架SpringBoot整合的前后端项目开发过程，记录其中踩到的坑，避免后续的开发中再次采坑！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h3><ol>
<li><p>在前后端不分离的开发模式中，前端页面看到的效果都是由后端控制，由后端渲染页面或重定向，也就是后端需要控制前端的展示，前端与后端的耦合度很高；</p>
</li>
<li><p>比较适合纯网页应用，但是当后端对接App时，App可能并不需要后端返回一个HTML网页，而仅仅是数据本身，因此后端原本返回网页的接口不再适用于前端App应用，为了对接App后端还需再开发一套接口；</p>
</li>
<li><p>前后端不分离的开发速度可能较前后端分离的开发速度慢；</p>
</li>
<li><p>前后端不分离情况下的数据交互如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7e9419bce1816632678e9e114ec73b1a-144986" alt="前后端不分离数据交互"></p>
</li>
<li><p>早期主要使用MVC框架，Jsp+Servlet的结构如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e0745df3feaa4de004465634e87303b2-13147" alt="Jsp+Servlet"></p>
<ul>
<li>所有的请求都被发送给作为控制器的Servlet，它接受请求，并根据请求信息将它们分发给适当的JSP来响应</li>
<li>JSP可以通过直接调用方法或使用UseBean的自定义标签得到JavaBeans中的数据</li>
<li>View可以采用 Velocity、Freemaker 等模板引擎</li>
</ul>
</li>
<li><p>开发方式有如下两种：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/be1a10747f1b090a7bff612c63f33b59-13724" alt="开发方式1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fa6ef23a558dc719b6d740a9167a72e7-14719" alt="开发方式2"></p>
<ul>
<li>前端无法单独调试，开发效率低</li>
<li>前端不可避免会遇到后台代码</li>
<li>前端不可避免的要去学习模板引擎的模板语法，增加了前端的学习成本</li>
</ul>
</li>
</ol>
<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><ol>
<li><p>在前后端分离的开发模式中，后端仅返回前端所需的数据，不再渲染HTML页面，不再控制前端的效果；</p>
</li>
<li><p>前端用户看到什么效果，从后端请求的数据如何加载到前端中，都由前端自己决定，网页有网页的处理方式，App有App的处理方式，但无论哪种前端，所需的数据基本相同，后端仅需开发一套逻辑对外提供数据即可；</p>
</li>
<li><p>在这种开发模式下，前端与后端的耦合度相对较低；</p>
</li>
<li><p>通常将后端开发的每个视图都称为一个接口，或者API，前端通过访问接口来对数据进行增删改查；</p>
</li>
<li><p>可以并行开发，但是存在API的滞后问题，需要协调；</p>
</li>
<li><p>前后端分离情况下的数据交互如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/619d8cff54d639a8ee24a851cd479325-245380" alt="前后端分离数据交互"></p>
</li>
<li><p>前后端分离为大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础；</p>
</li>
<li><p>核心思想：前端HTML页面通过AJAX调用后端的RESTFUL API接口并使用JSON数据进行交互；</p>
</li>
<li><p>大中型公司需要专业人才，小公司需要全才，但是对于个人职业发展来说，前后端需要分离！</p>
</li>
<li><p>前后端分离需要从职责上划分才能满足开发模式：</p>
<ul>
<li>前端负责view和controller层</li>
<li>后端只负责model层，业务处理与数据持久化等</li>
</ul>
</li>
<li><p>前端框架主流的有KnockoutJS、AngularJS、VueJS、ReactJS；</p>
</li>
<li><p>前后端分离的主要考虑因素：</p>
<ul>
<li>提升系统的业务处理能力</li>
<li>提升系统的可用性</li>
<li>提升系统的扩展能力</li>
<li>提高开发效率</li>
</ul>
</li>
</ol>
<h3 id="前后端分离下的高速开发"><a href="#前后端分离下的高速开发" class="headerlink" title="前后端分离下的高速开发"></a>前后端分离下的高速开发</h3><ol>
<li><p>前后端分离后之后带来的痛点是：</p>
<ul>
<li>接口会频繁变动——<strong>设计之初没有想好</strong>、<strong>变动的成本较低</strong></li>
<li>接口文档永远都是不对的——<strong>文档必永远落后于实际接口</strong></li>
<li>测试工作永远只能临近上线才能开始——<strong>开发阶段测试无法介入</strong></li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7153ba4357418a2f3d2608320fcefde5-256153" alt="现有开发流程"></p>
</li>
<li><p>解决方案：让接口文档发挥价值，提高变动接口的成本，测试尽早介入！</p>
</li>
<li><p>接口文档发挥出价值，需要赋予契约，如同签字画押谁也不许变，只认契约不认人；</p>
</li>
<li><p>契约定好之后就可以使用接口模拟工具Mock Server来进行前后端分离开发。Mock Server可以暂时替代后台服务，帮助前端人员开发，同时，测试人员也可以依照契约来进行测试脚本的编写，使用Mock Server进行脚本验证；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3d37807b6e32315fee63a869af81d1a4-336336" alt="改进后的开发流程"></p>
</li>
<li><p><a href="https://github.com/xbl/raml-mocker" target="_blank" rel="noopener">raml-mocker</a>是一个基于 Raml 使用 Nodejs 开发的 Mock Server 工具，使用 Raml 描述接口中设置 response 的 example 指令即可，raml-mocker 会解析 Raml 文件，并启动一个 Mock Server，将 example 的内容返回给浏览器；</p>
</li>
<li><p>raml-mocker使用：</p>
<ol>
<li><p>初始化项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xbl/raml-mocker-starter.git raml-api</span><br><span class="line">cd raml-api</span><br><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装并启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i http://localhost:3000/api/v1/users/1/books/</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">curl -i http://localhost:3000/api/v1/users/1/books/1</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 .raml-config.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"controller"</span>: <span class="string">"./controller"</span>,</span><br><span class="line">  <span class="attr">"raml"</span>: <span class="string">"./raml"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"api.raml"</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>controller: controller 目录路径，在高级篇中会有更详细说明</li>
<li>raml: raml 文件目录</li>
<li>main: raml 目录下的入口文件</li>
<li>port: mock server 服务端口号</li>
<li>plugins: 插件</li>
</ul>
</li>
<li><p>raml-mocker 只需要在response 添加 example就可以添加测试接口：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">/books</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">/</span>:<span class="string">id:</span></span><br><span class="line">    <span class="attr">post</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">body</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">application/json</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">type</span>: <span class="string">abc</span></span><br><span class="line">      <span class="attr">responses</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">200</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">body</span>:<span class="string"></span></span><br><span class="line">            <span class="meta">application/json</span>:<span class="string"></span></span><br><span class="line">              <span class="attr">type</span>: <span class="string">song</span></span><br><span class="line"><span class="comment">              # 返回的 Mock 数据</span></span><br><span class="line">              <span class="attr">example</span>: <span class="string">!include ./books_200.json</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// books_200.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"books title"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"books desccription1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"books title"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"books desccription2"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i http://localhost:3000/api/v1/users/1/books</span><br></pre></td></tr></table></figure>
</li>
<li><p>Raml-mocker 还提供了动态数据的功能：</p>
<ul>
<li>在 raml 文档中添加 (controller) 指令，即可添加动态的 Server</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">/books</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">type</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">resourceList</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">get</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">description</span>: <span class="string">获取用户的书籍</span></span><br><span class="line">    <span class="meta">(controller)</span>: <span class="string">user#getBook</span></span><br><span class="line">    <span class="attr">responses</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">200</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">body</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">type</span>: <span class="string">song[]</span></span><br><span class="line">          <span class="attr">example</span>: <span class="string">!include ./books_200.json</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在文档中 (controller) 表示 controller 目录下 user.js 中 getBook 函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controller/user.js</span></span><br><span class="line"><span class="comment">// webApi 会返回文档中的配置</span></span><br><span class="line"><span class="comment">// raml-mocker 提供了更多可扩展空间，甚至可以在 controller 中实现一定的逻辑</span></span><br><span class="line">exports.getBook = <span class="function">(<span class="params">req, res, webApi</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(webApi);</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Raml-mocker 提供了插件机制，允许我们在不使用 controller 指令的时候对 response 的内容进行处理，例如使用 Mockjs</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .raml-config.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"controller"</span>: <span class="string">"./controller"</span>,</span><br><span class="line">  <span class="attr">"raml"</span>: <span class="string">"./raml"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"api.raml"</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"./plugins/mock.js"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./plugins/mock.js</span></span><br><span class="line"><span class="keyword">var</span> &#123; mock &#125; = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mock(<span class="built_in">JSON</span>.parse(body));</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Vue-amp-SpringBoot前后端分离"><a href="#Vue-amp-SpringBoot前后端分离" class="headerlink" title="Vue&amp;SpringBoot前后端分离"></a>Vue&amp;SpringBoot前后端分离</h2><h3 id="Vue前端Demo"><a href="#Vue前端Demo" class="headerlink" title="Vue前端Demo"></a>Vue前端Demo</h3><ol>
<li><p>开发工具版本说明：</p>
<ul>
<li>nodejs——v12.16.1</li>
<li>@vue/cli——4.4.6</li>
</ul>
</li>
<li><p>模板Git地址：<a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-element-admin</a></p>
</li>
<li><p>整合的最简单的方法是编译文件，将在dist目录下的文件拷贝到SpringBoot项目下的resources/static目录下，重新启动项目即可</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b5ec26e1e57a7ffbc3036d2f32f684d2-126573" alt="SpringBoot整合Vue"></p>
</li>
<li><p>修改源码，添加后端数据访问，使用axios：</p>
<ul>
<li><p>在vue-element-admin项目根目录下添加插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save axios</span><br><span class="line">cnpm install vue-axios --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入插件（main.js）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span>;</span><br><span class="line"><span class="comment">// 修改axios 的基础url</span></span><br><span class="line"><span class="comment">//axios.defaults.baseURL = 'http://localhost:8080/'</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;crumbs&quot;&gt;</span><br><span class="line">            &lt;el-breadcrumb separator&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class="line">                &lt;el-breadcrumb-item&gt;</span><br><span class="line">                    &lt;i class&#x3D;&quot;el-icon-lx-redpacket_fill&quot;&gt;&lt;&#x2F;i&gt; 支持作者</span><br><span class="line">                &lt;&#x2F;el-breadcrumb-item&gt;</span><br><span class="line">            &lt;&#x2F;el-breadcrumb&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;Name: &#123;&#123;yourname&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;p&gt;hello: &#123;&#123;yourhello&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#39;donate&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            yourname: &#39;&#39;,</span><br><span class="line">            yourhello: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.axios.get(&#39;&#x2F;api&#x2F;hello&#39;).then((response)&#x3D;&gt;&#123;</span><br><span class="line">            console.log(response.data)</span><br><span class="line">            this.yourname&#x3D;response.data.name;</span><br><span class="line">            this.yourhello&#x3D;response.data.hello;</span><br><span class="line">        &#125;)</span><br><span class="line">        this.$http.get(&#39;&#x2F;api&#x2F;hello&#39;).then((response)&#x3D;&gt;&#123;</span><br><span class="line">            console.log(&quot;http:&quot; + response.data.toString())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>如果只是静态编译后的拷贝，只要将axios.defaults.baseURL修改为后端api接口地址</strong></p>
</li>
<li><p><strong>但是跨域的话，这种方式就不可以了，需要设置vue.config.js中的代理,同时不能设置axios.defaults.baseURL：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    baseUrl: <span class="string">'./'</span>,</span><br><span class="line">    assetsDir: <span class="string">'static'</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">"/api"</span>: &#123;</span><br><span class="line">                target: <span class="string">"http://localhost:8080/"</span>, <span class="comment">// target host</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>, <span class="comment">// needed for virtual hosted sites</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">"/api"</span>: <span class="string">"/api"</span> <span class="comment">// rewrite path</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跨域的时候就可以进行Vue+SpringBoot前后端联调了</p>
</li>
<li><p><strong>协议、IP、端口三者都相同，则为同源，否则就是跨域</strong></p>
</li>
</ul>
</li>
</ol>
<h3 id="SpringBoot后端"><a href="#SpringBoot后端" class="headerlink" title="SpringBoot后端"></a>SpringBoot后端</h3><ol>
<li><p>使用Idea创建一个带有Web的后端项目；</p>
</li>
<li><p>创建一个路由：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String,String&gt; <span class="title">Hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; ret=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ret.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        ret.put(<span class="string">"name"</span>,<span class="string">"wander"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，并测试：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8593930bc7cf55b93548e14530427567-20730" alt="SpringBoot项目运行"></p>
</li>
<li><p>将前端的编译的dist目录内容拷贝到resources/static目录下，再次运行：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3f0178e70b84375c0a16ec0308731f30-141368" alt="前后端整合"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用Thymeleaf直接在SpringBoot进行的前后端整合项目的开发所有的开发都由一个人员完成，真的非常的心累，需要学习Thymeleaf模板引擎语法，进行过这个开发，非常不友善的体验，在一篇文章中了解到Vue和SpringBoot可以较好的整合，而且Vue是非常优秀的前端框架，花一点时间学习一下还是感觉很有意义的！</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js快速入门</title>
    <url>/2020/07/14/Vue-js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>，Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。主要是之前看了博客有进行前后端分离的设计中使用Vue+SpringBoot构建系统级应用，因此这里记录一下学习Vue的过程！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/478d9fadb1f2441f2b13dca3f8a583cb-28365" alt="Vue组件"></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统，数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>；</p>
</li>
<li><p>一个 Vue 应用会将其挂载到一个 DOM 元素上，然后对其进行完全控制，HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;vue_det&quot;&gt;</span><br><span class="line">     &lt;span v-bind:title&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">     &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;h1&gt;site : &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;h1&gt;url : &#123;&#123;url&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;details()&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;r1&quot;&gt;修改颜色&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;use&quot; id&#x3D;&quot;r1&quot;&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &#123;&#123;5+5&#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;&#123; msg.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">    &lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;seen&quot;&gt;现在你看到我了&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else&gt;现在你看不到我了&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;pre&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;菜鸟教程&lt;&#x2F;a&gt;&lt;&#x2F;pre&gt;</span><br><span class="line">    &lt;input v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转字符串&lt;&#x2F;button&gt;</span><br><span class="line">    &#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;</span><br><span class="line">      A</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;</span><br><span class="line">      B</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;</span><br><span class="line">      C</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;欢迎来到WanderROS\&#39;s Daily&#39;,</span><br><span class="line">      url: &#39;https:&#x2F;&#x2F;wanderros.github.io&#39;,</span><br><span class="line">      message: &#39;&lt;h1&gt;菜鸟教程&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">      use: false,</span><br><span class="line">      ok: true,</span><br><span class="line">      id: 1,</span><br><span class="line">      seen: true,</span><br><span class="line">      type: &#39;C&#39;,</span><br><span class="line">      sites: [</span><br><span class="line">        &#123; name: &#39;Runoob&#39; &#125;,</span><br><span class="line">        &#123; name: &#39;Google&#39; &#125;,</span><br><span class="line">        &#123; name: &#39;Taobao&#39; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    details: function () &#123;</span><br><span class="line">      return this.msg + &#39;- 学的不仅是技术，更是梦想!&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    capitalize: function (value) &#123;</span><br><span class="line">      if (!value) return &#39;&#39;</span><br><span class="line">      value &#x3D; value.toString()</span><br><span class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #vue_det &#123;</span><br><span class="line">    font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">    margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指令带有前缀 v-，以表示它们是 Vue 提供的特殊 attribute，比如v-bind，该指令的意思是：“将这个元素节点的 title attribute 和 Vue 实例的 message property 保持一致”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span v-bind:title&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>vue的for循环：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;vue_det&quot;&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li v-for&#x3D;&quot;(todo,index) in todos&quot; v-bind:key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        &#123;&#123;index&#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      todos: [</span><br><span class="line">        &#123; text: &#39;学习 JavaScript&#39; &#125;,</span><br><span class="line">        &#123; text: &#39;学习 Vue&#39; &#125;,</span><br><span class="line">        &#123; text: &#39;整个牛项目&#39; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>写for循环的时候，一定要加key，不加key会报错</li>
</ul>
</li>
<li><p>事件监听，可以用 v-on 指令添加一个事件监听器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;vue_test&quot;&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转消息&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;Hello Vue.js!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 reverseMessage 方法中，更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，编写的代码只需要关注逻辑层面即可</li>
</ul>
</li>
<li><p>Vue 还提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;vue_test&quot;&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;input v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">     &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转消息&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;Hello Vue.js!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件系统是 Vue 的另一个重要概念，是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树；</p>
</li>
<li><p>在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理；</p>
</li>
<li><p>Vue中的内置指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-bind：动态绑定数据。简写为“:” 。&#x3D;&gt; 以后的:class&#x3D;&quot;&#123;red:boolean&#125;&quot;</span><br><span class="line">v-on ：绑定时间监听器。简写为“@”，例：@click&#x3D;&quot;xxx&quot;；</span><br><span class="line">v-text ：更新数据，会覆盖已有结构。类似&#123;&#123; msg &#125;&#125; ；</span><br><span class="line">v-show ：根据值的真假，切换元素的display属性；</span><br><span class="line">v-if ：根据值的真假，切换元素会被销毁、重建； &#x3D;&gt; 在dom中已消失</span><br><span class="line">v-else-if ：多条件判断，为真则渲染；</span><br><span class="line">v-else ：条件都不符合时渲染；</span><br><span class="line">v-for ：基于源数据多次渲染元素或模块；</span><br><span class="line">v-model ：在表单控件元素（input等）上创建双向数据绑定（数据源）；</span><br><span class="line">v-pre ：跳过元素和子元素的编译过程；</span><br><span class="line">v-once ：只渲染一次，随后数据更新也不重新渲染；</span><br><span class="line">v-cloak ：隐藏未编译的Mustache语法，在css中设置[v-cloak]&#123;display:none;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><ol>
<li><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析；</p>
</li>
<li><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少；</p>
</li>
<li><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span v-once&gt;这个将不会改变: &#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Mustache 标签将会被替代为对应数据对象上 msg property 的值。无论何时，绑定的数据对象上 msg property 发生了改变，插值处的内容都会更新</li>
<li>通过使用 v-once 指令，能够执行一次性地插值，当数据改变时，插值处的内容不会更新。但需要注意的是这会影响到该节点上的其它数据绑定</li>
</ul>
</li>
<li><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span v-html&#x3D;&quot;rawHtml&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>span 的内容将会被替换成为 property 值 rawHtml，直接作为 HTML——会忽略解析 property 值中的数据绑定</li>
<li>站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击</li>
</ul>
</li>
<li><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 v-bind 指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:id&#x3D;&quot;dynamicId&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button v-bind:disabled&#x3D;&quot;isButtonDisabled&quot;&gt;Button&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果 isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 &lt;button&gt; 元素中</li>
</ul>
</li>
<li><p>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要注意的是，每个绑定都只能包含单个表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; var a &#x3D; 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date</p>
</li>
<li><p>不应该在模板表达式中试图访问用户定义的全局变量</p>
</li>
</ul>
</li>
<li><p>指令 (Directives) 是带有 v- 前缀的特殊 attribute，指令 attribute 的值预期是单个 JavaScript 表达式 。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p v-if&#x3D;&quot;seen&quot;&gt;现在你看到我了&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在这里 href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定 --&gt;</span><br><span class="line">&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-on 指令，用于监听 DOM 事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 参数是监听的事件名 --&gt;</span><br><span class="line">&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 注意，参数表达式的写法存在一些约束 --&gt;</span><br><span class="line">&lt;!-- 这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用 --&gt;</span><br><span class="line">&lt;a v-bind:[attributeName]&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用动态参数为一个动态的事件名绑定处理函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当 eventName 的值为 &quot;focus&quot; 时，v-on:[eventName] 将等价于 v-on:focus --&gt;</span><br><span class="line">&lt;a v-on:[eventName]&#x3D;&quot;doSomething&quot;&gt; ... &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告；</p>
</li>
<li><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的；</p>
</li>
<li><p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写；</p>
</li>
<li><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;...&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v- 前缀也变得没那么重要了。因此，Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;a :[key]&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;a @[event]&#x3D;&quot;doSomething&quot;&gt; ... &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ol>
<li><p>设计模板的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护。对于任何复杂逻辑，都应当使用计算属性；</p>
</li>
<li><p>计算属性示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;vue_test&quot;&gt;</span><br><span class="line">    &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;Hello Vue.js!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    &#x2F;&#x2F; 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里我们声明了一个计算属性 reversedMessage</li>
<li>reversedMessage 依赖于 message，因此当 message 发生改变时，所有依赖 reversedMessage 的绑定也会更新</li>
<li><strong>可以通过在表达式中调用方法来达到同样的效果</strong></li>
</ul>
</li>
<li><p>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值；而每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数；</p>
</li>
<li><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性；</p>
</li>
<li><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;vue_test&quot;&gt;</span><br><span class="line">    &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Reversed message: &quot;&#123;&#123; reversedMessage2() &#125;&#125;&quot;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstName: &#39;Foo&#39;,</span><br><span class="line">      lastName: &#39;Bar&#39;,</span><br><span class="line">      message: &#39;Hello Vue.js!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reversedMessage2: function () &#123;</span><br><span class="line">      return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">      &#x2F;&#x2F; getter</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.firstName + &#39; &#39; + this.lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; setter</span><br><span class="line">      set: function (newValue) &#123;</span><br><span class="line">        var names &#x3D; newValue.split(&#39; &#39;)</span><br><span class="line">        this.firstName &#x3D; names[0]</span><br><span class="line">        this.lastName &#x3D; names[names.length - 1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的；</p>
</li>
</ol>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ol>
<li><p>v-if 指令用于条件性地渲染一块内容，这块内容只会在指令的表达式返回 truthy 值的时候被渲染，也可以用 v-else 添加一个“else 块”；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;vue_test&quot;&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;awesome&quot;&gt;Vue is awesome!&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;Oh no 😢&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      awesome: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 &lt;template&gt; 元素上使用 v-if 条件渲染分组，如果想切换多个元素，可以把一个 &lt;template&gt; 元素当做不可见的包裹元素，并在上面使用 v-if；</p>
</li>
<li><p>v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别；</p>
</li>
<li><p>v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用；</p>
</li>
<li><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-if&#x3D;&quot;loginType &#x3D;&#x3D;&#x3D; &#39;username&#39;&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;Username&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input placeholder&#x3D;&quot;Enter your username&quot; key&#x3D;&quot;username-input&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-else&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;Email&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input placeholder&#x3D;&quot;Enter your email address&quot; key&#x3D;&quot;email-input&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的代码中切换 loginType 将不会清除用户已经输入的内容</li>
</ul>
</li>
<li><p>v-show 指令用于根据条件展示元素的选项，带有 v-show 的元素始终会被渲染并保留在 DOM 中；</p>
<ul>
<li>v-show 不支持 &lt;template&gt; 元素，也不支持 v-else</li>
</ul>
</li>
<li><p>v-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换；</p>
</li>
<li><p>不推荐同时使用 v-if 和 v-for，当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级；</p>
</li>
<li><p>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好!</p>
</li>
</ol>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><ol>
<li><p>v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul id&#x3D;&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot; v-bind:key&#x3D;&quot;item.message&quot;&gt;</span><br><span class="line">      &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [</span><br><span class="line">        &#123; message: &#39;hello&#39; &#125;,</span><br><span class="line">        &#123; message: &#39;world&#39; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-for 还支持一个可选的第二个参数，即当前项的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul id&#x3D;&quot;example-2&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item, index) in items&quot; v-bind:key&#x3D;&quot;item.message&quot;&gt;</span><br><span class="line">      &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [</span><br><span class="line">        &#123; message: &#39;hello&#39; &#125;,</span><br><span class="line">        &#123; message: &#39;world&#39; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
</li>
<li><p>上述方法不会变更原始数组，而总是返回一个新数组；</p>
</li>
</ol>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><ol>
<li><p>用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>v-on 还可以接收一个需要调用的方法名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">      name: &#39;wander&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      &#x2F;&#x2F; &#96;this&#96; 在方法里指向当前 Vue 实例</span><br><span class="line">      alert(&#39;Hello &#39; + this.name + &#39;!&#39;)</span><br><span class="line">      &#x2F;&#x2F; &#96;event&#96; 是原生 DOM 事件</span><br><span class="line">      if (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在内联 JavaScript 语句中调用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;say(&#39;what&#39;)&quot;&gt;Say what&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">      name: &#39;wander&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      &#x2F;&#x2F; &#96;this&#96; 在方法里指向当前 Vue 实例</span><br><span class="line">      alert(&#39;Hello &#39; + this.name + &#39;!&#39;)</span><br><span class="line">      &#x2F;&#x2F; &#96;event&#96; 是原生 DOM 事件</span><br><span class="line">      if (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节；</p>
</li>
<li><p>为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的：</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
<li>.once</li>
<li>.passive</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="line">&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只有在 &#96;key&#96; 是 &#96;Enter&#96; 时调用 &#96;vm.submit()&#96; --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter&#x3D;&quot;submit&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input v-on:keyup.page-down&#x3D;&quot;onPageDown&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue 提供了绝大多数常用的按键码的别名：</p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete (捕获“删除”和“退格”键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
<li>.ctrl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta</li>
</ul>
</li>
<li><p>使用 v-on 有几个好处：</p>
<ul>
<li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法</li>
<li>无须在 JavaScript 里手动绑定事件， ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试</li>
<li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除</li>
</ul>
</li>
</ol>
<h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><ol>
<li><p>用 v-model 指令在表单 &lt;input&gt;、&lt;textarea&gt; 及 &lt;select&gt; 元素上创建双向数据绑定，会根据控件类型自动选取正确的方法来更新元素；</p>
</li>
<li><p>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 value property 和 input 事件</li>
<li>checkbox 和 radio 使用 checked property 和 change 事件</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件</li>
</ul>
</li>
<li><p>文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多行文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;Multiline message is:&lt;&#x2F;span&gt;</span><br><span class="line">&lt;p style&#x3D;&quot;white-space: pre-line;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;textarea v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;add multiple lines&quot;&gt;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复选框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;jack&quot; value&#x3D;&quot;Jack&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;jack&quot;&gt;Jack&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;john&quot; value&#x3D;&quot;John&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;john&quot;&gt;John&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;mike&quot; value&#x3D;&quot;Mike&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;mike&quot;&gt;Mike&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      checkedNames: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单选按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;one&quot; value&#x3D;&quot;One&quot; v-model&#x3D;&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;one&quot;&gt;One&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;two&quot; value&#x3D;&quot;Two&quot; v-model&#x3D;&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;two&quot;&gt;Two&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      picked: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择框（单选）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      selected: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择框（多选）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;select v-model&#x3D;&quot;selected&quot; multiple style&#x3D;&quot;width: 50px;&quot;&gt;</span><br><span class="line">      &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      selected: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option v-for&#x3D;&quot;option in options&quot; v-bind:value&#x3D;&quot;option.value&quot; v-bind:key&#x3D;&quot;option.text&quot;&gt;</span><br><span class="line">        &#123;&#123; option.text &#125;&#125;</span><br><span class="line">      &lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      selected: &#39;A&#39;,</span><br><span class="line">      options: [</span><br><span class="line">        &#123; text: &#39;One&#39;, value: &#39;A&#39; &#125;,</span><br><span class="line">        &#123; text: &#39;Two&#39;, value: &#39;B&#39; &#125;,</span><br><span class="line">        &#123; text: &#39;Three&#39;, value: &#39;C&#39; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue 的组件系统允许创建具有完全自定义行为且可复用的输入组件。这些输入组件甚至可以和 <code>v-model</code> 一起使用！</p>
</li>
</ol>
<h2 id="过渡特效"><a href="#过渡特效" class="headerlink" title="过渡特效"></a>过渡特效</h2><ol>
<li><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具：</p>
<ul>
<li>在 CSS 过渡和动画中自动应用 class</li>
<li>可以配合使用第三方 CSS 动画库，如 Animate.css</li>
<li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li>
<li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li>
</ul>
</li>
<li><p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡：</p>
<ul>
<li>条件渲染 (使用 v-if)</li>
<li>条件展示 (使用 v-show)</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;show &#x3D; !show&quot;&gt;</span><br><span class="line">      Toggle</span><br><span class="line">    &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class="line">      &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">    transition: opacity 1.5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .fade-enter, .fade-leave-to &#x2F;* .fade-leave-active below version 2.1.8 *&#x2F; &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：</p>
<ul>
<li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名</li>
<li>如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用</li>
<li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 nextTick 概念不同)</li>
</ul>
</li>
<li><p>在进入/离开的过渡中，会有 6 个 class 切换：</p>
<ul>
<li>v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</li>
<li>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数</li>
<li>v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除</li>
<li>v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>
<li>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数</li>
<li>v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除</li>
</ul>
</li>
<li><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 &lt;transition&gt;，则 v- 是这些类名的默认前缀。如果你使用了 &lt;transition name=”my-transition”&gt;，那么 v-enter 会替换为 my-transition-enter;</p>
</li>
<li><p>常用是的CSS过渡，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;example-4&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;</span><br><span class="line">      Toggle render</span><br><span class="line">    &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;slide-fade&quot;&gt;</span><br><span class="line">      &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .slide-fade-enter-active &#123;</span><br><span class="line">    transition: all .3s ease;</span><br><span class="line">  &#125;</span><br><span class="line">  .slide-fade-leave-active &#123;</span><br><span class="line">    transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span><br><span class="line">  &#125;</span><br><span class="line">  .slide-fade-enter, .slide-fade-leave-to</span><br><span class="line">    &#x2F;* .slide-fade-leave-active for below version 2.1.8 *&#x2F; &#123;</span><br><span class="line">    transform: translateX(10px);</span><br><span class="line">    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;Toggle show&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;transition name&#x3D;&quot;bounce&quot;&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;show&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .bounce-enter-active &#123;</span><br><span class="line">    animation: bounce-in .5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .bounce-leave-active &#123;</span><br><span class="line">    animation: bounce-in .5s reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  @keyframes bounce-in &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      transform: scale(0);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      transform: scale(1.5);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      transform: scale(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过以下 attribute 来自定义过渡类名：</p>
<ul>
<li>enter-class</li>
<li>enter-active-class</li>
<li>enter-to-class (2.1.8+)</li>
<li>leave-class</li>
<li>leave-active-class</li>
<li>leave-to-class (2.1.8+)</li>
</ul>
</li>
<li><p>自定义过渡类名的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用；</p>
</li>
<li><p>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend，这取决于给元素应用的 CSS 规则；</p>
</li>
<li><p>在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 transitionend 或 animationend 事件。可以用 &lt;transition&gt; 组件上的 duration prop 定制一个显性的过渡持续时间 (以毫秒计)；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 显性的过渡持续时间 (以毫秒计) --&gt;</span><br><span class="line">&lt;transition :duration&#x3D;&quot;1000&quot;&gt;...&lt;&#x2F;transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 定制进入和移出的持续时间 --&gt;</span><br><span class="line">&lt;transition :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在 attribute 中声明 JavaScript 钩子，这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用；</p>
<ul>
<li>当只用 JavaScript 过渡的时候，在 enter 和 leave 中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成</li>
<li>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测</li>
</ul>
</li>
<li><p>可以通过 appear attribute 设置节点在初始渲染的过渡；</p>
</li>
<li><p>同时生效的进入和离开的过渡不能满足所有要求，因此Vue 提供了过渡模式：</p>
<ul>
<li>in-out——新元素先进行过渡，完成之后当前元素过渡离开</li>
<li>out-in——当前元素先进行过渡，完成之后新元素过渡进入</li>
</ul>
</li>
<li><p>列表过渡：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;list-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">      &lt;button v-on:click&#x3D;&quot;add&quot;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button v-on:click&#x3D;&quot;remove&quot;&gt;Remove&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;transition-group name&#x3D;&quot;list&quot; tag&#x3D;&quot;p&quot;&gt;</span><br><span class="line">    &lt;span v-for&#x3D;&quot;item in items&quot; v-bind:key&#x3D;&quot;item&quot; class&#x3D;&quot;list-item&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;transition-group&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class="line">      nextNum: 10</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    randomIndex: function () &#123;</span><br><span class="line">      return Math.floor(Math.random() * this.items.length)</span><br><span class="line">    &#125;,</span><br><span class="line">    add: function () &#123;</span><br><span class="line">      this.items.splice(this.randomIndex(), 0, this.nextNum++)</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: function () &#123;</span><br><span class="line">      this.items.splice(this.randomIndex(), 1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .bounce-enter-active &#123;</span><br><span class="line">    animation: bounce-in .5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .bounce-leave-active &#123;</span><br><span class="line">    animation: bounce-in .5s reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  @keyframes bounce-in &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      transform: scale(0);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      transform: scale(1.5);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      transform: scale(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>所有过渡 attribute 都可以动态绑定，但我们不仅仅只有 attribute 可以利用，还可以通过事件钩子获取上下文中的所有数据，因为事件钩子都是方法。这意味着，根据组件的状态不同，你的 JavaScript 过渡会有不同的表现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;velocity&#x2F;1.2.3&#x2F;velocity.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;dynamic-fade-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">    Fade In: &lt;input type&#x3D;&quot;range&quot; v-model&#x3D;&quot;fadeInDuration&quot; min&#x3D;&quot;0&quot; v-bind:max&#x3D;&quot;maxFadeDuration&quot;&gt;</span><br><span class="line">    Fade Out: &lt;input type&#x3D;&quot;range&quot; v-model&#x3D;&quot;fadeOutDuration&quot; min&#x3D;&quot;0&quot; v-bind:max&#x3D;&quot;maxFadeDuration&quot;&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">      v-bind:css&#x3D;&quot;false&quot;</span><br><span class="line">      v-on:before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class="line">      v-on:enter&#x3D;&quot;enter&quot;</span><br><span class="line">      v-on:leave&#x3D;&quot;leave&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      v-if&#x3D;&quot;stop&quot;</span><br><span class="line">      v-on:click&#x3D;&quot;stop &#x3D; false; show &#x3D; false&quot;</span><br><span class="line">    &gt;Start animating&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      v-else</span><br><span class="line">      v-on:click&#x3D;&quot;stop &#x3D; true&quot;</span><br><span class="line">    &gt;Stop it!&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true,</span><br><span class="line">      fadeInDuration: 1000,</span><br><span class="line">      fadeOutDuration: 1000,</span><br><span class="line">      maxFadeDuration: 1500,</span><br><span class="line">      stop: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function () &#123;</span><br><span class="line">    this.show &#x3D; false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    beforeEnter: function (el) &#123;</span><br><span class="line">      el.style.opacity &#x3D; 0</span><br><span class="line">    &#125;,</span><br><span class="line">    enter: function (el, done) &#123;</span><br><span class="line">      var vm &#x3D; this</span><br><span class="line">      Velocity(el,</span><br><span class="line">        &#123; opacity: 1 &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          duration: this.fadeInDuration,</span><br><span class="line">          complete: function () &#123;</span><br><span class="line">            done()</span><br><span class="line">            if (!vm.stop) vm.show &#x3D; false</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    leave: function (el, done) &#123;</span><br><span class="line">      var vm &#x3D; this</span><br><span class="line">      Velocity(el,</span><br><span class="line">        &#123; opacity: 0 &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          duration: this.fadeOutDuration,</span><br><span class="line">          complete: function () &#123;</span><br><span class="line">            done()</span><br><span class="line">            vm.show &#x3D; true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/56cec792e380e9ac3e8ff4da6aa9a3be-325989" alt="生命周期"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要记录了Vue基础，还需要结合项目去深入学习，包括如何和SpringBoot结合！最后鸡汤：<strong>唯一的限制是你的想象力!</strong></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue状态管理模式组件Vuex</title>
    <url>/2020/07/29/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F%E7%BB%84%E4%BB%B6Vuex/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化（核心就是 store（仓库），就当它用来储存东西的）。如果在一个项目开发中频繁的使用组件传参的方式来同步data中的值，一旦项目变得很庞大，管理和维护这些值将是相当棘手的工作，而Vuex能够使得这一棘手的工作变得容易了，当然这需要对短期和长期效益进行权衡。这部分主要记录如何使用Vuex！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Vuex 依赖 Promise，如果支持的浏览器没有实现 Promise (比如 IE)，可以使用一个 polyfill 的库来替代；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install es6-promise --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>将下列代码添加到你使用 Vuex 之前的一个地方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;es6-promise&#x2F;auto&#39;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>解决的问题：如果在一个项目开发中频繁的使用组件传参的方式来同步data中的值，一旦项目变得很庞大，管理和维护这些值将是相当棘手的工作。将需要共享的data，使用vuex进行统一集中式的管理；</p>
<ul>
<li><p>子组件通讯</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b49079da6f94855102dca515e73707f9-144288" alt="子组件通讯"></p>
</li>
<li><p>说明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">A组件说: <span class="string">"报告老大, 能否帮我托个信给小弟B"</span> =&gt; dispatch一个事件给App</span><br><span class="line">App老大说: <span class="string">"包在我身上, 它需要监听A组件的dispatch的时间, 同时需要broadcast一个事件给B组件"</span></span><br><span class="line">B小弟说: <span class="string">"信息已收到"</span>, 它需要on监听App组件分发的事件</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果父组件下有多个子组件, 子组件之间通讯的路径就会变的很繁琐, 父组件需要监听大量的事件, 还需要负责分发给不同的子组件</p>
</li>
</ul>
</li>
<li><p>在具有VueX的Vue项目中，只需要把这些值定义在VueX中，即可在整个Vue项目的组件中使用；</p>
</li>
<li><p>Vuex流程图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7005773f4203c7b0c761086ae7da0c96-33632" alt="Vuex流程图"></p>
<ul>
<li>绿色虚线包裹起来的部分就是Vuex的核心，state中保存的就是公共状态, 改变state的唯一方式就是通过mutations进行更改</li>
</ul>
</li>
<li><p>使用场景：需要构建一个中大型单页应用，很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择</p>
<ul>
<li>组件之间的数据通信</li>
<li>使用单向数据流的方式进行数据的中心化管理</li>
<li>多个视图使用于同一状态</li>
<li>不同视图需要变更同一状态</li>
</ul>
</li>
<li><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>；</p>
</li>
<li><p>Vuex 和单纯的全局对象有以下两点不同：</p>
<ul>
<li>Vuex 的状态存储是响应式的——当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新</li>
<li>不能直接改变 store 中的状态——改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>，可以方便地跟踪每一个状态的变化</li>
</ul>
</li>
<li><p>Vue以及Vuex的生命周期:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d65febd43f4faaeff4b01d9684c52d8b-57739" alt="Vue以及Vuex的生命周期"></p>
</li>
</ol>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ol>
<li>Vuex 使用<strong>单一状态树</strong>，每个应用将仅仅包含一个 store 实例。在调试的过程中能轻易地取得整个当前应用状态的快照；</li>
<li>Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在<strong>计算属性</strong>中返回某个状态；</li>
<li>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中。可以将state看作是所有组件的data，用于保存所有组件的公共数据；</li>
<li>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。如果有些状态严格属于单个组件，最好还是作为组件的局部状态，应该根据你的应用开发需要进行权衡和确定！</li>
</ol>
<h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><ol>
<li>Vuex 允许在 store 中定义“getter”，就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。可以理解为所有组件的computed属性；</li>
<li>getter传参：<ul>
<li>接受 state 作为第一个参数</li>
<li>接受其他 getter 作为第二个参数</li>
</ul>
</li>
<li>可以通过让 getter 返回一个函数，来实现给 getter 传参，在对 store 里的数组进行查询时非常有用。getter 在通过方法访问时，每次都会去进行调用，并且不会缓存结果。</li>
</ol>
<h3 id="mutation"><a href="#mutation" class="headerlink" title="mutation"></a>mutation</h3><ol>
<li>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。可以理解为store中的methods；</li>
<li>不能直接调用一个 mutation 回调函数，需要以相应的 type 调用 <strong>store.commit</strong> 方法；</li>
<li>可以向 store.commit 传入额外的参数，即 mutation 的载荷（payload）。在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读；</li>
<li>提交 mutation 的另一种方式是直接使用包含 type 属性的对象。当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变；</li>
<li>使用Vuex 中的 mutation注意事项：<ul>
<li>最好提前在 store 中初始化好所有的所需属性</li>
<li>当需要在对象上添加新属性时，应该<ul>
<li>使用 Vue.set(obj, ‘newProp’, 123)</li>
<li>以新对象替换老对象</li>
</ul>
</li>
</ul>
</li>
<li><strong>mutation 必须是同步函数！</strong>在 mutation 中混合异步调用会导致你的程序很难调试。</li>
</ol>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ol>
<li>action 类似于 mutation，不同在于：<ul>
<li>Action 提交的是 mutation，而不是直接变更状态</li>
<li>Action 可以包含任意异步操作</li>
</ul>
</li>
<li>action 函数接受一个与 store 实例具有相同方法和属性的 context 对象；</li>
<li>action 通过 store.dispatch 方法触发；</li>
</ol>
<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><ol>
<li>问题：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿！</li>
<li>Vuex 允许将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割；</li>
<li>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState；</li>
<li>通过添加 namespaced: true 的方式使得模块成为带命名空间的模块；</li>
<li>在 store 创建之后，可以使用 store.registerModule 方法注册模块。模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态；</li>
<li>可以使用 store.unregisterModule(moduleName) 来动态卸载模块。需要注意的是不能使用此方法卸载静态模块（即创建 store 时声明的模块）；</li>
<li>可以通过 store.hasModule(moduleName) 方法检查该模块是否已经被注册到 store。</li>
</ol>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ol>
<li><p>Vuex规定了一些需要遵守的规则：</p>
<ul>
<li>应用层级的状态应该集中到单个 store 对象中</li>
<li>提交 mutation 是更改状态的唯一方法，并且这个过程是同步的</li>
<li>异步逻辑都应该封装到 action 里面</li>
</ul>
</li>
<li><p>对于大型应用，通常会希望把 Vuex 相关代码分割到模块中。项目结构示例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">├──</span> <span class="string">index.html</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">main.js</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">api</span></span><br><span class="line"><span class="meta">│</span>   <span class="string">└── ... # 抽取出API请求</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">components</span></span><br><span class="line"><span class="meta">│</span>   <span class="string">├── App.vue</span></span><br><span class="line"><span class="meta">│</span>   <span class="string">└── ...</span></span><br><span class="line"><span class="meta">└──</span> <span class="string">store</span></span><br><span class="line">    <span class="meta">├──</span> <span class="string">index.js          # 我们组装模块并导出 store 的地方</span></span><br><span class="line">    <span class="meta">├──</span> <span class="string">actions.js        # 根级别的 action</span></span><br><span class="line">    <span class="meta">├──</span> <span class="string">mutations.js      # 根级别的 mutation</span></span><br><span class="line">    <span class="meta">└──</span> <span class="string">modules</span></span><br><span class="line">        <span class="meta">├──</span> <span class="string">cart.js       # 购物车模块</span></span><br><span class="line">        <span class="meta">└──</span> <span class="string">products.js   # 产品模块</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拆分之后的文件结构如下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ed2ba03132ba1fc1e9d0f1e47fe57a79-18831" alt="拆分vuex"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">"@/store/actions"</span>;</span><br><span class="line"><span class="comment">//挂载Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建VueX对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// actions.js</span></span><br><span class="line"><span class="keyword">const</span> actions= &#123;</span><br><span class="line">    aEdit(context,payload)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                context.commit(<span class="string">'edit'</span>,payload)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutations.js</span></span><br><span class="line"><span class="keyword">const</span> mutations= &#123;</span><br><span class="line">    edit(state,name)&#123;</span><br><span class="line">        state.name= name</span><br><span class="line">    &#125;,</span><br><span class="line">    ageedit(state)&#123;</span><br><span class="line">        state.age=<span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="comment">//存放的键值对就是所要管理的状态</span></span><br><span class="line">    name:<span class="string">'helloVueX'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol>
<li>Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数；</li>
<li>在插件中不允许直接修改状态，只能通过提交 mutation 来触发变化；</li>
<li>通过提交 mutation，插件可以用来同步数据源到 store；</li>
<li>有时候插件需要获得状态的“快照”，比较改变的前后状态。想要实现这项功能，需要对状态对象进行深拷贝；</li>
<li>Vuex 自带一个日志插件用于一般的调试。</li>
</ol>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><ol>
<li>开启严格模式，仅需在创建 store 的时候传入 strict: true；</li>
<li>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误；</li>
<li><strong>不要在发布环境下启用严格模式！</strong>严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</li>
</ol>
<h3 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h3><ol>
<li>Vuex 支持在开发过程中热重载 mutation、module、action 和 getter；</li>
<li>对于 mutation 和模块，你需要使用 store.hotUpdate() 方法；</li>
<li>可以使用 require.context 来动态地加载或热重载所有的模块。</li>
</ol>
<h3 id="状态管理模式"><a href="#状态管理模式" class="headerlink" title="状态管理模式"></a>状态管理模式</h3><ol>
<li><p>Vue 计数应用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  &#x2F;&#x2F; state</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; view</span><br><span class="line">  template: &#96;</span><br><span class="line">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &#96;,</span><br><span class="line">  &#x2F;&#x2F; actions</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>state，驱动应用的数据源</li>
<li>view，以声明方式将 state 映射到视图</li>
<li>actions，响应在 view 上的用户输入导致的状态变化</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/983ea11f68f23d6a3229e13eafea6dc7-25103" alt="单向数据流"></p>
</li>
<li><p>当应用中进行<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏：</p>
<ul>
<li>多个视图依赖于同一状态；传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力</li>
<li>来自不同视图的行为需要变更同一状态；经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝</li>
</ul>
</li>
<li><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，代码将会变得更结构化且易维护。</p>
</li>
</ol>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ol>
<li><p>环境版本：</p>
<ul>
<li>@vue/cli——4.4.6</li>
<li>node——v14.5.0</li>
</ul>
</li>
<li><p>使用cnpm在项目下安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install vuex --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用vuex(main.js)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录下新增一个store文件夹，在该文件夹内创建index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建VueX对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="comment">// 存放的键值对就是所要管理的状态</span></span><br><span class="line">    name: <span class="string">'helloworld'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改main.js，添加内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ae015e5434a1da131f47b2f13ceecf57-16915" alt="在项目中注册vuex"></p>
</li>
<li><p>在组件中使用Vuex：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class="line">    name:</span><br><span class="line">    &lt;h1&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>getters测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getters.js</span></span><br><span class="line"><span class="keyword">const</span> getters=&#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// actions.js</span></span><br><span class="line"><span class="keyword">const</span> actions= &#123;</span><br><span class="line">    aEdit(context,payload)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                context.commit(<span class="string">'edit'</span>,payload)</span><br><span class="line">                context.commit(<span class="string">'toedit'</span>)</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions</span><br></pre></td></tr></table></figure>

<ul>
<li><p>getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算</p>
</li>
<li><p>getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的</p>
</li>
<li><p>按键处理前：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/da042ae6890d41f436af463d73193705-49683" alt="按键处理前"></p>
</li>
<li><p>按键处理后：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/523d193454a3659c43e166ef54993c0f-45810" alt="按键处理后"></p>
</li>
</ul>
</li>
<li><p>Vue谷歌开发工具调试:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/09fbf208d02953f3792d094689aef292-137574" alt="调试工具"></p>
</li>
<li><p>引入vuex辅助函数：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/07269283e6ba8d5535175e1633758686-48410" alt="引入vuex辅助函数"></p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>官方教程：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a></li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Vuex解决了一些编程中的问题，主要是规范以及提供的开发工具使得项目开发过程中很舒服！前端现在也越来越偏向架构化了，因此学习这些内容对于全栈开发还是有意义的！具体什么时候用Vuex，按照一些开发人员说的，<strong>当觉得需要使用的时候用就好了！</strong></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue进阶一期</title>
    <url>/2020/07/16/Vue%E8%BF%9B%E9%98%B6%E4%B8%80%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这部分记录如何使用Vue构建前端页面的过程！以及基于模板创建前端项目，还有记录一些比较优秀的Vue模板项目！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ol>
<li><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目；</p>
</li>
<li><p>使用webpack模板构建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装 vue-cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --global vue-cli</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个基于 webpack 模板的新项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vue init webpack my-project</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖，走你</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> my-project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用pwa模板构建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue init pwa mypwa</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖，走你</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mypwa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pwa模板项目运行效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f121d2857c9960cc543991e901b33f49-38485" alt="pwa运行效果"></p>
</li>
<li><p><strong>console.dir()可以显示一个对象所有的属性和方法</strong>。例如console.dir(document);就可查看文档对象（document树）下所有的东西；</p>
</li>
<li><p>测试一段代码执行时间：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'test'</span>);</span><br><span class="line"><span class="comment">/* 这里运行待测代码 */</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue主要是“面向数据”编程。当数据发生改变时使用虚拟DOM来更改某一DOM节点，避免将整个页面渲染；</p>
</li>
<li><p>VueJs调试工具——vue-devtools：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/91ace0d1f889655856012ea70271d1c0-46437" alt="Vue调试"></p>
<ul>
<li>装好的谷歌浏览器插件vue-devtools是在开发者工具中的，需要时Vue项目才有用！</li>
</ul>
</li>
<li><p>vue-cli创建的工程目录结构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/42c68cc9ffe0d77f783c1954d1cf98ff-68104" alt="Vue工程目录"></p>
</li>
<li><p>在*.vue文件，template标签里写html代码，且template直接子级只能有一个标签。style标签里写样式，script里面写js代码；</p>
</li>
<li><p>如果需要增加组件那就在components文件下定义xx.vue文件并编写代码即可，如果需要配置路由就要进行在index.js进行路由“路径”配置，还需要点击跳转就要用到router-link标签了；</p>
</li>
<li><p>webpack是一个模块加载器， 一切东西都是模块（包括css、html、js、图片等）, 最后都打包到一块了；</p>
</li>
</ol>
<h2 id="Vue-CLI-amp-组件添加"><a href="#Vue-CLI-amp-组件添加" class="headerlink" title="Vue CLI&amp;组件添加"></a>Vue CLI&amp;组件添加</h2><ol>
<li><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p>
<ul>
<li>通过 @vue/cli 实现的交互式的项目脚手架</li>
<li>通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发</li>
<li>一个丰富的官方插件集合，集成了前端生态中最好的工具</li>
<li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li>
</ul>
</li>
<li><p>Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)；</p>
</li>
<li><p>element组件的官网：<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/installation</a></p>
</li>
<li><p>安装组件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install element-ui</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入element-ui：</p>
<ol>
<li><p>在项目的main.js 中写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ElementUI from &#39;element-ui&#39;;</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>
</li>
<li><p>样式文件需要单独引入</p>
</li>
<li><p>在组件中添加需要的ui：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-steps :active&#x3D;&quot;active&quot; finish-status&#x3D;&quot;success&quot;&gt;</span><br><span class="line">    &lt;el-step title&#x3D;&quot;步骤 1&quot; icon&#x3D;&quot;el-icon-edit&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">    &lt;el-step title&#x3D;&quot;步骤 2&quot; icon&#x3D;&quot;el-icon-upload&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">    &lt;el-step title&#x3D;&quot;步骤 3&quot; icon&#x3D;&quot;el-icon-picture&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">&lt;&#x2F;el-steps&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体的使用要看组件文档。</p>
</li>
</ol>
</li>
<li><p>测试组件（HelloWorld.vue）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;el-steps :active&#x3D;&quot;active&quot; finish-status&#x3D;&quot;success&quot;&gt;</span><br><span class="line">      &lt;el-step title&#x3D;&quot;步骤 1&quot; icon&#x3D;&quot;el-icon-edit&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">      &lt;el-step title&#x3D;&quot;步骤 2&quot; icon&#x3D;&quot;el-icon-upload&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">      &lt;el-step title&#x3D;&quot;步骤 3&quot; icon&#x3D;&quot;el-icon-picture&quot;&gt;&lt;&#x2F;el-step&gt;</span><br><span class="line">    &lt;&#x2F;el-steps&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button style&#x3D;&quot;margin-top: 12px;&quot; @click&#x3D;&quot;next&quot;&gt;下一步&lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-image&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;block&quot; v-for&#x3D;&quot;fit in fits&quot; :key&#x3D;&quot;fit&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;demonstration&quot;&gt;&#123;&#123; fit &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-image</span><br><span class="line">          style&#x3D;&quot;width: 100px; height: 100px&quot;</span><br><span class="line">          :src&#x3D;&quot;url&quot;</span><br><span class="line">          :fit&#x3D;&quot;fit&quot;&gt;&lt;&#x2F;el-image&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-image__placeholder&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;demonstration&quot;&gt;默认&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-image :src&#x3D;&quot;src&quot;&gt;&lt;&#x2F;el-image&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;demonstration&quot;&gt;自定义&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-image :src&#x3D;&quot;src&quot;&gt;</span><br><span class="line">          &lt;div slot&#x3D;&quot;placeholder&quot; class&#x3D;&quot;image-slot&quot;&gt;</span><br><span class="line">            加载中&lt;span class&#x3D;&quot;dot&quot;&gt;...&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-image&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;el-calendar v-model&#x3D;&quot;value&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-calendar&gt;</span><br><span class="line">    Scroll down to see the bottom-right button.</span><br><span class="line">    &lt;el-divider&gt;&lt;&#x2F;el-divider&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;demonstration&quot;&gt;默认 Hover 指示器触发&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;el-carousel height&#x3D;&quot;150px&quot;&gt;</span><br><span class="line">        &lt;el-carousel-item v-for&#x3D;&quot;item in 4&quot; :key&#x3D;&quot;item&quot;&gt;</span><br><span class="line">          &lt;el-image :src&#x3D;&quot;url&quot;&gt;&lt;&#x2F;el-image&gt;</span><br><span class="line">        &lt;&#x2F;el-carousel-item&gt;</span><br><span class="line">      &lt;&#x2F;el-carousel&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span&#x3D;&quot;8&quot; v-for&#x3D;&quot;(o, index) in 2&quot; :key&#x3D;&quot;o&quot; :offset&#x3D;&quot;index &gt; 0 ? 2 : 0&quot;&gt;</span><br><span class="line">        &lt;el-card :body-style&#x3D;&quot;&#123; padding: &#39;0px&#39; &#125;&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;shadow.elemecdn.com&#x2F;app&#x2F;element&#x2F;hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png&quot; class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">          &lt;div style&#x3D;&quot;padding: 14px;&quot;&gt;</span><br><span class="line">            &lt;span&gt;好吃的汉堡&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;bottom clearfix&quot;&gt;</span><br><span class="line">              &lt;time class&#x3D;&quot;time&quot;&gt;&#123;&#123; currentDate &#125;&#125;&lt;&#x2F;time&gt;</span><br><span class="line">              &lt;el-button type&#x3D;&quot;text&quot; class&#x3D;&quot;button&quot; @click&#x3D;&quot;details&quot;&gt;操作按钮&lt;&#x2F;el-button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-card&gt;</span><br><span class="line">      &lt;&#x2F;el-col&gt;</span><br><span class="line">    &lt;&#x2F;el-row&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      class&#x3D;&quot;upload-demo&quot;</span><br><span class="line">      action&#x3D;&quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#x2F;&quot;</span><br><span class="line">      :on-preview&#x3D;&quot;handlePreview&quot;</span><br><span class="line">      :on-remove&#x3D;&quot;handleRemove&quot;</span><br><span class="line">      :file-list&#x3D;&quot;fileList&quot;</span><br><span class="line">      list-type&#x3D;&quot;picture&quot;&gt;</span><br><span class="line">      &lt;el-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;&gt;点击上传&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;tip&quot; class&#x3D;&quot;el-upload__tip&quot;&gt;只能上传jpg&#x2F;png文件，且不超过500kb&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;el-upload&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-image__preview&quot;&gt;</span><br><span class="line">      &lt;el-image</span><br><span class="line">        style&#x3D;&quot;width: 100px; height: 100px&quot;</span><br><span class="line">        :src&#x3D;&quot;url&quot;</span><br><span class="line">        :preview-src-list&#x3D;&quot;srcList&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-image&gt;</span><br><span class="line">      &lt;el-popconfirm</span><br><span class="line">        title&#x3D;&quot;这是一段内容确定删除吗？&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-button slot&#x3D;&quot;reference&quot;&gt;删除&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-popconfirm&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;radio&quot;&gt;</span><br><span class="line">          排序：</span><br><span class="line">          &lt;el-radio-group v-model&#x3D;&quot;reverse&quot;&gt;</span><br><span class="line">            &lt;el-radio :label&#x3D;&quot;true&quot;&gt;倒序&lt;&#x2F;el-radio&gt;</span><br><span class="line">            &lt;el-radio :label&#x3D;&quot;false&quot;&gt;正序&lt;&#x2F;el-radio&gt;</span><br><span class="line">          &lt;&#x2F;el-radio-group&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-timeline :reverse&#x3D;&quot;reverse&quot;&gt;</span><br><span class="line">          &lt;el-timeline-item</span><br><span class="line">            v-for&#x3D;&quot;(activity, index) in activities&quot;</span><br><span class="line">            :key&#x3D;&quot;index&quot;</span><br><span class="line">            :timestamp&#x3D;&quot;activity.timestamp&quot;&gt;</span><br><span class="line">            &#123;&#123;activity.content&#125;&#125;</span><br><span class="line">          &lt;&#x2F;el-timeline-item&gt;</span><br><span class="line">        &lt;&#x2F;el-timeline&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;block&quot;&gt;</span><br><span class="line">      &lt;el-timeline&gt;</span><br><span class="line">        &lt;el-timeline-item</span><br><span class="line">          v-for&#x3D;&quot;(activity, index) in activities&quot;</span><br><span class="line">          :key&#x3D;&quot;index&quot;</span><br><span class="line">          :icon&#x3D;&quot;activity.icon&quot;</span><br><span class="line">          :type&#x3D;&quot;activity.type&quot;</span><br><span class="line">          :color&#x3D;&quot;activity.color&quot;</span><br><span class="line">          :size&#x3D;&quot;activity.size&quot;</span><br><span class="line">          :timestamp&#x3D;&quot;activity.timestamp&quot;&gt;</span><br><span class="line">          &#123;&#123;activity.content&#125;&#125;</span><br><span class="line">        &lt;&#x2F;el-timeline-item&gt;</span><br><span class="line">      &lt;&#x2F;el-timeline&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Welcome to Your Vue.js App&#39;,</span><br><span class="line">      active: 0,</span><br><span class="line">      fits: [&#39;fill&#39;, &#39;contain&#39;, &#39;cover&#39;, &#39;none&#39;, &#39;scale-down&#39;],</span><br><span class="line">      url: &#39;https:&#x2F;&#x2F;fuss10.elemecdn.com&#x2F;e&#x2F;5d&#x2F;4a731a90594a4af544c0c25941171jpeg.jpeg&#39;,</span><br><span class="line">      src: &#39;https:&#x2F;&#x2F;cube.elemecdn.com&#x2F;6&#x2F;94&#x2F;4d3ea53c084bad6931a56d5158a48jpeg.jpeg&#39;,</span><br><span class="line">      value: new Date(),</span><br><span class="line">      currentDate: new Date(),</span><br><span class="line">      fileList: [&#123;name: &#39;food.jpeg&#39;, url: &#39;https:&#x2F;&#x2F;fuss10.elemecdn.com&#x2F;3&#x2F;63&#x2F;4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2&#x2F;thumbnail&#x2F;360x360&#x2F;format&#x2F;webp&#x2F;quality&#x2F;100&#39;&#125;, &#123;name: &#39;food2.jpeg&#39;, url: &#39;https:&#x2F;&#x2F;fuss10.elemecdn.com&#x2F;3&#x2F;63&#x2F;4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2&#x2F;thumbnail&#x2F;360x360&#x2F;format&#x2F;webp&#x2F;quality&#x2F;100&#39;&#125;],</span><br><span class="line">      srcList: [</span><br><span class="line">        &#39;https:&#x2F;&#x2F;fuss10.elemecdn.com&#x2F;8&#x2F;27&#x2F;f01c15bb73e1ef3793e64e6b7bbccjpeg.jpeg&#39;,</span><br><span class="line">        &#39;https:&#x2F;&#x2F;fuss10.elemecdn.com&#x2F;1&#x2F;8e&#x2F;aeffeb4de74e2fde4bd74fc7b4486jpeg.jpeg&#39;</span><br><span class="line">      ],</span><br><span class="line">      reverse: true,</span><br><span class="line">      activities: [&#123;</span><br><span class="line">        content: &#39;活动按期开始&#39;,</span><br><span class="line">        timestamp: &#39;2018-04-15&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        content: &#39;通过审核&#39;,</span><br><span class="line">        timestamp: &#39;2018-04-13&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        content: &#39;创建成功&#39;,</span><br><span class="line">        timestamp: &#39;2018-04-11&#39;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    open () &#123;</span><br><span class="line">      this.$alert(&#39;这是一段内容&#39;, &#39;标题名称&#39;, &#123;</span><br><span class="line">        confirmButtonText: &#39;确定&#39;,</span><br><span class="line">        callback: action &#x3D;&gt; &#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &#39;info&#39;,</span><br><span class="line">            message: &#39;test&#39;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    next () &#123;</span><br><span class="line">      if (this.active++ &gt; 2) this.active &#x3D; 0</span><br><span class="line">    &#125;,</span><br><span class="line">    details () &#123;</span><br><span class="line">      console.log(&#39;clicked!&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleRemove (file, fileList) &#123;</span><br><span class="line">      console.log(file, fileList)</span><br><span class="line">    &#125;,</span><br><span class="line">    handlePreview (file) &#123;</span><br><span class="line">      console.log(file)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">.el-carousel__item h3 &#123;</span><br><span class="line">  color: #475669;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  opacity: 0.75;</span><br><span class="line">  line-height: 150px;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item:nth-child(2n) &#123;</span><br><span class="line">  background-color: #99a9bf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item:nth-child(2n+1) &#123;</span><br><span class="line">  background-color: #d3dce6;</span><br><span class="line">&#125;</span><br><span class="line">.time &#123;</span><br><span class="line">  font-size: 13px;</span><br><span class="line">  color: #999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bottom &#123;</span><br><span class="line">  margin-top: 13px;</span><br><span class="line">  line-height: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.button &#123;</span><br><span class="line">  padding: 0;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.image &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  display: table;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear: both</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加百度Echarts插件：</p>
<ol>
<li><p>在工程目录下运行下面的命令添加Echarts模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install echarts -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>在工程的main.js添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; import echarts from &#39;echarts&#39; 引入echarts后，不能全局使用echarts,通过Vue.prototype 将echarts保存为全局变量</span><br><span class="line">import echarts from &#39;echarts&#39;</span><br><span class="line">Vue.prototype.$echarts &#x3D; echarts</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个显示的组件Echarts.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;Echarts&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Echarts&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myEcharts () &#123;</span><br><span class="line">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">      var myChart &#x3D; this.$echarts.init(document.getElementById(&#39;main&#39;))</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">      var option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &#39;ECharts 入门示例&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [&#39;销量&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [&#39;衬衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">          name: &#39;销量&#39;,</span><br><span class="line">          type: &#39;bar&#39;,</span><br><span class="line">          data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.myEcharts()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在router/index.js文件中添加路由：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld&#39;</span><br><span class="line">import Echarts from &#39;@&#x2F;components&#x2F;Echarts&#39;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;HelloWorld&#39;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;echarts&#39;,</span><br><span class="line">      name: &#39;Echarts&#39;,</span><br><span class="line">      component: Echarts</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译运行项目。</p>
</li>
</ol>
</li>
<li><p>添加百度的Echarts效果如下：</p>
<ul>
<li>访问网址：<a href="http://localhost:8080/#/echarts" target="_blank" rel="noopener">http://localhost:8080/#/echarts</a></li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f54d5acaa2947b35045514e13e3d88e7-46621" alt="百度Echarts效果"></p>
</li>
</ol>
<h2 id="Vue常用模板"><a href="#Vue常用模板" class="headerlink" title="Vue常用模板"></a>Vue常用模板</h2><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><ol>
<li>Webpack模板利用了Webpack及其生态系统的许多前沿功能，包括热重载，CSS提取，linting以及单文件组件加载。它还包括针对开发，生产甚至测试而优化的独立配置；</li>
<li>Webpack Simple模板是Webpack的简化版本；</li>
</ol>
<h3 id="vue-manage-system"><a href="#vue-manage-system" class="headerlink" title="vue-manage-system"></a>vue-manage-system</h3><ol>
<li><p>Git网址：<a href="https://github.com/lin-xin/vue-manage-system" target="_blank" rel="noopener">https://github.com/lin-xin/vue-manage-system</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d47297c1d0a0e3f23056c23f5f6dc2bb-135081" alt="vue-manage-system示意图"></p>
</li>
</ol>
<h3 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h3><ol>
<li><p>Git网址：<a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">https://github.com/PanJiaChen/vue-element-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f5c64191ff71edfb87c734cc93633a3d-87107" alt="vue-element-admin示意图"></p>
</li>
</ol>
<h3 id="vuejs-和-element-搭建的一个后台管理界面"><a href="#vuejs-和-element-搭建的一个后台管理界面" class="headerlink" title="vuejs 和 element 搭建的一个后台管理界面"></a>vuejs 和 element 搭建的一个后台管理界面</h3><ol>
<li><p>Git网址：<a href="https://github.com/taylorchen709/vue-admin" target="_blank" rel="noopener">https://github.com/taylorchen709/vue-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/826ad49d3a9e293d101db47e4c704157-116865" alt="vuejs 和 element 搭建的一个后台管理界面"></p>
</li>
</ol>
<h3 id="基于Vue实现后台系统权限控制"><a href="#基于Vue实现后台系统权限控制" class="headerlink" title="基于Vue实现后台系统权限控制"></a>基于Vue实现后台系统权限控制</h3><ol>
<li><p>Git网址：<a href="https://github.com/mgbq/nx-admin" target="_blank" rel="noopener">https://github.com/mgbq/nx-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/84640669ffc7b12bc79c169aee05b4e0-291471" alt="基于Vue实现后台系统权限控制"></p>
</li>
</ol>
<h3 id="基于-vue-js-和-ElementUI-d2-admin"><a href="#基于-vue-js-和-ElementUI-d2-admin" class="headerlink" title="基于 vue.js 和 ElementUI - d2-admin"></a>基于 vue.js 和 ElementUI - d2-admin</h3><ol>
<li><p>Git网址：<a href="https://github.com/d2-projects/d2-admin" target="_blank" rel="noopener">https://github.com/d2-projects/d2-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e9a3d9d77fae100d7d7e3d8febbd48b7-80786" alt="d2-admin示意图"></p>
</li>
</ol>
<h3 id="vue后台UI框架-iview"><a href="#vue后台UI框架-iview" class="headerlink" title="vue后台UI框架 - iview"></a>vue后台UI框架 - iview</h3><ol>
<li><p>Git网址：<a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">https://github.com/iview/iview-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/153732db47be0f1e0faf69e69aa8ee85-97744" alt="iview示意图"></p>
</li>
</ol>
<h3 id="vue2-manage"><a href="#vue2-manage" class="headerlink" title="vue2-manage"></a>vue2-manage</h3><ol>
<li><p>Git网址：<a href="https://github.com/bailicangdu/vue2-manage" target="_blank" rel="noopener">https://github.com/bailicangdu/vue2-manage</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9b1f6ec12251047e895c21fa3c8ecdb9-75091" alt="vue2-manage示意图"></p>
</li>
</ol>
<h3 id="vue2-element-touzi-admin"><a href="#vue2-element-touzi-admin" class="headerlink" title="vue2-element-touzi-admin"></a>vue2-element-touzi-admin</h3><ol>
<li><p>Git网址：<a href="https://github.com/wdlhao/vue2-element-touzi-admin" target="_blank" rel="noopener">https://github.com/wdlhao/vue2-element-touzi-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/644e924353b6a1849ddcf197191babd6-137299" alt="vue2-element-touzi-admin示意图"></p>
</li>
</ol>
<h3 id="VueDemo-Sell-Eleme"><a href="#VueDemo-Sell-Eleme" class="headerlink" title="VueDemo_Sell_Eleme"></a>VueDemo_Sell_Eleme</h3><ol>
<li><p>Git网址：<a href="https://github.com/SimonZhangITer/VueDemo_Sell_Eleme" target="_blank" rel="noopener">https://github.com/SimonZhangITer/VueDemo_Sell_Eleme</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/28028fca6a10c005a2204da470279df0-227530" alt="VueDemo_Sell_Eleme示意图"></p>
</li>
</ol>
<h2 id="vuestic-admin"><a href="#vuestic-admin" class="headerlink" title="vuestic-admin"></a>vuestic-admin</h2><ol>
<li><p>Git网址：<a href="https://github.com/epicmaxco/vuestic-admin" target="_blank" rel="noopener">https://github.com/epicmaxco/vuestic-admin</a></p>
</li>
<li><p>效果示意图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d3d5f740dc7f4f5dfd3b5944f8ed4f8a-117429" alt="vuestic-admin示意图"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分主要记录了Vue脚手架Vue-cli，使用vue-cli创建了一个模板项目，并记录了如何添加插件到自己的工程中，举例过程中主要是Element-ui和Echarts两个插件，最后还搜索了一些github上获得stars比较多的vue项目，可以阅读这些源码获得更多的前段vue知识，当然还要更深入学习Vue！</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue进阶第三期</title>
    <url>/2020/07/27/Vue%E8%BF%9B%E9%98%B6%E7%AC%AC%E4%B8%89%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>针对第二期过程中对于Vue路由管理过程中出现的不解，进行系统化地学习与实操从而更深入理解Vue。在这部分也记录了Element-ui中的自定义图标以及回到顶部没有出现效果的解决办法。这部分没有华丽的特效，但是对于前端开发项目很有帮助！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><ol>
<li><p>Vue Router 是 Vue.js 官方的路由管理器，和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌；</p>
</li>
<li><p>功能：</p>
<ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于 Vue.js 过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的 CSS class 的链接</li>
<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>
<li>自定义的滚动条行为</li>
</ul>
</li>
<li><p>当把 Vue Router 添加进项目中进行路由管理时，需要做的是将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们；</p>
</li>
<li><p>使用Vue-router管理路由器后，就可以在任何组件内通过 this.$router 访问路由器，也可以通过 this.$route 访问当前路由；</p>
</li>
<li><p>可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;router-link :to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;<span class="regexp">/router-link&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对router-view命名可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口，这样可以同时 (同级) 展示多个视图，而不是嵌套展示，也有可能使用命名视图创建嵌套视图的复杂布局；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-view class&#x3D;&quot;view one&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view two&quot; name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view three&quot; name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        default: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">/settings/emails                                       /settings/profile</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br><span class="line">| UserSettings                      |                  | UserSettings                 |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |</span><br><span class="line">| |     +-------------------------+ |                  | |     +--------------------+ |</span><br><span class="line">| |     |                         | |                  | |     | UserProfilePreview | |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态路由匹配：</p>
<ol>
<li><p>需求：业务上经常需要将匹配某种模式的路由，全部映射到同一个组件上；</p>
</li>
<li><p>方法：在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来满足这种需求；</p>
</li>
<li><p>案例：有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染；</p>
</li>
<li><p>样例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 像 /user/foo 和 /user/bar 都将映射到相同的组件上进行渲染</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个“路径参数”使用冒号 : 标记，当匹配到一个路由时，参数值会被设置到 this.$route.params，然后可以在组件内使用；</p>
</li>
<li><p>在一个路由中设置多段“路径参数”，对应的值都会设置到 $route.params 中：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>匹配路径</th>
<th>$route.params</th>
</tr>
</thead>
<tbody><tr>
<td>/user/:username</td>
<td>/user/evan</td>
<td><code>{ username: &#39;evan&#39; }</code></td>
</tr>
<tr>
<td>/user/:username/post/:post_id</td>
<td>/user/evan/post/123</td>
<td><code>{ username: &#39;evan&#39;, post_id: &#39;123&#39; }</code></td>
</tr>
</tbody></table>
</li>
<li><p>当使用同一个组件来进行渲染时，原来的组件实例会被复用，而不会被销毁，从而导致<strong>组件的生命周期钩子不会被再调用</strong>，复用时想要对路由参数的变化做出响应，可以通过watch监测route对象；</p>
</li>
<li><p>匹配任意路径，我们可以使用通配符 (*)；</p>
</li>
</ol>
</li>
<li><p>嵌套路由：</p>
<ol>
<li><p>需求：实际开发中，一个前端页面通常由多层嵌套的组件组合而成；</p>
</li>
<li><p>方法：URL 中各段动态路径也按某种结构对应嵌套的各层组件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">/user/foo/profile                     /user/foo/posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个被渲染组件可以包含自己的嵌套 router-view，即组件可以嵌套router-view；</p>
</li>
<li><p>要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; </span><br><span class="line">      path: <span class="string">'/user/:id'</span>, </span><br><span class="line">      component: User,</span><br><span class="line">      children: [</span><br><span class="line">        &#123; </span><br><span class="line">          <span class="comment">// 当 /user/:id 匹配成功，</span></span><br><span class="line">        	<span class="comment">// UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">''</span>, </span><br><span class="line">          component: UserHome </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'profile'</span>,</span><br><span class="line">          component: UserProfile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'posts'</span>,</span><br><span class="line">          component: UserPosts</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>编程式路由切换：</p>
<ol>
<li><p>编程模型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.push(location, onComplete?, onAbort?)</span><br><span class="line"><span class="comment">// router.push会向 history 栈添加一个新的记录，当用户点击浏览器后退按钮时，则回到之前的 URL</span></span><br><span class="line"></span><br><span class="line">router.replace(location, onComplete?, onAbort?)</span><br><span class="line"><span class="comment">// router.replace不会向 history 添加新记录，而是替换掉当前的 history 记录</span></span><br><span class="line"></span><br><span class="line">router.go(n)</span><br><span class="line"><span class="comment">// 在 history 记录中向前或者后退多少步，负数回退</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Vue 实例内部，可以通过 $router 访问路由实例，因此可以调用 this.$router.push；</p>
</li>
<li><p>方法的参数示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">'123'</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果提供了 path，params 会被忽略</li>
<li>onComplete，onAbort回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用</li>
</ul>
</li>
</ol>
</li>
<li><p>路由组件传参：</p>
<ol>
<li>可以通过$route进行参数传递，但是在组件中使用$route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性；</li>
<li>使用 props 将组件和路由解耦，提升组件灵活性；</li>
</ol>
</li>
<li><p>vue-router模式：</p>
<ul>
<li><p>使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载，即hash 模式（默认）， hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发hashchange 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化</p>
</li>
<li><p>URL 就像正常的 url，例如 <a href="http://yoursite.com/user/id，即" target="_blank" rel="noopener">http://yoursite.com/user/id，即</a> history 模式</p>
</li>
<li><p>切换模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>导航守卫：</p>
<ol>
<li><p>vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航；</p>
</li>
<li><p>参数或查询的改变并不会触发进入/离开的导航守卫，可以通过观察 $route 对象来应对这些变化；</p>
</li>
<li><p>全局前置守卫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"><span class="comment">// 使用 router.beforeEach 注册一个全局前置守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 每个守卫方法接收三个参数：</span></span><br><span class="line"><span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line"><span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line"><span class="comment">// next: Function: 一定要调用该方法来 resolve 这个钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 router.afterEach注册全局后置钩子</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以在路由配置上直接定义 beforeEnter 守卫；</p>
</li>
<li><p>可以在路由组件内直接定义以下路由导航守卫：</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate</li>
<li>beforeRouteLeave</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">   &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">   &#x2F;&#x2F; 因为当守卫执行前，组件实例还没被创建</span><br><span class="line"> &#125;,</span><br><span class="line"> beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">   &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">   &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line"> &#125;,</span><br><span class="line"> beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">   &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">   &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>动态过渡：</p>
<ol>
<li>使用transition为组件给添加一些过渡效果；</li>
<li>想让各个路由组件有各自的过渡效果，可以在各路由组件内使用 &lt;transition&gt; 并设置不同的 name；</li>
<li>可以基于当前路由与目标路由的变化关系，动态设置过渡效果；</li>
</ol>
</li>
</ol>
<h2 id="Vue数据获取"><a href="#Vue数据获取" class="headerlink" title="Vue数据获取"></a>Vue数据获取</h2><ol>
<li>进入某个路由后，有时候需要从服务器获取数据。例如，在渲染用户信息时，需要从服务器获取用户的数据；</li>
<li>获取阶段：<ul>
<li><strong>导航完成之后获取</strong>：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示“加载中”之类的指示</li>
<li><strong>导航完成之前获取</strong>：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航</li>
</ul>
</li>
</ol>
<h3 id="导航完成后获取数据"><a href="#导航完成后获取数据" class="headerlink" title="导航完成后获取数据"></a>导航完成后获取数据</h3><ol>
<li><p>使用这种方式时，会马上导航和渲染组件,然后在组件的 created 钩子中获取数据；</p>
</li>
<li><p>有可能需要在数据获取期间展示一个 loading 状态，或者在不同视图间展示不同的 loading 状态；</p>
</li>
<li><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      post: <span class="literal">null</span>,</span><br><span class="line">      error: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="comment">// 组件创建完后获取数据，</span></span><br><span class="line">    <span class="comment">// 此时 data 已经被 observed 了</span></span><br><span class="line">    <span class="keyword">this</span>.fetchData()</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 如果路由有变化，会再次执行该方法</span></span><br><span class="line">    <span class="string">'$route'</span>: <span class="string">'fetchData'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchData () &#123;</span><br><span class="line">      <span class="keyword">this</span>.error = <span class="keyword">this</span>.post = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// replace getPost with your data fetching util / API wrapper</span></span><br><span class="line">      getPost(<span class="keyword">this</span>.$route.params.id, (err, post) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">this</span>.error = err.toString()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.post = post</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="在导航完成前获取数据"><a href="#在导航完成前获取数据" class="headerlink" title="在导航完成前获取数据"></a>在导航完成前获取数据</h3><ol>
<li><p>使用这种方式会在导航转入新的路由前获取数据，可以在接下来的组件的 beforeRouteEnter 守卫中获取数据，当数据获取成功后只调用 next 方法；</p>
</li>
<li><p>在为后面的视图获取数据时，用户会停留在当前的界面，建议在数据获取期间，显示一些进度条或者别的指示。如果数据获取失败，同样有必要展示一些全局的错误提醒；</p>
</li>
<li><p>使用下面的函数完成数据获取：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由改变前，组件就已经渲染完了</span></span><br><span class="line"><span class="comment">// 逻辑稍稍不同</span></span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li>中文学习网址：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></li>
<li>中文API网址：<a href="https://router.vuejs.org/zh/api/" target="_blank" rel="noopener">https://router.vuejs.org/zh/api/</a></li>
</ol>
<h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><h3 id="标准使用element-ui"><a href="#标准使用element-ui" class="headerlink" title="标准使用element-ui"></a>标准使用element-ui</h3><ol>
<li><p>官方网址：<a href="https://element.eleme.cn/#/zh-CN/" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/</a></p>
</li>
<li><p>安装（在工程目录下）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install element-ui -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>工程中引入（main.js）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="comment">// 在引入ElementUI之后就可以在组件中使用ui库了</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在组件中使用ui库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-edit&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-share&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-delete&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;搜索&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a6f95ea4000f50aba4297f5b9e2ec4d6-11039" alt="element-ui使用效果"></p>
</li>
</ol>
<h3 id="引入Iconfont"><a href="#引入Iconfont" class="headerlink" title="引入Iconfont"></a>引入Iconfont</h3><ol>
<li><p>进入官网，注册并登录：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></p>
</li>
<li><p>进入首页的”图标管理 =&gt; 我的项目”，进行项目的管理：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ce06b9e745c0ecbae397514c922e1c45-99821" alt="Iconfont我的项目"></p>
</li>
<li><p>编辑项目属性：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1fdda940b205d9ab8837f5eb9bbcb718-39081" alt="项目关键属性"></p>
</li>
<li><p>下载自定义图标库：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0dde46c47022a9701d075410d2305fb9-26853" alt="下载自定义图标库"></p>
</li>
<li><p>在项目中添加如下的文件到项目的src/assets/icos目录下：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/90350d8e17ffb398c54bb4c143c2b65c-61932" alt="需要拷贝的文件"></p>
</li>
<li><p>在项目中导入自定义图标，并修改样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;.&#x2F;assets&#x2F;icons&#x2F;iconfont.css&#39;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.iconfont &#123;</span><br><span class="line">  font-family:&quot;iconfont&quot; !important;</span><br><span class="line">  font-size:32px;</span><br><span class="line">  font-style:normal;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义图标的应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-edit&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-share&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-delete&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;iconfont iconshuilongtou&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;搜索&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>挑选相应图标并获取类名，应用于页面，示例内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;iconfont iconshuilongtou&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/85ca5dd60b5f20944e2456c79f77e0bd-18246" alt="效果"></p>
</li>
<li><p>iconfont.css文件中<strong>.iconfont 类</strong>设置我们引入的图标的整体的样式 ，<strong>.iconxxx:before</strong>是引入的每一个图标， 可以通过在.iconxxx中写样式，单独设置某一个图标的样式！</p>
</li>
</ol>
<h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><ol>
<li><p>官方教程网址：<a href="https://element.eleme.cn/#/zh-CN/component/backtop" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/backtop</a></p>
</li>
<li><p>事实直接复制粘贴之后是没有效果的，主要的原因是因为<strong>显示回到顶部按钮的高度没有自定义</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot; class&#x3D;&quot;content-area&quot;&gt;</span><br><span class="line">    Scroll down to see the bottom-right button.</span><br><span class="line">    &lt;el-backtop target&#x3D;&quot;#app&quot; :visibility-height&#x3D;&quot;60&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        style&#x3D;&quot;&#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background-color: #f2f5f6;</span><br><span class="line">        box-shadow: 0 0 6px rgba(0,0,0, .12);</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        color: #1989fa;</span><br><span class="line">      &#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        UP</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;el-backtop&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1d6b4282361bee389439c193c4b7df77-32867" alt="回到顶部效果"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分进行了Vue路由器的实操，Element-ui的使用，动手过程中才会发现一些问题，比如回到顶部，始终不出现效果，找了几篇博客去阅读也没解决啥问题，花时间去尝试之后出现了效果还是很有成就感的。接下来还需要去阅读几个开源项目的源码！</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue进阶第二期</title>
    <url>/2020/07/21/Vue%E8%BF%9B%E9%98%B6%E7%AC%AC%E4%BA%8C%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这里主要介绍一些组件的使用，然后就是看源码分析一个模板vue-manage-system，还需要理解如何结合SpringBoot进行全栈开发。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="组件快速使用"><a href="#组件快速使用" class="headerlink" title="组件快速使用"></a>组件快速使用</h2><h3 id="vue-baidu-map"><a href="#vue-baidu-map" class="headerlink" title="vue-baidu-map"></a>vue-baidu-map</h3><ol>
<li><p>在Vue项目根目录下安装百度地图插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install vue-baidu-map -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>官网注册ak：<a href="http://lbsyun.baidu.com/apiconsole/key#/home" target="_blank" rel="noopener">http://lbsyun.baidu.com/apiconsole/key#/home</a></p>
</li>
<li><p>全局注册，在main.js中引入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import BaiduMap from &#39;vue-baidu-map&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(BaiduMap, &#123;</span><br><span class="line">  ak: &#39;RLWWZo1LNjWNpjoLKGOOQbYjNY7mEIhs&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>百度地图组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;Echarts&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;baidu-map :center&#x3D;&quot;center&quot; :zoom&#x3D;&quot;zoom&quot; @ready&#x3D;&quot;handler&quot; style&#x3D;&quot;height:1080px&quot; @click&#x3D;&quot;getClickInfo&quot; :scroll-wheel-zoom&#x3D;&#39;true&#39;&gt;</span><br><span class="line">    &lt;&#x2F;baidu-map&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Echarts&#39;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      center: &#123;lng: 109.45744048529967, lat: 36.49771311230842&#125;,</span><br><span class="line">      zoom: 13</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myEcharts () &#123;</span><br><span class="line">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">      var myChart &#x3D; this.$echarts.init(document.getElementById(&#39;main&#39;))</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">      var option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &#39;ECharts 入门示例&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [&#39;销量&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [&#39;衬衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">          name: &#39;销量&#39;,</span><br><span class="line">          type: &#39;bar&#39;,</span><br><span class="line">          data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option)</span><br><span class="line">    &#125;,</span><br><span class="line">    handler (&#123;BMap, map&#125;) &#123;</span><br><span class="line">      var point &#x3D; new BMap.Point(120.299, 31.57)</span><br><span class="line">      map.centerAndZoom(point, 13)</span><br><span class="line">      var marker &#x3D; new BMap.Marker(point) &#x2F;&#x2F; 创建标注</span><br><span class="line">      map.addOverlay(marker) &#x2F;&#x2F; 将标注添加到地图中</span><br><span class="line">      var circle &#x3D; new BMap.Circle(point, 6, &#123; strokeColor: &#39;Red&#39;, strokeWeight: 6, strokeOpacity: 1, Color: &#39;Red&#39;, fillColor: &#39;#f03&#39; &#125;)</span><br><span class="line">      map.addOverlay(circle)</span><br><span class="line">    &#125;,</span><br><span class="line">    getClickInfo (e) &#123;</span><br><span class="line">      console.log(e.point.lng)</span><br><span class="line">      console.log(e.point.lat)</span><br><span class="line">      this.center.lng &#x3D; e.point.lng</span><br><span class="line">      this.center.lat &#x3D; e.point.lat</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.myEcharts()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4c5dc227a6e3f2f47b94124078353e57-135110" alt="百度地图效果"></p>
</li>
<li><p>可以修改样式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div id="all-map" class="all-map" &gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.all-map</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="vue-video-player"><a href="#vue-video-player" class="headerlink" title="vue-video-player"></a>vue-video-player</h3><ol>
<li><p>在Vue项目根目录下安装百度地图插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install vue-video-player -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局注册，在main.js中引入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import VueVideoPlayer from &#39;vue-video-player&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; require videojs style</span><br><span class="line">import &#39;video.js&#x2F;dist&#x2F;video-js.css&#39;</span><br><span class="line">&#x2F;&#x2F; import &#39;vue-video-player&#x2F;src&#x2F;custom-theme.css&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueVideoPlayer&#x2F;*,  &#123;</span><br><span class="line">  options: global default options,</span><br><span class="line">  events: global videojs events</span><br><span class="line">&#125; *&#x2F;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>视频组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;Echarts&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;all-map&quot; class&#x3D;&quot;all-map&quot; &gt;&lt;baidu-map :center&#x3D;&quot;center&quot; :zoom&#x3D;&quot;zoom&quot; @ready&#x3D;&quot;handler&quot; style&#x3D;&quot;height:1080px&quot; @click&#x3D;&quot;getClickInfo&quot; :scroll-wheel-zoom&#x3D;&#39;true&#39;&gt;</span><br><span class="line">    &lt;&#x2F;baidu-map&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;video-player  class&#x3D;&quot;video-player-box&quot;</span><br><span class="line">                   ref&#x3D;&quot;videoPlayer&quot;</span><br><span class="line">                   :options&#x3D;&quot;playerOptions&quot;</span><br><span class="line">                   :playsinline&#x3D;&quot;true&quot;</span><br><span class="line">                   customEventName&#x3D;&quot;customstatechangedeventname&quot;</span><br><span class="line"></span><br><span class="line">                   @play&#x3D;&quot;onPlayerPlay($event)&quot;</span><br><span class="line">                   @pause&#x3D;&quot;onPlayerPause($event)&quot;</span><br><span class="line">                   @ended&#x3D;&quot;onPlayerEnded($event)&quot;</span><br><span class="line">                   @waiting&#x3D;&quot;onPlayerWaiting($event)&quot;</span><br><span class="line">                   @playing&#x3D;&quot;onPlayerPlaying($event)&quot;</span><br><span class="line">                   @loadeddata&#x3D;&quot;onPlayerLoadeddata($event)&quot;</span><br><span class="line">                   @timeupdate&#x3D;&quot;onPlayerTimeupdate($event)&quot;</span><br><span class="line">                   @canplay&#x3D;&quot;onPlayerCanplay($event)&quot;</span><br><span class="line">                   @canplaythrough&#x3D;&quot;onPlayerCanplaythrough($event)&quot;</span><br><span class="line"></span><br><span class="line">                   @statechanged&#x3D;&quot;playerStateChanged($event)&quot;</span><br><span class="line">                   @ready&#x3D;&quot;playerReadied&quot;&gt;</span><br><span class="line">    &lt;&#x2F;video-player&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Echarts&#39;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      center: &#123;lng: 109.45744048529967, lat: 36.49771311230842&#125;,</span><br><span class="line">      zoom: 13,</span><br><span class="line">      playerOptions: &#123;</span><br><span class="line">        &#x2F;&#x2F; videojs options</span><br><span class="line">        muted: true,</span><br><span class="line">        language: &#39;en&#39;,</span><br><span class="line">        playbackRates: [0.7, 1.0, 1.5, 2.0],</span><br><span class="line">        sources: [&#123;</span><br><span class="line">          type: &#39;video&#x2F;mp4&#39;,</span><br><span class="line">          src: &#39;https:&#x2F;&#x2F;cdn.theguardian.tv&#x2F;webM&#x2F;2015&#x2F;07&#x2F;20&#x2F;150716YesMen_synd_768k_vp8.webm&#39;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.myEcharts()</span><br><span class="line">    console.log(&#39;this is current player instance object&#39;, this.player)</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    player () &#123;</span><br><span class="line">      return this.$refs.videoPlayer.player</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myEcharts () &#123;</span><br><span class="line">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">      var myChart &#x3D; this.$echarts.init(document.getElementById(&#39;main&#39;))</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">      var option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &#39;ECharts 入门示例&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [&#39;销量&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [&#39;衬衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">          name: &#39;销量&#39;,</span><br><span class="line">          type: &#39;bar&#39;,</span><br><span class="line">          data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option)</span><br><span class="line">    &#125;,</span><br><span class="line">    handler (&#123;BMap, map&#125;) &#123;</span><br><span class="line">      var point &#x3D; new BMap.Point(120.299, 31.57)</span><br><span class="line">      map.centerAndZoom(point, 13)</span><br><span class="line">      var marker &#x3D; new BMap.Marker(point) &#x2F;&#x2F; 创建标注</span><br><span class="line">      map.addOverlay(marker) &#x2F;&#x2F; 将标注添加到地图中</span><br><span class="line">      var circle &#x3D; new BMap.Circle(point, 6, &#123; strokeColor: &#39;Red&#39;, strokeWeight: 6, strokeOpacity: 1, Color: &#39;Red&#39;, fillColor: &#39;#f03&#39; &#125;)</span><br><span class="line">      map.addOverlay(circle)</span><br><span class="line">    &#125;,</span><br><span class="line">    getClickInfo (e) &#123;</span><br><span class="line">      console.log(e.point.lng)</span><br><span class="line">      console.log(e.point.lat)</span><br><span class="line">      this.center.lng &#x3D; e.point.lng</span><br><span class="line">      this.center.lat &#x3D; e.point.lat</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; listen event</span><br><span class="line">    onPlayerPlay (player) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(&#39;player play!&#39;, player)</span><br><span class="line">    &#125;,</span><br><span class="line">    onPlayerPause (player) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(&#39;player pause!&#39;, player)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; ...player event</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; or listen state event</span><br><span class="line">    playerStateChanged (playerCurrentState) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(&#39;player current update state&#39;, playerCurrentState)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; player is ready</span><br><span class="line">    playerReadied (player) &#123;</span><br><span class="line">      console.log(&#39;the player is readied&#39;, player)</span><br><span class="line">      &#x2F;&#x2F; you can use it to do something...</span><br><span class="line">      &#x2F;&#x2F; player.[methods]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .all-map&#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 600px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Git网址：<a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="noopener">https://github.com/surmon-china/vue-video-player</a></p>
</li>
<li><p>视频播放效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9a9e83712317f59036dd41c8d5a483a8-54599" alt="vue-video-player效果"></p>
</li>
</ol>
<h2 id="vue-manage-system模板分析"><a href="#vue-manage-system模板分析" class="headerlink" title="vue-manage-system模板分析"></a>vue-manage-system模板分析</h2><ol>
<li><p>Git网址：<a href="https://github.com/lin-xin/vue-manage-system" target="_blank" rel="noopener">https://github.com/lin-xin/vue-manage-system</a></p>
</li>
<li><p>重要组件：element-ui、vue-i18n、vue、vue-router、vue-schart、vue-quill-editor、vue-cropper、vuedraggable、mavon-editor等</p>
</li>
<li><p>富文本插件Git网址：<a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor</a></p>
</li>
<li><p>富文本编辑器在模板中使用大致如下，如何引入可以看Git网址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;quill-editor ref&#x3D;&quot;myTextEditor&quot; v-model&#x3D;&quot;content&quot; :options&#x3D;&quot;editorOption&quot; @blur&#x3D;&quot;onEditorBlur($event)&quot; @focus&#x3D;&quot;onEditorFocus($event)&quot;</span><br><span class="line">                          @ready&#x3D;&quot;onEditorReady($event)&quot;&gt;&lt;&#x2F;quill-editor&gt;</span><br><span class="line">&lt;!-- v-model:模型，内容</span><br><span class="line">:options：选项</span><br><span class="line">@blur：失去焦点时触发的事件</span><br><span class="line">@focus：聚焦触发的事件</span><br><span class="line">@ready：富文本编辑器准备好触发的事件</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>富文本编辑器效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e6b505cfde60dc4e76ca14374d3f7eb3-153683" alt="富文本编辑器效果"></p>
</li>
<li><p>vue-cropper组件，图片裁剪组件,Git网址：<a href="https://github.com/Agontuk/vue-cropperjs" target="_blank" rel="noopener">https://github.com/Agontuk/vue-cropperjs</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;vue-cropper ref&#x3D;&#39;cropper&#39; :src&#x3D;&quot;imgSrc&quot; :ready&#x3D;&quot;cropImage&quot; :zoom&#x3D;&quot;cropImage&quot; :cropmove&#x3D;&quot;cropImage&quot; style&#x3D;&quot;width:100%;height:300px;&quot;&gt;&lt;&#x2F;vue-cropper&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">	cropImage () &#123;</span><br><span class="line">		this.cropImg &#x3D; this.$refs.cropper.getCroppedCanvas().toDataURL();</span><br><span class="line">	&#125;,</span><br><span class="line">	cancelCrop()&#123;</span><br><span class="line">		this.dialogVisible &#x3D; false;</span><br><span class="line">		this.cropImg &#x3D; this.defaultSrc;</span><br><span class="line">	&#125;,</span><br><span class="line">	imageuploaded(res) &#123;</span><br><span class="line">		console.log(res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ref被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的$refs对象上。如果在普通的DOM元素上引用，引用指向的就是DOM元素，如果用在子组件上，引用就指向组件实例；</li>
<li>当v-for用于元素或组件的时候，引用信息将是包含DOM节点或组件实例的数组；</li>
<li>在初始渲染的时候还不可以访问$refs，因为还不存在；</li>
<li>$refs不是响应式的，不应该试图用它在模板中座数据绑定</li>
</ul>
</li>
<li><p>vue-cropper效果：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12c76838c128d8622d0216c212c25f52-224677" alt="vue-cropper效果图"></p>
</li>
<li><p>Vue-copper处理多次打开同一个文件问题，实际上是input输入文件change事件的问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            &lt;div class&#x3D;&quot;crop-demo&quot;&gt;</span><br><span class="line">                &lt;img :src&#x3D;&quot;cropImg&quot; class&#x3D;&quot;pre-img&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;crop-demo-btn&quot;&gt;选择图片</span><br><span class="line">                    &lt;input ref&#x3D;&#39;inputer&#39; id&#x3D;&quot;crop-input&quot; class&#x3D;&quot;crop-input&quot; type&#x3D;&quot;file&quot; name&#x3D;&quot;image&quot; accept&#x3D;&quot;image&#x2F;*&quot; @change&#x3D;&quot;setImage&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">setImage(e)&#123;</span><br><span class="line"></span><br><span class="line">                console.log(e)</span><br><span class="line">                const file &#x3D; e.target.files[0];</span><br><span class="line">                if (!file.type.includes(&#39;image&#x2F;&#39;)) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                const reader &#x3D; new FileReader();</span><br><span class="line">                reader.onload &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">                    this.dialogVisible &#x3D; true;</span><br><span class="line">                    this.imgSrc &#x3D; event.target.result;</span><br><span class="line">                    console.log(&#39;!!!!!&#39;);</span><br><span class="line">                    this.$refs.cropper &amp;&amp; this.$refs.cropper.replace( event.target.result);</span><br><span class="line">                &#125;;</span><br><span class="line">                reader.readAsDataURL(file);</span><br><span class="line">                console.log(this.$refs.inputer.value)</span><br><span class="line">                this.$refs.inputer.value&#x3D;null;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用element-ui的tabs选项卡进行通知消息的管理，然后使用el-table列表进行展示，选项卡可以分为未读、已读、删除等，列表内容根据需求进行定义，一般随业务；</p>
</li>
<li><p>markdown编辑器：</p>
<ol>
<li><p>插件Git网页：<a href="https://github.com/hinesboy/mavonEditor" target="_blank" rel="noopener">https://github.com/hinesboy/mavonEditor</a></p>
</li>
<li><p>使用插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mavon-editor v-model&#x3D;&quot;content&quot; ref&#x3D;&quot;md&quot; :toolbars&#x3D;&quot;markdownOption&quot; :boxShadow&#x3D;&quot;true&quot; :subfield&#x3D;&quot;false&quot; @imgAdd&#x3D;&quot;$imgAdd&quot; @change&#x3D;&quot;change&quot; style&#x3D;&quot;min-height: 600px&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">markdownOption: &#123;</span><br><span class="line">                    bold: true, &#x2F;&#x2F; 粗体</span><br><span class="line">                    italic: true, &#x2F;&#x2F; 斜体</span><br><span class="line">                    header: true, &#x2F;&#x2F; 标题</span><br><span class="line">                    underline: true, &#x2F;&#x2F; 下划线</span><br><span class="line">                    strikethrough: true, &#x2F;&#x2F; 中划线</span><br><span class="line">                    mark: true, &#x2F;&#x2F; 标记</span><br><span class="line">                    superscript: true, &#x2F;&#x2F; 上角标</span><br><span class="line">                    subscript: true, &#x2F;&#x2F; 下角标</span><br><span class="line">                    quote: true, &#x2F;&#x2F; 引用</span><br><span class="line">                    ol: true, &#x2F;&#x2F; 有序列表</span><br><span class="line">                    ul: true, &#x2F;&#x2F; 无序列表</span><br><span class="line">                    link: true, &#x2F;&#x2F; 链接</span><br><span class="line">                    imagelink: true, &#x2F;&#x2F; 图片链接</span><br><span class="line">                    code: true, &#x2F;&#x2F; code</span><br><span class="line">                    table: true, &#x2F;&#x2F; 表格</span><br><span class="line">                    fullscreen: true, &#x2F;&#x2F; 全屏编辑</span><br><span class="line">                    readmodel: true, &#x2F;&#x2F; 沉浸式阅读</span><br><span class="line">                    htmlcode: true, &#x2F;&#x2F; 展示html源码</span><br><span class="line">                    help: true, &#x2F;&#x2F; 帮助</span><br><span class="line">                    &#x2F;* 1.3.5 *&#x2F;</span><br><span class="line">                    undo: true, &#x2F;&#x2F; 上一步</span><br><span class="line">                    redo: true, &#x2F;&#x2F; 下一步</span><br><span class="line">                    trash: true, &#x2F;&#x2F; 清空</span><br><span class="line">                    save: true, &#x2F;&#x2F; 保存（触发events中的save事件）</span><br><span class="line">                    &#x2F;* 1.4.2 *&#x2F;</span><br><span class="line">                    navigation: true, &#x2F;&#x2F; 导航目录</span><br><span class="line">                    &#x2F;* 2.1.8 *&#x2F;</span><br><span class="line">                    alignleft: true, &#x2F;&#x2F; 左对齐</span><br><span class="line">                    aligncenter: true, &#x2F;&#x2F; 居中</span><br><span class="line">                    alignright: true, &#x2F;&#x2F; 右对齐</span><br><span class="line">                    &#x2F;* 2.2.1 *&#x2F;</span><br><span class="line">                    subfield: true, &#x2F;&#x2F; 单双栏模式</span><br><span class="line">                    preview: true, &#x2F;&#x2F; 预览</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><table>
<thead>
<tr>
<th>name 名称</th>
<th>type 类型</th>
<th>default 默认值</th>
<th>describe 描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td></td>
<td>初始值</td>
</tr>
<tr>
<td>language</td>
<td>String</td>
<td>zh-CN</td>
<td>语言选择，暂支持 zh-CN: 简体中文, zh-TW: 正体中文 ， en: 英文 ， fr: 法语， pt-BR: 葡萄牙语， ru: 俄语， de: 德语， ja: 日语</td>
</tr>
<tr>
<td>fontSize</td>
<td>String</td>
<td>14px</td>
<td>编辑区域文字大小</td>
</tr>
<tr>
<td>scrollStyle</td>
<td>Boolean</td>
<td>true</td>
<td>开启滚动条样式(暂时仅支持chrome)</td>
</tr>
<tr>
<td>boxShadow</td>
<td>Boolean</td>
<td>true</td>
<td>开启边框阴影</td>
</tr>
<tr>
<td>boxShadowStyle</td>
<td>String</td>
<td>0 2px 12px 0 rgba(0, 0, 0, 0.1)</td>
<td>边框阴影样式</td>
</tr>
<tr>
<td>transition</td>
<td>Boolean</td>
<td>true</td>
<td>是否开启过渡动画</td>
</tr>
<tr>
<td>toolbarsBackground</td>
<td>String</td>
<td>#ffffff</td>
<td>工具栏背景颜色</td>
</tr>
<tr>
<td>previewBackground</td>
<td>String</td>
<td>#fbfbfb</td>
<td>预览框背景颜色</td>
</tr>
<tr>
<td>subfield</td>
<td>Boolean</td>
<td>true</td>
<td>true： 双栏(编辑预览同屏)， false： 单栏(编辑预览分屏)</td>
</tr>
<tr>
<td>defaultOpen</td>
<td>String</td>
<td></td>
<td>edit： 默认展示编辑区域 ， preview： 默认展示预览区域 , 其他 = edit</td>
</tr>
<tr>
<td>placeholder</td>
<td>String</td>
<td>开始编辑…</td>
<td>输入框为空时默认提示文本</td>
</tr>
<tr>
<td>editable</td>
<td>Boolean</td>
<td>true</td>
<td>是否允许编辑</td>
</tr>
<tr>
<td>codeStyle</td>
<td>String</td>
<td>code-github</td>
<td>markdown样式： 默认github, <a href="https://github.com/hinesboy/mavonEditor/blob/master/src/lib/core/hljs/lang.hljs.css.js" target="_blank" rel="noopener">可选配色方案</a></td>
</tr>
<tr>
<td>toolbarsFlag</td>
<td>Boolean</td>
<td>true</td>
<td>工具栏是否显示</td>
</tr>
<tr>
<td>navigation</td>
<td>Boolean</td>
<td>false</td>
<td>默认展示目录</td>
</tr>
<tr>
<td>shortCut</td>
<td>Boolean</td>
<td>true</td>
<td>是否启用快捷键</td>
</tr>
<tr>
<td>autofocus</td>
<td>Boolean</td>
<td>true</td>
<td>自动聚焦到文本框</td>
</tr>
<tr>
<td>ishljs</td>
<td>Boolean</td>
<td>true</td>
<td>代码高亮</td>
</tr>
<tr>
<td>imageFilter</td>
<td>function</td>
<td>null</td>
<td>图片过滤函数，参数为一个<code>File Object</code>，要求返回一个<code>Boolean</code>, <code>true</code>表示文件合法，<code>false</code>表示文件不合法</td>
</tr>
<tr>
<td>imageClick</td>
<td>function</td>
<td>null</td>
<td>图片点击事件，默认为预览，可覆盖</td>
</tr>
<tr>
<td>tabSize</td>
<td>Number</td>
<td>\t</td>
<td>tab转化为几个空格，默认为\t</td>
</tr>
<tr>
<td>xssOptions</td>
<td>Object</td>
<td>null</td>
<td>xss规则配置，参考 <a href="https://github.com/leizongmin/js-xss" target="_blank" rel="noopener">https://github.com/leizongmin/js-xss</a></td>
</tr>
<tr>
<td>toolbars</td>
<td>Object</td>
<td>如下例</td>
<td>工具栏</td>
</tr>
</tbody></table>
<p>各个属性通过:prop来引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:toolbar&#x3D;&quot;markdownOption&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>各个方法通过@method来引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@save&#x3D;&quot;savemd&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>name 方法名</th>
<th>params 参数</th>
<th>describe 描述</th>
</tr>
</thead>
<tbody><tr>
<td>change</td>
<td>String: value , String: render</td>
<td>编辑区发生变化的回调事件(render: value 经过markdown解析后的结果)</td>
</tr>
<tr>
<td>save</td>
<td>String: value , String: render</td>
<td>ctrl + s 的回调事件(保存按键,同样触发该回调)</td>
</tr>
<tr>
<td>fullScreen</td>
<td>Boolean: status , String: value</td>
<td>切换全屏编辑的回调事件(boolean: 全屏开启状态)</td>
</tr>
<tr>
<td>readModel</td>
<td>Boolean: status , String: value</td>
<td>切换沉浸式阅读的回调事件(boolean: 阅读开启状态)</td>
</tr>
<tr>
<td>htmlCode</td>
<td>Boolean: status , String: value</td>
<td>查看html源码的回调事件(boolean: 源码开启状态)</td>
</tr>
<tr>
<td>subfieldToggle</td>
<td>Boolean: status , String: value</td>
<td>切换单双栏编辑的回调事件(boolean: 双栏开启状态)</td>
</tr>
<tr>
<td>previewToggle</td>
<td>Boolean: status , String: value</td>
<td>切换预览编辑的回调事件(boolean: 预览开启状态)</td>
</tr>
<tr>
<td>helpToggle</td>
<td>Boolean: status , String: value</td>
<td>查看帮助的回调事件(boolean: 帮助开启状态)</td>
</tr>
<tr>
<td>navigationToggle</td>
<td>Boolean: status , String: value</td>
<td>切换导航目录的回调事件(boolean: 导航开启状态)</td>
</tr>
<tr>
<td>imgAdd</td>
<td>String: filename, File: imgfile</td>
<td>图片文件添加回调事件(filename: 写在md中的文件名, File: File Object)</td>
</tr>
<tr>
<td>imgDel</td>
<td>String: filename</td>
<td>图片文件删除回调事件(filename: 写在md中的文件名)</td>
</tr>
</tbody></table>
</li>
<li><p>markdown效果图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/67487042126335561000f5de96ffd869-42747" alt="markdown效果图"></p>
</li>
</ol>
</li>
<li><p>拖拽列表组件vuedraggable：</p>
<ol>
<li><p>Git网址：<a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">https://github.com/SortableJS/Vue.Draggable</a></p>
</li>
<li><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -S vuedraggable</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;section class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;crumbs&quot;&gt;</span><br><span class="line">            &lt;el-breadcrumb separator&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class="line">                &lt;el-breadcrumb-item&gt;&lt;i class&#x3D;&quot;el-icon-rank&quot;&gt;&lt;&#x2F;i&gt; 拖拽组件&lt;&#x2F;el-breadcrumb-item&gt;</span><br><span class="line">                &lt;el-breadcrumb-item&gt;拖拽排序&lt;&#x2F;el-breadcrumb-item&gt;</span><br><span class="line">            &lt;&#x2F;el-breadcrumb&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;plugins-tips&quot;&gt;</span><br><span class="line">                Vue.Draggable：基于 Sortable.js 的 Vue 拖拽组件。</span><br><span class="line">                访问地址：&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;SortableJS&#x2F;Vue.Draggable&quot; target&#x3D;&quot;_blank&quot;&gt;Vue.Draggable&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;drag-box&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;drag-box-item&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;item-title&quot;&gt;todo&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;draggable v-model&#x3D;&quot;todo&quot; @remove&#x3D;&quot;removeHandle&quot; :options&#x3D;&quot;dragOptions&quot;&gt;</span><br><span class="line">                        &lt;transition-group tag&#x3D;&quot;div&quot; id&#x3D;&quot;todo&quot; class&#x3D;&quot;item-ul&quot;&gt;</span><br><span class="line">                            &lt;div v-for&#x3D;&quot;item in todo&quot; class&#x3D;&quot;drag-list&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">                                &#123;&#123;item.content&#125;&#125;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;transition-group&gt;</span><br><span class="line">                    &lt;&#x2F;draggable&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;drag-box-item&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;item-title&quot;&gt;doing&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;draggable v-model&#x3D;&quot;doing&quot; @remove&#x3D;&quot;removeHandle&quot; :options&#x3D;&quot;dragOptions&quot;&gt;</span><br><span class="line">                        &lt;transition-group tag&#x3D;&quot;div&quot; id&#x3D;&quot;doing&quot; class&#x3D;&quot;item-ul&quot;&gt;</span><br><span class="line">                            &lt;div v-for&#x3D;&quot;item in doing&quot; class&#x3D;&quot;drag-list&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">                                &#123;&#123;item.id&#125;&#125;</span><br><span class="line">                                &#123;&#123;item.content&#125;&#125;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;&#x2F;transition-group&gt;</span><br><span class="line">                        &lt;button @click&#x3D;&quot;addPeople&quot;&gt;Add&lt;&#x2F;button&gt;</span><br><span class="line">                    &lt;&#x2F;draggable&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;drag-box-item&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;item-title&quot;&gt;done&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;draggable v-model&#x3D;&quot;done&quot; @remove&#x3D;&quot;removeHandle&quot; :options&#x3D;&quot;dragOptions&quot;&gt;</span><br><span class="line">                        &lt;transition-group tag&#x3D;&quot;div&quot; id&#x3D;&quot;done&quot; class&#x3D;&quot;item-ul&quot;&gt;</span><br><span class="line">                            &lt;div v-for&#x3D;&quot;item in done&quot; class&#x3D;&quot;drag-list&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">                                &#123;&#123;item.content&#125;&#125;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;transition-group&gt;</span><br><span class="line">                    &lt;&#x2F;draggable&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import draggable from &#39;vuedraggable&#39;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#39;draglist&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                dragOptions:&#123;</span><br><span class="line">                    animation: 120,</span><br><span class="line">                    scroll: true,</span><br><span class="line">                    group: &#39;sortlist&#39;,</span><br><span class="line">                    ghostClass: &#39;ghost-style&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                id:12,</span><br><span class="line">                todo: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 1,</span><br><span class="line">                        content: &#39;开发图表组件&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 2,</span><br><span class="line">                        content: &#39;开发拖拽组件&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 3,</span><br><span class="line">                        content: &#39;开发权限测试组件&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                doing: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 4,</span><br><span class="line">                        content: &#39;开发登录注册页面&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 5,</span><br><span class="line">                        content: &#39;开发头部组件&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 6,</span><br><span class="line">                        content: &#39;开发表格相关组件&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 7,</span><br><span class="line">                        content: &#39;开发表单相关组件&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                done:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 9,</span><br><span class="line">                        content: &#39;初始化项目，生成工程目录，完成相关配置&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        id: 10,</span><br><span class="line">                        content: &#39;开发项目整体框架&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            draggable</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            removeHandle(event)&#123;</span><br><span class="line">                console.log(event);</span><br><span class="line">                this.$message.success(&#96;从 $&#123;event.from.id&#125; 移动到 $&#123;event.to.id&#125; &#96;);</span><br><span class="line">            &#125;,</span><br><span class="line">            addPeople() &#123;</span><br><span class="line">                this.id&#x3D;this.id+1;</span><br><span class="line">                this.doing.push(&#123;id:this.id ,content:  &#39;hello&#39;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .drag-box&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        user-select: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .drag-box-item &#123;</span><br><span class="line">        flex: 1;</span><br><span class="line">        max-width: 330px;</span><br><span class="line">        min-width: 300px;</span><br><span class="line">        background-color: #eff1f5;</span><br><span class="line">        margin-right: 16px;</span><br><span class="line">        border-radius: 6px;</span><br><span class="line">        border: 1px #e1e4e8 solid;</span><br><span class="line">    &#125;</span><br><span class="line">    .item-title&#123;</span><br><span class="line">        padding: 8px 8px 8px 12px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 1.5;</span><br><span class="line">        color: #24292e;</span><br><span class="line">        font-weight: 600;</span><br><span class="line">    &#125;</span><br><span class="line">    .item-ul&#123;</span><br><span class="line">        padding: 0 8px 8px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        overflow-y: scroll;</span><br><span class="line">    &#125;</span><br><span class="line">    .item-ul::-webkit-scrollbar&#123;</span><br><span class="line">        width: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .drag-list &#123;</span><br><span class="line">        border: 1px #e1e4e8 solid;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        margin: 5px 0 10px;</span><br><span class="line">        list-style: none;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        border-radius: 6px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        -webkit-transition: border .3s ease-in;</span><br><span class="line">        transition: border .3s ease-in;</span><br><span class="line">    &#125;</span><br><span class="line">    .drag-list:hover &#123;</span><br><span class="line">        border: 1px solid #20a0ff;</span><br><span class="line">    &#125;</span><br><span class="line">    .drag-title &#123;</span><br><span class="line">        font-weight: 400;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        margin: 10px 0;</span><br><span class="line">        font-size: 22px;</span><br><span class="line">        color: #1f2f3d;</span><br><span class="line">    &#125;</span><br><span class="line">    .ghost-style&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        color: transparent;</span><br><span class="line">        border-style: dashed</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果示例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4e062b3c56a3cc7f88ebc9bd97b1efbc-61022" alt="拖拽l列表示意图"></p>
</li>
</ol>
</li>
<li><p>对话框el-dialog可以通过指令 v-dialogDrag使 Dialog 对话框具有可拖拽的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog v-dialogDrag title&#x3D;&quot;拖拽弹框&quot; center :visible.sync&#x3D;&quot;visible&quot; width&#x3D;&quot;30%&quot;&gt;</span><br><span class="line">    我是一个可以拖拽的对话框！</span><br><span class="line">    &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click&#x3D;&quot;visible &#x3D; false&quot;&gt;取 消&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;visible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;el-dialog&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从一个Vue项目模板vue-manage-system的代码分析逐渐深入Vue前端开发框架，边学习边添加自己的理解与尝试，过程虽然缓慢，但是感觉收获还是比较多的。Vue看了几天还是需要一点项目来练手的，等有项目上的需要使用Vue构建前端吧！</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Web Dev Base</title>
    <url>/2020/04/29/Web-Dev-Base/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前端开发领域有着数不清的工具和资源，而且还有更多工具在被源源不断地制造出来，后端开发也是一样，作为一个开发人员，了解你要面对的是什么非常重要的！对于最近在其他文章中描述过的内容这里不再进行重复性记录！<strong><em>推荐书籍：《Web开发权威指南》· [美] Chris Aduino，Todd Gamdee著 奇舞团译</em></strong></p>
<p><strong><em>推荐nodejs工具browser-sync，修改并保存代码时，浏览器也会自动重新加载！</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Ember：一款-MVC-框架"><a href="#Ember：一款-MVC-框架" class="headerlink" title="Ember：一款 MVC 框架"></a>Ember：一款 MVC 框架</h2><ol>
<li>Ember是一款非常优秀的MVC框架，为了使开发更加方便迅速，Ember规定了一些概念和命名习惯；</li>
<li>安装bower和ember：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g bower</span><br><span class="line">npm install -g ember-cli</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Mac安装watchman：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Ember CLI能够很好地与这两个包管理器搭配使用,通过它们安装外部库或工具的命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install [package name] --save-dev </span><br><span class="line">npm install [package name] --save </span><br><span class="line">bower install [package name] --save</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在Ember中使用Bootstrap：<ol>
<li>安装bootstrap：bower install bootstrap-sass –save</li>
<li>安装ember-cli-sass：ember install ember-cli-sass</li>
<li>将Bootstrap的样式和脚本引入到项目中</li>
</ol>
</li>
</ol>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>路由选择就像交警指挥交通，会根据用户输入的URL选择要渲染的页面；</li>
<li>当需要进行页面切换时，Ember首先把应用当前的地址修改为目的页面的地址，这时路由模块Router会根据新的地址查询路由表，找到对应的路由对象（Ember.Route），调用路由对象中的一系列回调方法，开始为目的页面准备数据，这一系列回调方法被叫作路由生命周期钩子（route lifecycle hook）；</li>
<li>Ember CLI提供了一个生成器的脚手架工具generate，对学习Ember的约定和命名模式很有帮助；通过命令ember generate（可以简写为ember g）可以生成相应的文件和样板代码（和我使用hexo的那个很类似）；</li>
<li>通过ember generate命令创建路由：ember g route index；</li>
<li>Ember应用在启动或重启时会对路由模块（Router）和应用路由（ApplicationRoute）进行实例化；</li>
</ol>
<h2 id="模型-amp-数据绑定"><a href="#模型-amp-数据绑定" class="headerlink" title="模型&amp;数据绑定"></a>模型&amp;数据绑定</h2><ol>
<li>模型的本质就是可以创建包含特殊属性和方法的对象的函数；</li>
<li>Ember.Object是应用中最基础的数据结构，Ember中其他所有类都继承于它；</li>
<li>Ember Data是基于 Ember.Object 构建的JavaScript库， 用于开发模型相关的功能；</li>
<li>Ember CLI创建模型的命令是ember g model [模型名称] ；</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 模型创建</span></span><br><span class="line">ember g model cryptid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会生成app/model/cryptid.js</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>模型的计算属性对模板和组件极为重要，可以使用Ember.computed方法定义计算属性；</li>
<li>Ember团队在开发Ember框架时设计了一些特定的模式，适配器占据了其中一大部分；</li>
<li>创建一个适配器：ember g adapter application ；</li>
<li>Ember提供了一款插件ember-cli-content-security-policy， 用于修改默认安全策略；</li>
<li>数据在传入和传出时，JSON结构会经历序列化和反序列化，创建序列化器的命令是ember g serialize [应用或模型名称]，执行这个命令会创建序列化器文件；</li>
<li>Ember Data提供了转化数据的能力，可以将API提供的数据转化成应用需要的格式；</li>
</ol>
<h2 id="视图-amp-模板"><a href="#视图-amp-模板" class="headerlink" title="视图&amp;模板"></a>视图&amp;模板</h2><ol>
<li>Handlebars是一种强大的语言，可用于创建动态模板；</li>
<li>在Ember中，模板是由模型数据支撑的，数据对象（或对象数组）会作为参数传递给模板，接着模板被渲染成HTML字符串并插入到DOM中；</li>
</ol>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><ol>
<li>控制器只负责控制模型和视图，Ember会在运行时自动把控制器对象添加到应用中；</li>
<li>x-select插件在模板中使用时就能省去在select标签上绑定onchange事件的操作；</li>
<li>创建路由的控制器：ember g controller 路由名称 ；</li>
</ol>
<h2 id="创建Ember应用"><a href="#创建Ember应用" class="headerlink" title="创建Ember应用"></a>创建Ember应用</h2><ol>
<li>在执行Ember的ember new [project name]命令时，会创建一个新文件夹，并在其中生成项目开始时所必需的文件；</li>
<li>创建一个Tracker的Ember应用，执行命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ember new tracker</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>等待执行完命令后启动服务器测试项目是否能运行：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd tracker</span><br><span class="line">ember server</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装Bootstrap，使用Bower进行安装：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bower install bootstrap-sass --save</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>将Bootstrap添加到Ember CLI的构建过程中，只有这样才能在应用中访问Bootstrap提供的资源；</p>
</li>
<li><p>安装ember-cli-sass：ember install ember-cli-sass ；</p>
</li>
<li><p>在ember中引入bootstrap：</p>
<ol>
<li>修改ember-cli-build.js，首先添加一个变量，指向Bootstrap资源目录的路径接着在配置中添加一个sassOptions对象，它只包含一个属性includePaths，值为Bootstrap样式表的路径，然后使用import向应用中添加对该资源的引用：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EmberApp = <span class="built_in">require</span>(<span class="string">'ember-cli/lib/broccoli/ember-app'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">defaults</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// bootstrapPath 指向bootstrap资源路径</span></span><br><span class="line">  <span class="keyword">var</span> bootstrapPath = <span class="string">'bower_components/bootstrap-sass/assets/'</span>;</span><br><span class="line">  <span class="keyword">let</span> app = <span class="keyword">new</span> EmberApp(defaults, &#123;</span><br><span class="line">    <span class="comment">// 添加选项</span></span><br><span class="line">  sassOptions: &#123; </span><br><span class="line">	  includePaths: [</span><br><span class="line">		  bootstrapPath + <span class="string">'stylesheets'</span> </span><br><span class="line">	  ]</span><br><span class="line">  &#125;	  </span><br><span class="line">    <span class="comment">// Add options here</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use `app.import` to add additional libraries to the generated</span></span><br><span class="line">  <span class="comment">// output files.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// If you need to use different assets in different</span></span><br><span class="line">  <span class="comment">// environments, specify an object as the first parameter. That</span></span><br><span class="line">  <span class="comment">// object's keys should be the environment name and the values</span></span><br><span class="line">  <span class="comment">// should be the asset to use in that environment.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// If the library that you are including contains AMD or ES6</span></span><br><span class="line">  <span class="comment">// modules that you would like to import into your application</span></span><br><span class="line">  <span class="comment">// please specify an object with the list of modules as keys</span></span><br><span class="line">  <span class="comment">// along with the exports of each module as its value.</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成指向bootstrap资源文件的路径 </span></span><br><span class="line">  <span class="comment">// 使用import向应用添加对该资源的引用</span></span><br><span class="line">  app.import(bootstrapPath + <span class="string">'javascripts/bootstrap.js'</span>);</span><br><span class="line">  <span class="keyword">return</span> app.toTree();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加文件app/styles/app.scss：</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bg-color</span>: coral;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="variable">$bg-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @import指令的功能是将bootstrap.scss文件的内容添加到app.scss中，这个过程将由Ember CLI的构建过程代劳</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'bootstrap'</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试一下是否配置完成：ember server；</li>
</ol>
</li>
<li><p><strong>TODO:</strong>未完待续… …</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>框架真的是一个好东西，能够帮助我们解决很多问题，特别是一些像Bootstrap这种框架，只要我们熟悉了这种框架就能做出很多好看的界面！后续还要进行Bootstrap的学习!<strong><em>Mark一下</em></strong></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Web安全开发基础</title>
    <url>/2020/05/30/Web%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>勒索软件、病毒、分布式拒绝服务（distributed denial-of-service，DDoS）攻击、中间人攻击、安全漏洞，这些词都会勾起参与应用程序管理的人噩梦般的回忆！但是这些安全上的问题会出现在Web上吗？<strong><em>推荐书籍：《Web安全开发指南》· [美] John Paul Mueller著 温正东译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="明确-Web-应用威胁"><a href="#明确-Web-应用威胁" class="headerlink" title="明确 Web 应用威胁"></a>明确 Web 应用威胁</h2><ol>
<li>SQL 注入攻击只在应用程序以某种方式使用 SQL 时才会成功，但应用程序可能并未采用这种方式；</li>
<li>常见的Web应用威胁：<ul>
<li>缓冲区溢出，攻击者试图将足够多的数据发送到输入缓冲区中，以便让应用程序或输出缓冲区溢出，从而导致在缓冲区外的内存数据被损坏</li>
<li>代码注入，一个实体以中间人攻击（man-in-the-middle-attack）的形式将代码添加到服务器和客户端（如浏览器）之间的数据流中</li>
<li>跨站脚本（cross-site scripting，XSS），攻击者将 JavaScript 脚本或其他可执行代码注入到应用程序的输出流中</li>
<li>文件上传，即使看上去是无害的，但每一次的文件上传也应该被认为是可疑的</li>
<li>硬编码的认证，出于测试目的，开发人员经常将认证信息放在应用程序的初始化文件中</li>
<li>发现隐藏或受限制的文件 / 目录，当应用程序允许输入一些特殊字符（比如斜杠或反斜杠）时，黑客就有可能发现隐藏或受限制的文件和目录</li>
<li>缺少认证或者认证不正确，知道谁正在使用应用程序是很重要的，特别是在你处理敏感数据的时候</li>
<li>缺少授权或者授权不正确，只为用户提供执行特定任务时所需要的权限</li>
<li>缺少加密或者加密不正确，使用加密技术在两个终端之间传输数据可以防止黑客监听通信</li>
<li>操作系统命令注入，攻击者会修改应用程序使用的操作系统命令来执行特定的任务</li>
<li>参数篡改，黑客会对作为请求头或 URL 一部分的参数进行尝试</li>
<li>远程代码包含，黑客能够获取到这些路径信息并更改它们的时候，远程代码包含就可能被指向黑客想要包含的任何代码，从而使得黑客可以完全掌控你的系统</li>
<li>会话劫持，会话劫持者会侵入到会话中并拦截用户与服务器之间传输的数据，含有劫持会话所需信息的三个最常见的地方是：cookie、URL 重写和隐藏域</li>
<li>SQL 注入，攻击者会修改由应用程序创建的查询，而这个查询是由用户或其他输入引起的，一个避免 SQL 注入攻击的好办法是避免动态查询</li>
</ul>
</li>
<li>软件需要某种监管来确保它不会导致其使用、控制和保护的数据及资源发生丢失、误差、篡改、不可用或误用；</li>
<li>开放 Web 应用安全项 目（Open Web Application Security Project，<a href="https://wiki.owasp.org/index.php/OWASP_Software_Security_Assurance_Process" target="_blank" rel="noopener">OWASP</a>）</li>
<li>开发者关注的是实现各种有趣功能的精雕细琢的代码，而用户关注的是达到最终目的的手段！</li>
<li>安全问题的处理策略：<ul>
<li>用户或系统认证</li>
<li>数据加密</li>
<li>移动设备管理</li>
<li>通用的反病毒保护</li>
<li>虚拟私有网络（virtual private network，VPN）支持（需要时）</li>
<li>防止数据丢失</li>
<li>主机入侵防御</li>
</ul>
</li>
<li>双因素认证的问题与单因素认证的问题一样， 那就是通常用户根本不喜欢身份认证，人们觉得应该可以在不做任何额外操作的情况下使用应用程序！</li>
</ol>
<h2 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h2><ol>
<li>很难找到一个不依赖库的 Web 应用程序，即使能找到，那也不是很重要的应用程序；</li>
<li>安全地使用库，从而可以获得使用别人代码的所有好处，同时不会在自己的应用程序中制造任何重大的安全漏洞；</li>
<li>库的任何用法都会带来潜在的安全漏洞，这会消耗公司的时间、精力与资源！</li>
<li>最优秀的 Web开发人员也没有时间去手写所有的 CSS 代码；</li>
<li>内部存储库有很多保存在第三方网站的外部存储库所没有的优点，在相同的编码水平下，内部存储库会比外部存储库更快、更可靠且更安全；</li>
<li>永远不要在同一个 HTTP 响应中传递不受信任的数据；</li>
<li>任何时候你把字符串转变成脚本， 你就正在邀请黑客来提供这些字符串！</li>
<li>启用JavaScript的严格模式；</li>
<li>内容安全策略（Content Security Policy，CSP）旨在通过创建白名单这类措施来解决这一问题；</li>
<li>API 比库流行得更快，因为API:<ul>
<li>减少了资源的使用</li>
<li>减少了编码要求</li>
<li>更小的学习曲线</li>
</ul>
</li>
</ol>
<h2 id="微服务带来的安全威胁"><a href="#微服务带来的安全威胁" class="headerlink" title="微服务带来的安全威胁"></a>微服务带来的安全威胁</h2><ol>
<li>微服务可能带来的最大问题是缺少一致性，这似乎也困扰着过去创建的每个库和 API,在开发过程中尽可能早地创建一个精确描 述如何调用微服务的模板；</li>
<li>让每个服务在隔离的虚拟机上运行， 以确保每个服务有自己的地址空间和进程；</li>
<li>一个跨站请求伪造（cross-site request forgery，CSRF 或 XSRF）是攻击者尝试让用户在不经意间或不知情的情况下执行代码的攻击；</li>
<li><strong>保持着两套微服务是一个好的做法，这样你就能根据需要切换它们来让应用程序持续运行；</strong></li>
</ol>
<h2 id="像黑客一样思考"><a href="#像黑客一样思考" class="headerlink" title="像黑客一样思考"></a>像黑客一样思考</h2><ol>
<li>当你像黑客一样去思考时，可能在使用表面上完全可接受的代码，它可能没有 bug，但可能有安全漏洞；</li>
<li>Web 安全扫描的基本思想是它们会告诉你你的网站目前是否干净，并且有时候能帮你考虑潜在的安全漏洞；</li>
<li>任何 Web 安全扫描器都做不到 100% 准确地检查出网站的潜在问题，解决遗漏问题或误报的最佳方法是不止使用一个 Web 安全扫描器；</li>
<li>测试系统不止能用来测试应用程序，还可以用它测试对策的效率或者特定配置的漏洞；</li>
<li>XSS 有 两种类型：非持久的（攻击依赖用户访问某个专门制作的链接）和持久的（攻击代码保存在间接的存储媒介中，比如数据库）；</li>
<li>一个持久的 XSS 攻击会比较难实现， 但会造成更大的破坏！</li>
<li>防御 XSS 的最佳方法就是对任何你接收到的输入进行净化，净化输入的过程会移除任何脚本、怪异的字符或其他不期望出现在响应中的信息；</li>
<li>开放越多的端口，服务器被压垮的机会就越大！不要开启不必要的端口！</li>
<li>无意的信息泄露会以各种方式发生，但是这类攻击通常涉及黑客未经授权地访问某个集中式数据库！</li>
</ol>
<h2 id="跟踪当前的安全威胁"><a href="#跟踪当前的安全威胁" class="headerlink" title="跟踪当前的安全威胁"></a>跟踪当前的安全威胁</h2><ol>
<li>为了跟进可能影响应用程序的安全问题，需要跟踪当前的安全威胁；</li>
<li>阅读与安全相关的专业文章，大部分的业务都会依赖数据库来存储信息，而存储敏感信息的数据库通常会依靠某种加密技术；</li>
<li>使用专业杂志的文章来定位安全威胁信息的最佳理由是，你可以在很短的时间内获得大量安全威胁的信息；</li>
<li>安全网站会提供各种安全威胁的详细信息，安全网站可能不会讨论每一种当前的威胁，但肯定可以找到大部分当前活跃的威胁；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>网络安全是一个永远值得关注的问题，不仅仅是个人信息的安全，作为开发者，应该关注开发的产品在线上提供服务的稳定运行的同时，还有在安全上的关注！如果不关注这些问题，很可能因为你提供的服务导致公司的财产受到损失，而这些损失可能会导致你自身被追责，多花一点时间在安全上可能不会对你的业务产生多大的帮助，但是能够适当降低被攻击时的风险以及减少在被攻击时产生的损失！安全永远值得关注！</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Web性能基础</title>
    <url>/2020/06/24/Web%E6%80%A7%E8%83%BD%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从 TCP、UDP 和 TLS 协议讲起，如何针对这几种协议和基础设施来优化应用，从而深入理解协议以及Web相关的优化措施！合格的开发者知道怎么做，而优秀的开发者知道为什么那么做。 <strong><em>推荐书籍：《Web性能权威指南》· [加] Ilya Grigorik著 李松峰译</em></strong></p>
<hr>
<h1 id="网络技术"><a href="#网络技术" class="headerlink" title="网络技术"></a>网络技术</h1><h2 id="延迟与带宽"><a href="#延迟与带宽" class="headerlink" title="延迟与带宽"></a>延迟与带宽</h2><ol>
<li><p>WPO（Web Performance Optimization，Web 性能优化）产业从无到有， 快速增长，充分说明用户越来越重视速度方面的用户体验；</p>
</li>
<li><p>事实证明：</p>
<ul>
<li>网站越快，用户的黏性越高</li>
<li>网站越快，用户忠诚度更高</li>
<li>网站越快，用户转化率越高</li>
</ul>
</li>
<li><p>专业术语：</p>
<ul>
<li>延迟——分组从信息源发送到目的地所需的时间</li>
<li>带宽——逻辑或物理通信路径最大的吞吐量</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/22604b665478becbed5c054e872d282e-86565" alt="延迟和带宽"></p>
</li>
<li><p>延迟是消息（message）或分组（packet）从起点到终点经历的时间，任何系统都有很多因素可能影响传送消息的时间；</p>
</li>
<li><p>延迟影响因素：</p>
<ul>
<li>传播延迟——消息从发送端到接收端需要的时间</li>
<li>传输延迟——把消息中的所有比特转移到链路中需要的时间</li>
<li>处理延迟——处理分组首部、检查位错误及确定分组目标所需的时间</li>
<li>排队延迟——到来的分组排队等待处理的时间</li>
</ul>
</li>
<li><p>缓冲区爆满（Bufferbloat）产生的原因主要是如今市面上的路由器都会配备很大的入站缓冲区，以便 “不惜一切代价”避免丢包（分组），导致网络中产生较长且可变的延迟时间；</p>
</li>
<li><p><strong>最后一公里的延迟是世界任何一个角落的互联网提供商共同面临的问题！</strong></p>
</li>
<li><p>通过波分复用（WDM， Wavelength-Division Multiplexing）技术， 光纤可以同时传输很多不同波长（信道）的光，因而具有明显的带宽优势；</p>
</li>
</ol>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ol>
<li><p>TCP 即 Transmission Control Protocol（传输控制协议）， 负责在不可靠的传输信道之上提供可靠的抽象层；</p>
</li>
<li><p>TCP 向应用层隐藏了大多数网络通信的复杂细节， 比如丢包重发、按序发送、拥塞控制及避免、数据完整， 等等；</p>
</li>
<li><p>在现实当中， 由于 TCP 提供了很多有用的功能，几乎所有 HTTP 流量都是通过 TCP 传送的；</p>
</li>
<li><p>三次握手过程中，客户端与服务器在交换应用数据之前， 必须就起始分组序列号， 以及其他一些连接相关的细节达成一致。 出于安全考虑，序列号由两端随机生成：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2db9992084e2c3fcbc1926f442545e02-125973" alt="三次握手"></p>
</li>
<li><p>由于非常短的 TCP 连接在 互联网上随处可见，握手阶段已经成为影响网络总延迟的一个重要因素，TFO（TCP Fast Open，TCP 快速打开）致力于减少新建 TCP 连接带来的性能损失；</p>
</li>
<li><p>TCP 加入了很多机制， 以便控制双向发送数据的速度， 比如流量控制、拥塞控制和拥塞预防机制；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/77118c798903bddb22f1ca91d595890b-98844" alt="拥塞控制和预防"></p>
</li>
<li><p>核心原理及影响：</p>
<ul>
<li>TCP 三次握手增加了整整一次往返时间</li>
<li>TCP 慢启动将被应用到每个新连接</li>
<li>TCP 流量及拥塞控制会影响所有连接的吞吐量</li>
<li>TCP 的吞吐量由当前拥塞窗口大小控制</li>
</ul>
</li>
<li><p>优化TCP性能：</p>
<ul>
<li>把服务器内核升级到最新版本</li>
<li>确保 cwnd 大小为 10</li>
<li>禁用空闲后的慢启动</li>
<li>确保启动窗口缩放</li>
<li>减少传输冗余数据</li>
<li>压缩要传输的数据</li>
<li>把服务器放到离用户近的地方以减少往返时间</li>
<li>尽最大可能重用已经建立的 TCP 连接</li>
</ul>
</li>
</ol>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ol>
<li><p>数据报通常只用来描述那些通过不可靠的服务传输的分组，既不保证送达，也不发送失败通知；</p>
</li>
<li><p>WebRTC（Web Real-Time Communication，Web 实时通信）着眼于在浏览器中通过 UDP 实现原生的语音和视频实时通信，以及其他形式的 P2P（Peer-to-Peer， 端到端）通信；</p>
</li>
<li><p>UDP关键内容：</p>
<ul>
<li>不保证消息交付</li>
<li>不保证交付顺序</li>
<li>不跟踪连接状态</li>
<li>不需要拥塞控制</li>
</ul>
</li>
<li><p>NAT 设备背后的 IP 地址空间就可以在各种不同的网络中得到重用， 从而解决地址耗尽问题：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/58ff58ce3eab2f88cd48b70045e8f7e8-114027" alt="IP网络地址转换器"></p>
</li>
<li><p>单播 UDP 应用程序的建议：</p>
<ul>
<li>应用程序 必须 容忍各种因特网路径条件</li>
<li>应用程序 应该 控制传输速度</li>
<li>应用程序 应该 对所有流量进行拥塞控制</li>
<li>应用程序 应该 使用与 TCP 相近的带宽</li>
<li>应用程序 应该 准备基于丢包的重发计数器</li>
<li>应用程序 应该 不发送大于路径 MTU 的数据报</li>
<li>应用程序 应该 处理数据报丢失、重复和重排</li>
<li>应用程序 应该 足够稳定以支持 2 分钟以上的交付延迟</li>
<li>应用程序 应该 支持 IPv4 UDP 校验和，必须支持 IPv6 校验和</li>
<li>应用程序 可以 在需要时使用 keep-alive（最小间隔 15 秒）</li>
</ul>
</li>
</ol>
<h2 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h2><ol>
<li><p>SSL（Secure Sockets Layer，安全套接字层）协议最初是网景公司为了保障网上交易安全而开发的， 该协议通过加密来保护客户个人资料， 通过认证和完整性检查来确保交易安全；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/677fb0301c1766f580b5fca0b35f57d6-75599" alt="TLS安全"></p>
</li>
<li><p>TLS 协议的目标是为在它之上运行的应用提供三个基本服务：加密、身份验证和数据完整性</p>
<ul>
<li>加密——混淆数据的机制</li>
<li>身份验证——验证身份标识有效性的机制</li>
<li>完整性——检测消息是否被篡改或伪造的机制</li>
</ul>
</li>
<li><p>TLS握手：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/af2397c19d23890dfd8e67c2fbc3c22d-262994" alt="TLS握手"></p>
</li>
<li><p>网络上的任意两端都可以使用自定义的协议进行通信！</p>
</li>
<li><p>应用层协议协商（ALPN， Application Layer Protocol Negotiation）作为TLS 扩展， 让我们能在 TLS 握手的同时协商应用协议（图 4-2） ， 从而省掉了 HTTP的 Upgrade 机制所需的额外往返时间；</p>
</li>
<li><p>TLS优化建议：</p>
<ul>
<li>尽量减少中间证书颁发机构的数量</li>
<li>很多站点会在证书链中包含根证书颁发机构的证书，这是完全没有必要的</li>
<li>理想的证书链应该在 2 KB 或 3 KB 左右，同时还能给浏览器提供所有必要的信息， 避免不必要的往返或者对证书本身额外的请求</li>
</ul>
</li>
</ol>
<h1 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h1><h2 id="无线网络基础"><a href="#无线网络基础" class="headerlink" title="无线网络基础"></a>无线网络基础</h2><ol>
<li><p>Wi-Fi、蓝牙、ZigBee、NFC、WiMAX、LTE、HSPA、EVDO， 以及早先的 3G 标准、卫星服务等，都是我们今天司空见惯的无线网络技术；</p>
</li>
<li><p>无线网络类型：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5926a92ad60c348670abc37db26d3b87-53177" alt="无线网络类型"></p>
</li>
<li><p>无论使用哪种无线技术， 所有通信方法都有一个最大的信道容量， 这个容量是由相同的底层原理决定的；</p>
</li>
<li><p>在其他条件等同的情况下， 频率范围加倍， 传输速度加倍；</p>
</li>
<li><p>信噪比衡量的是预期信号强度与背景噪声及干扰之间的比值。背景噪声越大，携带信息的信号就必须越强；</p>
</li>
<li><p>影响无线网络性能的因素（部分）：</p>
<ul>
<li>收发端的距离</li>
<li>当前位置的背景噪声大小</li>
<li>来自同一网络（小区）其他用户的干扰大小</li>
<li>来自相邻网络（小区）其他用户的干扰大小</li>
<li>两端发射功率大小</li>
<li>处理能力及调制算法</li>
</ul>
</li>
</ol>
<h2 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h2><ol>
<li><p>Wi-Fi 是 Wi-Fi 联盟（Wi-Fi Alliance）的注册商标， 该组织是一个同业公会， 致力于推广无线 LAN 技术， 同时提供互操作标准和测试；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12e43fbd15f0ca6b860948f2503ca699-82553" alt="WIFI物理层"></p>
</li>
<li><p>Wi-Fi性能重要因素：</p>
<ul>
<li>Wi-Fi 不保证用户的带宽和延迟时间</li>
<li>Wi-Fi 的信噪比不同，带宽也随之不同</li>
<li>Wi-Fi 的发射功率被限制在 200 mW 以内</li>
<li>Wi-Fi 在 2.4 GHz 和较新的 5 GHz 频段中的频谱有限</li>
<li>Wi-Fi 信道分配决定了接入点信号会重叠</li>
<li>Wi-Fi 接入点与客户端争用同一个无线信道</li>
</ul>
</li>
<li><p>TCP 丢包在 Wi-Fi 网络中同样存在， 因而其 TCP 层的传输速度不及大多数有线网络；</p>
</li>
</ol>
<h2 id="移动网络"><a href="#移动网络" class="headerlink" title="移动网络"></a>移动网络</h2><ol>
<li><p>移动网络版本：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/96ae1754ef50f2f10d442992e41f1939-40110" alt="移动网络版本"></p>
</li>
<li><p>LTE 与前代标准的主要区别和特点如下：</p>
<ul>
<li>核心网络全部为 IP 分组交换网</li>
<li>简化了网络架构，降低建设成本</li>
<li>用户面和控制面的低延迟时间（分别为 &lt;10 ms 和 &lt;100 ms）</li>
<li>新无线接口及调制算法实现了高吞吐量（ 100 Mbit/s ）</li>
<li>可用于较大的带宽配置及运营商集群</li>
<li>要求所有设备支持 MIMO</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Work Memo</title>
    <url>/2020/05/05/Work-Memo/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在公司里上班有很多内容不是特别用的频繁，但是又会出现需要的时候找不到，这个时候备份一些Memo就非常重要了，之前用的印象笔记，防止红区封锁，还是使用hexo博客来托管吧！</p>
<p><strong><em>————————————————Just Covert the Passwd————————————————</em></strong></p>
<p><strong><em>————————————————Just Covert the Passwd————————————————</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="部门wifi"><a href="#部门wifi" class="headerlink" title="部门wifi"></a>部门wifi</h2><ol>
<li>wifi名称：<strong>IOT_YF_5072</strong></li>
<li>wifi密码：znjs5072in2019.</li>
</ol>
<h2 id="美居测试版本"><a href="#美居测试版本" class="headerlink" title="美居测试版本"></a><del>美居测试版本</del></h2><ol>
<li><del>SIT：</del><ul>
<li><del>iOS ： <a href="http://fir.im/meijusit" target="_blank" rel="noopener">http://fir.im/meijusit</a></del></li>
<li><del>Android： <a href="https://fir.im/androidmeiju5" target="_blank" rel="noopener">https://fir.im/androidmeiju5</a></del></li>
<li><del>密码：midea123</del></li>
</ul>
</li>
<li><del>UAT：</del><ul>
<li><del>iOS： <a href="https://fir.im/meijuuat" target="_blank" rel="noopener">https://fir.im/meijuuat</a></del></li>
<li><del>Android: <a href="https://fir.im/androiduat" target="_blank" rel="noopener">https://fir.im/androiduat</a></del></li>
<li><del>密码：midea123</del></li>
</ul>
</li>
<li><del>PRO：</del><ul>
<li><del>iOS： <a href="https://fir.im/meijupro" target="_blank" rel="noopener">https://fir.im/meijupro</a></del></li>
<li><del>Android: <a href="https://fir.im/anmjpro" target="_blank" rel="noopener">https://fir.im/anmjpro</a></del></li>
<li><del>密码：midea123</del></li>
</ul>
</li>
</ol>
<h2 id="美居最新版本"><a href="#美居最新版本" class="headerlink" title="美居最新版本"></a>美居最新版本</h2><ol>
<li>SIT环境：<ul>
<li>Android： <a href="https://www.pgyer.com/androidmeijusit" target="_blank" rel="noopener">https://www.pgyer.com/androidmeijusit</a></li>
<li>iOS： <a href="https://www.pgyer.com/iosmeijusit" target="_blank" rel="noopener">https://www.pgyer.com/iosmeijusit</a></li>
<li>密码：midea123</li>
</ul>
</li>
<li>DEV环境：<ul>
<li>Android： <a href="https://www.pgyer.com/androidmeijudev" target="_blank" rel="noopener">https://www.pgyer.com/androidmeijudev</a></li>
<li>iOS： <a href="https://www.pgyer.com/iosmeijudev" target="_blank" rel="noopener">https://www.pgyer.com/iosmeijudev</a></li>
<li>密码：midea123</li>
</ul>
</li>
<li>PRO环境：<ul>
<li>Android： <a href="https://www.pgyer.com/androidmeijupro" target="_blank" rel="noopener">https://www.pgyer.com/androidmeijupro</a></li>
<li>iOS： <a href="https://www.pgyer.com/iosmeijupro" target="_blank" rel="noopener">https://www.pgyer.com/iosmeijupro</a></li>
<li>密码：midea123</li>
</ul>
</li>
</ol>
<h2 id="红区桌面云"><a href="#红区桌面云" class="headerlink" title="红区桌面云"></a>红区桌面云</h2><ul>
<li><a href="http://wuxi-red.midea.com/" target="_blank" rel="noopener">桌面云</a></li>
</ul>
<h2 id="后端测试环境"><a href="#后端测试环境" class="headerlink" title="后端测试环境"></a>后端测试环境</h2><ol>
<li>kibana：<ol>
<li>地址：<a href="http://log.zhinengxiyifang.cn:5602/" target="_blank" rel="noopener">http://log.zhinengxiyifang.cn:5602/</a></li>
<li>用户：ujing</li>
<li>密码：dagan50tian</li>
</ol>
</li>
<li>接口测试：<ol>
<li>地址：<a href="http://114.215.202.178:3002/explorer/" target="_blank" rel="noopener">http://114.215.202.178:3002/explorer/</a></li>
</ol>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>形成良好的记录习惯，办公会相对轻松很多！如果Memo失效的话，会及时更新！</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>Yaml Quick Start</title>
    <url>/2020/04/22/Yaml-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>YAML是一种直观的能够被电脑识别的数据序列化格式，是一个可读性高并且容易被人类阅读，容易和脚本语言交互，用来表达资料序列的编程语言，类似于标准通用标记语言的子集XML的数据描述语言，语法比XML简单很多。YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递归缩写。在SpringBoot的配置文件中，推荐使用yaml文件进行记录，之前学习Docker的时候进行了学习，在这里在进行巩固性学习！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Yaml格式"><a href="#Yaml格式" class="headerlink" title="Yaml格式"></a>Yaml格式</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environments:</span></span><br><span class="line">    <span class="attr">dev:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://dev.bar.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Developer</span> <span class="string">Setup</span></span><br><span class="line">    <span class="attr">prod:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://foo.bar.com</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">My</span> <span class="string">Cool</span> <span class="string">App</span></span><br><span class="line"><span class="attr">my:</span></span><br><span class="line">    <span class="attr">servers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dev.bar.com</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">foo.bar.com</span></span><br></pre></td></tr></table></figure>

<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol>
<li>YAML使用冒号加缩进的方式代表层级（属性）关系，使用短横杠(-)代表数组元素；</li>
<li>YAML做配置文件也不错，写YAML要比写XML快得多(无需关注标签或引号)，并且比ini文档功能更强；</li>
<li>注意yaml的空格；</li>
</ol>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><ol>
<li>YAML中允许表示三种格式，分别是常量值，对象和数组；</li>
<li>- 表示数组元素,使用一个短横线加一个空格代表一个数组项;</li>
<li>使用#作为注释，YAML中只有行注释；</li>
<li>格式要求：<ol>
<li><strong>YAML对大小写敏感；</strong></li>
<li><strong>使用缩进代表层级关系；</strong></li>
<li><strong>缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐(一般个或4个空格)。</strong></li>
</ol>
</li>
<li>对象使用冒号代表，格式为key:value。冒号后面要加一个空格，支持流式（flow）语法表示对象；</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">&#123;child-key:</span> <span class="string">value,</span> <span class="attr">child-key2:</span> <span class="string">value2&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>YAML中提供了多种常量结构，包括：整数，浮点数，字符串，NULL，日期，布尔，时间;</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="literal">TRUE</span>    <span class="comment">#true,True都可以</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">FALSE</span>   <span class="comment">#false,False都可以</span></span><br><span class="line"><span class="attr">float:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6.8523015e+5</span>    <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>   <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span> </span><br><span class="line">    <span class="attr">nodeName:</span> <span class="string">’node’</span></span><br><span class="line">    <span class="attr">parent:</span> <span class="string">~</span> <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'Hello World'</span> <span class="comment">#可以使用双引号或者单引号包裹特殊符号</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">      <span class="string">newline2</span> <span class="comment">#字符串可以拆成多行，每一行会被转换成一个空格</span></span><br><span class="line"><span class="attr">date:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018</span><span class="number">-02</span><span class="number">-17</span> <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018</span><span class="number">-02</span><span class="string">-17T15:02:31+08:00</span> <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>—YAML可以在同一个文件中，使用—表示一个文档的开始,常常使用—来分割不同的内容，比如记录日志;</li>
<li>… 和—配合使用，在一个配置文件中代表一个文件的结束;</li>
<li>引用。重复的内容在YAML中可以使用&amp;来完成锚点定义，使用*来完成锚点引用:</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hr:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Mark</span> <span class="string">McGwire</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&amp;SS</span> <span class="string">Sammy</span> <span class="string">Sosa</span></span><br><span class="line"><span class="attr">rbi:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">*SS</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Ken</span> <span class="string">Griffey</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>合并内容。主要和锚点配合使用，可以将一个锚点内容直接合并到一个对象中;</li>
</ol>
<h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ol>
<li>官方网址：<a href="https://yaml.org/；" target="_blank" rel="noopener">https://yaml.org/；</a></li>
<li>学习网址：<a href="http://nodeca.github.io/js-yaml/" target="_blank" rel="noopener">http://nodeca.github.io/js-yaml/</a></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习这种标记语言相对来说只要知道格式就很简单，大部分的时候都是在使用基本语法格式，可能是为了更好的兼容性把，我在Spring Boot的学习中并没有看到使用锚点这种类型，因此知道这些基础的语法格式应该足够应付我们的日常开发过程。</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>代码之外的功夫：程序员精进之路</title>
    <url>/2020/05/25/%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E5%8A%9F%E5%A4%AB%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>软件开发人员的职业发展路线更像是螺旋线而非直线！这部分不是讲述写什么样的代码，而是叙述如何思考，如何成长，如何规划自己的程序员之路！<strong>推荐书籍：《代码之外的功夫：程序员精进之路》· [美] Gregory T. Brown 著 李志 译</strong>            </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="善用设计原型，探索项目创意"><a href="#善用设计原型，探索项目创意" class="headerlink" title="善用设计原型，探索项目创意"></a>善用设计原型，探索项目创意</h2><ol>
<li>不论做什么产品或项目，首要任务都是<strong>尽快发掘和实现客户头脑中的需求</strong>；</li>
<li>高效的反馈环有利于快速识别潜在的不良设计，并对此提出解决方案，以免日后在更关键的阶段浪费大量时间    和精力；</li>
<li>通过<strong>线框图向大家解释待开发应用的基本结构</strong>，同时让大家都了解需要完成什么工作，以免因过度关注技术细节而迷失了大方向；</li>
<li>编程之初立即搭建测试系统，全面探讨不足， 改善追求实效，早问多问， 验证设想；         </li>
<li>搭建一个基本框架，在这个已有的框架中发掘真正的问题，并试着去解决；如果一开始就直接考虑整个问题怎么解决，就会很难找到一个切入点，这样停滞的时间就会更长！</li>
<li>原型可以帮助我们更快地做出有用的产品，但也可能让我们失败得更快，如果不用花太多时间就能辨认出死胡同，那就有更多的时间和精力去寻找正确的路。</li>
<li>在项目早期建立起一些诚意和信任，可以给人一种动力，让人在啃到任何创新工作都无法避免的“硬骨头”时，能够坚持下去。                    </li>
</ol>
<h2 id="观察增量变更，发掘隐藏依赖"><a href="#观察增量变更，发掘隐藏依赖" class="headerlink" title="观察增量变更，发掘隐藏依赖"></a>观察增量变更，发掘隐藏依赖</h2><ol>
<li>为了鼓励这种基于社区分享学习资料的发展模式，你需要搭建一个公开的维基系统，使它与官方知识库网站协同运行；</li>
<li>对数据库模式所做的任何修改都应该考虑到数据的一致性，不管新特性在代码层面上多么独立，在数据层面上仍有可能存在隐藏的依赖关系；</li>
<li>集成外部服务一般是非常让人头疼的工作，因为会出现各种奇奇怪怪、令人十分不悦的问题 ；</li>
<li>不要因为某个变更没有明显改变现有特性，就认为它会向后兼容或绝对安全，相反，应该对隐藏的依赖关系随时保持警惕，即使进行的是最简单的更新操作；</li>
<li>注意除代码库之外的大量共享资源：存储机制、处理能力、数据库、外部服务、库、用户界面，等等；</li>
<li>利用限制和验证的方式，在最大程度上防止局部故障对整个系统造成影响；</li>
<li>在复用现有的工具和资源时，要尤其注意使用环境的变化，任何对使用范围、性能标准或隐私安全级别的改变，如果不经过仔细考虑，都可能引起非常危险的问题。</li>
</ol>
<h2 id="准确识别痛点，高效集成服务"><a href="#准确识别痛点，高效集成服务" class="headerlink" title="准确识别痛点，高效集成服务"></a>准确识别痛点，高效集成服务</h2><ol>
<li>当应用依赖于不甚了解的外部服务时，一定要加倍小心，可能该服务根本不适合；</li>
<li>谨记库和服务之间最关键的不同点：只有在代码库或基础设施发生改变时，库才会引起显著变更；而外部服务随时都可能让系统行为发生改变，甚至导致系统崩溃；</li>
<li>只要服务依赖发生变更，就要在测试中密切关注是否有模拟对象过期，一定要确保针对你所依赖的真实服务运行一些测试；</li>
<li>认真对待每次代码复查，把它当作对所依赖服务的一次小规模审查，比如评估测试策略、考虑如何处理故障，或者思考如何防止错用资源。</li>
</ol>
<h2 id="设计严密方案，逐步解决问题"><a href="#设计严密方案，逐步解决问题" class="headerlink" title="设计严密方案，逐步解决问题"></a>设计严密方案，逐步解决问题</h2><ol>
<li>描述问题的原始资料一般都是零散的语句、示例和参考材料，为了理解这些资料，需要记笔记，排除噪声信息，只留下最关键的细节；</li>
<li>每个问题的背后都有一堆简单的子问题，你早已知道如何解决它们。要将问题不断拆分，直到你能辩认出构成它的子问题为止；</li>
<li>难题由很多活动部分组成，先观察各个部分如何联系在一起，而不要管具体的实现细节，在写代码之前，先用纸笔解决部分问题！</li>
<li>在无效数据集上运用有效规则可能会得到难以调试的混乱结果，不要假设输入数据集的格式正确！在处理任何数据集之前，都要预先检查，以避免出现“垃圾进、垃圾出”的情况。</li>
</ol>
<h2 id="谨记自底向上，优化软件设计"><a href="#谨记自底向上，优化软件设计" class="headerlink" title="谨记自底向上，优化软件设计"></a>谨记自底向上，优化软件设计</h2><ol>
<li>进行自底向上设计时，首先列出问题的关键词，然后，用这些词造出有意义的短句，越短越好 ；</li>
<li>在为项目增加新功能时，注意对象之间的联系，重视那些在量和时间上灵活的设计，这样对象就不会向其协作对象施加人为约束；</li>
<li>在提取可复用的对象和函数时，寻找不太随时间变化的基本结构单元，而不是去那些表面上看起来可以复用的模板式代码；</li>
<li>要充分利用那些在复用基本结构单元的过程中意外出现的特性，以便解决新问题！但同时要注意，在拼接对象时，不要使代码过于复杂，如果集成点过于混乱，就说明不适合使用自底向上的设计方法。</li>
</ol>
<h2 id="认清现实瑕疵，改善数据建模"><a href="#认清现实瑕疵，改善数据建模" class="headerlink" title="认清现实瑕疵，改善数据建模"></a>认清现实瑕疵，改善数据建模</h2><ol>
<li>保留数据的原始格式，不要试图立即将其转换为与概念一一对应的结构；</li>
<li>在开发数据模型时，仔细考虑数据将被如何表示、查询和修改，在实践中，很少有项目只需要针对数据进行创建、读取、更新和删除等简单操作，因此一定要量体裁衣；</li>
<li>要把预览、备注、批准、审查和撤销事务性数据变更等操作设计得简单易行，要做到这一点，需要另外写代码，而不是依赖于预建的库；</li>
<li>数据管理工作流的设计要尊重和支持软件使用者的组织文化，若在设计时不考虑康威定律，系统很可能会被成千上万种使用方法压得不堪重负，最终崩溃。<ul>
<li>设计系统的架构受制于产生这些设计的组织的沟通结构，即产品必然是其（人员）组织沟通结构的缩影，这就是<strong>康威定律</strong></li>
</ul>
</li>
</ol>
<h2 id="逐渐改善流程，合理安排时间"><a href="#逐渐改善流程，合理安排时间" class="headerlink" title="逐渐改善流程，合理安排时间"></a>逐渐改善流程，合理安排时间</h2><ol>
<li>在处理系统级故障时，要根据需要停用或降级一些特性，使软件尽快回到可用状态；</li>
<li>寻找过度耗费时间的部分，用合理的安排加以限制，这样就可以省下时间进行其他工作。做决策不能只靠直觉，要使用“毛估”计算法，将经济因素也考虑进去；</li>
<li>谨记未上线的代码不是资产，而是<strong>存货</strong>！存货容易腐坏，并且具有持有成本。要帮助项目中的每个工作人员理解这一点，让他们集中精力在给定的时间段内交付有价值的工作，而不是让团队中的每个人都为了忙碌而忙碌；</li>
<li>与分工不同的人合作时，试着用对方能理解的方式进行交流！从旁观者的角度看待问题，并思考：“这件事与正在和我交谈的人有关吗？这件事对整个项目有何影响？”  </li>
</ol>
<h2 id="认清行业未来，再议软件开发"><a href="#认清行业未来，再议软件开发" class="headerlink" title="认清行业未来，再议软件开发"></a>认清行业未来，再议软件开发</h2><ol>
<li>程序员不只是编程专家，转型在所难免！程序员是用技术解决人类社会常见问题的人！</li>
<li><strong>站在足够高的层次与计算机交流，只需要关注如何解决问题，而不是纠结于代码编写中的细枝末节！</strong>  </li>
<li>我们需要一种开发工具链，其设计应完全以人为本、为人类服务！</li>
<li>当前的开发过程十分繁琐，需要考虑怎么把第三方库和所用语言的核心函数结合，怎么让数据格式和Web 服务协议对应，等等！</li>
<li>行业的关注点能果断地、永久地由以技术为中心转变为以人为本！</li>
<li>未来需要每个人参与创造、互相帮助、贡献力量，需要思考未来到底是什么样的，该有怎么样的成长！                         </li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如何设计，如何发展远比思考解决问题需要更多的时间，不仅需要代码上的肌肉性的记忆，还需要长远的规划，转型真的是在所难免！自古都是长江后浪推前浪，技术都是在不断更迭，我们自己也需要考虑自我成长，不仅仅学习最新的技术，更要反思，未来的代码可能不是纯粹意义的代码，而是一种思想的转变，思维的抽象，编程更能以人为本！这是我的思考，希望能够尽快找到自己的定位点吧！</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery Quick Start</title>
    <url>/2020/05/30/jQuery-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在众多JavaScript框架（或JavaScript库）中， jQuery一枝独秀早已是不争的事实。jQuery让写JavaScript代码变得妙趣横生！jQuery是一个强大的JavaScript库，无论你具有什么编程背景，都可以通过它来增强自己的网站。<strong>推荐书籍：《jQuery 基础教程（第4版）》· [美] Jonathan Chaffer，Karl Swedberg 著 李松峰 译</strong>            </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="jQuery基础知识"><a href="#jQuery基础知识" class="headerlink" title="jQuery基础知识"></a>jQuery基础知识</h2><ol>
<li>jQuery库为Web脚本编程提供了通用的抽象层，使得它几乎适用于任何脚本编程的情形；</li>
<li>jQuery能够满足下列需求：<ul>
<li>取得文档中的元素，jQuery为准确地获取需要检查或操纵的文档元素，提供了可靠而富有效率的选择符机制    </li>
<li>修改页面的外观，即使在页面已经呈现之后， jQuery仍然能够改变文档中某个部分的类或者个别的样式属性</li>
<li>改变文档的内容，使用少量的代码，jQuery就能改变文档的内容 </li>
<li>响应用户的交互操作，jQuery提供了截获形形色色的页面事件的适当方式</li>
<li>为页面添加动态效果，jQuery中内置的一批淡入、擦除之类的效果，以及制作新效果的工具包能向用户提供视觉上的反馈</li>
<li>无需刷新页面从服务器获取信息</li>
<li>简化常见的JavaScript任务  </li>
</ul>
</li>
<li>每种浏览器对颁布的标准都有自己的一套不太一致的实现方案！</li>
<li>jQuery为Web开发人员提供了灵活且健壮的系统，而且它对所有人都是免费的！</li>
</ol>
<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><ol>
<li><p>下载<a href="https://jquery.com/download/" target="_blank" rel="noopener">jQuery库文件</a>；</p>
</li>
<li><p>什么时候需要使用jQuery，只要在HTML文档中使用&lt;script&gt;元素把它导入进来即可;</p>
</li>
<li><p>在实际开发中还是使用本地副本更方便一些，在正式环境可以考虑CDN加速；</p>
</li>
<li><p>引用jQuery库文件的&lt;script&gt;标签，必须放在引用自定义脚本文件的&lt;script&gt;标签之前,否则，在我们编写的代码中将引用不到jQuery框架;</p>
</li>
<li><p>jQuery中基本的操作就是选择文档中的某一部分，这是通过$()函数来完成的,该函<br>数需要一个字符串参数，参数中可以包含任何CSS选择符表达式 ;</p>
</li>
<li><p>$()函数会返回一个新的jQuery对象实例，jQuery对象中会封装零个或多个DOM元素，并允许我们以多种不同的方式与这些DOM元素进行交互；</p>
</li>
<li><p>.addClass()方法会将一个CSS类应用到我们选择的页面元素，唯一的参数就是要添加的类名，其反方法为.removeClass()，为我们探索jQuery支持的各种选择符表达式提供了便利；</p>
</li>
<li><p>jQuery在.addClass()等方法中使用了隐式迭代机制，因此一次函数调用就可以完成对所有选择的文档部分的修改；</p>
</li>
<li><p>通过使用$(document).ready()方法， jQuery支持我们预定在DOM加载完毕后调用某个函数，而不必等待页面中的图像加载：</p>
<ul>
<li>可以多次调用$(document).ready()并按照调用它们的顺序执行  </li>
<li>即便是在浏览器事件发生之后把函数传给$(document).ready()， 这些函数也会执行  </li>
<li>异步处理事件的预定，必要时脚本可以延迟执行  </li>
<li>.ready()方法的参数可以是一个已经定义好的函数的引用，可以接收一个匿名函数      </li>
<li>可以使用window.onload事件处理</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHighlightClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">'div.poem-stanza'</span>).addClass(<span class="string">'highlight'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$(document).ready(addHighlightClass);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="comment">$('div.poem-stanza').addClass('highlight');</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//$(document).ready(addHighlightClass);</span></span><br><span class="line">	$(<span class="string">'div.poem-stanza'</span>).addClass(<span class="string">'highlight'</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//原生js代码：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">window.onload = function() &#123;</span></span><br><span class="line"><span class="comment">var divs = document.getElementsByTagName('div');</span></span><br><span class="line"><span class="comment">for (var i = 0; i &lt; divs.length; i++) &#123;</span></span><br><span class="line"><span class="comment">if (hasClass(divs[i], 'poem-stanza')</span></span><br><span class="line"><span class="comment">&amp;&amp; !hasClass(divs[i], 'highlight')) &#123;</span></span><br><span class="line"><span class="comment">divs[i].className += ' highlight';</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">function hasClass( elem, cls ) &#123;</span></span><br><span class="line"><span class="comment">var reClass = new RegExp(' ' + cls + ' ');</span></span><br><span class="line"><span class="comment">return reClass.test(' ' + elem.className + ' ');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>jQuery代码不仅写起来省事，读起来简单，而且也比纯JavaScript代码的执行速度更快!</strong></p>
</li>
<li><p>推荐使用谷歌浏览器的开发者工具进行检查，辅助开发，支持下面的功能：</p>
<ul>
<li>探测及修改DOM  </li>
<li>研究CSS及页面表现之间的关系</li>
<li>通过特殊的方法方便地跟踪脚本执行</li>
<li>暂停脚本运行及检查变量值      </li>
</ul>
</li>
<li><p>谷歌浏览器的开发者工具Sources（资源）标签页显示的是页面中加载的所有脚本</p>
</li>
<li><p>谷歌浏览器的开发者工具Console（控制台）标签页恐怕是学习jQuery的过程中用得最多的一个了，可以在里面输入JavaScript语句，按回车后，语句的执行结果就会显示在上方  </p>
</li>
<li><p>可以向console.log()方法中传入任何表达式，字符串、数值等简单的值会被直接打印出来，而jQuery对象等复杂的值则会以容易理解的格式展示出来    </p>
</li>
</ol>
<h2 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h2><ol>
<li><p>jQuery最强大的特性之一就是它能够简化在DOM（ Document Object Model，文档对象模型）  中选择元素的任务；</p>
</li>
<li><p>&lt;html&gt;是其他所有元素的祖先元素，其他所有元素都是&lt;html&gt;的后代元素；</p>
</li>
<li><p>有了元素树，就可以使用jQuery从中取得任何元素了</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c7f24c743751a3c5257d865f0bdd86c3-79718" alt="元素树">     </p>
</li>
<li><p>通过jQuery的各种选择符和方法取得的结果集合会被包装在jQuery对象中，可以轻松地为jQuery对象绑定事件、添加漂亮的效果，也可以将多重修改或效果通过jQuery对象连缀到一起</p>
</li>
<li><p>所有能在样式表中使用的选择符都可以传给$()  函数，随后我们就可以对匹配的元素集合应用jQuery方法；</p>
</li>
<li><p>有3种基本的选择符： 标签名、 ID和类 ：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e6ce763c07858b630e5906a7a031f4d6-60455" alt="基本选择符">      </p>
</li>
<li><p>负责任的jQuery开发者应该在编写自己的程序时，始终坚持渐进增强（ progressive enhancement）和平稳退化（ graceful degradation）的理念；</p>
</li>
<li><p>查找ID为selected-plays的元素#selected-plays的子元素 （&gt;）中所有的列表项（ li）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'#selected-plays &gt; li'</span>).addClass(<span class="string">"horizontal"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性选择符是CSS选择符中特别有用的一类选择符，通过HTML元素的属性选择元素，例如链接的title属性或图像的alt属性；可以使用一种从正则表达式中借鉴来的通配符语法，以^表示值在字符串的开始，以$表示值在字符串的结尾，也是用星号*表示要匹配的值可以出现在字符串中的任意位置，用叹号!表示对值取反：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'a[href^="mailto:"]'</span>).addClass(<span class="string">'mailto'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 用来寻找所有带href属性（ [href]）且以mailto开头（ ^="mailto:"]）的锚元素（ a）</span></span><br><span class="line"><span class="comment">// 属性选择符也可以组合使用</span></span><br><span class="line"><span class="comment">// 可以为href属性即以http开头且任意位置包含henry的所有链接添加一个henrylink类</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'a[href^="mailto:"]'</span>).addClass(<span class="string">'mailto'</span>);</span><br><span class="line">	$(<span class="string">'a[href$=".pdf"]'</span>).addClass(<span class="string">'pdflink'</span>);</span><br><span class="line">    $(<span class="string">'a[href^="http"][href*="henry"]'</span>).addClass(<span class="string">'henrylink'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>jQuery还添加了独有的完全不同的自定义选择符，可以让我们从已经找到的元素中选出一或多个元素 ：</p>
<ul>
<li><p>自定义选择符通常跟在一个CSS选择符后面，基于已经选择的元素集的位置来查找元素</p>
</li>
<li><p>自定义选择符的语法与CSS中的伪类选择符语法相同，即选择符以冒号（ :）开头</p>
</li>
<li><p>例如，想要从带有horizontal类的&lt;div&gt;集合中选择第2项:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div.horizontal:eq(1)'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JavaScript数组采用从0开始的编号方式，而CSS则是从1开始的</strong> </p>
</li>
<li><p>jQuery库中的两个十分有用的自定义选择符是:odd和:even，分别代表奇数行和偶数行    </p>
</li>
<li><p>:nth-child()选择符，相对于元素的父元素而非当前选择的所有元素来计算位置，它可以接受数值、 odd或even作为参数 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'tr:nth-child(odd)'</span>).addClass(<span class="string">'alt'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>:contains()选择符也是一种自定义选择符，表示内容包含</p>
</li>
</ul>
</li>
<li><p>表单选择符：  </p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8d9e34a2891fd7f4e7df9b4190bb8b08-114431" alt="表单选择符"></p>
<ul>
<li>组合使用表单选择符可以更有针对性  </li>
<li>即便是使用自定义选择符，也可以按照基本的CSS语法来定义匹配的元素列表  </li>
</ul>
</li>
<li><p>.filter()以接受函数参数，通过传入的函数，可以执行复杂的测试，以决定相应元素是否应该保留在匹配的集合中 </p>
</li>
<li><p>.next()方法可以为选择的元素的下一个元素进行操作，只选择下一个最接近的同辈元素  </p>
</li>
<li><p>.nextAll()方法选择所有最接近的同辈元素     </p>
</li>
<li><p>.next()和.nextAll()方法分别有一个对应方法，即.prev()和.prevAll()    </p>
</li>
<li><p>.siblings()能够选择处于相同DOM层次的所有其他元素，无论这些元素处于当前元素之前还是之后  </p>
</li>
<li><p>在jQuery中，可以通过一行代码取得多个元素集合并对这些元素集合执行多次操作，即连缀</p>
</li>
<li><p>要访问jQuery对象引用的第一个DOM元素，可以使用.get(0) ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myTag = $(<span class="string">'#my-element'</span>).get(<span class="number">0</span>).tagName;</span><br><span class="line"><span class="comment">// 这样也可以</span></span><br><span class="line"><span class="keyword">var</span> myTag = $(<span class="string">'#my-element'</span>)[<span class="number">0</span>].tagName;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS选择符：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/dc952846d066fe06fe497d8c5c32ac5e-77643" alt="CSS选择符"></p>
</li>
<li><p>筛选元素：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2ea1021e4b30ce0fe6c653ca1be2a331-262691" alt="筛选元素"></p>
</li>
<li><p>绑定：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2ea1021e4b30ce0fe6c653ca1be2a331-262691" alt="绑定"></p>
</li>
</ol>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li><p>jQuery增强并扩展了基本的事件处理机制，不仅提供了更加优雅的事件处理语法，而且也极大地增强了事件处理机制！</p>
</li>
<li><p>通过$(document).ready()注册的事件处理程序，则会在DOM完全就绪并可以使用时调用，但不意味着所有关联的文件都已经下载完毕，当HTML下载完成并解析为DOM树之后，代码就可以运行了；</p>
</li>
<li><p>通过$(document).ready()机制，每次调用这个方法都会向内部的行为队列中添加一个新函数，当页面加载完成后，所有函数都会被执行，这些函数会按照注册它们的顺序依次执行；</p>
</li>
<li><p>通过引入.on()方法  ，可以指定任何DOM事件，并为该事件添加一种行为，多次调用.on()也没有任何问题，即可以按需为同一个事件追加更多的行为；</p>
</li>
<li><p>利用处理程序的上下文将语句通用化，可以使代码更高效；</p>
</li>
<li><p>行为队列机制让我们在同一个单击事件上绑定了两个函数，而且第二个函数不会覆盖第一个函数；</p>
</li>
<li><p>允许多个元素响应单击事件的一种策略叫做事件捕获，在事件捕获的过程中，事件首先会交给最外层的元素，接着再交给更具体的元素；</p>
</li>
<li><p>事件冒泡，即当事件发生时，会首先发送给最具体的元素，在这个元素获得响应机会之后，事件会向上冒泡到更一般的元素；</p>
</li>
<li><p>事件委托就是利用冒泡的一项高级技术，通过事件委托，可以借助一个元素上的事件处理程序完成很多工作；</p>
</li>
<li><p>键盘事件可以分为两类：直接对键盘按键给出响应的事件（ keyup和keydown）和对文本输入给出响应的事件（ keypress）；</p>
</li>
<li><p>事件方法：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ddb488910faa07fe99f7d73b3721b7be-300429" alt="事件方法"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8b45a48c117f733f784156cde79bba18-41405" alt=""></p>
</li>
</ol>
<h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><ol>
<li><p>jQuery提供了.attr()和.revoveAttr()方法操作属性，比如id、 rel和title属性，还可以一次修改多个属性； </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">'div.chapter a'</span>).attr(&#123;<span class="attr">rel</span>: <span class="string">'external'</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML属性是指页面标记中放在引号中的值，而DOM属性则是指通过JavaScript能够存取的值</p>
</li>
<li><p>在jQuery中，可以通过.prop()方法取得和设置DOM属性；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得"checked"属性的当前值</span></span><br><span class="line"><span class="keyword">var</span> currentlyChecked = $(<span class="string">'.my-checkbox'</span>).prop(<span class="string">'checked'</span>);</span><br><span class="line"><span class="comment">//设置"checked"属性的值</span></span><br><span class="line">$(<span class="string">'.my-checkbox'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在取得和设置表单控件的值时，最好不要使用.attr()方法，建议使用jQuery提供的.val()方法；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得文本输入框的当前值</span></span><br><span class="line"><span class="keyword">var</span> inputValue = $(<span class="string">'#my-input'</span>).val();</span><br><span class="line"><span class="comment">//取得选项列表的当前值</span></span><br><span class="line"><span class="keyword">var</span> selectValue = $(<span class="string">'#my-select'</span>).val();</span><br><span class="line"><span class="comment">//设置单选列表的值</span></span><br><span class="line">$(<span class="string">'#my-single-select'</span>).val(<span class="string">'value3'</span>);</span><br><span class="line"><span class="comment">//设置多选列表的值</span></span><br><span class="line">$(<span class="string">'#my-multi-select'</span>).val([<span class="string">'value1'</span>, <span class="string">'value2'</span>]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>jQuery提供了很多将元素插入到文档中的方法，可 以使用.insertAfter()方法；可以使用.insertBefore()方法，这两个都是在指定的元素外部插入新内容；</p>
<ul>
<li>.insertBefore()在现有元素外部、之前添加内容</li>
<li>.prependTo()在现有元素内部、之前添加内容</li>
<li>.appendTo()在现有元素内部、之后添加内容</li>
<li>.insertAfter()在现有元素外部、之后添加内容  </li>
</ul>
</li>
<li><p>要在一个元素中包装另一个元素，必须知道是把每个元素分别包装在各自的容器中，还是把所有元素包装在一个容器中；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'span.footnote'</span>)</span><br><span class="line">	.insertBefore(<span class="string">'#footer'</span>)</span><br><span class="line">	.wrapAll(<span class="string">'&lt;ol id="notes"&gt;&lt;/ol&gt;'</span>)</span><br><span class="line">	.wrap(<span class="string">'&lt;li&gt;&lt;/li&gt;'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>.each()方法就是一个显式迭代器，这个方法接受一个回调函数，这个函数会针对匹配的元素集中的每个元素都调用一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $notes = $(<span class="string">'&lt;ol id="notes"&gt;&lt;/ol&gt;'</span>).insertBefore(<span class="string">'#footer'</span>);</span><br><span class="line">	$(<span class="string">'span.footnote'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">	$(<span class="keyword">this</span>).appendTo($notes).wrap(<span class="string">'&lt;li&gt;&lt;/li&gt;'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在复制元素时，需要使用jQuery的.clone()方法，这个方法能够创建任何匹配的元素集合的副本以便将来使用，要想让复制的内容显示在网页中，可以使用插入方法；  </p>
</li>
<li><p>总结：</p>
<ol>
<li>要在HTML中创建新元素，使用$()函数  </li>
<li>要在每个匹配的元素中插入新元素，使用：  <ul>
<li>.append()  </li>
<li>.appendTo()  </li>
<li>.prepend()  </li>
<li>.prependTo()</li>
</ul>
</li>
<li>要在每个匹配的元素相邻的位置上插入新元素，使用：  <ul>
<li>.after()  </li>
<li>.insertAfter()  </li>
<li>.before()  </li>
<li>.insertBefore()  </li>
</ul>
</li>
<li>要在每个匹配的元素外部插入新元素，使用：  <ul>
<li>.wrap()  </li>
<li>.wrapAll()  </li>
<li>.wrapInner()  </li>
</ul>
</li>
<li>要用新元素或文本替换每个匹配的元素，使用：  <ul>
<li>.html()  </li>
<li>.text()  </li>
<li>.replaceAll()  </li>
<li>.replaceWith()  </li>
</ul>
</li>
<li>要移除每个匹配的元素中的元素，使用：  <ul>
<li>.empty()  </li>
</ul>
</li>
<li>要从文档中移除每个匹配的元素及其后代元素，但不实际删除它们，使用 ：<ul>
<li>.remove()  </li>
<li>.detach()  </li>
</ul>
</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7a2e97ceb1a781034871e81b56a77e40-143308" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/30290f0b042e08c314fa951c10a84f92-152902" alt=""></p>
</li>
</ol>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><ol>
<li>使用jQuery简洁的插件架构，开发者能够把jQuery的功能扩展得更加丰富；</li>
<li>jQuery官方网站的<a href="https://plugins.jquery.com/" target="_blank" rel="noopener">插件库</a>囊括了大量插件；</li>
<li>jQuery论坛中专门有一个区域，<a href="http://forum.jquery.com/using-jquery-plugins" target="_blank" rel="noopener">讨论插件的使用</a></li>
<li>插件并不局限于提供更多的jQuery方法，也可以扩展jQuery的功能，甚至修改已有的特性；</li>
<li>很多流行的插件在jQuery命名空间中提供了一些新的全局函数  </li>
<li>jQuery UI团队创建了大量核心交互组件及成熟的部件（ widget），使用它们可以创造出更加类似桌面应用程序的Web体验；</li>
<li>jQuery UI中的效果（ effect）模块由一个核心文件和一组独立的效果文件组成；</li>
<li>jQuery UI库最近增添的一项名为ThemeRoller（主题卷轴）的功能，这是一个面向UI部件的基于Web的交互式主题引擎；</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>jQuery在Web开发中非常方便，jQuery 是目前最受欢迎的 JavaScript/Ajax 库之一， 能用最少的代码实现最多的功能！一切为了简单! jQuery项目一定会继续成长并取得更大的成功!     </p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>你不知道的JavaScript</title>
    <url>/2020/06/11/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在互联网发展的早期， JavaScript 就已经成为了支撑网页内容交互体验的基础技术，优秀的技术总是让人忍不住去学。JavaScript 语言本身有很多复杂的概念，语言的使用者不必深入理解这些概念也可以编写出功能全面的应用，这些复杂精妙的概念才是语言的精髓，要直面当前 JavaScript 开发者不求甚解的大趋势，深入理解语言内部的机制！<strong>推荐书籍：《你不知道的JavaScript 上卷》· [美] Kyle Simpson 著 赵望野 梁杰译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol>
<li><p>在传统编译语言的流程中，程序中的一段源代码在执行 之前会经历三个步骤，统称为“编 译”：</p>
<ul>
<li>分词/词法分析（Tokenizing/Lexing）</li>
<li>解析/语法分析（Parsing）</li>
<li>代码生成</li>
</ul>
</li>
<li><p>任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）！</p>
</li>
<li><p>基础概念：</p>
<ul>
<li>引擎——从头到尾负责整个JavaScript程序的编译及执行过程</li>
<li>编译器——负责语法分析及代码生成等脏活累活</li>
<li>作用域——负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限</li>
</ul>
</li>
<li><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止，当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止！</p>
</li>
<li><p>ES5中引入了“严格模式”，严格模式在行为上有很多不同，比如严格模式禁止自动或隐式地创建全局变量；</p>
</li>
<li><p>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛出 ReferenceError 异常（严格模式下）；</p>
</li>
<li><p>词法作用域就是定义在词法阶段的作用域；</p>
</li>
<li><p>作用域查找会在找到第一个匹配的标识符时停止。 在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”；</p>
</li>
<li><p>JavaScript中有两个机制可以“欺骗”词法作用域： eval(..) 和 with。JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码；</p>
</li>
<li><p>JavaScript 中另一个难以掌握（并且现在也不推荐使用）的用来欺骗词法作用域的功能是with 关键字，通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要 重复引用对象本身；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">// 单调乏味的重复 "obj" </span></span><br><span class="line">obj.a = <span class="number">2</span>; </span><br><span class="line">obj.b = <span class="number">3</span>; </span><br><span class="line">obj.c = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 简单的快捷方式 </span></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">	a = <span class="number">3</span>;</span><br><span class="line">	b = <span class="number">4</span>;</span><br><span class="line">	c = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果代码中大量使用 eval(..) 或 with ， 那么运行起来一定会变得非常!</p>
</li>
<li><p>函数作用域是指属于这个函数的全部变量都可以在整个函数的范围内使用及复用；</p>
</li>
<li><p>“隐藏”作用域中的变量和函数所带来的另一个好处，是可以避免同名标识符之间的冲突；</p>
</li>
<li><p>在任意代码片段外部添加包装函数， 可以将内部的变量和函数定义“隐藏”起来，外部作用域无法访问包装函数内部的任何内容；</p>
</li>
<li><p>匿名函数表达式 ，因为 function().. 没有名称标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名；</p>
<ul>
<li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难</li>
<li>如果没有函数名，当函数需要引用自身时只能使用已经过期的 arguments.callee 引用</li>
<li>匿名函数省略了对于代码可读性 / 可理解性很重要的函数名</li>
</ul>
</li>
<li><p>行内函数表达式，给函数表达式指定一个函数名可以有效解决以上问题；</p>
</li>
<li><p>开发者需要 检查 自己的代码，以避免在作用范围外意外地使用（或复用）某些变量，如果在错误的地方使用变量将导致未知变量的异常；</p>
</li>
<li><p>ES6 还引入了 const ， 同样可以用来创建块作用域变量， 但其值是固定的（常量），之后任何试图修改值的操作都会引起错误；</p>
</li>
<li><p>任何声明在某个作用域内的变量，都将附属于这个作用域！</p>
</li>
<li><p>每个作用域都会进行提升操作!函数声明和变量声明都会被提升,函数会首先被提升，然后才是变量;</p>
</li>
</ol>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ol>
<li><p>JavaScript中闭包无处不在，你只需要能够识别并拥抱它!</p>
</li>
<li><p>根据自己的意愿来识别、拥抱和影响闭包的思维环境；</p>
</li>
<li><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( a ); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz();</span><br></pre></td></tr></table></figure>
</li>
<li><p>闭包使得函数可以继续访问定义时的词法作用域;</p>
</li>
<li><p>无论通过何种手段将内部函数 传递 到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包;</p>
</li>
<li><p>模块模式需要具备两个必要条件:</p>
<ol>
<li>必须有外部的封闭函数，该函数必须至少被调用一次</li>
<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态</li>
</ol>
</li>
</ol>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol>
<li><p>this关键字是 JavaScript 中最复杂的机制之一，被自动定义在所有函数的作用域中；</p>
</li>
<li><p>this 提供了一种更优雅的方式来隐式“传递”一个对象引用！</p>
</li>
<li><p>每当想要把this和词法作用域的查找混合使用时，一定要提醒自己，这是无法实现的！</p>
</li>
<li><p>this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式，当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文），这个记录会包含函数在哪里被调用（调用栈）、函数的调用方法 、传入的参数等信息，<strong>this 就是记录的其中一个属性，会在函数执行的过程中用到；</strong></p>
</li>
<li><p><strong>学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域！</strong></p>
</li>
<li><p>调用位置就是函数在代码中被调用的位置（而不是声明的位置）,但是做起来并没有这么简单，因为某些编程模式可能会隐藏真正的调用位置!</p>
</li>
<li><p>查看调用栈的方法是使用浏览器的调试工具，绝大多数现代桌面浏览器都内置了开发者工具， 其中包含 JavaScript 调试器；</p>
</li>
<li><p>绑定规则：</p>
<ol>
<li>默认绑定——最常用的函数调用类型：独立函数调用，可以把这条规则看作是无法应用其他规则时的默认规则；</li>
<li>隐式绑定——调用位置是否有上下文对象（回调函数丢失 this 绑定是非常常见的）；</li>
<li>显式绑定——JavaScript 提供的绝大多数函数以及自己创建的所有函数都可以使用 call(..) 和 apply(..) 方法；第一个参数是一个对象，会把这个对象绑定到this ， 接着在调用函数时指定这个 this；</li>
<li>JavaScript有一个 new 操作符，使用方法看起来也和那些面向类的语言一样，</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">  a:<span class="number">2</span> </span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj ); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作 this 的绑定对象，这个原始值会被转换成它的对象形式,被称为“装箱”</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作:</p>
<ul>
<li>创建（或者说构造）一个全新的对象</li>
<li>这个新对象会被执行[[原型]]连接</li>
<li>这个新对象会绑定到函数调用的 this</li>
<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li>
</ul>
</li>
<li><p>ES5 中内置的 Function.prototype.bind(..) 更加复杂；</p>
</li>
<li><p>箭头函数并不是使用 function 关键字定义的，而是使用被称为“胖箭头”的操作符 =&gt; 定义的；</p>
</li>
</ol>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ol>
<li>JavaScript中的对象有一个特殊的[[Prototype]]内置属性， 其实就是对于其他对象的引用，几乎所有的对象在创建时[[Prototype]]属性都会被赋予一个非空的值；</li>
<li>任何可以通过原型链访问到的属性都会被枚举；</li>
<li>在 JavaScript 中，类无法描述对象的行 ，对象直接定义自己的行为，JavaScript只有对象；</li>
<li>委托行为意味着某些对象（ XYZ ）在找不到属性或者方法引用时会把这个请求委托给另一个对象（ Task ）；</li>
<li>行为委托认为对象之间是兄弟关系， 互相委托， 而不是父类和子类的关系；</li>
<li>当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰！</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JavaScript的高级特性还需要好好理解，可以继续后续的下卷，然后在实际工程中尝试使用，或者阅读别人代码来提升！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>你不知道的JavaScript后续</title>
    <url>/2020/06/13/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E5%90%8E%E7%BB%AD/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这部分是继你不知道的JavaScript的后续，下卷，但是我看了这部分的作者介绍才知道还有中卷，后续有机会再补充吧！JavaScript 是一门简单易用的语言， 应用广泛， 同时它的语言机制又十分复杂和微妙， 即使经验丰富的开发人员也需要用心学习才能真正掌握！JavaScript 是一门优秀的语言。 只学其中一部分内容很容易， 但是要全面掌握则很难！<strong>推荐书籍：《你不知道的JavaScript 下卷》· [美] Kyle Simpson 著 单业 译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>在计算机语言中，执行特定任务的一组单词、数字和运算符被称为语句；</p>
</li>
<li><p>一个表达式是对一个变量或值的引用，或者是一组值和变量与运算符的组合；</p>
</li>
<li><p>JavaScript 引擎实际上是动态编译程序，然后立即执行编译后的代码；</p>
</li>
<li><p>编写代码并不只是为了给计算机看。在给计算机看的同时，代码同样要给开发者阅读；</p>
</li>
<li><p>JavaScript中的注释有两种类型：单行注释和多行注释：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释 </span></span><br><span class="line"><span class="comment">/* 而这是</span></span><br><span class="line"><span class="comment">一个多行 </span></span><br><span class="line"><span class="comment">注释。 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>弱类型（也称为动态类型）允许一个变量在任意时刻存放任意类型的值， 变量可以持有任意类型值而不存在类型强制；</p>
</li>
<li><p>在 JavaScript 中，使用一对大括号 { .. } 在一个或多个语句外来表示块；</p>
</li>
<li><p>程序中有很多种方法可以用于表示条件判断（也就是决策）；</p>
</li>
<li><p>函数是可以通过名字被“调用”的已命名代码段，每次调用，其中的代码就会运行；</p>
</li>
<li><p>在 JavaScript 中，每个函数都有自己的作用域，作用域基本上是变量的一个集合以及如何通过名称访问这些变量的规则，只有函数内部的代码才能访问这个函数作用域中的变量；</p>
</li>
<li><p>运行JavaScript程序最简单的方法是，将其输入到你手边浏览器的开发者终端中；</p>
</li>
<li><p>对象类型是指一个组合值，你可以为其设置属性（命名的位置），每个属性可以持有属于自己的任意类型的值；</p>
</li>
<li><p>数组是一个持有（任意类型）值的对象，这些值不是通过命名属性 / 键值索引，而是通过数字索引位置，像 JavaScript这样从零开始计数的语言， 会使用 0 作为数组中第一个元素的索引；</p>
</li>
<li><p>在 JavaScript 中， 变量的名称（包括函数名称）必须是有效的标识符；</p>
</li>
<li><p>闭包可以看作“记忆”并在函数运行完毕后继续访问这个函数作用域（其变量）的一种方法；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 参数x是一个内层变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内层函数add()使用x，所以它外围有一个“闭包” </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">y</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> y + x; </span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每 次 调 用 外 层 makeAdder(..) 返 回 的、 指 向 内 层 add(..)函数的引用能够记忆传入makeAdder(..) 的 x 值</span></span><br><span class="line"><span class="keyword">var</span> plusOne = makeAdder( <span class="number">1</span> );</span><br><span class="line">plusOne( <span class="number">3</span> ); <span class="comment">// 4 &lt;-- 1 + 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模块允许你定义外部不可见的私有实现细节（变量、函数），同时也可以提供允许从外部访问的公开 API；</p>
</li>
</ol>
<h2 id="组织代码"><a href="#组织代码" class="headerlink" title="组织代码"></a>组织代码</h2><ol>
<li><p>编写 JavaScript 代码是一回事，而合理组织代码则是另一回事，利用通用模式来组织和复用代码显著提高了代码的可读性和可理解性；</p>
</li>
<li><p>迭代器（iterator）是一个结构化的模式， 用于从源以一次一个的方式提取数据；</p>
</li>
<li><p>生成器可以在执行当中暂停自身，可以立即恢复执行也可以过一段时间之后恢复执行。在执行当中的每次暂停 / 恢复循环都提供了一个双向信息传递的机会，生成器可以返回一个值，恢复它的控制代码也可以发回一个值；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) // ..</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器还有一个可以在其中使用的新关键字，用来标示暂停点： yield。甚至可以把 yield 放在循环中，用来表示一个重复暂停点；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Math</span>.random(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>yield.. 表达式可以出现在所有普通表达式可用的地方</li>
<li>每一个 yield 都会导致这个生成器暂停等待一个恢复值，然后把这个恢复值用在各种表达式上下文中</li>
<li>*使 得 yield 成 为了 yield * ，这是一个完全不同的机制，称为 yield 委托（yield delegation）</li>
<li>可以通过 for..of 循环消耗迭代器，即使是一个附着在 *foo() 这样的生成 器上的迭代器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( v ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动迭代生成器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>; </span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = foo();</span><br><span class="line"></span><br><span class="line">it.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">it.next(); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">it.next(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不要把 yield 语句放在 finally 子句内部！</p>
</li>
<li><p>生成器的错误处理可以表达为 try..catch；</p>
</li>
</ol>
<h2 id="异步流控制"><a href="#异步流控制" class="headerlink" title="异步流控制"></a>异步流控制</h2><ol>
<li><p>Promise 不是对回调的替代， Promise 在回调代码和将要执行这个任务的异步代码之间提供了一种可靠的中间机制来管理回调；</p>
</li>
<li><p>可以把Promise看作事件监听者。 可以在其上注册以监听某个事件，在任务完成之后得到通知；</p>
</li>
<li><p>Promise 的决议结果只有两种可能：完成或拒绝， 附带一个可选的单个值。 如果 Promise 完成，那么最终的值称为完成值；如果拒绝，那么最终的值称为原因；Promise 只能被决议（完成或者拒绝）一次，之后再次试图完成或拒绝的动作都会 被忽略！</p>
</li>
<li><p>构造Promise：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Promise 有一个 then(..) 方法， 接受一个或两个回调函数作为参数。 前面的函数（如果存在的话）会作为 promise 成功完成后的处理函数。 第二个函数（如果存在的话）会作为 promise 被显式拒绝后的处理函数，或者在决议过程中出现错误 / 异常的情况下的处理函数；</p>
</li>
<li><p>Promise构造器的真正实例是Promise， 但还有一些类 promise 对象， 称为 thenable ，们也可以用 Promise 机制解释。任何提供了 then(..) 函数的对象（或函数）都被认为是 thenable，Promise机制中所有可以接受真正 promise 状态的地方，也都可以处理 thenable；</p>
</li>
<li><p>Promise的API:</p>
<ul>
<li>Promise.resolve(..) 创建了一个决议到传入值的 promise</li>
<li>Promise.reject(..) 创建一个立即被拒绝的 promise</li>
<li>Promise.all([ .. ]) 接受一个或多个值的数组，返回一个 promise， 如果所有的值都完成，这个 promise 的结果是完成，否则就是被拒绝</li>
<li>Promise.race([ .. ]) 等待第一个完成或者拒绝</li>
</ul>
</li>
<li><p>只要代码中出现超过两个异步步骤的流控制逻辑，都可以也应该使用由 run 工具驱动的 promise-yield 生成器以异步风格表达控制流！这种“yield 一个 promise 来恢复生成器”的模式将会成为一个常用模式，这个模式非常强大；</p>
</li>
</ol>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ol>
<li><p>Map就像是一个对象（键 / 值对）， 但是键值并非只能为字符串， 而是可以使用任何值；</p>
</li>
<li><p>对象作为映射的主要缺点是不能使用非字符串值作为键；</p>
</li>
<li><p>要从 map 中删除一个元素，不要使用 delete 运算符，而是要使用 delete() 方法；</p>
</li>
<li><p>要从 map 中得到一列值， 可以使用 values(..) ， 它会返回一个迭代器；</p>
</li>
<li><p>要得到一列键，可以使用 keys() ，它会返回map中键上的迭代器；</p>
</li>
<li><p>要确定一个 map 中是否有给定的键，可以使用 has(..) 方法；</p>
</li>
<li><p>map的本质是允许你把某些额外的信息（值）关联到一个对象（键）上，而无需把这个信息放入对象本身；</p>
</li>
<li><p>map示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line">m.has( x ); <span class="comment">// true</span></span><br><span class="line">m.has( y ); <span class="comment">// false</span></span><br><span class="line">m.set( y, <span class="string">"bar"</span> );</span><br><span class="line">m.has( y ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> vals = [ ...m.values() ];<span class="comment">// [ 'foo', 'bar' ]</span></span><br><span class="line"><span class="keyword">var</span> vals = [ ...m.entries() ]; <span class="comment">// [ [ &#123; id: 1 &#125;, 'foo' ], [ &#123; id: 2 &#125;, 'bar' ] ]</span></span><br><span class="line">m.get( x ); <span class="comment">// 'foo'</span></span><br><span class="line">m.size;</span><br><span class="line"><span class="keyword">var</span> keys = [ ...m.keys() ]; <span class="comment">// [ &#123; id: 1 &#125;, &#123; id: 2 &#125; ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WeakMap是 map 的变体，二者的多数外部行为特性都是一样的，区别在于内部内存分配）的工作方式，WeakMap（只）接受对象作为键；</p>
</li>
<li><p>WeakMap示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line">m.set( x, <span class="string">"foo"</span> );</span><br><span class="line"></span><br><span class="line">m.has( x ); <span class="comment">// true</span></span><br><span class="line">m.has( y );<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WeakMap 没有 size 属性或 clear() 方法， 也不会暴露任何键、值或项目上的迭代器；</p>
</li>
<li><p>set 是一个值的集合，其中的值唯一（重复会被忽略）；</p>
</li>
<li><p>set示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">s.add( x ); </span><br><span class="line">s.add( y ); </span><br><span class="line">s.add( x );</span><br><span class="line"></span><br><span class="line">s.size;<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.delete( y );</span><br><span class="line">s.size;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">s.has( x );<span class="comment">// true </span></span><br><span class="line">s.has( y );<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.clear(); </span><br><span class="line">s.size;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keys = [ ...s.keys() ],</span><br><span class="line">    vals = [ ...s.values() ], </span><br><span class="line">    entries = [ ...s.entries() ];</span><br></pre></td></tr></table></figure>
</li>
<li><p>WeakMap 弱持有它的键（对其值是强持有的）一样， WeakSet 对其值也是弱持有的；</p>
</li>
<li><p>WeakSet示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, y = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">s.add( x ); </span><br><span class="line">s.add( y );</span><br><span class="line"></span><br><span class="line">x = <span class="literal">null</span>;<span class="comment">// x可GC</span></span><br><span class="line">y = <span class="literal">null</span>;<span class="comment">// x可GC</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>前端架构设计入门</title>
    <url>/2020/05/28/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Web 在诞生之初，形态其实是比较简单的，但是在发展了这么多年之后，越来越绚丽！<strong>要把网站内容作为一个值得做出战略规划和有投资价值的关键元素来对待</strong>，这种策略对于当前这种追求视觉上的享受的时代确实很重要！软件架构师的职责就是要保证项目中每一步都在总体架构的指导下进行，而不会随机决定。前端架构师掌控着前端开发方法和系统设计哲学！<strong>推荐书籍：《前端架构设计》· [美] Micah Godbolt 著 张鹏 许金泉等译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="前端架构师"><a href="#前端架构师" class="headerlink" title="前端架构师"></a>前端架构师</h2><ol>
<li>前端架构师的目标是设计出能流畅运转的系统，这个系统不仅能高效快速地启动，还可以通过语言分析、测试用例、文档记录等方法持续地提供有效的反馈，并且大幅减少由于重复操作而产生的人为错误！</li>
<li>没有任何设计在一开始就是完美的，也没有任何计划可以一步到位；</li>
<li><strong>没有人精通每一种技术！</strong></li>
<li>要善于在项目开发的同时编写良好的文档；</li>
<li><strong>不断地探索和评估新的技术、平台、方法和框架！</strong></li>
</ol>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ol>
<li>单一责任原则：规定你创建的所有东西必须有单一的、高度聚焦的；</li>
<li>单一样式来源原则：不仅每个 CSS 类名被创建为单一用途，而且每个标签的样式也只有单一的来源；</li>
<li>组件修饰符：可以定义一个组件在多个不同情况下的多种变化；</li>
<li><strong>保持代码整洁</strong></li>
</ol>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>不管是前端还是后端都需要进行良好的设计，都不是那么简单的，一蹴而就的！快速过一遍书籍可能获得内容有点少，但是架构这玩意真的是有很多共性，没有最好的架构，只有更适合当时环境的架构，是不断迭代的过程，因此架构师要考虑项目的可扩展性，这是永恒不变的话题！</p>
<h1 id="没有结束…-…"><a href="#没有结束…-…" class="headerlink" title="没有结束… …"></a>没有结束… …</h1>]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>同构JavaScript基础</title>
    <url>/2020/06/21/%E5%90%8C%E6%9E%84JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CSS 和 JavaScript 技术被引入浏览器的目的是提供一种交互模型和关注点分离。JavaScript 已经为在浏览器中运行类似于桌面程序的应用这一新时代铺好了道路！<strong>推荐书籍：《同构JavaScript应用开发》· [美] Jason·Stripmpel Maxime Najim 著 张俊达 译</strong> </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>同构 JavaScript 应用就是在浏览器客户端和 Web 应用服务器端间共享同一套JavaScript 代码的应用；</p>
</li>
<li><p>Web 的客户端 - 服务器模型从重服务器端、 轻客户端的方式转变为轻服务器端、 重客户端的方式；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bb47cf6a5696dead10c8232ff60db57b-159715" alt="传统Web应用流程"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6cc30557ce2ab2c500171f6017d5ac13-151681" alt="Ajax的传统Web应用流程"></p>
</li>
<li><p>在传统的 Web 应用中，页面导航和数据传输都遵循 Web 原本设计的方式进行；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9ab653278365fee154dbe80e22614d32-141924" alt="单页面应用流程"></p>
</li>
<li><p>同构 JavaScript 应用是传统 Web 应用和 SPA 架构的完美结合；</p>
</li>
<li><p>与环境无关的 Node 模块只能使用纯 JavaScript 的功能，并且不能使用环境特定的 API 或者 window（浏览器端）和 process（服务器端）这样的属性；</p>
</li>
<li><p>传统Web架构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2a7004db16d7e3e2f1a7339867376a75-74021" alt="传统Web架构">    </p>
</li>
<li><p>实时Web应用架构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/68492423616e21e26dc1ce52e418681f-130931" alt="实时Web应用架构"></p>
</li>
</ol>
<h2 id="构建应用"><a href="#构建应用" class="headerlink" title="构建应用"></a>构建应用</h2><ol>
<li>优秀的软件设计的关键在于：知道需要抽象什么、何时进行抽象，以及在何处进行抽象；</li>
<li>Node.js（<a href="https://nodejs.org/）将作为应用的服务器端运行环境；" target="_blank" rel="noopener">https://nodejs.org/）将作为应用的服务器端运行环境；</a>  </li>
<li>Hapi.js（<a href="https://hapijs.com/）将用于驱动应用中的" target="_blank" rel="noopener">https://hapijs.com/）将用于驱动应用中的</a> HTTP 服务器部分；</li>
<li>Gulp.js（<a href="http://gulpjs.com/）将用于编译我们的" target="_blank" rel="noopener">http://gulpjs.com/）将用于编译我们的</a> JavaScript 代码，针对浏览器环境进行打包，并管理我们的开发工作流程；</li>
<li>Babel.js（<a href="https://babeljs.io/）让我们可以利用" target="_blank" rel="noopener">https://babeljs.io/）让我们可以利用</a> ES6 的特性和语法来编写代码，然后帮我们将代码编译为兼容 ES5 的可发布版本；</li>
<li>所有的 Web 应用都需要某种应用服务器，同构 JavaScript 应用也不例外！</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>响应式Web设计</title>
    <url>/2020/05/06/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>响应式Web设计，就是网页内容会随着访问它的视口及设备的不同而呈现不同的样式。响应式Web设计可以让一个网站同时适配多种设备和多个屏幕，可以让网站的布局和功能随用户的使用环境（屏幕大小、输入方式、设备/浏览器能力）而变化，只要会用HTML和CSS，就可以学会响应式Web设计。给那些“残疾”浏览器写代码是错误的，而把时间和资源主要放在支持现代浏览器和现代平台上才是最明智的选择！<strong>能不能适配某个旧平台/版本不是问题，问题在于是否应该去适配它。</strong>建议参考这个网站：<a href="http://caniuse.com。" target="_blank" rel="noopener">http://caniuse.com。</a> <strong><em>推荐书籍：《响应式Web设计 HTML5和CSS3实战（第二版）》· [美] Ben Frain 著 奇舞团译 《响应式Web设计：HTML5和CSS3实战》· [英] Ben Frain著 奇舞团译</em></strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol>
<li>浏览器中用于呈现网页的区域叫<strong>视口（viewport）</strong>，视口通常并不等于屏幕大小，特别是可以缩放浏览器窗口的情况下；</li>
<li>响应式网页设计（ RWD， Responsive Web Design）  将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）整合起来，也称为流式设计、弹性布局、塑料布局、流体设计、自适应布局、跨设备设计以及弹性设计！</li>
<li>CSS3规范分成很多模块，媒体查询（3级）只是其中一个模块；</li>
<li>所有规范都从WD（Working Draft，工作草案）开始，然后是CR（Candidate Recommendation，候选推荐），接着是PR（Proposed Recommendation，建议推荐），几年后才能成为W3C REC（Recommendation，推荐标准）；</li>
<li><strong>CSS3媒体查询</strong>可以让我们针对特定的设备能力或条件为网页应用特定的CSS样式，相当于CSS中基本的条件逻辑；</li>
<li>使用@media规则声明这是一个媒体查询，然后指定匹配的设备类型；<ul>
<li>width：视口宽度</li>
<li>height：视口高度</li>
<li>device-width：渲染表面的宽度（可以认为是设备屏幕的宽度）</li>
<li>device-height：渲染表面的高度（可以认为是设备屏幕的高度）</li>
<li>orientation：设备方向是水平还是垂直</li>
<li>aspect-ratio：视口的宽高比。16∶9的宽屏显示器可以写成aspect-ratio:16/9</li>
<li>color：颜色组分的位深。比如min-color:16表示设备至少支持16位深</li>
<li>color-index：设备颜色查找表中的条目数，值必须是数值，且不能为负</li>
<li>monochrome ：单色帧缓冲中表示每个像素的位数， 值必须是数值（整数）， 比如monochrome: 2，且不能为负</li>
<li>resolution：屏幕或打印分辨率，比如min-resolution: 300dpi。也可以接受每厘米多少点，比如min-resolution: 118dpcm</li>
<li>scan：针对电视的逐行扫描（progressive）和隔行扫描（interlace）</li>
<li>grid：设备基于栅格还是位图</li>
</ul>
</li>
<li>用于视口的meta标签，是网页与移动浏览器的接口。网页通过这个标签告诉移动浏览器，它希望浏览器如何渲染当前页面；</li>
</ol>
<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><ol>
<li><p>可以在&lt;link&gt;标签的media属性中指定设备类型（ screen或print），为不同设备应用样式表:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"style sheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"screenstyles.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen and (orientation: portrait)"</span> <span class="attr">href</span>=<span class="string">"portrait-screen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以将多个媒体查询串在一起可以进一步限制只把样式表应用给视口大于800像素的设备：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen and (orientation: portrait) and (min-width: 800px)"</span> <span class="attr">href</span>=<span class="string">"800wide-portrait-screen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用CSS中的@import会增加HTTP请求（进而影响加载速度），因此请慎用；</p>
</li>
<li><p>媒体查询的一个常见的使用场景，就是针对高分辨率设备编写特殊样式(针对每像素单位为2点，2dppx的屏幕  )：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-resolution:</span> <span class="number">2dppx</span>) &#123;</span><br><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>性能提升：</p>
<ul>
<li>所有图片都压缩过了  </li>
<li>所有脚本都拼接和缩短了</li>
<li>所有资源都采用了gzip压缩    </li>
<li>所有静态内容都缓存到了CDN  </li>
<li>所有多余的CSS规则都被清除了  </li>
</ul>
</li>
<li><p>视口&lt;meta&gt;标签应该放在HTML的&lt;head&gt;标签中。可以在其中设置具体的宽度；</p>
</li>
<li><p>悬停媒体特性就是用来测试用户是否可以通过某种机制实现在屏幕元素上悬停的；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>工具积累</title>
    <url>/2020/05/14/%E5%B7%A5%E5%85%B7%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><ul>
<li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜书</a></li>
<li><a href="http://forfrigg.com/" target="_blank" rel="noopener">Forfrigg</a></li>
<li><a href="https://bookfere.com/search" target="_blank" rel="noopener">书伴</a></li>
<li><a href="https://www.jb51.net/books/" target="_blank" rel="noopener">脚本之家</a></li>
</ul>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul>
<li><a href="https://tool.lu/" target="_blank" rel="noopener">在线工具</a></li>
</ul>
<iframe src="https://tool.lu/coderunner/embed/9fr.html" width="650" height="550" frameborder="0" mozallowfullscreen webkitallowfullscreen allowfullscreen></iframe>



<h1 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><ul>
<li><a href="https://github.com/agalwood/Motrix" target="_blank" rel="noopener">Motrix</a></li>
</ul>
<h2 id="Mac软件"><a href="#Mac软件" class="headerlink" title="Mac软件"></a>Mac软件</h2><ul>
<li><a href="https://xclient.info/" target="_blank" rel="noopener">精品应用</a></li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
  </entry>
  <entry>
    <title>开发基础知识</title>
    <url>/2020/04/20/%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在进行开发的时候需要掌握一定的基础知识还有行业内的术语以及对应得缩写词，不然你都没法和专业人士进行沟通，甚至被人认为你很Low！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol>
<li><strong>CS结构：</strong>客户端（Client）和服务端（Server）进行数据通信的结构，主要考虑哪些业务放到服务端，哪些数据放到业务端。</li>
<li><strong>BS结构：</strong> CS结构主要完成的是通信功能，而B是浏览器（Browser），S是服务端（Server），浏览器可以访问所有同种类型的网站，主要用于数据的展示，具体的业务处理是在不同的服务端进行的，服务器程序统一处理数据连接、封装和解析等工作。</li>
<li><strong>CS结构</strong>和<strong>BS结构</strong>的优劣：</li>
</ol>
<ul>
<li>BS结构在开发和使用中很简单；</li>
<li>CS结构的灵活性和处理效率都高于BS结构。</li>
</ul>
<ol start="4">
<li><strong>TCP/IP四层模型:</strong></li>
</ol>
<ul>
<li>网络接入层：将需要接入网络的节点接入网络中；</li>
<li>网际互联层： 找到要传输数据的目标节点；</li>
<li>传输层： 实际传输数据；</li>
<li>应用层： 使用接收到的数据。</li>
</ul>
<ol start="5">
<li><strong>海量数据解决方案：</strong></li>
</ol>
<ul>
<li>最直接的方案是使用缓存，就是将数据从数据库中获取然后暂存，下次使用的时候无需从数据库中获取，大大降低数据库的压力；常用的缓存框架有：Ehcache、Mencache和Redis等；</li>
<li>缓存不是主要用于数据变化<strong><em>不是很频繁</em></strong>的情况；</li>
<li>页面静态化：将程序最后生成的页面保存下来，就不再需要每次调用都重新生成新页面了，对于数据量大和高并发都有好处；通常使用模板引擎技术生成，比如Freemarker等模板引擎技术。</li>
</ul>
<ol start="6">
<li><strong><em>数据库优化：</em></strong>可以在不增加硬件的情况下提高处理效率，优化方式有：表结构优化、SQL语句优化、分区和分表、索引优化、使用存储过程代替直接操作等等，此外合理使用冗余也能达到优化的效果</li>
</ol>
<ul>
<li>表结构优化：合理设计表结构能够带来质的变化；</li>
<li>SQL语句优化： 分析日志，然后进行优化；</li>
<li>分区：将一张表中的数据按照一定规则分到不同的区来保存，在查询数据的时候数据在同一范围内就可以做到只对一个区的数据进行操作；</li>
<li>分表：一个表中的数据可以分为几种固定不变的类型，而且同时对多种类型共同操作懂得情况不多，可以通过分表处理；将一个表中不同类型的字段分到不同的表中保存；</li>
<li>索引优化： 优秀的索引能够极大提高查表的效率，但是劣质的就会降低，因此需要权衡；</li>
<li>使用存储过程替代直接操作： 在操作过程复杂而且调用频率高的业务中，可以通过存储过程来代替直接的数据库操作。</li>
</ul>
<ol start="7">
<li><strong><em>其他优化操作：</em></strong></li>
</ol>
<ul>
<li>分离活跃数据；</li>
<li>批量读取和延迟修改；</li>
<li>读写分离；</li>
<li>分布式数据库等。</li>
</ul>
<ol start="8">
<li><strong>高并发解决方案：</strong></li>
</ol>
<ul>
<li>应用和静态资源分离，并发量达到一定程度的时候将静态资源保存到专门的服务器中；</li>
<li>页面缓存技术；</li>
<li>集群与分布式：集群是每台服务器都有相同的功能，处理请求的时候调用哪台服务器都可以，主要起分流作用；分布式是将不同的业务放到不同的服务器中，处理一个请求可能需要用到多个服务器；集群需要处理负载均衡问题；</li>
<li>反向代理：客户端直接访问的并不是真正提供服务的服务器，从别的服务器获取资源然后将结果返回给用户。<ul>
<li>可以作为前端服务器跟实际处理请求的服务器集成；</li>
<li>可以用作负载均衡；</li>
<li>转发请求。</li>
</ul>
</li>
<li>CDN：特殊的集群页面缓存服务器，CDN服务器是分布在全国各地，当接收到用户的请求后会将请求分布到最合适的CDN服务器节点获取数据；由专门的CDN域名解析服务器在解析域名的时候分配好的。</li>
</ul>
<ol start="8">
<li><p>网站架构的整个演变过程主要是围绕大数据和高并发这两个问题展开的，解决的方案主要分为使用缓存和使用多种资源两种类型，其中使用多种资源是指多存储（包括多内存在内）、多CPU和多网络等；<strong>没有最好的架构，只有最合适的架构。架构是根据需求进行设计！</strong> 只要是为了解决问题，不管是架构还是协议都需要我们的认真对待，付出自己的时间和努力。</p>
</li>
<li><p>HTTP响应报文中的状态码：</p>
<ol>
<li>1XX：信息性状态码；</li>
<li>2XX：成功状态码，如200表示成功；</li>
<li>3XX：重定向状态码，如301表示重定向；</li>
<li>4XX：客户端错误状态码，如404表示没找到请求的资源；</li>
<li>5XX：服务端错误状态码，如500表示内部错误。</li>
</ol>
</li>
<li><p><strong><em>Java中的Socket：</em></strong></p>
<ol>
<li><p>Socket分为ServerSocket和Socket两类，ServerSocket用于服务器端,可以通过accept方法监听请求,Socket用于具体完成数据传输,客户端直接使用Socket发起请求并传输数据；</p>
<ol>
<li>ServerSocket的使用分为三步：<ol>
<li>创建ServerSocket；</li>
<li>调用创建出来的ServerSocket的accpet方法进行监听；</li>
<li>使用accept方法返回的Socket与客户端进行通信。</li>
</ol>
</li>
<li>创建ServerSocket：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">       Socket socket=serverSocket.accept();</span><br><span class="line">       BufferedReader is =<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">       String line=is.readLine();</span><br><span class="line">       System.out.println(<span class="string">"received from client: "</span>+line);</span><br><span class="line">       is.close();</span><br><span class="line">       socket.close();</span><br><span class="line">       serverSocket.close();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Socket连接Server：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8080</span>);</span><br><span class="line">PrintWriter pw=<span class="keyword">new</span> PrintWriter(socket.getOutputStream());</span><br><span class="line">pw.println(<span class="string">"Hello world"</span>);</span><br><span class="line">pw.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>NioSocket是新增的Socket，首先要创建ServerSocketChannel，然后注册Selector，接下来就可以使用Selector接收请求并处理。</p>
<ol>
<li>创建ServerSocketChannel并设置相应的参数；</li>
<li>创建Selector并注册到ServerSocketChannel上；</li>
<li>调用Selector的select方法等待请求；</li>
<li>Selector接收到请求后使用selectedKeys返回SelectionKey集合；</li>
<li>使用SelectionKey获取到Channel、Selector和操作类型并进行具体操作。</li>
</ol>
</li>
</ol>
</li>
<li><p>Servlet是Server+Applet的缩写，表示一个服务器应用，其实就是一套规范。</p>
</li>
</ol>
<ul>
<li>GenericServlet：实现了ServletConfig接口；提供了无参的init方法；提供了log方法；</li>
<li>HttpServlet：用HTTP协议实现的Servlet基类。</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分相对来说属于非常基础的内容，当然基础远不止这么多，后续还有文章进行基础知识内容的扩充！</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>在编程的路上越走越...</title>
    <url>/2020/05/13/%E5%9C%A8%E7%BC%96%E7%A8%8B%E7%9A%84%E8%B7%AF%E4%B8%8A%E8%B6%8A%E8%B5%B0%E8%B6%8A/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>编程是不是特有意思呢？我不知道，但是注释是越来越有意思，不信你看！👀</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="佛祖保佑"><a href="#佛祖保佑" class="headerlink" title="佛祖保佑"></a>佛祖保佑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            _ooOoo_</span></span><br><span class="line"><span class="comment">//                           o8888888o</span></span><br><span class="line"><span class="comment">//                           88" . "88</span></span><br><span class="line"><span class="comment">//                           (| -_- |)</span></span><br><span class="line"><span class="comment">//                           O\  =  /O</span></span><br><span class="line"><span class="comment">//                        ____/`---'\____</span></span><br><span class="line"><span class="comment">//                      .'  \\|     |//  `.</span></span><br><span class="line"><span class="comment">//                     /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment">//                    /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">//                    |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment">//                    | \_|  ''\---/''  |   |</span></span><br><span class="line"><span class="comment">//                    \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">//                  ___`. .'  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">//               ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></span><br><span class="line"><span class="comment">//              | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">//              \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">//         ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment">//                            `=---='</span></span><br><span class="line"><span class="comment">//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment">//                      佛祖保佑       永无BUG</span></span><br></pre></td></tr></table></figure>

<h3 id="佛祖都救不了"><a href="#佛祖都救不了" class="headerlink" title="佛祖都救不了"></a>佛祖都救不了</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//_ooOoo_</span></span><br><span class="line"><span class="comment">//o8888888o</span></span><br><span class="line"><span class="comment">//88" . "88</span></span><br><span class="line"><span class="comment">//(| -_- |)</span></span><br><span class="line"><span class="comment">// O\ = /O</span></span><br><span class="line"><span class="comment">//___/`---'\____</span></span><br><span class="line"><span class="comment">//.   ' \\| |// `.</span></span><br><span class="line"><span class="comment">/// \\||| : |||// \</span></span><br><span class="line"><span class="comment">/// _||||| -:- |||||- \</span></span><br><span class="line"><span class="comment">//| | \\\ - /// | |</span></span><br><span class="line"><span class="comment">//| \_| ''\---/'' | |</span></span><br><span class="line"><span class="comment">//\ .-\__ `-` ___/-. /</span></span><br><span class="line"><span class="comment">//___`. .' /--.--\ `. . __</span></span><br><span class="line"><span class="comment">//."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span></span><br><span class="line"><span class="comment">//| | : `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">//\ \ `-. \_ __\ /__ _/ .-` / /</span></span><br><span class="line"><span class="comment">//======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment">//`=---='</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         .............................................</span></span><br><span class="line"><span class="comment">//          佛曰：bug泛滥，我已瘫痪！</span></span><br></pre></td></tr></table></figure>

<h3 id="无可奉告"><a href="#无可奉告" class="headerlink" title="无可奉告"></a>无可奉告</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***             无可奉告 一颗赛艇</span></span><br><span class="line"><span class="comment"> *  uJjYJYYLLv7r7vJJ5kqSFFFUUjJ7rrr7LLYLJLJ7</span></span><br><span class="line"><span class="comment"> *  JuJujuYLrvuEM@@<span class="doctag">@B</span>@@<span class="doctag">@B</span><span class="doctag">@B</span><span class="doctag">@B</span>@@<span class="doctag">@MG</span>5Y7vLjYjJL</span></span><br><span class="line"><span class="comment"> *  JYjYJvr7XM@BB8GOOE8ZEEO8GqM8OBBBMu77LLJ7</span></span><br><span class="line"><span class="comment"> *  LJLY7ru@@<span class="doctag">@BOZ</span>8O8NXFFuSkSu25X0OFZ8MZJ;vLv</span></span><br><span class="line"><span class="comment"> *  YvL7i5@BM8OGGqk22uvriiriii;r7LuSZXEMXrvr</span></span><br><span class="line"><span class="comment"> *  vv7iU@BMNkF1uY7v7rr;iiii:i:i:ii7JEPNBPir</span></span><br><span class="line"><span class="comment"> *  L7iL@BM8Xjuujvv77rr;ri;i;:iiiii:iLXFOBJ:</span></span><br><span class="line"><span class="comment"> *  7ri@B@MOFuUS2Y7L7777rii;:::::i:iirjPG@O:</span></span><br><span class="line"><span class="comment"> *  7:1B@BBOPjXXSJvrL7rr7iiii:i::::i;iv5MBB,</span></span><br><span class="line"><span class="comment"> *  r:0@BBM8SFPX2Y77rri::iirri:::::iii75O@G.</span></span><br><span class="line"><span class="comment"> *  7:SB@BBGqXPk0122UJL::i::r:::i:i;i:v2@Bk.</span></span><br><span class="line"><span class="comment"> *  ri:MB@BBEqEMGq2JLLL1u7.iX51u77LF27iSB@r,</span></span><br><span class="line"><span class="comment"> *  ri,v@B@MB8@qqNEqN1u:5B8BOFE0S7ii7qMB@F::</span></span><br><span class="line"><span class="comment"> *  ii,J80Eq1MZkqPPX5YkPE@B@iXPE52j7:vBjE7::</span></span><br><span class="line"><span class="comment"> *  ii:7MSqkS0PvLv7rrii0@L.Z1iLr::ir:rO,vi::</span></span><br><span class="line"><span class="comment"> *  ii::EZXPSkquLvii:iF@N:.,BUi7ri,::UY;r:::</span></span><br><span class="line"><span class="comment"> *  i::.2ONXqkPXS5FUUEOPP;..iSPXkjLYLLrr:::,</span></span><br><span class="line"><span class="comment"> *  :::,iMXNP0NPLriiLGZ@BB1P87;JuL7r:7ri:::,</span></span><br><span class="line"><span class="comment"> *  :::,.UGqNX0EZF2uUjUuULr:::,:7uuvv77::::.</span></span><br><span class="line"><span class="comment"> *  ::::..5OXqXNJ50NSY;i:.,,,:i77Yvr;v;,,::.</span></span><br><span class="line"><span class="comment"> *  :::,:.jOEPqPJiqBMMMO8NqP0SYLJriirv:.:,:.</span></span><br><span class="line"><span class="comment"> *  ,:,,,.,Zq0P0X7vPFqF1ujLv7r:irrr7j7.,,::.</span></span><br><span class="line"><span class="comment"> *  ,,,....0qk0080v75ujLLv7ri:i:rvj2J...,,,.</span></span><br><span class="line"><span class="comment"> *  ......8@UXqZEMNvJjr;ii::,:::7uuv...,.,,.</span></span><br><span class="line"><span class="comment"> *  .....B@BOvX88GMGk52vririiirJS1i.......,.</span></span><br><span class="line"><span class="comment"> *  .JEMB@B@BMvL0MOMMMO8PE8GPqSk2L:.........</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@B</span>@@<span class="doctag">@B</span><span class="doctag">@M</span><span class="doctag">@B</span><span class="doctag">@L</span>:7PGBOO8MOMOEP0Xri@B@Mk7,...</span></span><br><span class="line"><span class="comment"> *  B@B@BBMBB@B@0::rJP8MO0uvvu7..,B@B@B@B@Z7</span></span><br><span class="line"><span class="comment"> *  MMBM@BBB@B@B@Br:i,..:Lur:....7@OMMBM@B@@</span></span><br><span class="line"><span class="comment"> *  8OOMMMOMMMMBB@B:....,PZENNi..JBOZ8GMOOOO</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="看书"><a href="#看书" class="headerlink" title="看书"></a>看书</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span></span><br><span class="line"><span class="comment"> *             __.'              ~.   .~              `.__</span></span><br><span class="line"><span class="comment"> *           .'//                  \./                  \\`.</span></span><br><span class="line"><span class="comment"> *         .'//                     |                     \\`.</span></span><br><span class="line"><span class="comment"> *       .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.</span></span><br><span class="line"><span class="comment"> *     .'//.-"                 `-.  |  .-'                 "-.\\`.</span></span><br><span class="line"><span class="comment"> *   .'//______.============-..   \ | /   ..-============.______\\`.</span></span><br><span class="line"><span class="comment"> * .'______________________________\|/______________________________`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="BadCode"><a href="#BadCode" class="headerlink" title="BadCode"></a>BadCode</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *              ,----------------,              ,---------,</span></span><br><span class="line"><span class="comment"> *         ,-----------------------,          ,"        ,"|</span></span><br><span class="line"><span class="comment"> *       ,"                      ,"|        ,"        ,"  |</span></span><br><span class="line"><span class="comment"> *      +-----------------------+  |      ,"        ,"    |</span></span><br><span class="line"><span class="comment"> *      |  .-----------------.  |  |     +---------+      |</span></span><br><span class="line"><span class="comment"> *      |  |                 |  |  |     | -==----'|      |</span></span><br><span class="line"><span class="comment"> *      |  |  I LOVE DOS!    |  |  |     |         |      |</span></span><br><span class="line"><span class="comment"> *      |  |  Bad command or |  |  |/----|`---=    |      |</span></span><br><span class="line"><span class="comment"> *      |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</span></span><br><span class="line"><span class="comment"> *      |  |                 |  |  |  // |(((( [33]|    ,"</span></span><br><span class="line"><span class="comment"> *      |  `-----------------'  |," .;'| |((((     |  ,"</span></span><br><span class="line"><span class="comment"> *      +-----------------------+  ;;  | |         |,"</span></span><br><span class="line"><span class="comment"> *         /_)______________(_/  //'   | +---------+</span></span><br><span class="line"><span class="comment"> *    ___________________________/___  `,</span></span><br><span class="line"><span class="comment"> *   /  oooooooooooooooo  .o.  oooo /,   \,"-----------</span></span><br><span class="line"><span class="comment"> *  / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,"</span></span><br><span class="line"><span class="comment"> * /_==__==========__==_ooo__ooo=_/'   /___________,"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="胜利"><a href="#胜利" class="headerlink" title="胜利"></a>胜利</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                        d*##$.</span></span><br><span class="line"><span class="comment"> *  zP"""""$e.           $"    $o</span></span><br><span class="line"><span class="comment"> * 4$       '$          $"      $</span></span><br><span class="line"><span class="comment"> * '$        '$        J$       $F</span></span><br><span class="line"><span class="comment"> *  'b        $k       $&gt;       $</span></span><br><span class="line"><span class="comment"> *   $k        $r     J$       d$</span></span><br><span class="line"><span class="comment"> *   '$         $     $"       $~</span></span><br><span class="line"><span class="comment"> *    '$        "$   '$E       $</span></span><br><span class="line"><span class="comment"> *     $         $L   $"      $F ...</span></span><br><span class="line"><span class="comment"> *      $.       4B   $      $$$*"""*b</span></span><br><span class="line"><span class="comment"> *      '$        $.  $$     $$      $F</span></span><br><span class="line"><span class="comment"> *       "$       R$  $F     $"      $</span></span><br><span class="line"><span class="comment"> *        $k      ?$ u*     dF      .$</span></span><br><span class="line"><span class="comment"> *        ^$.      $$"     z$      u$$$$e</span></span><br><span class="line"><span class="comment"> *         #$b             $E.dW@e$"    ?$</span></span><br><span class="line"><span class="comment"> *          #$           .o$$# d$$$$c    ?F</span></span><br><span class="line"><span class="comment"> *           $      .d$$#" . zo$&gt;   #$r .uF</span></span><br><span class="line"><span class="comment"> *           $L .u$*"      $&amp;$$$k   .$$d$$F</span></span><br><span class="line"><span class="comment"> *            $$"            ""^"$$$P"$P9$</span></span><br><span class="line"><span class="comment"> *           JP              .o$$$$u:$P $$</span></span><br><span class="line"><span class="comment"> *           $          ..ue$"      ""  $"</span></span><br><span class="line"><span class="comment"> *          d$          $F              $</span></span><br><span class="line"><span class="comment"> *          $$     ....udE             4B</span></span><br><span class="line"><span class="comment"> *           #$    """"` $r            @$</span></span><br><span class="line"><span class="comment"> *            ^$L        '$            $F</span></span><br><span class="line"><span class="comment"> *              RN        4N           $</span></span><br><span class="line"><span class="comment"> *               *$b                  d$</span></span><br><span class="line"><span class="comment"> *                $$k                 $F</span></span><br><span class="line"><span class="comment"> *                 $$b                $F</span></span><br><span class="line"><span class="comment"> *                  $""               $F</span></span><br><span class="line"><span class="comment"> *                  '$                $</span></span><br><span class="line"><span class="comment"> *                   $L               $</span></span><br><span class="line"><span class="comment"> *                   '$               $</span></span><br><span class="line"><span class="comment"> *                    $               $</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="服了"><a href="#服了" class="headerlink" title="服了"></a>服了</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                   /88888888888888888888888888\</span></span><br><span class="line"><span class="comment"> *                   |88888888888888888888888888/</span></span><br><span class="line"><span class="comment"> *                    |~~____~~~~~~~~~"""""""""|</span></span><br><span class="line"><span class="comment"> *                   / \_________/"""""""""""""\</span></span><br><span class="line"><span class="comment"> *                  /  |              \         \</span></span><br><span class="line"><span class="comment"> *                 /   |  88    88     \         \</span></span><br><span class="line"><span class="comment"> *                /    |  88    88      \         \</span></span><br><span class="line"><span class="comment"> *               /    /                  \        |</span></span><br><span class="line"><span class="comment"> *              /     |   ________        \       |</span></span><br><span class="line"><span class="comment"> *              \     |   \______/        /       |</span></span><br><span class="line"><span class="comment"> *   /"\         \     \____________     /        |</span></span><br><span class="line"><span class="comment"> *   | |__________\_        |  |        /        /</span></span><br><span class="line"><span class="comment"> * /""""\           \_------'  '-------/       --</span></span><br><span class="line"><span class="comment"> * \____/,___________\                 -------/</span></span><br><span class="line"><span class="comment"> * ------*            |                    \</span></span><br><span class="line"><span class="comment"> *   ||               |                     \</span></span><br><span class="line"><span class="comment"> *   ||               |                 ^    \</span></span><br><span class="line"><span class="comment"> *   ||               |                | \    \</span></span><br><span class="line"><span class="comment"> *   ||               |                |  \    \</span></span><br><span class="line"><span class="comment"> *   ||               |                |   \    \</span></span><br><span class="line"><span class="comment"> *   \|              /                /"""\/    /</span></span><br><span class="line"><span class="comment"> *      -------------                |    |    /</span></span><br><span class="line"><span class="comment"> *      |\--_                        \____/___/</span></span><br><span class="line"><span class="comment"> *      |   |\-_                       |</span></span><br><span class="line"><span class="comment"> *      |   |   \_                     |</span></span><br><span class="line"><span class="comment"> *      |   |     \                    |</span></span><br><span class="line"><span class="comment"> *      |   |      \_                  |</span></span><br><span class="line"><span class="comment"> *      |   |        ----___           |</span></span><br><span class="line"><span class="comment"> *      |   |               \----------|</span></span><br><span class="line"><span class="comment"> *      /   |                     |     ----------""\</span></span><br><span class="line"><span class="comment"> * /"\--"--_|                     |               |  \</span></span><br><span class="line"><span class="comment"> * |_______/                      \______________/    )</span></span><br><span class="line"><span class="comment"> *                                               \___/</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="看什么源码"><a href="#看什么源码" class="headerlink" title="看什么源码"></a>看什么源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                                         ,s555SB@@&amp;</span></span><br><span class="line"><span class="comment"> *                                      :9H####@@@@<span class="doctag">@Xi</span></span></span><br><span class="line"><span class="comment"> *                                     1@@@@@@@@@@@@@@8</span></span><br><span class="line"><span class="comment"> *                                   ,8@@@@@@@@<span class="doctag">@B</span>@@@@@@8</span></span><br><span class="line"><span class="comment"> *                                  :B@@@<span class="doctag">@X</span>3hi8Bs;B@@@@<span class="doctag">@Ah</span>,</span></span><br><span class="line"><span class="comment"> *             ,8i                  r@@<span class="doctag">@B</span>:     1S ,M@@@@@@#8;</span></span><br><span class="line"><span class="comment"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@<span class="doctag">@S</span></span></span><br><span class="line"><span class="comment"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5</span></span><br><span class="line"><span class="comment"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@<span class="doctag">@A</span></span></span><br><span class="line"><span class="comment"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1</span></span><br><span class="line"><span class="comment"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@<span class="doctag">@B</span>1</span></span><br><span class="line"><span class="comment"> *               .h8h.,A@@<span class="doctag">@MXSs</span>,           #<span class="doctag">@H</span>1:    3ssSSX@1</span></span><br><span class="line"><span class="comment"> *               s ,@@@@@@@@@@@<span class="doctag">@Xhi</span>,       r#@<span class="doctag">@X</span>1s9M8    .GA981</span></span><br><span class="line"><span class="comment"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@<span class="doctag">@BS</span>;i;</span></span><br><span class="line"><span class="comment"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@<span class="doctag">@MS</span></span></span><br><span class="line"><span class="comment"> *                s@<span class="doctag">@MM</span>@@<span class="doctag">@hsX</span>#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,</span></span><br><span class="line"><span class="comment"> *              :GB@#3G@<span class="doctag">@Brs</span> ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@B</span>,</span></span><br><span class="line"><span class="comment"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8</span></span><br><span class="line"><span class="comment"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:</span></span><br><span class="line"><span class="comment"> *      s&amp;HA#@@@@@@@@@@@@@<span class="doctag">@M</span>89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@r</span></span></span><br><span class="line"><span class="comment"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@i</span></span></span><br><span class="line"><span class="comment"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;</span></span><br><span class="line"><span class="comment"> *  9@@<span class="doctag">@X</span>:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:</span></span><br><span class="line"><span class="comment"> *   SH#<span class="doctag">@B</span>9.rM@@@@@@@@@@@@<span class="doctag">@B</span>       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5</span></span><br><span class="line"><span class="comment"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@B</span></span></span><br><span class="line"><span class="comment"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@S</span></span></span><br><span class="line"><span class="comment"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:</span></span><br><span class="line"><span class="comment"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@A</span>.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    又看源码，看你妹妹呀！</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="喷火龙"><a href="#喷火龙" class="headerlink" title="喷火龙"></a>喷火龙</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *                                                    __----~~~~~~~~~~~------___</span></span><br><span class="line"><span class="comment"> *                                   .  .   ~~//====......          __--~ ~~</span></span><br><span class="line"><span class="comment"> *                   -.            \_|//     |||\\  ~~~~~~::::... /~</span></span><br><span class="line"><span class="comment"> *                ___-==_       _-~o~  \/    |||  \\            _/~~-</span></span><br><span class="line"><span class="comment"> *        __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~</span></span><br><span class="line"><span class="comment"> *    _-~~     .=~    |  \\-_    '-~7  /-   /  ||    \      /</span></span><br><span class="line"><span class="comment"> *  .~       .~       |   \\ -_    /  /-   /   ||      \   /</span></span><br><span class="line"><span class="comment"> * /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /</span></span><br><span class="line"><span class="comment"> * |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\</span></span><br><span class="line"><span class="comment"> *          '         ~-|      /|    |-~\~~       __--~~</span></span><br><span class="line"><span class="comment"> *                      |-~~-_/ |    |   ~\_   _-~            /\</span></span><br><span class="line"><span class="comment"> *                           /  \     \__   \/~                \__</span></span><br><span class="line"><span class="comment"> *                       _--~ _/ | .-~~____--~-/                  ~~==.</span></span><br><span class="line"><span class="comment"> *                      ((-&gt;/~   '.|||' -_|    ~~-/ ,              . _||</span></span><br><span class="line"><span class="comment"> *                                 -_     ~\      ~~---l__i__i__i--~~_/</span></span><br><span class="line"><span class="comment"> *                                 _-~-__   ~)  \--______________--~~</span></span><br><span class="line"><span class="comment"> *                               //.-~~~-~_--~- |-------~~~~~~~~</span></span><br><span class="line"><span class="comment"> *                                      //.-~~~--\</span></span><br><span class="line"><span class="comment"> *                               神兽保佑</span></span><br><span class="line"><span class="comment"> *                              代码无BUG!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="曹尼玛"><a href="#曹尼玛" class="headerlink" title="曹尼玛"></a>曹尼玛</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *      ┌─┐       ┌─┐ + +</span></span><br><span class="line"><span class="comment"> *   ┌──┘ ┴───────┘ ┴──┐++</span></span><br><span class="line"><span class="comment"> *   │                 │</span></span><br><span class="line"><span class="comment"> *   │       ───       │++ + + +</span></span><br><span class="line"><span class="comment"> *   ███████───███████ │+</span></span><br><span class="line"><span class="comment"> *   │                 │+</span></span><br><span class="line"><span class="comment"> *   │       ─┴─       │</span></span><br><span class="line"><span class="comment"> *   │                 │</span></span><br><span class="line"><span class="comment"> *   └───┐         ┌───┘</span></span><br><span class="line"><span class="comment"> *       │         │</span></span><br><span class="line"><span class="comment"> *       │         │   + +</span></span><br><span class="line"><span class="comment"> *       │         │</span></span><br><span class="line"><span class="comment"> *       │         └──────────────┐</span></span><br><span class="line"><span class="comment"> *       │                        │</span></span><br><span class="line"><span class="comment"> *       │                        ├─┐</span></span><br><span class="line"><span class="comment"> *       │                        ┌─┘</span></span><br><span class="line"><span class="comment"> *       │                        │</span></span><br><span class="line"><span class="comment"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + +</span></span><br><span class="line"><span class="comment"> *         │ ─┤ ─┤       │ ─┤ ─┤</span></span><br><span class="line"><span class="comment"> *         └──┴──┘       └──┴──┘  + + + +</span></span><br><span class="line"><span class="comment"> *                神兽保佑</span></span><br><span class="line"><span class="comment"> *               代码无BUG!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="曹尼玛2"><a href="#曹尼玛2" class="headerlink" title="曹尼玛2#"></a>曹尼玛2#</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *      ┌─┐       ┌─┐</span></span><br><span class="line"><span class="comment"> *   ┌──┘ ┴───────┘ ┴──┐</span></span><br><span class="line"><span class="comment"> *   │                 │</span></span><br><span class="line"><span class="comment"> *   │       ───       │</span></span><br><span class="line"><span class="comment"> *   │   &gt;        &lt;    │</span></span><br><span class="line"><span class="comment"> *   │                 │</span></span><br><span class="line"><span class="comment"> *   │   ...  ⌒  ...   │</span></span><br><span class="line"><span class="comment"> *   │                 │</span></span><br><span class="line"><span class="comment"> *   └───┐         ┌───┘</span></span><br><span class="line"><span class="comment"> *       │         │</span></span><br><span class="line"><span class="comment"> *       │         │</span></span><br><span class="line"><span class="comment"> *       │         │</span></span><br><span class="line"><span class="comment"> *       │         └──────────────┐</span></span><br><span class="line"><span class="comment"> *       │                        │</span></span><br><span class="line"><span class="comment"> *       │                        ├─┐</span></span><br><span class="line"><span class="comment"> *       │                        ┌─┘</span></span><br><span class="line"><span class="comment"> *       │                        │</span></span><br><span class="line"><span class="comment"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span></span><br><span class="line"><span class="comment"> *         │ ─┤ ─┤       │ ─┤ ─┤</span></span><br><span class="line"><span class="comment"> *         └──┴──┘       └──┴──┘</span></span><br><span class="line"><span class="comment"> *                神兽保佑</span></span><br><span class="line"><span class="comment"> *               代码无BUG!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="神猪"><a href="#神猪" class="headerlink" title="神猪"></a>神猪</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ## Safety pig has arrived!</span></span><br><span class="line"><span class="comment">//  ##                               _</span></span><br><span class="line"><span class="comment">//  ##  _._ _..._ .-',     _.._(`))</span></span><br><span class="line"><span class="comment">//  ## '-. `     '  /-._.-'    ',/</span></span><br><span class="line"><span class="comment">//  ##    )         \            '.</span></span><br><span class="line"><span class="comment">//  ##   / _    _    |             \</span></span><br><span class="line"><span class="comment">//  ##  |  a    a    /              |</span></span><br><span class="line"><span class="comment">//  ##  \   .-.                     ;</span></span><br><span class="line"><span class="comment">//  ##   '-('' ).-'       ,'       ;</span></span><br><span class="line"><span class="comment">//  ##      '-;           |      .'</span></span><br><span class="line"><span class="comment">//  ##         \           \    /</span></span><br><span class="line"><span class="comment">//  ##         | 7  .__  _.-\   \</span></span><br><span class="line"><span class="comment">//  ##         | |  |  ``/  /`  /</span></span><br><span class="line"><span class="comment">//  ##        /,_|  |   /,_/   /</span></span><br><span class="line"><span class="comment">//  ##           /,_/      '`-'</span></span><br><span class="line"><span class="comment">//  ##</span></span><br></pre></td></tr></table></figure>

<h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 标准键盘布局</span></span><br><span class="line"><span class="comment">┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span></span><br><span class="line"><span class="comment">│Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span></span><br><span class="line"><span class="comment">└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span></span><br><span class="line"><span class="comment">┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span></span><br><span class="line"><span class="comment">│~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span></span><br><span class="line"><span class="comment">├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment">│ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span></span><br><span class="line"><span class="comment">├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span></span><br><span class="line"><span class="comment">│ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │</span></span><br><span class="line"><span class="comment">├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment">│ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span></span><br><span class="line"><span class="comment">├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span></span><br><span class="line"><span class="comment">│ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span></span><br><span class="line"><span class="comment">└─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="美女"><a href="#美女" class="headerlink" title="美女"></a>美女</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * https://wanderros.github.io</span></span><br><span class="line"><span class="comment"> *           _.._        ,------------.</span></span><br><span class="line"><span class="comment"> *        ,'      `.    ( We want you! )</span></span><br><span class="line"><span class="comment"> *       /  __) __` \    `-,----------'</span></span><br><span class="line"><span class="comment"> *      (  (`-`(-')  ) _.-'</span></span><br><span class="line"><span class="comment"> *      /)  \  = /  (</span></span><br><span class="line"><span class="comment"> *     /'    |--' .  \</span></span><br><span class="line"><span class="comment"> *    (  ,---|  `-.)__`</span></span><br><span class="line"><span class="comment"> *     )(  `-.,--'   _`-.</span></span><br><span class="line"><span class="comment"> *    '/,'          (  Uu",</span></span><br><span class="line"><span class="comment"> *     (_       ,    `/,-' )</span></span><br><span class="line"><span class="comment"> *     `.__,  : `-'/  /`--'</span></span><br><span class="line"><span class="comment"> *       |     `--'  |</span></span><br><span class="line"><span class="comment"> *       `   `-._   /</span></span><br><span class="line"><span class="comment"> *        \        (</span></span><br><span class="line"><span class="comment"> *        /\ .      \.  bug </span></span><br><span class="line"><span class="comment"> *       / |` \     ,-\</span></span><br><span class="line"><span class="comment"> *      /  \| .)   /   \</span></span><br><span class="line"><span class="comment"> *     ( ,'|\    ,'     :</span></span><br><span class="line"><span class="comment"> *     | \,`.`--"/      &#125;</span></span><br><span class="line"><span class="comment"> *     `,'    \  |,'    /</span></span><br><span class="line"><span class="comment"> *    / "-._   `-/      |</span></span><br><span class="line"><span class="comment"> *    "-.   "-.,'|     ;</span></span><br><span class="line"><span class="comment"> *   /        _/["---'""]</span></span><br><span class="line"><span class="comment"> *  :        /  |"-     '</span></span><br><span class="line"><span class="comment"> *  '           |      /</span></span><br><span class="line"><span class="comment"> *              `      |</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="工程师"><a href="#工程师" class="headerlink" title="工程师"></a>工程师</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *             ,%%%%%%%%,</span></span><br><span class="line"><span class="comment"> *           ,%%/\%%%%/\%%</span></span><br><span class="line"><span class="comment"> *          ,%%%\c "" J/%%%</span></span><br><span class="line"><span class="comment"> * %.       %%%%/ o  o \%%%</span></span><br><span class="line"><span class="comment"> * `%%.     %%%%    _  |%%%</span></span><br><span class="line"><span class="comment"> *  `%%     `%%%%(__Y__)%%'</span></span><br><span class="line"><span class="comment"> *  //       ;%%%%`\-/%%%'</span></span><br><span class="line"><span class="comment"> * ((       /  `%%%%%%%'</span></span><br><span class="line"><span class="comment"> *  \\    .'          |</span></span><br><span class="line"><span class="comment"> *   \\  /       \  | |</span></span><br><span class="line"><span class="comment"> *    \\/         ) | |</span></span><br><span class="line"><span class="comment"> *     \         /_ | |__</span></span><br><span class="line"><span class="comment"> *     (___________))))))) 攻城湿</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        _       _</span></span><br><span class="line"><span class="comment"> * __   _(_)_   _(_) __ _ _ __</span></span><br><span class="line"><span class="comment"> * \ \ / / \ \ / / |/ _` |'_ \</span></span><br><span class="line"><span class="comment"> *  \ V /| |\ V /| | (_| | | | |</span></span><br><span class="line"><span class="comment"> *   \_/ |_| \_/ |_|\__,_|_| |_|</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="二狗子"><a href="#二狗子" class="headerlink" title="二狗子"></a>二狗子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       _.'__    `.</span></span><br><span class="line"><span class="comment">        .--($)($$)---/#\</span></span><br><span class="line"><span class="comment">      .' @          /###\</span></span><br><span class="line"><span class="comment">      :         ,   #####</span></span><br><span class="line"><span class="comment">       `-..__.-' _.-\###/</span></span><br><span class="line"><span class="comment">             `;_:    `"'</span></span><br><span class="line"><span class="comment">           .'"""""`.</span></span><br><span class="line"><span class="comment">          /,  ya ,\\</span></span><br><span class="line"><span class="comment">         //  404!  \\</span></span><br><span class="line"><span class="comment">         `-._______.-'</span></span><br><span class="line"><span class="comment">         ___`. | .'___</span></span><br><span class="line"><span class="comment">        (______|______)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="皮卡丘"><a href="#皮卡丘" class="headerlink" title="皮卡丘"></a>皮卡丘</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        quu..__</span></span><br><span class="line"><span class="comment">         $$$b  `---.__</span></span><br><span class="line"><span class="comment">          "$$b        `--.                          ___.---uuudP</span></span><br><span class="line"><span class="comment">           `$$b           `.__.------.__     __.---'      $$$$"              .</span></span><br><span class="line"><span class="comment">             "$b          -'            `-.-'            $$$"              .'|</span></span><br><span class="line"><span class="comment">               ".                                       d$"             _.'  |</span></span><br><span class="line"><span class="comment">                 `.   /                              ..."             .'     |</span></span><br><span class="line"><span class="comment">                   `./                           ..::-'            _.'       |</span></span><br><span class="line"><span class="comment">                    /                         .:::-'            .-'         .'</span></span><br><span class="line"><span class="comment">                   :                          ::''\          _.'            |</span></span><br><span class="line"><span class="comment">                  .' .-.             .-.           `.      .'               |</span></span><br><span class="line"><span class="comment">                  : /'$$|           .@"$\           `.   .'              _.-'</span></span><br><span class="line"><span class="comment">                 .'|$u$$|          |$$,$$|           |  &lt;            _.-'</span></span><br><span class="line"><span class="comment">                 | `:$$:'          :$$$$$:           `.  `.       .-'</span></span><br><span class="line"><span class="comment">                 :                  `"--'             |    `-.     \</span></span><br><span class="line"><span class="comment">                :##.       ==             .###.       `.      `.    `\</span></span><br><span class="line"><span class="comment">                |##:                      :###:        |        &gt;     &gt;</span></span><br><span class="line"><span class="comment">                |#'     `..'`..'          `###'        x:      /     /</span></span><br><span class="line"><span class="comment">                 \                                   xXX|     /    ./</span></span><br><span class="line"><span class="comment">                  \                                xXXX'|    /   ./</span></span><br><span class="line"><span class="comment">                  /`-.                                  `.  /   /</span></span><br><span class="line"><span class="comment">                 :    `-  ...........,                   | /  .'</span></span><br><span class="line"><span class="comment">                 |         ``:::::::'       .            |&lt;    `.</span></span><br><span class="line"><span class="comment">                 |             ```          |           x| \ `.:``.</span></span><br><span class="line"><span class="comment">                 |                         .'    /'   xXX|  `:`M`M':.</span></span><br><span class="line"><span class="comment">                 |    |                    ;    /:' xXXX'|  -'MMMMM:'</span></span><br><span class="line"><span class="comment">                 `.  .'                   :    /:'       |-'MMMM.-'</span></span><br><span class="line"><span class="comment">                  |  |                   .'   /'        .'MMM.-'</span></span><br><span class="line"><span class="comment">                  `'`'                   :  ,'          |MMM&lt;</span></span><br><span class="line"><span class="comment">                    |                     `'            |tbap\</span></span><br><span class="line"><span class="comment">                     \                                  :MM.-'</span></span><br><span class="line"><span class="comment">                      \                 |              .''</span></span><br><span class="line"><span class="comment">                       \.               `.            /</span></span><br><span class="line"><span class="comment">                        /     .:::::::.. :           /</span></span><br><span class="line"><span class="comment">                       |     .:::::::::::`.         /</span></span><br><span class="line"><span class="comment">                       |   .:::------------\       /</span></span><br><span class="line"><span class="comment">                      /   .''               &gt;::'  /</span></span><br><span class="line"><span class="comment">                      `',:                 :    .'</span></span><br><span class="line"><span class="comment">                                           `:.:'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure>

<h3 id="顶"><a href="#顶" class="headerlink" title="顶"></a>顶</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span></span><br><span class="line"><span class="comment"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　　　　　頂頂頂　</span></span><br><span class="line"><span class="comment"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span></span><br><span class="line"><span class="comment"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span></span><br><span class="line"><span class="comment"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="二狗子·真"><a href="#二狗子·真" class="headerlink" title="二狗子·真"></a>二狗子·真</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *               ii.                                         ;9ABH,</span></span><br><span class="line"><span class="comment"> *              SA391,                                    .r9GG35&amp;G</span></span><br><span class="line"><span class="comment"> *              &amp;#ii13Gh;                               i3X31i;:,rB1</span></span><br><span class="line"><span class="comment"> *              iMs,:,i5895,                         .5G91:,:;:s1:8A</span></span><br><span class="line"><span class="comment"> *               33::::,,;5G5,                     ,58Si,,:::,sHX;iH1</span></span><br><span class="line"><span class="comment"> *                Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG</span></span><br><span class="line"><span class="comment"> *                .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8</span></span><br><span class="line"><span class="comment"> *               :SB9s:,............................,,,.,,,SASh53h,1G.</span></span><br><span class="line"><span class="comment"> *            .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,</span></span><br><span class="line"><span class="comment"> *          ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi</span></span><br><span class="line"><span class="comment"> *        i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1</span></span><br><span class="line"><span class="comment"> *       59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s</span></span><br><span class="line"><span class="comment"> *      s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99</span></span><br><span class="line"><span class="comment"> *      93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83</span></span><br><span class="line"><span class="comment"> *      G5.G8  9#@@@@<span class="doctag">@X</span>. .,,,,,,.....  iA9,.S&amp;B###@<span class="doctag">@Mr</span>...,,,,,,,,..,.;Xh</span></span><br><span class="line"><span class="comment"> *      Gs.X8 S@@@@@@<span class="doctag">@B</span>:..,,,,,,,,,,. rA1 ,A@@@@@@@@<span class="doctag">@H</span>:........,,,,,,.iX:</span></span><br><span class="line"><span class="comment"> *     ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@<span class="doctag">@M</span>;    ....,,,,,,,,S8</span></span><br><span class="line"><span class="comment"> *     X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@<span class="doctag">@Hs</span>       ...,,,,,,,:Gs</span></span><br><span class="line"><span class="comment"> *    r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:</span></span><br><span class="line"><span class="comment"> *   :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59</span></span><br><span class="line"><span class="comment"> *  .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr</span></span><br><span class="line"><span class="comment"> *  SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5</span></span><br><span class="line"><span class="comment"> *  91  .    ;:.,1&amp;@@@@@<span class="doctag">@MXs</span>.                            .          .,,:,:&amp;S</span></span><br><span class="line"><span class="comment"> *  hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99</span></span><br><span class="line"><span class="comment"> *  ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83</span></span><br><span class="line"><span class="comment"> *   s&amp;: ....  .sS553B@<span class="doctag">@HX</span>3s;,.    .,;13h.                            .:::&amp;1</span></span><br><span class="line"><span class="comment"> *    SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,</span></span><br><span class="line"><span class="comment"> *     iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA</span></span><br><span class="line"><span class="comment"> *      ,8X5;   .     .......                                       ,;iihS8Gi</span></span><br><span class="line"><span class="comment"> *         1831,                                                 .,;irrrrrs&amp;@</span></span><br><span class="line"><span class="comment"> *           ;5A8r.                                            .:;iiiiirrss1H</span></span><br><span class="line"><span class="comment"> *             :X@H3s.......                                .,:;iii;iiiiirsrh</span></span><br><span class="line"><span class="comment"> *              r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1</span></span><br><span class="line"><span class="comment"> *             ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h</span></span><br><span class="line"><span class="comment"> *             8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h</span></span><br><span class="line"><span class="comment"> *            i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111</span></span><br><span class="line"><span class="comment"> *            9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *            .,,       .,:;;iiiiiiiii;;:,,.     .,,</span></span><br><span class="line"><span class="comment"> *          rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,</span></span><br><span class="line"><span class="comment"> *         r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,</span></span><br><span class="line"><span class="comment"> *            .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:</span></span><br><span class="line"><span class="comment"> *          :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,</span></span><br><span class="line"><span class="comment"> *       .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.</span></span><br><span class="line"><span class="comment"> *    ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.</span></span><br><span class="line"><span class="comment"> *   ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@<span class="doctag">@s</span>,,:::;;;::,,.   .;.</span></span><br><span class="line"><span class="comment"> *    :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..</span></span><br><span class="line"><span class="comment"> *   .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri</span></span><br><span class="line"><span class="comment"> *   iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;</span></span><br><span class="line"><span class="comment"> *  ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.</span></span><br><span class="line"><span class="comment"> *  iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:</span></span><br><span class="line"><span class="comment"> * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri</span></span><br><span class="line"><span class="comment"> * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.</span></span><br><span class="line"><span class="comment"> * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.</span></span><br><span class="line"><span class="comment"> * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.</span></span><br><span class="line"><span class="comment"> * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri</span></span><br><span class="line"><span class="comment"> *  ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:</span></span><br><span class="line"><span class="comment"> *  .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri</span></span><br><span class="line"><span class="comment"> *   ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,</span></span><br><span class="line"><span class="comment"> *    irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:</span></span><br><span class="line"><span class="comment"> *     irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:</span></span><br><span class="line"><span class="comment"> *      ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:</span></span><br><span class="line"><span class="comment"> *       :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,</span></span><br><span class="line"><span class="comment"> *        .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:</span></span><br><span class="line"><span class="comment"> *          .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.</span></span><br><span class="line"><span class="comment"> *            .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,</span></span><br><span class="line"><span class="comment"> *               .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.</span></span><br><span class="line"><span class="comment"> *                  .,:;iirrrrrrrrrrrrrrrrri;:.</span></span><br><span class="line"><span class="comment"> *                        ..,:::;;;;:::,,.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="二狗子·二"><a href="#二狗子·二" class="headerlink" title="二狗子·二#"></a>二狗子·二#</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *          .,:,,,                                        .::,,,::.</span></span><br><span class="line"><span class="comment"> *        .::::,,;;,                                  .,;;:,,....:i:</span></span><br><span class="line"><span class="comment"> *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.</span></span><br><span class="line"><span class="comment"> *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.</span></span><br><span class="line"><span class="comment"> *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,</span></span><br><span class="line"><span class="comment"> *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,</span></span><br><span class="line"><span class="comment"> *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:</span></span><br><span class="line"><span class="comment"> *        :s,.;r:... ....................................... .::;::s;</span></span><br><span class="line"><span class="comment"> *        ,1r::. .............,,,.,,:,,........................,;iir;</span></span><br><span class="line"><span class="comment"> *        ,s;...........     ..::.,;:,,.          ...............,;1s</span></span><br><span class="line"><span class="comment"> *       :i,..,.              .,:,,::,.          .......... .......;1,</span></span><br><span class="line"><span class="comment"> *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,</span></span><br><span class="line"><span class="comment"> *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:</span></span><br><span class="line"><span class="comment"> *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.</span></span><br><span class="line"><span class="comment"> *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr</span></span><br><span class="line"><span class="comment"> *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,</span></span><br><span class="line"><span class="comment"> *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.</span></span><br><span class="line"><span class="comment"> *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.</span></span><br><span class="line"><span class="comment"> *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,</span></span><br><span class="line"><span class="comment"> *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,</span></span><br><span class="line"><span class="comment"> *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,</span></span><br><span class="line"><span class="comment"> *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.</span></span><br><span class="line"><span class="comment"> *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;</span></span><br><span class="line"><span class="comment"> *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.</span></span><br><span class="line"><span class="comment"> *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,</span></span><br><span class="line"><span class="comment"> *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;</span></span><br><span class="line"><span class="comment"> *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;</span></span><br><span class="line"><span class="comment"> *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;</span></span><br><span class="line"><span class="comment"> *      . ihr, ...  .         ..                    ........,,,,,;11:.</span></span><br><span class="line"><span class="comment"> *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.</span></span><br><span class="line"><span class="comment"> *          .:s1r,......................       ..............;shs,</span></span><br><span class="line"><span class="comment"> *          . .:shr:.  ....                 ..............,ishs.</span></span><br><span class="line"><span class="comment"> *              .,issr;,... ...........................,is1s;.</span></span><br><span class="line"><span class="comment"> *                 .,is1si;:,....................,:;ir1sr;,</span></span><br><span class="line"><span class="comment"> *                    ..:isssssrrii;::::::;;iirsssssr;:..</span></span><br><span class="line"><span class="comment"> *                         .,::iiirsssssssssrri;;:.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="喷火龙·飞"><a href="#喷火龙·飞" class="headerlink" title="喷火龙·飞"></a>喷火龙·飞</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                  ___====-_  _-====___</span></span><br><span class="line"><span class="comment"> *            _--^^^#####//      \\#####^^^--_</span></span><br><span class="line"><span class="comment"> *         _-^##########// (    ) \\##########^-_</span></span><br><span class="line"><span class="comment"> *        -############//  |\^^/|  \\############-</span></span><br><span class="line"><span class="comment"> *      _/############//   (@::@)   \\############\_</span></span><br><span class="line"><span class="comment"> *     /#############((     \\//     ))#############\</span></span><br><span class="line"><span class="comment"> *    -###############\\    (oo)    //###############-</span></span><br><span class="line"><span class="comment"> *   -#################\\  / VV \  //#################-</span></span><br><span class="line"><span class="comment"> *  -###################\\/      \//###################-</span></span><br><span class="line"><span class="comment"> * _#/|##########/\######(   /\   )######/\##########|\#_</span></span><br><span class="line"><span class="comment"> * |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|</span></span><br><span class="line"><span class="comment"> * `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '</span></span><br><span class="line"><span class="comment"> *    `   `  `      `   / | |  | | \   '      '  '   '</span></span><br><span class="line"><span class="comment"> *                     (  | |  | |  )</span></span><br><span class="line"><span class="comment"> *                    __\ | |  | | /__</span></span><br><span class="line"><span class="comment"> *                   (vvv(VVV)(VVV)vvv)</span></span><br><span class="line"><span class="comment"> *                        神兽保佑</span></span><br><span class="line"><span class="comment"> *                       代码无BUG!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="骷髅"><a href="#骷髅" class="headerlink" title="骷髅"></a>骷髅</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **************************************************************</span></span><br><span class="line"><span class="comment">// *                                                            *</span></span><br><span class="line"><span class="comment">// *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span></span><br><span class="line"><span class="comment">// *    |                     ______                     |      *</span></span><br><span class="line"><span class="comment">// *    |                  .-"      "-.                  |      *</span></span><br><span class="line"><span class="comment">// *    |                 /            \                 |      *</span></span><br><span class="line"><span class="comment">// *    |     _          |              |          _     |      *</span></span><br><span class="line"><span class="comment">// *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span></span><br><span class="line"><span class="comment">// *    |     &gt; "=._     | )(__/  \__)( |     _.=" &lt;     |      *</span></span><br><span class="line"><span class="comment">// *    |    (_/"=._"=._ |/     /\     \| _.="_.="\_)    |      *</span></span><br><span class="line"><span class="comment">// *    |           "=._"(_     ^^     _)"_.="           |      *</span></span><br><span class="line"><span class="comment">// *    |               "=\__|IIIIII|__/="               |      *</span></span><br><span class="line"><span class="comment">// *    |              _.="| \IIIIII/ |"=._              |      *</span></span><br><span class="line"><span class="comment">// *    |    _     _.="_.="\          /"=._"=._     _    |      *</span></span><br><span class="line"><span class="comment">// *    |   ( \_.="_.="     `--------`     "=._"=._/ )   |      *</span></span><br><span class="line"><span class="comment">// *    |    &gt; _.="                            "=._ &lt;    |      *</span></span><br><span class="line"><span class="comment">// *    |   (_/                                    \_)   |      *</span></span><br><span class="line"><span class="comment">// *    |                                                |      *</span></span><br><span class="line"><span class="comment">// *    '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='      *</span></span><br><span class="line"><span class="comment">// *                                                            *</span></span><br><span class="line"><span class="comment">// *           LASCIATE OGNI SPERANZA, VOI CH'ENTRATE           *</span></span><br><span class="line"><span class="comment">// **************************************************************</span></span><br></pre></td></tr></table></figure>

<h3 id="老鼠"><a href="#老鼠" class="headerlink" title="老鼠"></a>老鼠</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//     .--,       .--,</span></span><br><span class="line"><span class="comment">//    ( (  \.---./  ) )</span></span><br><span class="line"><span class="comment">//     '.__/o   o\__.'</span></span><br><span class="line"><span class="comment">//        &#123;=  ^  =&#125;</span></span><br><span class="line"><span class="comment">//         &gt;  -  &lt;</span></span><br><span class="line"><span class="comment">//        /       \</span></span><br><span class="line"><span class="comment">//       //       \\</span></span><br><span class="line"><span class="comment">//      //|   .   |\\</span></span><br><span class="line"><span class="comment">//      "'\       /'"_.-~^`'-.</span></span><br><span class="line"><span class="comment">//         \  _  /--'         `</span></span><br><span class="line"><span class="comment">//       ___)( )(___</span></span><br><span class="line"><span class="comment">//      (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span></span><br></pre></td></tr></table></figure>

<h3 id="悲伤的曹尼玛"><a href="#悲伤的曹尼玛" class="headerlink" title="悲伤的曹尼玛"></a>悲伤的曹尼玛</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      ┏┛ ┻━━━━━┛ ┻┓</span></span><br><span class="line"><span class="comment">//      ┃　　　　　　        ┃</span></span><br><span class="line"><span class="comment">//      ┃　　　━　　　      ┃</span></span><br><span class="line"><span class="comment">//      ┃　┳┛　  ┗┳　    ┃</span></span><br><span class="line"><span class="comment">//      ┃　　　　　　       ┃</span></span><br><span class="line"><span class="comment">//      ┃　　　┻　　　    ┃</span></span><br><span class="line"><span class="comment">//      ┃　　　　　　      ┃</span></span><br><span class="line"><span class="comment">//      ┗━┓　　　┏━━━┛</span></span><br><span class="line"><span class="comment">//        ┃　　　┃   神兽保佑</span></span><br><span class="line"><span class="comment">//        ┃　　　┃   代码无BUG！</span></span><br><span class="line"><span class="comment">//        ┃　　　┗━━━━━━━━━┓</span></span><br><span class="line"><span class="comment">//        ┃　　　　　　　    ┣┓</span></span><br><span class="line"><span class="comment">//        ┃　　　　         ┏┛</span></span><br><span class="line"><span class="comment">//        ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛</span></span><br><span class="line"><span class="comment">//          ┃ ┫ ┫   ┃ ┫ ┫</span></span><br><span class="line"><span class="comment">//          ┗━┻━┛   ┗━┻━┛</span></span><br></pre></td></tr></table></figure>

<h3 id="美女-1"><a href="#美女-1" class="headerlink" title="美女"></a>美女</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                       .::::.</span></span><br><span class="line"><span class="comment">//                     .::::::::.</span></span><br><span class="line"><span class="comment">//                    :::::::::::</span></span><br><span class="line"><span class="comment">//                 ..:::::::::::'</span></span><br><span class="line"><span class="comment">//              '::::::::::::'</span></span><br><span class="line"><span class="comment">//                .::::::::::</span></span><br><span class="line"><span class="comment">//           '::::::::::::::..</span></span><br><span class="line"><span class="comment">//                ..::::::::::::.</span></span><br><span class="line"><span class="comment">//              ``::::::::::::::::</span></span><br><span class="line"><span class="comment">//               ::::``:::::::::'        .:::.</span></span><br><span class="line"><span class="comment">//              ::::'   ':::::'       .::::::::.</span></span><br><span class="line"><span class="comment">//            .::::'      ::::     .:::::::'::::.</span></span><br><span class="line"><span class="comment">//           .:::'       :::::  .:::::::::' ':::::.</span></span><br><span class="line"><span class="comment">//          .::'        :::::.:::::::::'      ':::::.</span></span><br><span class="line"><span class="comment">//         .::'         ::::::::::::::'         ``::::.</span></span><br><span class="line"><span class="comment">//     ...:::           ::::::::::::'              ``::.</span></span><br><span class="line"><span class="comment">//    ```` ':.          ':::::::::'                  ::::..</span></span><br><span class="line"><span class="comment">//                       '.:::::'                    ':'````..</span></span><br></pre></td></tr></table></figure>

<h3 id="比鲁斯"><a href="#比鲁斯" class="headerlink" title="比鲁斯"></a>比鲁斯</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　瓦瓦　　　　　　　　　　　　十　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　十齱龠己　　　　　　　　　亅瓦車己　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　乙龍龠毋日丶　　　　　　丶乙己毋毋丶　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　十龠馬鬼車瓦　　　　　　己十瓦毋毋　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　鬼馬龠馬龠十　　　　己己毋車毋瓦　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　乙龠龍龍鬼龍瓦　十瓦毋乙瓦龠瓦亅　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　馬齱龍馬鬼十丶日己己己毋車乙丶　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　己齱馬鬼車十十毋日乙己己乙乙　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　車馬齱齱日乙毋瓦己乙瓦日亅　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　亅車齺龖瓦乙車龖龍乙乙十　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　日龠龠十亅車龍毋十十　　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　日毋己亅　己己十亅亅　　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　丶己十十乙　　丶丶丶丶丶　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　亅己十龍龖瓦　　丶　丶　乙十　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　亅己十龠龖毋　丶丶　　丶己鬼鬼瓦亅　　　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　十日十十日亅丶亅丶　丶十日毋鬼馬馬車乙　　　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　十日乙十亅亅亅丶　　十乙己毋鬼鬼鬼龍齺馬乙　　　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十　　　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶　</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　　　丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　　　十乙己日十　　丶己鬼龍齱齺齱龍馬馬馬車毋己</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　丶十己乙亅丶　　　　　　亅瓦馬龠龍龠龠馬毋瓦乙</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　丶十十乙亅十　　　　　　　　亅己瓦車馬龠鬼車瓦乙</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　丶十乙十十丶　　　　　　　　　丶丶亅十瓦鬼車瓦己</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　丶亅亅丶　　　　　　　　　　　　　　　亅日瓦日</span></span><br><span class="line"><span class="comment"> *　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　丶</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="System-out-println"><a href="#System-out-println" class="headerlink" title="System.out.println"></a>System.out.println</h2><h3 id="佛祖"><a href="#佛祖" class="headerlink" title="佛祖"></a>佛祖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">        <span class="string">" *                    _ooOoo_\n"</span> +</span><br><span class="line">        <span class="string">" *                   o8888888o\n"</span> +</span><br><span class="line">        <span class="string">" *                   88\" . \"88\n"</span> +</span><br><span class="line">        <span class="string">" *                   (| -_- |)\n"</span> +</span><br><span class="line">        <span class="string">" *                    O\\ = /O\n"</span> +</span><br><span class="line">        <span class="string">" *                ____/`---'\\____\n"</span> +</span><br><span class="line">        <span class="string">" *              .   ' \\\\| |// `.\n"</span> +</span><br><span class="line">        <span class="string">" *               / \\\\||| : |||// \\\n"</span> +</span><br><span class="line">        <span class="string">" *             / _||||| -:- |||||- \\\n"</span> +</span><br><span class="line">        <span class="string">" *               | | \\\\\\ - /// | |\n"</span> +</span><br><span class="line">        <span class="string">" *             | \\_| ''\\---/'' | |\n"</span> +</span><br><span class="line">        <span class="string">" *              \\ .-\\__ `-` ___/-. /\n"</span> +</span><br><span class="line">        <span class="string">" *           ___`. .' /--.--\\ `. . __\n"</span> +</span><br><span class="line">        <span class="string">" *        .\"\" '&lt; `.___\\_&lt;|&gt;_/___.' &gt;'\"\".\n"</span> +</span><br><span class="line">        <span class="string">" *       | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n"</span> +</span><br><span class="line">        <span class="string">" *         \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n"</span> +</span><br><span class="line">        <span class="string">" * ======`-.____`-.___\\_____/___.-`____.-'======\n"</span> +</span><br><span class="line">        <span class="string">" *                    `=---='\n"</span> +</span><br><span class="line">        <span class="string">" *\n"</span> +</span><br><span class="line">        <span class="string">" * .............................................\n"</span> +</span><br><span class="line">        <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="标准键盘"><a href="#标准键盘" class="headerlink" title="标准键盘"></a>标准键盘</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"\n"</span> +</span><br><span class="line">               <span class="string">"/***\n"</span> +</span><br><span class="line">               <span class="string">" * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n"</span> +</span><br><span class="line">               <span class="string">" * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐\n"</span> +</span><br><span class="line">               <span class="string">" * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\n"</span> +</span><br><span class="line">               <span class="string">" * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n"</span> +</span><br><span class="line">               <span class="string">" * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │\n"</span> +</span><br><span class="line">               <span class="string">" * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n"</span> +</span><br><span class="line">               <span class="string">" * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\n"</span> +</span><br><span class="line">               <span class="string">" * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\n"</span> +</span><br><span class="line">               <span class="string">" * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│\" '│ Enter  │               │ 4 │ 5 │ 6 │   │\n"</span> +</span><br><span class="line">               <span class="string">" * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n"</span> +</span><br><span class="line">               <span class="string">" * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\n"</span> +</span><br><span class="line">               <span class="string">" * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\n"</span> +</span><br><span class="line">               <span class="string">" * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\n"</span> +</span><br><span class="line">               <span class="string">" * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n"</span> +</span><br><span class="line">               <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="曹尼玛-1"><a href="#曹尼玛-1" class="headerlink" title="曹尼玛"></a>曹尼玛</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">        <span class="string">" *      ┌─┐       ┌─┐\n"</span> +</span><br><span class="line">        <span class="string">" *   ┌──┘ ┴───────┘ ┴──┐\n"</span> +</span><br><span class="line">        <span class="string">" *   │                 │\n"</span> +</span><br><span class="line">        <span class="string">" *   │       ───       │\n"</span> +</span><br><span class="line">        <span class="string">" *   │  ─┬┘       └┬─  │\n"</span> +</span><br><span class="line">        <span class="string">" *   │                 │\n"</span> +</span><br><span class="line">        <span class="string">" *   │       ─┴─       │\n"</span> +</span><br><span class="line">        <span class="string">" *   │                 │\n"</span> +</span><br><span class="line">        <span class="string">" *   └───┐         ┌───┘\n"</span> +</span><br><span class="line">        <span class="string">" *       │         │\n"</span> +</span><br><span class="line">        <span class="string">" *       │         │\n"</span> +</span><br><span class="line">        <span class="string">" *       │         │\n"</span> +</span><br><span class="line">        <span class="string">" *       │         └──────────────┐\n"</span> +</span><br><span class="line">        <span class="string">" *       │                        │\n"</span> +</span><br><span class="line">        <span class="string">" *       │                        ├─┐\n"</span> +</span><br><span class="line">        <span class="string">" *       │                        ┌─┘\n"</span> +</span><br><span class="line">        <span class="string">" *       │                        │\n"</span> +</span><br><span class="line">        <span class="string">" *       └─┐  ┐  ┌───────┬──┐  ┌──┘\n"</span> +</span><br><span class="line">        <span class="string">" *         │ ─┤ ─┤       │ ─┤ ─┤\n"</span> +</span><br><span class="line">        <span class="string">" *         └──┴──┘       └──┴──┘\n"</span> +</span><br><span class="line">        <span class="string">" *                神兽保佑\n"</span> +</span><br><span class="line">        <span class="string">" *               代码无BUG!\n"</span> +</span><br><span class="line">        <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="梦比优斯"><a href="#梦比优斯" class="headerlink" title="梦比优斯"></a>梦比优斯</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">        <span class="string">" *_______________#########_______________________\n"</span> +</span><br><span class="line">        <span class="string">" *______________############_____________________\n"</span> +</span><br><span class="line">        <span class="string">" *______________#############____________________\n"</span> +</span><br><span class="line">        <span class="string">" *_____________##__###########___________________\n"</span> +</span><br><span class="line">        <span class="string">" *____________###__######_#####__________________\n"</span> +</span><br><span class="line">        <span class="string">" *____________###_#######___####_________________\n"</span> +</span><br><span class="line">        <span class="string">" *___________###__##########_####________________\n"</span> +</span><br><span class="line">        <span class="string">" *__________####__###########_####_______________\n"</span> +</span><br><span class="line">        <span class="string">" *________#####___###########__#####_____________\n"</span> +</span><br><span class="line">        <span class="string">" *_______######___###_########___#####___________\n"</span> +</span><br><span class="line">        <span class="string">" *_______#####___###___########___######_________\n"</span> +</span><br><span class="line">        <span class="string">" *______######___###__###########___######_______\n"</span> +</span><br><span class="line">        <span class="string">" *_____######___####_##############__######______\n"</span> +</span><br><span class="line">        <span class="string">" *____#######__#####################_#######_____\n"</span> +</span><br><span class="line">        <span class="string">" *____#######__##############################____\n"</span> +</span><br><span class="line">        <span class="string">" *___#######__######_#################_#######___\n"</span> +</span><br><span class="line">        <span class="string">" *___#######__######_######_#########___######___\n"</span> +</span><br><span class="line">        <span class="string">" *___#######____##__######___######_____######___\n"</span> +</span><br><span class="line">        <span class="string">" *___#######________######____#####_____#####____\n"</span> +</span><br><span class="line">        <span class="string">" *____######________#####_____#####_____####_____\n"</span> +</span><br><span class="line">        <span class="string">" *_____#####________####______#####_____###______\n"</span> +</span><br><span class="line">        <span class="string">" *______#####______;###________###______#________\n"</span> +</span><br><span class="line">        <span class="string">" *________##_______####________####______________\n"</span> +</span><br><span class="line">        <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="马"><a href="#马" class="headerlink" title="马"></a>马</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"                              _(\\_/) \n"</span> +</span><br><span class="line">               <span class="string">"                             ,((((^`\\\n"</span> +</span><br><span class="line">               <span class="string">"                            ((((  (6 \\ \n"</span> +</span><br><span class="line">               <span class="string">"                          ,((((( ,    \\\n"</span> +</span><br><span class="line">               <span class="string">"      ,,,_              ,(((((  /\"._  ,`,\n"</span> +</span><br><span class="line">               <span class="string">"     ((((\\\\ ,...       ,((((   /    `-.-'\n"</span> +</span><br><span class="line">               <span class="string">"     )))  ;'    `\"'\"'\"\"((((   (      \n"</span> +</span><br><span class="line">               <span class="string">"    (((  /            (((      \\\n"</span> +</span><br><span class="line">               <span class="string">"     )) |                      |\n"</span> +</span><br><span class="line">               <span class="string">"    ((  |        .       '     |\n"</span> +</span><br><span class="line">               <span class="string">"    ))  \\     _ '      `t   ,.')\n"</span> +</span><br><span class="line">               <span class="string">"    (   |   y;- -,-\"\"'\"-.\\   \\/  \n"</span> +</span><br><span class="line">               <span class="string">"    )   / ./  ) /         `\\  \\\n"</span> +</span><br><span class="line">               <span class="string">"       |./   ( (           / /'\n"</span> +</span><br><span class="line">               <span class="string">"       ||     \\\\          //'|\n"</span> +</span><br><span class="line">               <span class="string">"       ||      \\\\       _//'||\n"</span> +</span><br><span class="line">               <span class="string">"       ||       ))     |_/  ||\n"</span> +</span><br><span class="line">               <span class="string">"       \\_\\     |_/          ||\n"</span> +</span><br><span class="line">               <span class="string">"       `'\"                  \\_\\\n"</span> +</span><br><span class="line">               <span class="string">"                            `'\" "</span>);</span><br></pre></td></tr></table></figure>

<p>二狗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">             <span class="string">" *          .,:,,,                                        .::,,,::.\n"</span> +</span><br><span class="line">             <span class="string">" *        .::::,,;;,                                  .,;;:,,....:i:\n"</span> +</span><br><span class="line">             <span class="string">" *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.\n"</span> +</span><br><span class="line">             <span class="string">" *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.\n"</span> +</span><br><span class="line">             <span class="string">" *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,\n"</span> +</span><br><span class="line">             <span class="string">" *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,\n"</span> +</span><br><span class="line">             <span class="string">" *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:\n"</span> +</span><br><span class="line">             <span class="string">" *        :s,.;r:... ....................................... .::;::s;\n"</span> +</span><br><span class="line">             <span class="string">" *        ,1r::. .............,,,.,,:,,........................,;iir;\n"</span> +</span><br><span class="line">             <span class="string">" *        ,s;...........     ..::.,;:,,.          ...............,;1s\n"</span> +</span><br><span class="line">             <span class="string">" *       :i,..,.              .,:,,::,.          .......... .......;1,\n"</span> +</span><br><span class="line">             <span class="string">" *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,\n"</span> +</span><br><span class="line">             <span class="string">" *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:\n"</span> +</span><br><span class="line">             <span class="string">" *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.\n"</span> +</span><br><span class="line">             <span class="string">" *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr\n"</span> +</span><br><span class="line">             <span class="string">" *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,\n"</span> +</span><br><span class="line">             <span class="string">" *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.\n"</span> +</span><br><span class="line">             <span class="string">" *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.\n"</span> +</span><br><span class="line">             <span class="string">" *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,\n"</span> +</span><br><span class="line">             <span class="string">" *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,\n"</span> +</span><br><span class="line">             <span class="string">" *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,\n"</span> +</span><br><span class="line">             <span class="string">" *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.\n"</span> +</span><br><span class="line">             <span class="string">" *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;\n"</span> +</span><br><span class="line">             <span class="string">" *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.\n"</span> +</span><br><span class="line">             <span class="string">" *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,\n"</span> +</span><br><span class="line">             <span class="string">" *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;\n"</span> +</span><br><span class="line">             <span class="string">" *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;\n"</span> +</span><br><span class="line">             <span class="string">" *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;\n"</span> +</span><br><span class="line">             <span class="string">" *      . ihr, ...  .         ..                    ........,,,,,;11:.\n"</span> +</span><br><span class="line">             <span class="string">" *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.\n"</span> +</span><br><span class="line">             <span class="string">" *          .:s1r,......................       ..............;shs,\n"</span> +</span><br><span class="line">             <span class="string">" *          . .:shr:.  ....                 ..............,ishs.\n"</span> +</span><br><span class="line">             <span class="string">" *              .,issr;,... ...........................,is1s;.\n"</span> +</span><br><span class="line">             <span class="string">" *                 .,is1si;:,....................,:;ir1sr;,\n"</span> +</span><br><span class="line">             <span class="string">" *                    ..:isssssrrii;::::::;;iirsssssr;:..\n"</span> +</span><br><span class="line">             <span class="string">" *                         .,::iiirsssssssssrri;;:.\n"</span> +</span><br><span class="line">             <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="老鼠-1"><a href="#老鼠-1" class="headerlink" title="老鼠"></a>老鼠</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">                <span class="string">" *  .--,       .--,\n"</span> +</span><br><span class="line">                <span class="string">" * ( (  \\.---./  ) )\n"</span> +</span><br><span class="line">                <span class="string">" *  '.__/o   o\\__.'\n"</span> +</span><br><span class="line">                <span class="string">" *     &#123;=  ^  =&#125;\n"</span> +</span><br><span class="line">                <span class="string">" *      &gt;  -  &lt;\n"</span> +</span><br><span class="line">                <span class="string">" *     /       \\\n"</span> +</span><br><span class="line">                <span class="string">" *    //       \\\\\n"</span> +</span><br><span class="line">                <span class="string">" *   //|   .   |\\\\\n"</span> +</span><br><span class="line">                <span class="string">" *   \"'\\       /'\"_.-~^`'-.\n"</span> +</span><br><span class="line">                <span class="string">" *      \\  _  /--'         `\n"</span> +</span><br><span class="line">                <span class="string">" *    ___)( )(___\n"</span> +</span><br><span class="line">                <span class="string">" *   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。\n"</span> +</span><br><span class="line">                <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="二狗子-1"><a href="#二狗子-1" class="headerlink" title="二狗子"></a>二狗子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"\n"</span> +</span><br><span class="line">             <span class="string">"/***\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐\n"</span> +</span><br><span class="line">             <span class="string">" * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌\n"</span> +</span><br><span class="line">             <span class="string">" * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒\n"</span> +</span><br><span class="line">             <span class="string">" * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐\n"</span> +</span><br><span class="line">             <span class="string">" * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄\n"</span> +</span><br><span class="line">             <span class="string">" * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒\n"</span> +</span><br><span class="line">             <span class="string">" * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒\n"</span> +</span><br><span class="line">             <span class="string">" * 单身狗就这样默默地看着你，一句话也不说。\n"</span> +</span><br><span class="line">             <span class="string">" */\n"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="美女-2"><a href="#美女-2" class="headerlink" title="美女"></a>美女</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"/***\n"</span> +</span><br><span class="line">               <span class="string">" *                    .::::.\n"</span> +</span><br><span class="line">               <span class="string">" *                  .::::::::.\n"</span> +</span><br><span class="line">               <span class="string">" *                 :::::::::::  \n"</span> +</span><br><span class="line">               <span class="string">" *             ..:::::::::::'\n"</span> +</span><br><span class="line">               <span class="string">" *           '::::::::::::'\n"</span> +</span><br><span class="line">               <span class="string">" *             .::::::::::\n"</span> +</span><br><span class="line">               <span class="string">" *        '::::::::::::::..\n"</span> +</span><br><span class="line">               <span class="string">" *             ..::::::::::::.\n"</span> +</span><br><span class="line">               <span class="string">" *           ``::::::::::::::::\n"</span> +</span><br><span class="line">               <span class="string">" *            ::::``:::::::::'        .:::.\n"</span> +</span><br><span class="line">               <span class="string">" *           ::::'   ':::::'       .::::::::.\n"</span> +</span><br><span class="line">               <span class="string">" *         .::::'      ::::     .:::::::'::::.\n"</span> +</span><br><span class="line">               <span class="string">" *        .:::'       :::::  .:::::::::' ':::::.\n"</span> +</span><br><span class="line">               <span class="string">" *       .::'        :::::.:::::::::'      ':::::.\n"</span> +</span><br><span class="line">               <span class="string">" *      .::'         ::::::::::::::'         ``::::.\n"</span> +</span><br><span class="line">               <span class="string">" *  ...:::           ::::::::::::'              ``::.\n"</span> +</span><br><span class="line">               <span class="string">" * ```` ':.          ':::::::::'                  ::::..\n"</span> +</span><br><span class="line">               <span class="string">" *                    '.:::::'                    ':'````..\n"</span> +</span><br><span class="line">               <span class="string">" */"</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>你懂得！虽然不太想自己的代码里出现这种注释，但是没准会出现，因为要吐槽一下！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                                         ,s555SB@@&amp;</span></span><br><span class="line"><span class="comment"> *                                      :9H####@@@@<span class="doctag">@Xi</span></span></span><br><span class="line"><span class="comment"> *                                     1@@@@@@@@@@@@@@8</span></span><br><span class="line"><span class="comment"> *                                   ,8@@@@@@@@<span class="doctag">@B</span>@@@@@@8</span></span><br><span class="line"><span class="comment"> *                                  :B@@@<span class="doctag">@X</span>3hi8Bs;B@@@@<span class="doctag">@Ah</span>,</span></span><br><span class="line"><span class="comment"> *             ,8i                  r@@<span class="doctag">@B</span>:     1S ,M@@@@@@#8;</span></span><br><span class="line"><span class="comment"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@<span class="doctag">@S</span></span></span><br><span class="line"><span class="comment"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5</span></span><br><span class="line"><span class="comment"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@<span class="doctag">@A</span></span></span><br><span class="line"><span class="comment"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1</span></span><br><span class="line"><span class="comment"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@<span class="doctag">@B</span>1</span></span><br><span class="line"><span class="comment"> *               .h8h.,A@@<span class="doctag">@MXSs</span>,           #<span class="doctag">@H</span>1:    3ssSSX@1</span></span><br><span class="line"><span class="comment"> *               s ,@@@@@@@@@@@<span class="doctag">@Xhi</span>,       r#@<span class="doctag">@X</span>1s9M8    .GA981</span></span><br><span class="line"><span class="comment"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@<span class="doctag">@BS</span>;i;</span></span><br><span class="line"><span class="comment"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@<span class="doctag">@MS</span></span></span><br><span class="line"><span class="comment"> *                s@<span class="doctag">@MM</span>@@<span class="doctag">@hsX</span>#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,</span></span><br><span class="line"><span class="comment"> *              :GB@#3G@<span class="doctag">@Brs</span> ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@B</span>,</span></span><br><span class="line"><span class="comment"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8</span></span><br><span class="line"><span class="comment"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:</span></span><br><span class="line"><span class="comment"> *      s&amp;HA#@@@@@@@@@@@@@<span class="doctag">@M</span>89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@r</span></span></span><br><span class="line"><span class="comment"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@i</span></span></span><br><span class="line"><span class="comment"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;</span></span><br><span class="line"><span class="comment"> *  9@@<span class="doctag">@X</span>:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:</span></span><br><span class="line"><span class="comment"> *   SH#<span class="doctag">@B</span>9.rM@@@@@@@@@@@@<span class="doctag">@B</span>       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5</span></span><br><span class="line"><span class="comment"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@B</span></span></span><br><span class="line"><span class="comment"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@S</span></span></span><br><span class="line"><span class="comment"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:</span></span><br><span class="line"><span class="comment"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@<span class="doctag">@A</span>.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    又看源码，看你妹妹呀！</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>意识流编程</title>
    <url>/2020/05/07/%E6%84%8F%E8%AF%86%E6%B5%81%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>更好地感受生活、理解生活、改变生活，自然也能让人成为更优秀的程序员！获得任何新技能的第一步，是先别想着独立解决什么，而是重复一遍前人已竟之事，这是掌握一门技能最快的方法。<strong>网上的某个程序有助于解决手头问题，却没法直接拿来使用，还得针对问题稍作调整才行，这程序用什么语言写的都有可能，所以懂点儿Python、Ruby什么的就非常管用！</strong>通过学习各种不同的编程语言，会明白哪门语言最适宜解决自己当下关注的问题！仅仅掌握甚至精通一门编程语言是不够的。<strong>推荐书籍：《七周七语言 理解多种编程范型》· [美] Bruce A。 Tate 著 戴玮 白明 巨成译</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>决心征服一门外语，不是因为不得不这么做，而是因为发自内心地想学！</li>
<li>语言的类型模型是什么？强类型（Java）或弱类型（C语言），静态类型（Java）或动态类型（Ruby）</li>
<li>语言的编程范型是什么？是面向对象（object-oriented，OO）、函数式、过程式，还是它们的综合体？</li>
<li>怎样和语言交互？语言可编译也可解释，可以有虚拟机也可以没有</li>
<li>语言的判断结构（decision construct）和核心数据结构是什么？</li>
<li>哪些核心特性让这门语言与众不同？有些语言支持并发编程的高级特性，有些语言提供独一无二的高级结构</li>
<li>什么是意识流编程？你可能听说过”意识流”小说，意识流编程也是类似的概念！</li>
</ol>
<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><ol>
<li><p>Ruby出身于所谓的脚本语言家族，是一种解释型、面向对象、动态类型的语言；  </p>
</li>
<li><p>在Ruby中，一切皆为对象，就连每个单独的数字也不例外；   </p>
</li>
<li><p>Ruby中的true和false是一等对象（ first-class object），除了nil和false之外，其他值都代表true ；</p>
</li>
<li><p>=用于赋值，而==用于判断是否相等；</p>
</li>
<li><p>and（也可写为&amp;&amp;）是逻辑与， or（也可写为||）是逻辑或；</p>
</li>
<li><p>强类型语言会对某些操作进行类型检查，并在其造成破坏前加以阻止，Ruby是强类型语言；</p>
</li>
<li><p>关键字def定义一个函数，但不会执行它；</p>
</li>
<li><p>鸭子类型并不在乎其内在类型可能是什么。只要它像鸭子一样走路，像鸭子一样嘎嘎叫，那它就是只鸭子；</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鸭子模型</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">a=[<span class="string">'100'</span>,<span class="number">100.0</span>]</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">2</span></span><br><span class="line">    puts a[i].to_i</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原则：*<em>对接口编码，不对实现编码 *</em>；</p>
</li>
<li><p>每个函数都会返回结果,如果没有显式指定某个返回值，函数就将返回退出函数前最后处理的表达式的值,像所有其他事物一样，函数也是个对象；</p>
</li>
<li><p>数组是Ruby有序集合中的主力部队，如果访问任何未定义的数组元素，Ruby会直接返回nil；</p>
</li>
<li><p>散列表是键－值对，Ruby虽然不支持命名参数，但可以用散列表来模拟它；</p>
</li>
<li><p>代码块是没有名字的函数，可以作为参数传递给函数或方法，大括号之间的代码就称作代码块；</p>
</li>
<li><p>可以创建一个名为hello.rb的文件，其中包含任意你想执行的Ruby代码，然后使用ruby hello.rb来执行文件；</p>
</li>
<li><p>Ruby中的类只能继承自一个叫做超类的类</p>
</li>
</ol>
<h2 id="Io"><a href="#Io" class="headerlink" title="Io"></a>Io</h2><ol>
<li><h2 id="Prolog"><a href="#Prolog" class="headerlink" title="Prolog"></a>Prolog</h2></li>
<li></li>
</ol>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><ol>
<li><h2 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h2></li>
<li></li>
</ol>
<h2 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h2><ol>
<li>Clojure是JVM上的Lisp实现，Lisp复杂强大，是计算机领域里最早和最新的编程语言之一；</li>
<li>Clojure就是一种Lisp方言，受Lisp语言限制，但也拥有Lisp强大的力量，了解Clojure 要从了解Lisp开始；</li>
<li>Lisp是函数式语言，但不是纯函数式语言：<ul>
<li>Lisp是一种列表语言，函数调用时，取列表第一个元素作函数，列表其余元素作参数</li>
<li>Lisp使用自有数据结构表示代码，一些Lisp追随者称之为数据即代码（data as code）</li>
</ul>
</li>
<li>每一种Lisp方言都有其迎合的群体，对Clojure而言，最重要的特征之一就是JVM；</li>
<li>Clojure和Java谁也离不开谁，Lisp需要Java虚拟机所能提供的市场份额，而Java社区也需要注入新的活力，Clojure是一门函数式语言，强调函数无副作用；</li>
<li>Clojure支持强类型和动态类型，动态类型意味着类型在运行时求值；</li>
<li>多重方法支持多种编程范型的代码，而宏允许你动态地重定义语言；</li>
<li>如果需要一种极端的编程模型并且愿意付出学习语言的代价，Clojure非常合适！</li>
</ol>
<h2 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h2><ol>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>微服务架构之路</title>
    <url>/2020/07/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>架构之路从来都不是一条好走的路，需要长期的坚持，每天的持续学习！希望自己能在这个路上走下去，不会成为PPT架构师。真正地掌握技术，设计适合业务需求的架构。积累经验，拓宽视野，深度思考！程序员到架构师的技术成长之路分为几个典型的阶段：工程师 - 高级工程师 - 技术专家 -初级架构师 - 中级架构师 - 高级架构师。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础积累"><a href="#基础积累" class="headerlink" title="基础积累"></a>基础积累</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li>系统泛指由一群有关联的个体组成，根据某种规则运作，能完成个别元件不能单独完成的工作的群体；</li>
<li>子系统是由一群有关联的个体所组成的系统，多半会是更大系统中的一部分。一个系统可能是另外一个更大系统的子系统；</li>
<li>模块和组件都是系统的组成部分，只是从不同的角度拆分系统而已。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用：<ul>
<li>从逻辑的角度来拆分系统后，得到的单元就是“模块”</li>
<li>从物理的角度来拆分系统后，得到的单元就是“组件”</li>
</ul>
</li>
<li><strong>软件框架（Software framework）</strong>通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品；</li>
<li><strong>软件架构</strong>指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述；</li>
<li><strong>框架关注的是“规范”，架构关注 的是“结构”！</strong></li>
<li>软件架构指软件系统的顶层结构；框架是面向编程或配置的半成品；组件是从技术维度上的复用；模块是从 业务维度上职责的划分；系统是相互协同可运行的实体!</li>
<li>规模较大的软件系统可能面临软件架构相关的问题：<ul>
<li>系统规模庞大，内部耦合严重，开发效率低</li>
<li>系统耦合严重，牵一发动全身，后续修改和扩展困难</li>
<li>系统逻辑复杂，容易出问题，出问题后很难排查和修复</li>
</ul>
</li>
<li>软件开发过程包括了分析、设计、实现、测试、验证、部署、运维等多个环节。</li>
</ol>
<h3 id="Java-后端工程师基础技能"><a href="#Java-后端工程师基础技能" class="headerlink" title="Java 后端工程师基础技能"></a>Java 后端工程师基础技能</h3><ol>
<li>Java 的语法、基本数据结构的使用</li>
<li>Eclipse（或者IDEA）、Maven、Linux 命令行等各种工具</li>
<li>数据库 CRUD 操作、缓存的基本使用等</li>
<li>业务系统的基本流程</li>
<li>典型书籍：《Java 编程思想》《Java 核心技术》《TCP/IP 协议》等</li>
</ol>
<h3 id="高级工程师"><a href="#高级工程师" class="headerlink" title="高级工程师"></a>高级工程师</h3><ol>
<li>典型特征是“独立完成开发”，包括需求分析、方案设计、编码实现</li>
<li>MySQL 数据库表如何设计，是设计成两个表还是三个表？</li>
<li>是否要用缓存，缓存的 Key 和 Value 如何设计，缓存的更新策略是什么？</li>
<li>产品提出的需求是否合理？是否有更好的方式来满足？</li>
<li>需要“积累方案设计经验”，简单来说就是业务当前用到的相关技术的设计经验，比如Java后端需要积累表设计经验、缓存设计经验、业 务流程设计经验、接口设计经验等</li>
<li>数据库表设计的 3 个范式、面向对象的设计模式、SOLID 设计原则、缓存设计理论（缓存穿透、缓存雪崩、缓存热点）等</li>
<li>假设每个设计环节都有设计理论，然后带着这种假设去搜索验证看看是否真的有很熟的设计理念</li>
<li>典型书籍：《深入理解 Java 虚拟机》《MySQL 技术内幕：InnoDB 存储引擎》等</li>
</ol>
<h3 id="技术专家"><a href="#技术专家" class="headerlink" title="技术专家"></a>技术专家</h3><ol>
<li>典型的特征是“某个领域的专家”，只要是领域内的问题，技术专家都可以解决</li>
<li>技术专家会根据需要修改、扩展、优化架构</li>
<li>要想成为一个 Java 开发专家，需要掌握 Java 多线程、JDBC、Java 虚拟机、面向对象、设计模式、Netty、Elasticsearch、Memcache、Redis、MySQL 等众多技术</li>
<li>拓展技术宽度并不意味着仅仅只是知道一个技术名词，而是要深入去理解每个技术的原理、优缺点、应用场景，也需要了解每种技术的差异性</li>
</ol>
<h3 id="初级架构师"><a href="#初级架构师" class="headerlink" title="初级架构师"></a>初级架构师</h3><ol>
<li>典型特征就是能够“独立完成一个系统的架构设计”，可以是从 0 到 1 设计一个新系统，也可以是将架构从 1.0 重构到 2.0</li>
<li>架构师是基于完善的架构设计方法论的指导来进行架构设计，能够清晰地阐述架构设计的理由和原因</li>
<li>主要是形成自己的“架构设计方法论”，方法有：<ul>
<li>系统学习架构设计方法论，包括订阅专栏或者阅读书籍等</li>
<li>深入研究成熟开源系统的架构设计，聚焦于学习其架构设计原理和思想</li>
<li>结合架构设计方法论，分析和总结自己团队甚至公司的各种系统的架构设计优缺点，尝试思考架构重构方案</li>
</ul>
</li>
</ol>
<h3 id="中级架构师"><a href="#中级架构师" class="headerlink" title="中级架构师"></a>中级架构师</h3><ol>
<li>典型特征是“能够完成复杂系统的架构设计”，包含高性能、高可用、可扩展、海量存储等复杂系统</li>
<li>中级架构师面对的系统复杂度要高于初级架构师</li>
<li>关键的是“技术深度和技术理论的积累”：<ul>
<li>技术理论——CAP、BASE 是异地多活的设计理论基础、Paxos 是分布式一致性的基础算法、2PC、3PC 是分布式事务的基础算法等</li>
<li>技术深度——Kafka 用磁盘存储还能做到高效是因为磁盘顺序写；Disruptor 高性能是结合CPU预读取机制、缓存行、无锁设计等基础技术；Storm 的高效异或确认机制；Flink 的分布式快照算法等</li>
</ul>
</li>
</ol>
<h3 id="高级架构师"><a href="#高级架构师" class="headerlink" title="高级架构师"></a>高级架构师</h3><ol>
<li>典型特征是“创造新的架构模式”</li>
<li>高级架构师与中级架构师相比，典型区别在于“创造性”，高级架构师能够创造新的架构模式，开创新的技术潮流</li>
<li>可能诞生创造性架构的背景条件：<ul>
<li>足够复杂的业务场景</li>
<li>足够强大的技术团队</li>
<li>不满足于现状的态度</li>
<li>尊重技术价值的文化</li>
</ul>
</li>
<li>如果完全结果导向、KPI 导向，创新技术很可能在萌芽阶段就被否定</li>
</ol>
<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ol>
<li>成长：《异类》《随机漫步的傻瓜》《一万小时天才理论》《情商》《优秀到不能被忽视》《影响力大师》</li>
<li>技术：《UNIX 网络编程（卷 1）》《UNIX 环境高级编程》《Linux 系统编程》《TCP/IP 详解（卷 1）》《算法之美》《算法设计与应用》《Java 编程思想》《深入理解 Java 虚拟机》《C++ Primer》</li>
<li>业务：《增长黑客》《需求》《淘宝十年产品事》《定位》《宝洁制胜战略》</li>
</ol>
<h2 id="架构基础"><a href="#架构基础" class="headerlink" title="架构基础"></a>架构基础</h2><h3 id="为什么要架构设计"><a href="#为什么要架构设计" class="headerlink" title="为什么要架构设计"></a>为什么要架构设计</h3><ol>
<li>架构是为了应对软件系统复杂度而提出的一个解决方案！</li>
<li><strong>通过熟悉和理解需求，识别系统复杂性所在的地方，然后针对这些复杂点进行架构设计；</strong></li>
<li>架构师应该有的放矢，而不是贪大求全；</li>
<li>架构无优劣，但是存在恰当的架构用在合适的软件系统中，而这些就是决策的结果；</li>
<li>架构设计要贴合业务，找到适合能解决业务复杂度的设计，才是好的架构设计；<strong><em>一切脱离业务的架构设计都是耍流氓！</em></strong></li>
</ol>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ol>
<li>高性能，对性能孜孜不倦的追求是整个人类技术不断发展的根本驱动力；</li>
<li>通过任务分解的方式，能够把原来大一统但复杂的业务系统，拆分成小而简单但需要多个系统配合的业务系统：<ul>
<li>简单的系统更加容易做到高性能</li>
<li>可以针对单个任务进行扩展</li>
</ul>
</li>
<li>高性能带来的复杂度主要体现的两方面：<ul>
<li>单台计算机内部为了高性能带来的复杂度</li>
<li>多台计算机集群为了高性能带来的复杂度</li>
</ul>
</li>
<li>衡量软件性能包括了响应时间、TPS、服务器资源利用率等客观指标；</li>
<li>高可用，系统无中断地执行其功能的能力，代表系统的可用性程度；</li>
<li>高可用带来的复杂度主要体现如下：<ul>
<li>需要增加一个任务分配器，选择合适的任务分配器也是一件复杂的事情</li>
<li>任务分配器和真正的业务服务器之间有连接和交互，需要选择合适的连接方式，并且对连接进行管理</li>
<li>任务分配器需要增加分配算法。常见的双机算法有主备、主主，主备方案又可以细分为冷备、温备、热备</li>
</ul>
</li>
<li>对于需要存储数据的系统来说，整个系统的高可用设计关键点和难点就在于“存储高可用”；</li>
<li>无论采取什么样的方案，状态决策都不可能做到任何场景下都没有问题，但完全不做高可用方案又会产生更大的问题，如何选取适合系统的高可用方案，也是一个复杂的分析、判断和选择的过程；</li>
<li>高可用性就是技术实力的象征，高可用性就是竞争力！</li>
<li>可扩展性，为了应对将来需求变化而提供的一种扩展能力，当有新的需求出现时，系统不需要或者仅需要少量修改就可以支持，无须整个系统重构或者重建；</li>
<li>可扩展意味着预测，预测变化的复杂性在于：<ul>
<li>不能每个设计点都考虑可扩展性</li>
<li>不能完全不考虑可扩展性</li>
<li>所有的预测都存在出错的可能性</li>
</ul>
</li>
<li>可扩展带来两个主要的复杂性相关的问题：<ul>
<li>系统需要拆分出变化层和稳定层</li>
<li>需要设计变化层和稳定层之间的接口</li>
</ul>
</li>
<li>设计具备良好可扩展性的系统，有两个思考角度：<ul>
<li>从业务维度。对业务深入理解，对可预计的业务变化进行预测</li>
<li>从技术维度。利用扩展性好的技术，实现对变化的封装</li>
</ul>
</li>
<li>在实际软件系统架构设计中，常通过以下技术手段实现良好的可扩展性:<ul>
<li>使用分布式服务 (框架)构建可复用的业务平台</li>
<li>使用分布式消息队列降低业务模块间的耦合性</li>
</ul>
</li>
<li>低成本，需要减少服务器的数量才能达成低成本的目标，而且低成本本质上是与高性能和高可用冲突的；</li>
<li>一般中小公司基本都是靠引入新技术来达到低成本的目标；而大公司更有可能自己去创造新的技术来达到低成本的目标！</li>
<li>安全，可以分为两类：一类是功能上的安全，一类是架构上的安全；</li>
<li>常见的 XSS 攻击、CSRF 攻击、SQL 注入、Windows 漏洞、密码破解等出现是因为系统实现有漏洞，黑客有了可乘之机；</li>
<li>传统的架构安全主要依靠防火墙，防火墙最基本的功能就是隔离网络，通过将网络划分成不同的区域，制定出不同区域之间的访问控制策略来控制不同信任程度区域间传送的数据流!</li>
</ol>
<h3 id="架构设计三原则"><a href="#架构设计三原则" class="headerlink" title="架构设计三原则"></a>架构设计三原则</h3><ol>
<li>架构设计没有像编程语言那样的语法来进行约束，更多的时候是面对多种可能性时进行选择！</li>
<li>架构设计遵循如下原则，将有助于做出最好的选择：<ul>
<li><strong>合适原则</strong></li>
<li><strong>简单原则</strong></li>
<li><strong>演化原则</strong></li>
</ul>
</li>
<li>合适优于业界领先，真正优秀的架构都是在企业当前人力、条件、业务等各种约束下设计出来的，能够合理地将资源整合在一起并发挥出最大功效，并且能够快速落地才是真正的合适；</li>
<li>挑战和踩坑都是架构设计非常关键的促进因素，单纯靠拍脑袋或者头脑风暴，是不可能和真正实战相比的！</li>
<li>简单优于复杂，在软件领域复杂代表的不是优秀而是问题。毕竟定位一个复杂系统中的问题总是比简单系统更加困难；</li>
<li>演化优于一步到位，软件架构需要根据业务的发展而不断变化；</li>
<li>软件架构设计流程：<ol>
<li>设计出来的架构要满足当时的业务需要；</li>
<li>架构要不断地在实际应用过程中迭代，保留优秀的设计，修复有缺陷的设计，改正错误的设计，去掉无用的设计，使得架构逐渐完善</li>
<li>当业务发生变化时，架构要扩展、重构，甚至重写。代码也许会重写，但有价值的经验、教训、逻辑、设计等（类似生物体内的基因）却可以在新架构中延续</li>
</ol>
</li>
<li>合适优于先进&gt;演化优于一步到位&gt;简单优于复杂！</li>
<li>需求驱动技术的创新演化；技术反哺业务的发展升级。</li>
</ol>
<h2 id="架构设计流程"><a href="#架构设计流程" class="headerlink" title="架构设计流程"></a>架构设计流程</h2><h3 id="识别复杂度"><a href="#识别复杂度" class="headerlink" title="识别复杂度"></a>识别复杂度</h3><ol>
<li>只有正确分析出了系统的复杂性，后续的架构设计方案才不会偏离方向；</li>
<li>架构的复杂度主要来源于“高性能”“高可用”“可扩展”等几个方面，在具体判断复 杂性的时候，不能生搬硬套；</li>
<li>消息队列系统可以完成子系统的解耦；</li>
<li>消息队列的复杂性主要体现在：<ul>
<li>高性能消息读取</li>
<li>高可用消息写入</li>
<li>高可用消息存储</li>
<li>高可用消息读取</li>
</ul>
</li>
<li><strong>nginx负载均衡性能是3万左右；mc的读取性能5万左右；kafka号称百万级；zookeeper写入读取2万以上；http请求访问大概在2万左右；</strong></li>
<li>系统复杂性的分析流程：<ol>
<li>构建复杂度的来源清单——高性能、可用性、扩展性、安全、低成本、规模等</li>
<li>结合需求、技术、团队、资源等对上述复杂度逐一分析是否需要？是否关键？</li>
<li>按照上述的分析结论，得到复杂度按照优先级的排序清单，越是排在前面的复杂度，就越关键，就越优先解决</li>
</ol>
</li>
<li>架构师需要五项能力：<ul>
<li>技术</li>
<li>沟通</li>
<li>推动</li>
<li>管理</li>
<li>撕逼</li>
</ul>
</li>
</ol>
<h3 id="设计备选方案"><a href="#设计备选方案" class="headerlink" title="设计备选方案"></a>设计备选方案</h3><ol>
<li>成熟的架构师需要对已经存在的技术非常熟悉，对已经经过验证的架构模式烂熟于心，然后根据自己对业务的理解，挑选合适的架构模式进行组合，再对组合后的方案进行修改和调整；</li>
<li>成熟的技术（部分）：<ul>
<li>NoSQL，Key-Value 的存储和数据库的索引其实是类似的，Memcache 只是把数据库的索引独立出来做成了一个缓存系统</li>
<li>Hadoop ，大文件存储方案，基础其实是集群方案 + 数据复制方案</li>
<li>Docker 虚拟化，基础是 LXC（Linux Containers）</li>
<li>LevelDB ，文件存储结构是 Skip List</li>
</ul>
</li>
<li>架构师需要设计多个备选方案，备选方案的数量以 3 ~ 5 个为最佳而且备选方案的差异要比较明显；当然备选方案的技术不要只局限于已经熟悉的技术；</li>
<li>备选阶段关注的是技术选型，而不是技术细节，技术选型的差异要比较明显！</li>
<li>架构设计备选方案的 工作更多的是从需求、团队、技术、资源等综合情况出发，对主流、成熟的架构模式进行选择、组合、调整、创新。</li>
</ol>
<h3 id="评估和选择备选方案"><a href="#评估和选择备选方案" class="headerlink" title="评估和选择备选方案"></a>评估和选择备选方案</h3><ol>
<li>列出我们需要关注的质量属性点，然后分别从这些质量属性的维度去评估每个方案，再综合挑选适合当时情况的最优方案；</li>
<li>常见的方案质量属性点有：<ul>
<li>性能</li>
<li>可用性</li>
<li>硬件成本</li>
<li>项目投入</li>
<li>复杂度</li>
<li>安全性</li>
<li>可扩展性等</li>
</ul>
</li>
<li>没有哪个方案是完美的，极少出现某个方案在所有对比维度上都是最优的；</li>
<li>架构师综合当前的业务发展情况、团队人员规模和技能、业务发展预测等因素，将质量属性按照优先级排序，首先挑选满足第一优先级的，如果方案都满足，那就再看第二优先级……以此类推。</li>
</ol>
<h3 id="详细方案设计"><a href="#详细方案设计" class="headerlink" title="详细方案设计"></a>详细方案设计</h3><ol>
<li>详细方案设计就是将方案涉及的关键技术细节给确定下来；</li>
<li>架构师不但要进行备选方案设计和选型，还需要对备选方案的关键细节有较深入的理解；</li>
<li>通过分步骤、分阶段、分系统等方式，尽量降低方案复杂度，方案本身的复杂度越高，某个细节推翻整个方案的可能性就越高，适当降低复杂性，可以减少这种风险；</li>
<li>Nginx 的负载均衡策略：<ul>
<li>轮询（默认）——每个请求按时间顺序逐一分配到不同的后端服务器，后端服务器分配的请求数基本一致，如果后端服务器“down 掉”，能自动剔除</li>
<li>加权轮询——根据权重来进行轮询，权重高的服务器分配的请求更多，主要适应于后端服务器性能不均的情况，如新老服务器混用</li>
<li>ip_hash——每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，主要用于解决 session 的问题，如购物车类的应用</li>
<li>fair——按后端服务器的响应时间来分配请求，响应时间短的优先分配，能够最大化地平衡各后端服务器的压力，可以适用于后端服务器性能不均衡的情况，也可以防止某台后端服务器性能不足的情况下还继续接收同样多的请求从而造成雪崩效应</li>
<li>url_hash——按访问 URL 的 hash 结果来分配请求，每个 URL 定向到同一个后端服务器，适用于后端服务器能够将 URL 的响应结果缓存的情况</li>
</ul>
</li>
<li>细化更多的设计点：<ul>
<li>数据库表如何设计</li>
<li>数据如何复制</li>
<li>主备服务器如何倒换</li>
<li>业务服务器如何写入消息</li>
<li>业务服务器如何读取消息</li>
<li>业务服务器和消息队列服务器之间的通信协议如何设计</li>
</ul>
</li>
<li>技术存在就是合理的，只是每个有每个技术的使用点，架构师应该对常见的技术栈原理非常清楚，知道什么时候应该使用什么技术；</li>
<li>架构师不仅需要广度还需要深度，不能仅仅停留在PPT上！</li>
</ol>
<h2 id="成熟模式"><a href="#成熟模式" class="headerlink" title="成熟模式"></a>成熟模式</h2><h3 id="高性能数据库-读写分离"><a href="#高性能数据库-读写分离" class="headerlink" title="高性能数据库-读写分离"></a>高性能数据库-读写分离</h3><ol>
<li>做架构设计主要都是基于已有的成熟模式，结合业务和团队的具体情况，进行一定的优化或者调整；</li>
<li>关系数据库由于其 ACID 的特性和功能强大的 SQL 查询，目前还是各种业务系统中关键和核心的存储系统，很多场景下高性能的设计最核心的部分就是关系数据库的设计；</li>
<li>海量用户加上海量数据导致单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能；</li>
<li>高性能数据库集群的模式有：<ul>
<li>读写分离——将访问压力分散到集群中的多个节点，但是没有分散存储压力</li>
<li>分库分表——既可以分散访问压力，又可以分散存储压力</li>
</ul>
</li>
<li>读写分离的基本实现：<ul>
<li>数据库服务器搭建主从集群，一主一从、一主多从都可以</li>
<li>数据库主机负责读写操作，从机只负责读操作</li>
<li>数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据</li>
<li>业务服务器将写操作发给数据库主机，将读操作发给数据库从机</li>
</ul>
</li>
<li>读写分离导致的问题主要是复制延迟，解决主从复制延迟的常见方法：<ul>
<li>写操作后的读操作指定发给数据库主服务器</li>
<li>读从机失败后再读一次主机</li>
<li>关键业务读写操作全部指向主机，非关键业务采用读写分离</li>
</ul>
</li>
<li>不是说一有性能问题就上读写分离，而是应该先优化，例如优化慢查询，调整不合理的业务逻辑，引入缓存等，只有确定系统没有优化空间后，才考虑读写分离或者集群；</li>
</ol>
<h3 id="高性能数据库集群：分库分表"><a href="#高性能数据库集群：分库分表" class="headerlink" title="高性能数据库集群：分库分表"></a>高性能数据库集群：分库分表</h3><ol>
<li>当数据量达到千万甚至上亿条的时候，单台数据库服务器的存储能力会成为系统的瓶颈，主要体现在这几个方面：<ul>
<li>数据量太大，读写的性能会下降，即使有索引，索引也会变得很大，性能同样会下降</li>
<li>数据文件会变得很大，数据库备份和恢复需要耗费很长时间</li>
<li>数据文件越大，极端情况下丢失数据的风险越高</li>
</ul>
</li>
<li>单个数据库服务器存储的数据量不能太大，需要控制在一定的范围内；</li>
<li>分散存储的方法“分库分表”包含了“分库”和“分表”：<ul>
<li>业务分库——按照业务模块将数据分散到不同的数据库服务器</li>
<li>垂直分表和水平分表——垂直分表适合将表中某些不常用且占了大量空间的列拆分出去；水平分表适合表行数特别大的表</li>
</ul>
</li>
<li>优化流程：<ol>
<li>做硬件优化</li>
<li>先做数据库服务器的调优操作，例如增加索引</li>
<li>引入缓存技术，减少数据库压力</li>
<li>程序与数据库表优化，重构</li>
<li>在这些操作都不能大幅度优化性能的情况下，不能满足将来的发展，再考虑分库分表</li>
</ol>
</li>
<li>分库分表的实施前提：<ul>
<li>数据库存在性能问题，且用加索引、慢查询优化、缓存和读写分离都无法彻底解决问题</li>
<li>复杂查询对应的单表数据量级一般超过千万以上，或简单查询的单表数据量级一般超过5000万以上</li>
<li>对一致性要求不是特别高，只要求最终一致性</li>
<li>用hadoop等大数据技术因为业务需求、技术成本、时间成本无法解决该问题</li>
<li>业务对数据的操作主要集中在某些字段上，比较适合垂直分表</li>
<li>业务对数据的操作在整个表层面较均匀分布，适合水平分表</li>
</ul>
</li>
<li>遵循演化原则，业务真正发展起来再考虑分库分表，否则就疲于维护的复杂度等等！</li>
</ol>
<h3 id="非关系型数据库NoSQL"><a href="#非关系型数据库NoSQL" class="headerlink" title="非关系型数据库NoSQL"></a>非关系型数据库NoSQL</h3><ol>
<li>常见的 NoSQL按照类型分类有：<ul>
<li>K-V 存储——解决关系数据库无法存储数据结构的问题，以 Redis 为代表</li>
<li>文档数据库——解决关系数据库强 schema 约束的问题，以 MongoDB 为代表</li>
<li>列式数据库——解决关系数据库大数据场景下的 I/O 问题，以 HBase 为代表</li>
<li>全文搜索引擎——解决关系数据库的全文搜索性能问题，以 Elasticsearch 为代表</li>
</ul>
</li>
<li>Redis 的缺点主要体现在并不支持完整的 ACID 事务，Redis 虽然提供事务功能，但 Redis 的事务和关系数据库的事务不可同日而语，Redis 的事务只能保证隔离性和一致性（I 和 C），无法保证原子性和持久性（A 和 D）；</li>
<li>文档数据库最大的特点就是 no-schema，可以存储和读取任意的数据。目前绝大部分文档数据库存储的数据格式是 JSON（或者 BSON）；</li>
<li>列式数据库就是按照列来存储数据的数据库：<ul>
<li>业务同时读取多个列时效率高</li>
<li>能够一次性完成对一行中的多个列的写操作，保证了针对行数据写操作的原子性和一致性</li>
<li>列式存储具备更高的存储压缩比，能够节省更多的存储空间</li>
<li>列式存储应用在离线的大数据分析和统计场景中</li>
</ul>
</li>
<li>全文搜索的条件可以随意排列组合，如果通过索引来满足，则索引的数量会非常多；全文搜索的模糊匹配方式，索引无法满足，只能用 like 查询，而 like 查询是整表扫描，效率非常低；</li>
<li>全文搜索引擎的技术原理被称为“倒排索引”（Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，其基本原理是建立单词到文档的索引；</li>
<li>NoSQL数据库的选型指标：数据量、并发量、实时性、一致性要求、读写分布和类型、安全性、运维性等；</li>
<li>需求驱动架构，无论选用RDB/NoSQL/DRDB，一定是以需求为导向，最终的数据存储方案也必然是各种权衡的设计妥协！</li>
</ol>
<h3 id="高性能缓存架构"><a href="#高性能缓存架构" class="headerlink" title="高性能缓存架构"></a>高性能缓存架构</h3><ol>
<li>在某些复杂的业务场景下，单纯依靠存储系统的性能提升不够的，典型的场景有：<ul>
<li>需要经过复杂运算后得出的数据，存储系统无能为力</li>
<li>读多写少的数据，存储系统有心无力</li>
</ul>
</li>
<li>缓存基本原理是将可能重复使用的数据放到内存中，一次生成、多次使用，避免每次使用都去访问存储系统；</li>
<li>缓存穿透——缓存没有发挥作用，业务系统虽然去缓存查询数据，但缓存中没有数据，业务系统需要再次去存储系统查询数据；</li>
<li>缓存雪崩——当缓存失效（过期）后引起系统性能急剧下降的情况；</li>
<li>缓存雪崩的常见解决方法有更新锁机制和后台更新机制：<ul>
<li>对缓存更新操作进行加锁保护，保证只有一个线程能够进行缓存更新，未能获取更新锁的线程要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。分布式集群的业务系统要实现更新锁机制，需要用到分布式锁，如 ZooKeeper</li>
<li>由后台线程来更新缓存，而不是由业务线程来更新缓存，缓存本身的有效期设置为永久，后台线程定时更新缓存</li>
</ul>
</li>
<li>缓存热点的解决方案就是复制多份缓存副本，将请求分散到多个缓存服务器上，减轻缓存热点导致的单台缓存服务器压力；</li>
<li>对于缓存雪崩问题采取双key策略：要缓存的key过期时间是t，key1没有过期时间。每次缓存读取不到key时就返回key1的内容，然后触发一个事件。这个事件会同时更新key和key1！</li>
</ol>
<h3 id="单服务器高性能"><a href="#单服务器高性能" class="headerlink" title="单服务器高性能"></a>单服务器高性能</h3><ol>
<li>高性能架构设计主要集中在两方面：<ul>
<li>尽量提升单服务器的性能，将单服务器的性能发挥到极致</li>
<li>如果单服务器无法支撑性能，设计服务器集群方案</li>
</ul>
</li>
<li>单服务器高性能的关键之一就是服务器采取的并发模型，设计要点（都和操作系统的 I/O 模型及进程模型相关）：<ul>
<li>服务器如何管理连接</li>
<li>服务器如何处理请求</li>
</ul>
</li>
<li>PPC（Process Per Connection）指每次有新的连接就新建一个进程去专门处理这个连接的请求，这是传统的 UNIX 网络服务器所采用的模型；</li>
<li>TPC（Thread Per Connection）指每次有新的连接就新建一个线程去专门处理这个连接的请求；</li>
</ol>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol>
<li>集群设计的复杂度主要体现在任务分配这部分，需要设计合理的任务分配策略，将计算任务分配到多台服务器上执行；</li>
<li>任务分配器也称为“负载均衡器”，不只是为了计算单元的负载达到均衡状态；</li>
<li>负载均衡有DNS 负载均衡、硬件负载均衡和软件负载均衡：<ul>
<li>DNS 负载均衡——一般用来实现地理级别的均衡，本质是 DNS 解析同一个域名可以返回不同的 IP 地址</li>
<li>硬件负载均衡——通过单独的硬件设备来实现负载均衡功能，目前业界典型的硬件负载均衡设备有F5 和A10</li>
<li>软件负载均衡通过负载均衡软件来实现负载均衡功能，常见的有 Nginx 和 LVS，其中 Nginx 是软件的 7 层负载均衡，LVS 是 Linux 内核的 4 层负载均衡</li>
</ul>
</li>
<li><strong>DNS 负载均衡用于实现地理级别的负载均衡；硬件负载均衡用于实现集群级别的负载均衡；软件负载均衡用于实现机器级别的负载均衡！</strong></li>
<li>负载均衡算法分类：<ul>
<li>任务平分类——将收到的任务平均分配给服务器进行处理</li>
<li>负载均衡类——根据服务器的负载来进行分配</li>
<li>性能最优类——根据服务器的响应时间来进行任务分配，优先将新任务分配给响应最快的服务器</li>
<li>Hash 类——负载均衡系统根据任务中的某些关键信息进行 Hash 运算，将相同 Hash 值的请求分配到同一台服务器上</li>
</ul>
</li>
</ol>
<h2 id="架构之路"><a href="#架构之路" class="headerlink" title="架构之路"></a>架构之路</h2><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><ol>
<li>对于一个分布式计算系统，不可能同时满足一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三个设计约束。只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲；</li>
<li>一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果；</li>
<li>可用性（Availability）：非故障的节点在合理的时间内返回合理的响应（不是错误和超时的响应）；</li>
<li>分区容忍性（Partition Tolerance）：当出现网络分区后，系统能够继续“履行职责”；</li>
<li>分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构！</li>
<li>CAP 关注的粒度是数据，而不是整个系统；</li>
<li>CAP 是忽略网络延迟的；</li>
<li>正常运行情况下，不存在 CP 和 AP 的选择，可以同时满足 CA；</li>
<li>放弃并不等于什么都不做，需要为分区恢复后做准备；</li>
</ol>
<h3 id="FMEA方法"><a href="#FMEA方法" class="headerlink" title="FMEA方法"></a>FMEA方法</h3><ol>
<li><p>高可用较高性能更复杂些，主要在于异常的场景很多，只要有一个场景遗漏，架构设计就存在可用性隐患；</p>
</li>
<li><p>可能出错的事情最终都会出错，架构隐患总有一天会导致系统故障；</p>
</li>
<li><p>FMEA（Failure mode and effects analysis，故障模式与影响分析）是一种在各行各业都有广泛应用的可用性分析方法，通过对系统范围内潜在的故障模式加以分析，并按照严重程度进行分类，以确定失效对于系统的最终影响；</p>
</li>
<li><p><strong>FMEA 是一套分析和思考的方法，而不是某个领域的技能或者工具！</strong></p>
</li>
<li><p>在架构设计领域，FMEA 的具体分析方法：</p>
<ul>
<li>给出初始的架构设计图</li>
<li>假设架构中某个部件发生故障</li>
<li>分析此故障对系统功能造成的影响</li>
<li>根据分析结果，判断架构是否需要进行优化</li>
</ul>
</li>
<li><p>FMEA分析方法就是使用一个FMEA分析表，该表格包含了功能点、故障模式、故障影响、严重程度、故障原因、故障概率、风险程度、已有措施、规避措施、解决措施、后续规划：</p>
<ul>
<li>功能点是从用户的角度来描述的，而不是从系统各个模块功能点划分来描述的。比如对于一个用户管理系统，使用 FMEA 分析时 “登录”“注册”才是功能点，而用户管理系统中的数据库存储功能、Redis 缓存功能不能作为FMEA 分析的功能点</li>
<li>故障模式是系统会出现什么样的故障，包括故障点和故障形式。只需要假设出现某种故障现象即可，注意描述要尽量精确，多使用量化描述，避免使用泛化的描述</li>
<li>故障影响是当发生故障模式中描述的故障时，功能点具体会受到什么影响。要尽量精确</li>
<li>严重程度是站在业务的角度故障的影响程度，一般分为“致命 / 高 / 中 / 低 / 无”五个档次（存在争议）</li>
<li>故障原因是在于不管什么故障原因，故障现象相同，对功能点的影响就相同</li>
<li>故障概率是指某个具体故障原因发生的概率</li>
<li>风险程度是综合严重程度和故障概率来一起判断某个故障的最终等级</li>
<li>已有措施是针对具体的故障原因，系统现在是否提供了某些措施来应对，包含检测告警、容错、自恢复等</li>
<li>规避措施是为了降低故障发生概率而做的一些事情，可以是技术手段，也可以是管理手段</li>
<li>解决措施是为了能够解决问题而做的一些事情，一般都是技术手段</li>
<li>后续规划可以是技术手段，也可以是管理手段；可以是规避措施，也可以是解决措施</li>
</ul>
</li>
<li><p>FMEA分析表样例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3a3685cab4febda9cf4dbb45b7b077c2-402733" alt="FMEA分析表"></p>
</li>
<li><p>经过多年的演进FMEA从定性和定量两个维度分别延伸出了FMECA和FMEDA；</p>
</li>
</ol>
<h3 id="存储双机架构模式"><a href="#存储双机架构模式" class="headerlink" title="存储双机架构模式"></a>存储双机架构模式</h3><ol>
<li>存储高可用方案的本质都是通过将数据复制到多个存储设备，通过数据冗余的方式来实现高可用，其复杂性主要体现在如何应对复制延迟和中断导致的数据不一致问题；</li>
<li>常见的高可用存储架构有主备、主从、主主、集群、分区；</li>
<li>主备复制是最常见也是最简单的一种存储高可用方案，几乎所有的存储系统都提供了主备复制的功能；</li>
<li>主从复制是主机负责读写操作，从机只负责读操作，不负责写操作；</li>
<li>双机切换是系统自动决定主机角色，并完成角色切换；</li>
<li>中介式指的是在主备两者之外引入第三方中介，主备机之间不直接连接，而都去连接中介，并且通过中介来传递状态信息；</li>
<li>主主复制指的是两台机器都是主机，互相将数据复制给对方，客户端可以任意挑选其中一台机器进行读写操作！</li>
<li>集群就是多台机器组合在一起形成一个统一的系统；</li>
<li>目前开源的数据集中集群以 ZooKeeper 为典型，ZooKeeper 通过 ZAB 算法来解决上述提到的几个问题，但 ZAB 算法的复杂度是很高的；</li>
<li>如果采用远距离集群，网络抖动和延时就会对整个集群性能造成影响！</li>
</ol>
<h3 id="异地多活（很难）"><a href="#异地多活（很难）" class="headerlink" title="异地多活（很难）"></a>异地多活（很难）</h3><ol>
<li>如果业务期望达到即使在此类灾难性故障的情况下，业务也不受影响，或者在几分钟内就能够很快恢复，那么就需要设计<strong>异地多活架构</strong>！</li>
<li>异地多活架构中的异地是指地理位置上不同的地方；多活指不同地理位置上的系统都能够提供业务服务；</li>
<li>异地多活架构标准：<ul>
<li>正常情况下，用户无论访问哪一个地点的业务系统，都能够得到正确的业务服务</li>
<li>某个地方业务异常的时候，用户访问其他地方正常的业务系统，能够得到正确的业务服务</li>
</ul>
</li>
<li>异地多活代价很高：<ul>
<li>系统复杂度会发生质的变化，需要设计复杂的异地多活架构</li>
<li>成本会上升，毕竟要多在一个或者多个机房搭建独立的一套业务系统</li>
</ul>
</li>
<li>按照地理位置上的距离划分，异地多活架构可以分为同城异区、跨城异地、跨国异地；</li>
<li>异地多活的主要目的还是为了容灾。</li>
<li>异地多活技巧（采用多种手段，保证绝大部分用户的核心业务异地多活）：<ul>
<li>保证核心业务的异地多活</li>
<li>保证核心数据最终一致性</li>
<li>采用多种手段同步数据</li>
<li>只保证绝大部分用户的异地多活</li>
</ul>
</li>
<li>跨城异地多活架构设计步骤：<ol>
<li>业务分级——按照一定的标准将业务进行分级，挑选出核心业务</li>
<li>数据分类——对核心业务相关的数据进一步分析，在于识别所有的数据以及数据特征</li>
<li>数据同步——根据不同的数据设计不同的同步方案</li>
<li>异常处理——一旦出现极端异常的情况，总是会有部分数据出现异常的，在出现问题时采取什么措施来应对</li>
</ol>
</li>
</ol>
<h2 id="可扩展架构（传统）"><a href="#可扩展架构（传统）" class="headerlink" title="可扩展架构（传统）"></a>可扩展架构（传统）</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol>
<li>软件系统的可扩展性是魅力所在，也是难点所在；</li>
<li>基本思想是将原来大一统的系统拆分成多个规模小的部分，扩展时只修改其中一部分即可，无须整个系统到处都修改，通过这种方式来减少改动范围，降低改动风险；</li>
<li>常见的拆分思路有（流程&gt;服务&gt;功能）：<ul>
<li>面向流程拆分——将整个业务流程拆分为几个阶段</li>
<li>面向服务拆分——将系统提供的服务拆分，每个服务作为一部分</li>
<li>面向功能拆分——将系统提供的功能拆分，每个功能作为一部分</li>
</ul>
</li>
<li>不同的拆分方式，本质上决定了系统的扩展方式。根据拆分方式，典型的可扩展系统架构有：<ul>
<li>流程——分层架构</li>
<li>服务——SOA、微服务</li>
<li>功能——微内核架构</li>
</ul>
</li>
</ol>
<h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><ol>
<li>分层架构也称为N层架构，根据不同的划分维度和对象，可以得到多种不同的分层架构；</li>
<li>C/S架构、B/S架构划分的对象是整个业务系统，划分的维度是用户交互，即将和用户交互的部分独立为一层；</li>
<li>MVC架构、MVP架构划分的对象是单个业务子系统，划分的维度是职责，将不同的职责划分到独立层，但是各层的依赖关系比较灵活；</li>
<li>逻辑分层架构划分的对象可以是单个业务子系统，也可以是整个业务系统，划分的维度也是职责。典型的有操作系统内核架构、TCP/IP架构、J2EE系统架构；</li>
<li>分层架构设计最核心的就是需要<strong>保证各层之间的差异足够清晰，边界足够明显，让人看到架构图之后就能看懂整个架构！</strong></li>
<li>分层架构设计的本质是隔离关注点，即每个层中的组件只会处理本层的逻辑。比如说，展示层只需要处理展示逻辑、业务层只需要处理业务逻辑；</li>
<li>分层架构的系统的特点就是层层传递，一旦层级确定，整个业务流程就按照层进行依次传递，不能在层之间进行跳跃。<strong>强制将分层依赖限定为两两依赖</strong>，降低了整体系统的复杂度；</li>
<li>分层架构的缺点就是性能，因为每一次业务请求都需要穿透所有的架构分层，有些是多于的，多少都会有点性能浪费！</li>
</ol>
<h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><ol>
<li>SOA（Service Oriented Architecture，面向服务的架构）在很多企业成功推广，但是在互联网行业没有大规模地实践和推广；</li>
<li>ESB（Enterprise Service Bus，企业服务总线）将企业中各个不同的服务连接在一起。SOA使用ESB来屏蔽异构系统对外提供各种不同的接口方式，以此来达到服务间高效的互联互通；</li>
<li>采用SOA架构之后，各个服务是相互独立运行的，甚至不清楚某个服务到底有多少对其他服务的依赖；</li>
<li>ESB需要实现与各种系统之间的协议转换、数据转换、透明的动态路由等功能。但是要完成协议和数据格式的互相转换，工作量和复杂度都很大，而且这些转换是需要耗费大量计算性能的，如果承载的消息太多时，可能会是整个系统的性能瓶颈；</li>
<li>ESB的存在实属无奈，但是企业在应用SOA时，各种异构的IT系统都已经存在很多年了，完全重写或者按照统一标准进行改造的成本是非常大的，只能通过ESB方式去适配已经存在的各种异构系统！</li>
</ol>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li>微服务和SOA是两种不同的架构设计理念，只是在“服务”这个点上有点交集；</li>
<li>SOA适合于庞大、复杂、异构的企业级系统；而微服务适合于快速、轻量级、基于Web的互联网系统；</li>
<li>微服务需要考虑的问题：<ul>
<li>服务划分过细，服务间关系复杂</li>
<li>服务数量太多，团队效率急剧下降</li>
<li>调用链太长，性能下降</li>
<li>调用链太长，问题定位困难</li>
<li>没有自动化的支持，无法快速交付</li>
<li>没有服务治理，微服务数量多了后管理混乱</li>
</ul>
</li>
<li>转型微服务的建议：<ul>
<li>建设好基础设施，RPC、服务治理、日志、监控、持续集成、持续部署、运维自动化是基本的，还包括服务编排、分布式追踪等</li>
<li>逐步演进和迭代，不能过于激进，更不能拆分过细，拆分的粒度要与团队的架构相互匹配</li>
<li>微服务与数据库要一起拆分</li>
</ul>
</li>
<li>使用微服务暴露出来的问题：<ul>
<li>个别服务没有进行熔断，容易出现雪崩效应</li>
<li>服务拆分过细，服务调用链过长</li>
<li>开发人员能力不一样，代码水平不一样</li>
<li>没有监控措施</li>
<li>每个服务部署多台，日志查询极其恶心</li>
<li>开发过程中经常出现访问不到需要访问的接口，因为开发人员经常启动本地服务</li>
<li>使用了不合理的持久层框架</li>
</ul>
</li>
<li>避免的陷阱：<ul>
<li>微服务拆分过细，过分强调“small”</li>
<li>微服务基础设施不健全，忽略了“automated”</li>
<li>微服务并不轻量，规模扩大了后，“lightweight”不再适用</li>
</ul>
</li>
</ol>
<h3 id="微服务方法"><a href="#微服务方法" class="headerlink" title="微服务方法"></a>微服务方法</h3><ol>
<li>一个微服务三个人负责开发，当团队扩大时，再将已有的微服务进行拆分。三个人负责开发一个系统，系统的复杂度刚好达到每个人都能全面理解整个系统，又能够进行分工的粒度。三个人的技术小组能够形成有效的讨论，又能快速达成一致意见；</li>
<li>常见的拆分方式：<ul>
<li>基于业务逻辑拆分——每个单独的业务模块拆分为一个独立的服务</li>
<li>基于可扩展拆分——将系统中的业务模块按照稳定性排序，将已经成熟和改动不大的服务拆分为稳定服务，经经常变化和迭代的服务拆分为变动服务</li>
<li>基于可靠性拆分——将系统中的业务模块按照优先级排序，将可靠性要求高的核心服务和可靠性要求低的非核心服务拆分开来，然后重点保障核心服务的高可用</li>
<li>基于性能拆分——将性能要求高或者性能压力大的模块拆分出来，避免性能压力大的服务影响其他服务</li>
</ul>
</li>
<li>要做好微服务，像服务发现、服务路由、服务容错、服务监控、服务跟踪、服务安全、自动化测试、自动化部署、配置中心、接口框架、API网关等基础设施都是比不可少的，否则微服务就会变成一个焦油坑，让业务和团队在里面不断挣扎而且无法自拔。微服务基础设施部署优先级：<ul>
<li>服务发现、服务路由、服务容错为第一优先级</li>
<li>接口框架、API网关为次优先级</li>
<li>自动化部署、自动化测试、配置中心再次一级</li>
<li>服务监控、服务跟踪、服务安全最后考虑</li>
</ul>
</li>
<li>开发环境也是也可以搭建微服务，一般建议三套环境：开发、测试、线上；</li>
<li>接口框架可以通过gRPC之类的制定自己的数据规范；</li>
<li>对于APP多版本共存问题，要么接口向后兼容，要么接口加多版本号；</li>
<li>每项微服务基础设施都是一个平台、一个系统、一个解决方案，如果需要实现，其过程和业务系统类似，需要经过需求分析、架构设计、开发、测试、部署上线等步骤；</li>
<li>微服务提倡快速交付、版本周期短、版本更新频繁，需要通过自动化测试系统来完成绝大部分测试回归的工作，包含了代码级别的单元测试、单个系统级的集成测试、系统间的接口测试，如果无法做到全面覆盖，则只要要做到接口测试自动化；</li>
<li>自动化部署系统包含版本管理、资源管理、部署操作、回退操作等功能；</li>
<li>微服务需要一个统一的配置中心来管理所有微服务节点的配置；</li>
<li>常见的路由算法有：随机路由、轮询路由、最小压力路由、最小连接数路由等；</li>
<li>常见的服务容错处理有：请求重试、流控和服务隔离；</li>
</ol>
<h3 id="微服务使用经验"><a href="#微服务使用经验" class="headerlink" title="微服务使用经验"></a>微服务使用经验</h3><ol>
<li><strong>邮件发送</strong>是一个耗时操作，可以直接使用多线程，但是不易扩展，无法解耦，用过就知道这有多么不方便了。引入 RabbitMQ 之后，有效的实现了系统的解耦，在未来可能有更多的地方需要发送邮件、短信等，把这些邮件发送、短信发送的服务拎出来做成单独的服务，扩展起来更加方便！</li>
<li>RabbitMQ 虽然用着方便，有很多优势，但是也带来了很多问题，例如网络抖动怎么办？如何确保消息的可靠性？在理想的环境下这些问题都不存在，但是在复杂的生产环境中，什么都是有可能的，因此如何解决这些问题是非常关键的。</li>
</ol>
<h2 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h2><h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li>微内核架构（Microkernel Architecture）也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展架构，通常用于实现基于产品的应用；</li>
<li>微内核架构包含两类组件：核心系统（Core System）和插件模块（Plug-in modules）。核心系统负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等；插件模块负责实现具体的业务逻辑；</li>
<li>微内核架构的本质就是将变化部分封装在插件里，从而达到快速扩展的目的，而又不会影响系统的稳定性；</li>
</ol>
<h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ol>
<li>关键技术有插件管理、插件连接以及插件通信：<ul>
<li>插件管理——负责管理插件、常见的实现方式是插件注册表机制。插件注册表包含每个插件模块的信息，比如名字、位置、加载时机等</li>
<li>插件连接——插件如何连接到核心系统，需要制定连接规范，然后插件按照规范来实现，核心系统按照规范来加载即可</li>
<li>插件通信——负责插件间的通信</li>
</ul>
</li>
<li>OSGi是一个为了建立开放的服务规范的组织，制定了通过网络向设备提供服务建立开发的标准，称为OSGi specification；</li>
<li>OSGi标准是目前的首选插件化标准；</li>
<li>规则引擎架构从结构上来看也属于微内核架构的一种具体实现，其中执行引擎可以看作是微内核、执行引擎解析配置好的业务流，执行其中的条件和规则，通过这种方式来支持业务的灵活多变。规则引擎在计费、保险、促销等业务领域应用较多；主要优势在于：<ul>
<li>可扩展</li>
<li>易理解</li>
<li>高效率</li>
</ul>
</li>
<li>目前最为常用的规则引擎是开源的JBoss Drools，采用的Java语言编写，基于Rete算法。规则引擎Esper可以使用类sql编写规则，入门较为简单；</li>
</ol>
<h2 id="架构重构"><a href="#架构重构" class="headerlink" title="架构重构"></a>架构重构</h2><h3 id="有的放矢"><a href="#有的放矢" class="headerlink" title="有的放矢"></a>有的放矢</h3><ol>
<li>绝大部分的架构演化都是通过架构重构来实现的，相比全新的架构设计来说，架构重构对架构师的要求更高。主要原因有：<ul>
<li>业务已经上线，不能停下来</li>
<li>关联方众多，牵一发动全身</li>
<li>旧架构的约束</li>
</ul>
</li>
<li>架构师正是需要在原来一团乱麻中找到线索，然后重新穿针引线，帮助业务进一步腾飞发展。一旦确定需要进行架构重构，就会由架构师牵头来进行架构重构的分析；</li>
<li>架构师首要任务是<strong>从一大堆纷繁复杂的问题中识别出真正要通过架构重构来解决的问题，集中力量快速解决，而不是想着通过架构重构来解决所有的问题；</strong></li>
<li>架构师需要透过问题表象看到问题本质，找出真正需要通过架构重构解决的核心问题，从而做到有的放矢，既不会耗费大量的人力和时间投入，又能够解决核心问题。</li>
</ol>
<h3 id="合纵连横"><a href="#合纵连横" class="headerlink" title="合纵连横"></a>合纵连横</h3><ol>
<li>要想真正推动一个架构重构项目启动，需要花费大量的精力进行游说和沟通；</li>
<li><strong>在沟通协调时，将技术语言转换为通俗语言，以事实说话，以数据说话，是沟通的关键！</strong></li>
<li><strong>换位思考、合作双赢、关注长期</strong>。简单来说就是站在对方的角度思考，重构对他有什么好处，能够帮他解决什么问题，带来什么收益；</li>
<li>方案上灵活一点，因为大部分需要重构的系统，需要做的事情很多，分阶段处理，在风险规避、计划安排等方面更加灵活可控。</li>
</ol>
<h3 id="运筹帷幄"><a href="#运筹帷幄" class="headerlink" title="运筹帷幄"></a>运筹帷幄</h3><ol>
<li>通常情况下，需要架构重构的系统，基本上都是因为各种历史原因和历史问题没有及时处理，遗留下来逐渐积累，然后到了一个临界点，各种问题开始互相作用，集中爆发！</li>
<li>将要解决的问题根据优先级、重要性、实施难度等划分为不同的阶段，每个阶段聚焦于一个整体的目标，集中精力和资源解决一类问题；</li>
<li>制定“分段实施”的策略：<ul>
<li>优先级排序——将明显且又比较紧急的事项优先落地，解决目前遇到的主要问题</li>
<li>问题分类——将问题按照性质分类，每个阶段集中解决一类问题</li>
<li>先易后难——一些相对简单的问题逐渐解决，会发现原来看起来很难的问题已经不那么难</li>
<li>循序渐进——按照固定的步骤和节奏，更有利于项目推进</li>
</ul>
</li>
</ol>
<h2 id="架构设计文档模板"><a href="#架构设计文档模板" class="headerlink" title="架构设计文档模板"></a>架构设计文档模板</h2><h3 id="备选方案模板"><a href="#备选方案模板" class="headerlink" title="备选方案模板"></a>备选方案模板</h3><ol>
<li>需求介绍（主要描述需求的背景、目标、范围等）：<ul>
<li>系统出现明显问题，比如性能问题、耦合问题、效率问题</li>
<li>基于上述问题，引入消息队列（什么技术）进行系统解耦（解决什么问题），将目前的同步调用改为异步通知（最终效果）</li>
</ul>
</li>
<li>需求分析（主要全方位地描述需求相关的信息）（有点方法论的意思）：<ul>
<li>5W（Who、When、What、Why、Where）<ul>
<li>Who——需求利益干系人，包括开发者、使用者、购买者、决策者等</li>
<li>When——需求使用时间，包括季节、时间、里程碑等</li>
<li>What——需求的产出是什么，包括系统、数据、文件、开发库、平台等</li>
<li>Where——需求的应用场景，包括国家、地点、环境等，例如测试平台只会在测试环境使用</li>
<li>Why——需求需要解决的问题，通常和需求背景相关</li>
</ul>
</li>
<li>1H（How）<ul>
<li>How——不是设计方案也不是架构方案，而是<strong>关键业务流程</strong></li>
</ul>
</li>
<li>8C（8个约束和限制）<ul>
<li>Constraints，包括性能 Performance、成本 Cost、时间Time、可靠性 Reliability、安全性 Security、合规性 Compliance、技术性 Technology、兼容性 Compatibility</li>
<li>需求中涉及的性能、成本、可靠性等仅仅是利益关联方提出的诉求，不一定准确，约束是可以调整的</li>
</ul>
</li>
</ul>
</li>
<li>复杂度分析（分析需求的复杂度，复杂度常见的有高可用、高性能、可扩展等）</li>
<li>备选方案（至少 3 个备选方案，每个备选方案需要描述关键的实现，无须描述具体的实现细节）</li>
<li>备选方案评估（备选方案 360 度环评）</li>
</ol>
<h3 id="架构设计模板"><a href="#架构设计模板" class="headerlink" title="架构设计模板"></a>架构设计模板</h3><ol>
<li>总体方案（从整体上描述方案的结构，其核心内容就是架构图，以及针对架构图的描述，包括模块或者子系统的职责描述、核心流程）</li>
<li>架构总览（给出架构图以及架构的描述）</li>
<li>核心流程<ul>
<li>消息发送流程</li>
<li>消息读取流程</li>
<li>… …</li>
</ul>
</li>
<li>详细设计（需要描述具体的实现细节）<ul>
<li>消息发送可靠性</li>
<li>消息存储可靠性</li>
<li>消息读取可靠性</li>
<li>身份识别</li>
<li>队列权限</li>
<li>… …</li>
</ul>
</li>
<li>架构演进规划（规划和设计的需求比较完善，但如果一次性全部做完，项目周期可能会很长，因此可以采取分阶段实施，即：第一期做什么、第二期做什么，以此类推）</li>
</ol>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c8978475683cedf1d4e7f932cfa9d237-3157057" alt="架构师技术栈"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>收获：</p>
<ul>
<li>唯一不变的是变化！</li>
<li>做事情永远都要有B方案。</li>
<li>发表是最好的记忆，实践是最好的成长！</li>
<li>影响一个企业业务的发展主要有三个因素：市场、技术、管理。</li>
</ul>
<p>选择架构，注定不平凡，也注定要很艰辛，PPT架构师太多，希望自己不要成为这类！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>报表基础知识</title>
    <url>/2020/07/02/%E6%8A%A5%E8%A1%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>统计报表是指各级企事业、行政单位按规定的表格形式、内容、时间要求报送程序，自上而下统一布置，提供统计资料的一种统计调查方式。它是我国取得国民经济和社会发展情况基本统计资料的一种重要手段!报表是非常重要的一种管理工具,需要了解基础知识,以及如何在后续的开发中开发出报表系统等。这部分主要介绍报表的基础知识！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="流行的开源报表工具"><a href="#流行的开源报表工具" class="headerlink" title="流行的开源报表工具"></a>流行的开源报表工具</h2><h3 id="JasperReport"><a href="#JasperReport" class="headerlink" title="JasperReport"></a>JasperReport</h3><ol>
<li>JasperReport是流行的开源报表工具之一，基于GPL开源许可协议, 采用java编写, 支持多种数据源，可打印或导出多种文件格式，支持PDF、HTML、XLS、CSV和XML文件输出格式。</li>
<li>组件：<ul>
<li>JasperReports Library 开源报表引擎库</li>
<li>JasperReports Server 是一个可嵌入的报表服务器，对数据进行分析和提供定时任务服务</li>
<li>Jaspersoft Studio 是基于Eclipse的报表设计器，它能创建包含图表、图像、子报表、交叉表等复杂的报表</li>
<li>JavaBeans，XML，CSV Hibernate</li>
<li>Jaspersoft ETL 是易于部署和执行的开源ETL系统, 创建一个综合的数据仓库和数据集</li>
</ul>
</li>
<li>官网：<a href="http://community.jaspersoft.com/" target="_blank" rel="noopener">http://community.jaspersoft.com/</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/705a49576d403703d3e420e64e5a3a3d-32309" alt="JasperReport图"></li>
</ol>
<h3 id="iReport"><a href="#iReport" class="headerlink" title="iReport"></a>iReport</h3><ol>
<li>iReport 是免费的，开源的报表设计器, 是为JasperReports Library和JasperReports Server设计的报表可视化设计器，它能创建图表、图像、子报表、交叉表等复杂的报表，它的数据源可以是JavaBeans，XML，CSV Hibernate和自定义数据源，可以发布和输出PDF,RTF,XML,HTML等文件。</li>
<li>官网：<a href="https://community.jaspersoft.com/project/ireport-designer" target="_blank" rel="noopener">https://community.jaspersoft.com/project/ireport-designer</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/aa43fa3e65c1c1bd10722f62522aa24a-49498" alt="iReport图"></li>
</ol>
<h3 id="JFreeChart"><a href="#JFreeChart" class="headerlink" title="JFreeChart"></a>JFreeChart</h3><ol>
<li>JFreeChart 是一款易于扩展的纯Java编写绘图图库, 使用它可以生成线图、柱状图、饼图、曲线图、面积图、甘特图、仪表盘、混合图等多种图表，并可将图表输出为PNG、JPEG图片。</li>
<li>特性：<ul>
<li>稳定、轻量级,支持多种图表类型</li>
<li>一个灵活的设计,很容易扩展,并应用于服务器端和客户端的应用程序</li>
<li>支持多种输出类型,包括Swing组件和JavaFX组件、图像文件(包括PNG和JPEG)和矢量图形文件格式(包括PDF、EPS和SVG)</li>
<li>JFreeChart是开源的，基于GNU通用公共许可证 (LGPL)开源许可协议</li>
</ul>
</li>
<li>官网：<a href="http://www.jfree.org/" target="_blank" rel="noopener">http://www.jfree.org/</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/83e9beda27dfe4a5700e93a1a7ed8a90-38460" alt="JFreeChart图"></li>
</ol>
<h3 id="Pentaho"><a href="#Pentaho" class="headerlink" title="Pentaho"></a>Pentaho</h3><ol>
<li>Pentaho将你的数据转变成有意义的信息，为您设计Pentaho报表，一套开源的工具，允许你创建报表，支持输出Excel、PDF、HTML、文本、富文本文件，XML和CSV，生成的报表可以很容易地从各种来源提炼成可读的数据。</li>
<li>Pentaho报表的开发是通过创建一个灵活且简单易用的报表引擎。这是一套开源工具，包括Report Designer、Reporting Engine和Reporting SDK。低内存消耗的高性能，报表处理可以从小规模的嵌入式场景到大型企业报表方案。Pentaho报表集成商业智能，你可轻易与同事共享报表。</li>
<li>官网：<a href="http://community.pentaho.com/projects/reporting" target="_blank" rel="noopener">http://community.pentaho.com/projects/reporting</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/48f2c5080cf16437ba81477bbd341756-27521" alt="Pentaho图"></li>
</ol>
<h3 id="BIRT"><a href="#BIRT" class="headerlink" title="BIRT"></a>BIRT</h3><ol>
<li>BIRT 是基于 Eclipse 的一款开源报表，创建数据的可视化和报表，可以嵌入到富客户和Web应用程序。</li>
<li>BIRT主要由两部分组成：一个用于创建BIRT设计的可视化报表设计器，以及可以部署到java环境运行时组件。BIRT项目还包括一个图表引擎，可集成到BIRT的一个应用程序图表。BIRT设计模板保存为XML，可以访问多个不同的数据源包括JDO数据存储，jfire脚本对象、POJOs、SQL数据库、Web服务和XML。</li>
<li>官网：<a href="http://www.eclipse.org/birt/" target="_blank" rel="noopener">http://www.eclipse.org/birt/</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/84151c8ec6859f4eebfa4b3f3c5dbbd4-126200" alt="BIRT图"></li>
</ol>
<h2 id="图表组件"><a href="#图表组件" class="headerlink" title="图表组件"></a>图表组件</h2><h3 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h3><ol>
<li>ECharts是一款开源数据可视化图表产品，支持的图表比较多, 提供商业产品常用图表，底层基于ZRender（一个轻量级canvas图表类库），创建了坐标系，图例，提示，工具箱等基础组件，并在此上构建出折线图、柱状图、散点图、K线图、饼图、雷达图、地图、和弦图、力导向布局图、仪表盘以及漏斗图，同时支持任意维度的堆积和混合图表展现。</li>
<li>官方案例:<a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">https://echarts.apache.org/zh/index.html</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0f6df46d00bf325e533eb2fd4000008d-47870" alt="Echarts图"></li>
</ol>
<h3 id="Highcharts"><a href="#Highcharts" class="headerlink" title="Highcharts"></a>Highcharts</h3><ol>
<li>Highcharts 图表是收费组件，基于 HTML5 技术，不需要安装插件，也不需要配置 PHP、Java 等运行环境，只需要两个 JS 文件即可使用， 提供丰富的图表类型，线图、柱形图、饼图、散点图、仪表图、雷达图、热力图、混合图等多，Highstock 则提供股票走势图（K线、分时）、高级时间轴图，Highmaps 提供各种丰富多样的地图。</li>
<li>官方案例：<a href="http://www.hcharts.cn/demo/highcharts" target="_blank" rel="noopener">http://www.hcharts.cn/demo/highcharts</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fde5133a4b59ca0122ece5f69068c8a9-52249" alt="Hcharts图"></li>
</ol>
<h3 id="ichartjs"><a href="#ichartjs" class="headerlink" title="ichartjs"></a>ichartjs</h3><ol>
<li>ichartjs ichartjs 是基于Apache License 2.0协议的开源项目, 是一款基于HTML5的图形库。使用纯javascript语言, 利用HTML5的canvas标签绘制各式图形。 ichartjs致力于为您的应用提供简单、直观、可交互的体验级图表组件。是WEB/APP图表展示方面的解决方案 。如果你正在开发HTML5的应用，ichartjs正好适合您。 ichartjs目前支持饼图、环形图、折线图、面积图、柱形图、条形图。</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5e8d38c706934da2007ee510ad045ac2-43219" alt="ichartjs图"></li>
</ol>
<h3 id="Fusioncharts"><a href="#Fusioncharts" class="headerlink" title="Fusioncharts"></a>Fusioncharts</h3><ol>
<li>Fusioncharts 图表是收费组件, 是一款跨平台、跨浏览器的JavaScript/HTML图表组件，支持柱状图、条形图、折线图、面积图、2D和3D饼图、缩放和滚动图、单Y轴组合图、双Y轴组合图、堆积图、气泡图和XY坐标图表、Pareto图表、Marimekko图表等图表。</li>
<li>官网：<a href="https://www.fusioncharts.com/" target="_blank" rel="noopener">https://www.fusioncharts.com/</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/89d12979b9dabb1fc9b21e8645165af4-44550" alt="Fusioncharts图"></li>
</ol>
<h3 id="Chart-js"><a href="#Chart-js" class="headerlink" title="Chart.js"></a>Chart.js</h3><ol>
<li>Chart.js是一款开源图表，帮你用不同的方式让你的数据变得可视化。每种类型的图表都有动画效果，并且看上去比较棒，即便是在retina屏幕上，Chart.js不依赖外部工具库，轻量级（压缩之后仅有4.5k），并且提供了加载外部参数的方法。</li>
<li>官方案例：<a href="http://www.bootcss.com/p/chart.js/docs/" target="_blank" rel="noopener">http://www.bootcss.com/p/chart.js/docs/</a></li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/92c948d5b7e9582e242f9f4eeed95309-38989" alt="Chart.js图"></li>
</ol>
<h2 id="常见的盘点表格形式"><a href="#常见的盘点表格形式" class="headerlink" title="常见的盘点表格形式"></a>常见的盘点表格形式</h2><h3 id="库存盘点表格式"><a href="#库存盘点表格式" class="headerlink" title="库存盘点表格式"></a>库存盘点表格式</h3><ol>
<li>库存盘点表格式一般包含盘点部门、编制人、负责人、生产部、仓储部，这些为盘点表的基本信息，盘点表一般有盘点的货物，<br>详细的情况描述如：账面情况、实际情况、盘盈利、盘亏损并由盘点人签名，盘点详情里一般存在存货数量、存货单价及存货的总金额，总金额 = 数量 * 单价，最后在盘点表尾部有保管员与制表人签名。</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9e20a32ad520105173cec0275fe302a7-4801" alt="样式"></li>
</ol>
<h3 id="存货盘点表格式"><a href="#存货盘点表格式" class="headerlink" title="存货盘点表格式"></a>存货盘点表格式</h3><ol>
<li>存货盘点表格式一般需要有盘点仓库、盘点日期，盘点详情列表一般包含商品编号、商品名称、数量、单价、金额，金额 = 数量 * 单价，较重要的是需要有盘点差异的数量、金额，如果存在差异，则需要说明差异原因，最后在盘点表尾部有负责人与盘点人签名。</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2b8b69d089dc4a7e44c98250618c095f-2685" alt="样式"></li>
</ol>
<h3 id="现金盘点表格式"><a href="#现金盘点表格式" class="headerlink" title="现金盘点表格式"></a>现金盘点表格式</h3><ol>
<li>现金盘点表格式一般包含单位、盘点日期，盘点详情列表一般包含现金面额、现金单位张或是枚，金额， 金额 = 面额 * 张/枚数，在面额下面的表格一般说明加减的情况，加：收入凭证未记账、跨日收入，减：付出凭证未记账、跨日借条，调整后现金余额与实点金额，差额是多少最后一般填写一些差额备注信息，出纳与盘点人签名。</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c1b2b7b46f8cac42fd257329cd20c336-4454" alt="样式"></li>
</ol>
<h3 id="固定资产盘点表格式"><a href="#固定资产盘点表格式" class="headerlink" title="固定资产盘点表格式"></a>固定资产盘点表格式</h3><ol>
<li>固定资产盘点表格式一般包含单位、盘点日期，盘点详情列表一般包含固定资产，固定资产包含编号、名称、规格等信息，比较重要的是盘点情况列表，盘点情况一般包含产品的状态信息如：正常使用、停用、待修、已经报废等信息，每个资产都有对于的负责人，并存在对该资产的一些备注信息，最后在盘点表尾部有负责人与盘点人签名。</li>
<li><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c27cc63ebce5c6edfc1466d2361e643d-3219" alt="样式"></li>
</ol>
<h2 id="在线表单设计器"><a href="#在线表单设计器" class="headerlink" title="在线表单设计器"></a>在线表单设计器</h2><h3 id="JotForm"><a href="#JotForm" class="headerlink" title="JotForm"></a>JotForm</h3><ol>
<li>JotForm 易于使用的在线表单设计器，为企业业务数据设计表单和收集数据，例如可设计一些订单信息表、客户信息表等， 是所见所得的在线定义表单，界面操作比较简单，拖动HTML元素组件即可，并集成各种验证组件，JotForm自带多种样式的模板， 提供许多免费的表单样式。</li>
<li>特点：JotForm 内建超过2,500 种以上的表单案例，无论是联系表格、注册表单、问卷调查、满意度调查、工作申请表、出席意愿表等等，可以直接获取使用。</li>
</ol>
<h3 id="Ueditor-Formdesign"><a href="#Ueditor-Formdesign" class="headerlink" title="Ueditor Formdesign"></a>Ueditor Formdesign</h3><ol>
<li>Ueditor Formdesign 是开源免费的表单设计器，可应用于工作流管理系统、OA等，是一款可视化的Web表单构建器，HTML元素组件较丰富，主要包含：文本框、多行文本、下拉菜单、单选框、复选框、宏控件、进度条等，并可以生成二维码。</li>
</ol>
<h3 id="FCKeditor"><a href="#FCKeditor" class="headerlink" title="FCKeditor"></a>FCKeditor</h3><ol>
<li>FCKeditor 是一款开源的所见所得网页文本编辑器，可通过CKeditor设置表格，在表格中定义表单元素，主要支持文本框、复选框、单选框、单行文本、多行文本、列表、按钮、图片、隐藏域。</li>
</ol>
<h3 id="FormBuilder"><a href="#FormBuilder" class="headerlink" title="FormBuilder"></a>FormBuilder</h3><ol>
<li>FormBuilder 是一款开源的使用Jquery编写的Web表单构件器, 操作简单，一个轻量级JS组件，可以容易地与其他系统集成，<br>通过拖拉生成表单元素，支持复选框、日期、上传文件、隐藏域、列表、下拉框、文本域等。</li>
</ol>
<h3 id="Bootstrap-表单构造器"><a href="#Bootstrap-表单构造器" class="headerlink" title="Bootstrap 表单构造器"></a>Bootstrap 表单构造器</h3><ol>
<li>采用Bootstrap开发的表单构造器，可与其他应用系统集成，通过拖拽组件的方式生成完整可用的表单。</li>
</ol>
]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>敏捷编程快速了解</title>
    <url>/2020/06/16/%E6%95%8F%E6%8D%B7%E7%BC%96%E7%A8%8B%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>对于高效敏捷团队的构建，最大的障碍不在于学习敏捷方式，而在于理解敏捷。要释放团队潜力，让成员全力以赴，并且在合作中寻求创新，关键在于帮助他们了解团队为什么要敏捷！在软件开发团队中，相比专业知识和工具，文化氛围对于项目的成功更为重要。优秀不是一种表现，而是一种习惯！ <strong>推荐书籍：《学习敏捷 构建高效团队》· [美] Andrew·Stellman Jennifer·Greene 著 段志岩 郑思遥 译</strong> </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="什么是敏捷"><a href="#什么是敏捷" class="headerlink" title="什么是敏捷"></a>什么是敏捷</h2><ol>
<li>很多敏捷团队的一个共同实践就是通过用户故事来描述某个系统的用户想要什么；</li>
<li>敏捷能带来：<ul>
<li>项目可以按时完成，为那些苦恼于交付期限和预算的团队带去了福音</li>
<li>项目交付高质量的软件，那些受困于bug和低效软件的团队会迎来巨大的变革</li>
<li>团队构建的代码结构优良且易于维护</li>
<li>团队会让用户满意，不再交付无法为用户带来价值的软件</li>
<li><strong>开发人员不用加班，可以与亲朋好友共度晚间时光和周末（真是美好的希冀）</strong></li>
</ul>
</li>
<li>转变了思维模式，一个仅仅接触敏捷实践皮毛的团队就可以获得提升，从而真正改进其软件构建方式！</li>
<li>敏捷是指能够让团队思考更加有效、工作更为高效，并且作出更好决策的一组方法和相关理念；</li>
<li><strong>每日站立会议 （daily standup）</strong>是很多团队都采用的一种最常见的敏捷实践，在会议上， 每一位成员都会讲述自己手头的工作以及面临的挑战；</li>
<li><strong>从开发人员的角度看，每天的各种会议会频频打断手头的工作，导致任务很难完成！（深有感受，讨厌开会）</strong></li>
<li>优秀的开发人员不仅对自己的代码有想法， 而且常常对整个项目的发展方向怀有见解；</li>
<li><strong><em>不要推行与团队思维方式相抵触的实践，这样做不会有好的结果，在尝试动手之前，首先要考虑一下团队会有什么反应。</em></strong></li>
</ol>
<h2 id="敏捷价值观"><a href="#敏捷价值观" class="headerlink" title="敏捷价值观"></a>敏捷价值观</h2><ol>
<li><p>“敏捷软件开发宣言”（Manifesto for Agile Software Development）：</p>
<ul>
<li>个体和互动高于流程和工具</li>
<li>可工作的软件高于详尽的文档</li>
<li>客户协作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ul>
</li>
<li><p>瀑布式流程要求团队在项目开始的时候完整地写下软件的描述， 然后完全按照写下的文档构建软件，很难应对变化，因为这种流程关注的是文档而不是协作；</p>
<p><img src="" alt="瀑布式模式"></p>
</li>
<li><p>燃尽图是一种线图，记录每天项目中未完成的工作，“燃尽”到零意味着工作完成；</p>
</li>
<li><p>在每一轮迭代结束时开回顾会议 （retrospective），有可能团队成员会努力实现发言时提出的改进；</p>
</li>
<li><p>团队中成员的关注点（在擅长的领域采用了更好的实践，因而把这些事情做得更好）：</p>
<p><img src="" alt="团队中成员的关注点"></p>
</li>
<li><p>敏捷宣言内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">我们一直在实践中探寻更好的软件开发方法，身体力行的同时也帮助他人。</span><br><span class="line">	由此我们建立了如下价值观。</span><br><span class="line"></span><br><span class="line">	个体和互动   高于 流程和工具</span><br><span class="line">	可工作的软件 高于 详尽的文档</span><br><span class="line">	客户协作    高于 合同谈判</span><br><span class="line">	响应变化    高于 遵循计划</span><br><span class="line"></span><br><span class="line">也就是说，虽然右项有其价值，但是我们更重视左项的价值。</span><br></pre></td></tr></table></figure>
</li>
<li><p>一名开发人员如果总是想办法保护自己， 那么他就不太愿意尝试新的合作方法，也不愿意为需要他们开发的软件的用户采用创新的方法！</p>
</li>
<li><p>任务板 （task board）是一种良好的实践， 可以帮助团队作出响应变化的正确决策；</p>
<p><img src="" alt="任务板"></p>
</li>
</ol>
<h2 id="敏捷原则"><a href="#敏捷原则" class="headerlink" title="敏捷原则"></a>敏捷原则</h2><ol>
<li>12条原则：<ol>
<li>最优先要做的是尽早、持续地交付有价值的软件，让客户满意</li>
<li>欣然面对需求变化，即使是在开发后期</li>
<li>频繁地交付可工作的软件，从数周到数月，交付周期越短越好</li>
<li>在团队内外，面对面交谈是最有效、也是最高效的沟通方式</li>
<li>在整个项目过程中，业务人员和开发人员必须每天都在一起工作</li>
<li>以受激励的个体为核心构建项目</li>
<li>可工作的软件是衡量进度的首要标准</li>
<li>敏捷过程倡导可持续开发</li>
<li>坚持不懈地追求技术卓越和良好的设计，以此增强敏捷的能力</li>
<li>简单是尽最大可能减少不必要工作的艺术，是敏捷的根本</li>
<li>最好的架构、需求和设计来自自组织的团队</li>
<li>团队定期反思如何提升效率，并依此调整自己的行为</li>
</ol>
</li>
<li>尽早交付有一个缺点：最初交付给客户的软件完成度非常低!</li>
<li>欣然面对需求变化的第一步是尝试从客户的角度看问题（真的有点难），如果公司允许我们犯错并且能尽快改正， 而不是期待我们一开始就把事情做完美就更好了（也很难）！</li>
<li>尽早修复错误，才能够把损失降低到最低，开发过程中的各种决策让我们看到现在必须如何改变！</li>
<li>在软件团队中，面对面沟通方式几乎总是优于文档沟通！</li>
<li>一个团队越能形成集体意识， 越能共享同样的视角，就越容易对同样的问题形成一致的答案；</li>
<li>人们应该根据对整个团队目标所做出的贡献进行考核！</li>
<li>KISS（Keep It Simple, Stupid， 保持简单）是一项不仅应用于软件开发，也应用于其他所有工程实践中的最基本的设计原则；</li>
</ol>
<h2 id="Scrum和自组织团队"><a href="#Scrum和自组织团队" class="headerlink" title="Scrum和自组织团队"></a>Scrum和自组织团队</h2><ol>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>洗衣机数据查询</title>
    <url>/2020/06/13/%E6%B4%97%E8%A1%A3%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工作中经常需要查询设备的一些信息来定位问题，每次都要自己写SQL查询语句，特麻烦，学习了SpringBoot，然后公司需要就开发了洗衣机数据查询项目，这里主要记录开发中的重要步骤！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="开普勒系统API"><a href="#开普勒系统API" class="headerlink" title="开普勒系统API"></a>开普勒系统API</h2><ol>
<li><p>内网进入<a href="http://k.midea.com/portal/app/choose/index.html" target="_blank" rel="noopener">开普勒系统</a>；</p>
</li>
<li><p>选择智慧眼中的智能数据共享平台：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5b47de9c137774f52545fefbc11af9e5-113471" alt="数据共享平台"></p>
</li>
<li><p>选择事业部的数据操作接口：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d5eee1d3094258e5755e8c47b2101684-53752" alt="数据集创建入口"></p>
</li>
<li><p>创建数据集：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/92e8fc16f1ec3b3390ba12dff1b7082c-165643" alt="创建数据集"></p>
</li>
<li><p>数据集列表（滚筒样例）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2e31601452b72f652d8ba53fdf6c275e-189022" alt="滚筒数据集列表"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4bf0d93face6795b2684e5a2c9480a26-26273" alt="数据显示详情"></p>
</li>
<li><p>创建数据集样例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6d7a41b0e1e0bd277b0a642a05c630e3-169772" alt="数据集创建内容注释"></p>
</li>
<li><p>在API管理添加接口：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/dad4c93931e1988477ca295542683e41-62627" alt="接口"></p>
</li>
<li><p>创建接口：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8c0641b61a602d48e2f3e3b7da8acce7-82276" alt=""></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/348a5cd300a1a457f5e1ea0d9bf065f0-91026" alt=""></p>
</li>
<li><p>创建完成后就可以内网访问接口获取数据了，在检测中会出数据格式；</p>
</li>
<li><p>外网访问是单独需要权限的，而且配置地址也不一样，配置地址为<a href="https://bigdataservice.midea.com/InterfacePlatform/#/" target="_blank" rel="noopener">https://bigdataservice.midea.com/InterfacePlatform/#/</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/823674dd91a938415ad6126d920daf7d-80424" alt=""></p>
</li>
</ol>
<h2 id="配置无需登录访问数据"><a href="#配置无需登录访问数据" class="headerlink" title="配置无需登录访问数据"></a>配置无需登录访问数据</h2><ol>
<li><p>因为安全问题，内外网需要访问数据的时候需要在headers中添加token以及IdentifyingCode，token值为固定值，其值为ENX91skR59，IdentifyingCode是需要实时获取的，有有效时间，时间为10分钟，获取地址为：<a href="https://bigdataservice.midea.com/InterfacePlatform/validate/getIdentifyingCode" target="_blank" rel="noopener">https://bigdataservice.midea.com/InterfacePlatform/validate/getIdentifyingCode</a></p>
</li>
<li><p>获取IdentifyingCode，显示结果为：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f1b06eb2b454d175e8d3ce7e1c43bc69-17692" alt=""></p>
</li>
<li><p>可以通过postman尝试接口：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/786d0bbddf0530ffae63345601e6c953-29215" alt="postman"></p>
</li>
<li><p>项目访问（<a href="http://test2.zhinengxiyifang.cn:12315/）：" target="_blank" rel="noopener">http://test2.zhinengxiyifang.cn:12315/）：</a></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6b5a91a3bd28b019b7fd61f7b6bcd7c2-125607" alt="查询"></p>
</li>
<li><p>获取接口地址：<a href="http://test2.zhinengxiyifang.cn:12315/swagger-ui.html" target="_blank" rel="noopener">http://test2.zhinengxiyifang.cn:12315/swagger-ui.html</a></p>
</li>
</ol>
<h2 id="ShowMeYourCode"><a href="#ShowMeYourCode" class="headerlink" title="ShowMeYourCode"></a>ShowMeYourCode</h2><ol>
<li><p>获取认证值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 开普勒门户的认证码查询，10分钟内不过期</span></span><br><span class="line"><span class="comment"> * 每次需要检查是否过期，不过期就直接使用原来的token值，过期的话就要重新获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IdentifyingCodeURL =<span class="string">"https://bigdataservice.midea.com/InterfacePlatform/validate/getIdentifyingCode"</span>;</span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient httpclient;</span><br><span class="line">    <span class="keyword">private</span> HttpGet httpGet;</span><br><span class="line">    <span class="keyword">private</span> CloseableHttpResponse response;</span><br><span class="line">    <span class="keyword">private</span> String identifyingCode;</span><br><span class="line">    <span class="keyword">private</span> IdentifyingCodeData identifyingCodeData;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tryMaxTimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">         httpclient=<span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">// 创建HttpGet请求，相当于在浏览器输入地址</span></span><br><span class="line">         httpGet = <span class="keyword">new</span> HttpGet(IdentifyingCodeURL);</span><br><span class="line">         identifyingCode=<span class="keyword">null</span>;</span><br><span class="line">         identifyingCodeData=<span class="keyword">null</span>;</span><br><span class="line">         response=<span class="keyword">null</span>;</span><br><span class="line">         tryMaxTimes=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行浏览器查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        tryMaxTimes++;</span><br><span class="line">        <span class="comment">// 创建Httpclient对象,相当于打开了浏览器</span></span><br><span class="line">        httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行请求，相当于敲完地址后按下回车。获取响应</span></span><br><span class="line">            response = httpclient.execute(httpGet);</span><br><span class="line">            <span class="comment">// 判断返回状态是否为200</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析响应，获取数据</span></span><br><span class="line">                String content = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                identifyingCodeData= (IdentifyingCodeData) JsonExchange.jsonToObj(<span class="keyword">new</span> IdentifyingCodeData(),content);</span><br><span class="line">                identifyingCode=identifyingCodeData.getData().getIdentifyingCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 关闭资源</span></span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">             httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取认证值,有可能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdentifyingCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">if</span>(identifyingCodeData!=<span class="keyword">null</span>&amp;&amp;identifyingCodeData.getData().getExpiryTime().after(date))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            tryMaxTimes=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> identifyingCode;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Execute();</span><br><span class="line">            <span class="keyword">if</span>(identifyingCode==<span class="keyword">null</span>&amp;&amp;tryMaxTimes&lt;<span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> getIdentifyingCode();</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tryMaxTimes=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> identifyingCode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取开普勒大数据的接口数据，只需要设置好数据地址</span></span><br><span class="line"><span class="comment"> * 然后执行getContentData()方法就可以获取数据（GET方式）或者getContentDataPost()方法获取数据(POST方法)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dataURL;</span><br><span class="line">    <span class="keyword">private</span> String dataURLPast;</span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient httpclient;</span><br><span class="line">    <span class="keyword">private</span> HttpGet httpGet;</span><br><span class="line">    <span class="keyword">private</span> CloseableHttpResponse response;</span><br><span class="line">    <span class="keyword">private</span> String identifyingCode;</span><br><span class="line">    <span class="keyword">private</span> String contentData;</span><br><span class="line">    <span class="keyword">private</span> GetToken getToken;</span><br><span class="line">    <span class="keyword">private</span> HttpPost httpPost;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dataURL=<span class="keyword">null</span>;</span><br><span class="line">        httpclient=<span class="keyword">null</span>;</span><br><span class="line">        httpGet = <span class="keyword">null</span>;</span><br><span class="line">        httpPost=<span class="keyword">null</span>;</span><br><span class="line">        identifyingCode=<span class="keyword">null</span>;</span><br><span class="line">        response=<span class="keyword">null</span>;</span><br><span class="line">        contentData=<span class="keyword">null</span>;</span><br><span class="line">        dataURLPast=<span class="keyword">null</span>;</span><br><span class="line">        getToken=<span class="keyword">new</span> GetToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataURL</span><span class="params">(String dataURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataURL = dataURL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecutePost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpPost=<span class="keyword">new</span> HttpPost(dataURL);</span><br><span class="line">        <span class="comment">// 创建Httpclient对象,相当于打开了浏览器</span></span><br><span class="line">        httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行请求，相当于敲完地址后按下回车。获取响应</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 修改token值，外网访问的不一样</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            httpPost.addHeader(<span class="string">"token"</span>,<span class="string">"ENX91skR59"</span>);</span><br><span class="line">            httpPost.addHeader(<span class="string">"IdentifyingCode"</span>,getToken.getIdentifyingCode());</span><br><span class="line"></span><br><span class="line">            response = httpclient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 判断返回状态是否为200</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析响应，获取数据</span></span><br><span class="line">                contentData = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                dataURLPast=dataURL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 关闭资源</span></span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecuteGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        httpGet=<span class="keyword">new</span> HttpGet(dataURL);</span><br><span class="line">        <span class="comment">// 创建Httpclient对象,相当于打开了浏览器</span></span><br><span class="line">        httpclient = HttpClients.createDefault();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行请求，相当于敲完地址后按下回车。获取响应</span></span><br><span class="line">            httpGet.addHeader(<span class="string">"token"</span>,<span class="string">"tM1Fw9huqq"</span>);</span><br><span class="line">            httpGet.addHeader(<span class="string">"IdentifyingCode"</span>,getToken.getIdentifyingCode());</span><br><span class="line">            response = httpclient.execute(httpGet);</span><br><span class="line">            <span class="comment">// 判断返回状态是否为200</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析响应，获取数据</span></span><br><span class="line">                contentData = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                dataURLPast=dataURL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 关闭资源</span></span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(contentData==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ExecuteGet();</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(contentData!=<span class="keyword">null</span>&amp;&amp;dataURL.equals(dataURLPast))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ExecuteGet();</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentDataPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(contentData==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ExecutePost();</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(contentData!=<span class="keyword">null</span>&amp;&amp;dataURL.equals(dataURLPast))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ExecutePost();</span><br><span class="line">            <span class="keyword">return</span> contentData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fastjson解析数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesCountDataArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ClassesCountData&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountDataArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对开普勒门户返回的arr数组内容进行解析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassesCountDataArr</span><span class="params">(String arr)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        JsonNode rootNode = mapper.readTree(arr);</span><br><span class="line">        <span class="comment">// 获取json数组的值----进行循环遍历</span></span><br><span class="line">        JsonNode dewatering_speedNode = rootNode.get(<span class="string">"arr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != dewatering_speedNode &amp;&amp; dewatering_speedNode.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ArrayList&lt;ClassesCountData&gt; dewatering_speed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JsonNode node : dewatering_speedNode) &#123;</span><br><span class="line">                ClassesCountData dewaterSpeed=<span class="keyword">new</span> ClassesCountData();</span><br><span class="line">                dewaterSpeed.setClasses(node.get(<span class="string">"classes"</span>).asText());</span><br><span class="line">                dewaterSpeed.setCount(node.get(<span class="string">"count"</span>).asText());</span><br><span class="line">                dewatering_speed.add(dewaterSpeed);</span><br><span class="line">            &#125;</span><br><span class="line">            setArr(dewatering_speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ClassesCountData&gt; <span class="title">getArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(List&lt;ClassesCountData&gt; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>重点内容都记录了，暂时没有添加数据库的需求，主要还是因为IoT的接口真的没法吐槽了，还有最近都是缺人，周日还来公司加班，都是尽力抽时间来写出来！记录的才能不会忘记如何配置！</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>深入Linux内核架构</title>
    <url>/2020/06/22/%E6%B7%B1%E5%85%A5Linux%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>UNIX和Linux操作系统的源代码复杂、文档少、对程序员的要求高，要想看懂这些代码并不是一件容易事。 <strong>推荐书籍：《深入Linux内核架构》· [德] Wolfgang Mauerer 著 郭旭 译</strong> </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Linux现在已经安装到了数百万台电脑上，无论是家庭用户还是专业人员，都可以在Linux上执行各种任务；</p>
</li>
<li><p>在纯技术层面上，内核是硬件与软件之间的一个中间层；</p>
</li>
<li><p>微内核：只有最基本的功能直接由中央内核（即微内核）实现；</p>
</li>
<li><p>宏内核：与微内核相反，宏内核是构建系统内核的传统方法；</p>
</li>
<li><p>UNIX和Linux操作系统的源代码复杂、文档少、对程序员的要求高，要想看懂这些代码并不是一 件容易事；</p>
</li>
<li><p>由于Linux的存在，使得我们能够查看一个真正的、可工作的、产品级操作系统的源代码。在理解Linux内核的结构和实现的过程中，阅读和使用实际的源代码是必不可少的一个步骤；</p>
</li>
<li><p>Linux内核的高层次概述：</p>
<p><img src="" alt="Linux内核的高层次概述"></p>
</li>
<li><p>传统上，UNIX操作系统下运行的应用程序、服务器及其他程序都称为进程；</p>
</li>
<li><p>由于Linux是多任务系统，它支持并发执行的若干进程，系统中同时真正在运行的进程数目最多不超过CPU数目，因此内核会按照短的时间间隔在不同的进程之间切换：</p>
<ul>
<li>进程之间的切换称之为进程切换</li>
<li>确定哪个进程运行多长时间的过程称为调度</li>
</ul>
</li>
<li><p>UNIX操作系统中有两种创建新进程的机制，分别是fork和exec：</p>
<ul>
<li>fork可以创建当前进程的一个副本，父进程和子进程只有PID（进程ID）不同</li>
<li>exec将一个新程序加载到当前进程的内存中并执行</li>
</ul>
</li>
<li><p>Linux将虚拟地址空间划分为两个部分，分别称为内核空间和用户空间：</p>
<p><img src="" alt="虚拟地址空间划分"></p>
<ul>
<li>系统中每个用户进程都有自身的虚拟地址范围， 从 0到 TASK_SIZE</li>
<li>TASK_SIZE是一个特定于计算机体系结构的常数，把地址空间按给定比例划分为两部分</li>
<li>这种划分与可用的内存数量无关</li>
</ul>
</li>
<li><p>在用户态禁止访问内核空间，在内核态可以访问内核空间。用户进程不能操作或读取内核空间中的数据，也无法执行内核空间中的代码。从用户状态到核心态的切换通过系统调用的特定转换手段完成，且系统调用的执行因具体系统而不同；</p>
</li>
<li><p>内核空间和用户空间的切换：</p>
<p><img src="" alt="内核空间和用户空间的切换"></p>
</li>
<li><p>用来将虚拟地址空间映射到物理地址空间的数据结构称为页表；</p>
<p><img src="" alt="虚拟地址分配"></p>
<ul>
<li>虚拟地址的第一部分称为全局页目录（Page Global Directory，PGD）。PGD用于索引进程中的一个数组（每个进程有且仅有一个），该数组是所谓的全局页目录或PGD。PGD的数组项指向另一些数组的起始地址，这些数组称为中间页目录（Page Middle Directory，PMD）</li>
<li>虚拟地址最后的一部分称为偏移量</li>
<li>地址转换中出现最频繁的那些地址，保存到称为地址转换后备缓冲器（Translation Lookaside Buffer，TLB）的CPU高速缓存中</li>
</ul>
</li>
<li><p>页面交换通过利用磁盘空间作为扩展内存，从而增大了可用的内存。在内核需要更多内存时，不经常使用的页可以写入硬盘。如果再需要访问相关数据，通过缺页异常机制内核会将相应的页切换回内存。页面回收用于将内存映射被修改的内容与底层的块设备同步，为此有时也简称为数据回写；</p>
</li>
<li><p>POSIX语义：</p>
<ul>
<li>进程管理：创建新进程，查询信息，调试</li>
<li>信号：发送信号，定时器以及相关处理机制</li>
<li>文件：创建、打开和关闭文件，从文件读取和向文件写入，查询信息和状态</li>
<li>目录和文件系统：创建、删除和重命名目录，查询信息，链接，变更目录</li>
<li>保护机制：读取和变更UID/GID，命名空间的处理</li>
<li>定时器函数：定时器函数和统计信息</li>
</ul>
</li>
<li><p>设备驱动程序用于与系统连接的输入/输出装置通信，如硬盘、软驱、各种接口、声卡等:</p>
<ul>
<li>字符设备——提供连续的数据流，应用程序可以顺序读取，通常不支持随机存取</li>
<li>块设备——应用程序可以随机访问设备数据，程序可自行确定读取数据的位置</li>
</ul>
</li>
<li><p>Linux支持许多不同的文件系统：标准的Ext2和Ext3、Ext4文件系统、ReiserFS、XFS、VFAT（为兼容DOS），还有很多其他文件系统。VFS（Virtual Filesystem或Virtual Filesystem Switch，虚拟文件系统或虚拟文件系 统交换器）既是向下的接口（所有文件系统都必须实现该接口），同时也是向上的接口（用户进程通过系统调用最终能够访问文件系统功能）；</p>
<p><img src="" alt="虚拟文件系统"></p>
</li>
<li><p>模块用于在运行时动态地向内核添加功能，如设备驱动程序、文件系统、网络协议等，实际上内核的任何子系统几乎都可以模块化；</p>
</li>
<li><p>内核是由世界上最好的程序员编写的，源代码可以证实这一点。其结构良好，细节一丝不苟，巧妙的解决方案在代码中处处可见；</p>
</li>
</ol>
<h2 id="进程管理和调度"><a href="#进程管理和调度" class="headerlink" title="进程管理和调度"></a>进程管理和调度</h2><ol>
<li><p>内核和处理器建立了多任务的错觉，即可以并行做几种操作，这是通过以很短的间隔在系统运行的应用程序之间不停切换而做到的；</p>
</li>
<li><p>进程的分类：</p>
<ul>
<li>硬实时进程有严格的时间限制，某些任务必须在指定的时限内完成</li>
<li>软实时进程是硬实时进程的一种弱化形式</li>
<li>大多数进程是没有特定时间约束的普通进程，但仍然可以根据重要性来分配优先级</li>
</ul>
</li>
<li><p>当调度器在进程之间切换时，必须知道系统中每个进程的状态，进程可能有以下几种状态：</p>
<ul>
<li>运行：该进程此刻正在执行</li>
<li>等待：进程能够运行，但没有得到许可，因为CPU分配给另一个进程，调度器可以在下一次 任务切换时选择该进程</li>
<li>睡眠：进程正在睡眠无法运行，因为它在等待一个外部事件，调度器无法在下一次任务切换 时选择该进程</li>
</ul>
<p><img src="" alt="进程状态切换"></p>
</li>
<li><p>内核的抢占调度模型建立了一个层次结构，用于判断哪些进程状态可以由其他状态抢占：</p>
<ul>
<li>普通进程总是可能被抢占，甚至是由其他进程抢占</li>
<li>如果系统处于核心态并正在处理系统调用，那么系统中的其他进程是无法夺取其CPU时间的</li>
<li>中断可以暂停处于用户状态和核心态的进程</li>
</ul>
</li>
<li><p>Linux内核涉及进程和程序的所有算法都围绕一个名为task_struct的数据结构建立，该结构定 义在include/sched.h中；</p>
</li>
<li><p>命名空间提供了虚拟化的一种轻量级形式，使得我们可以从不同的方面来查看运行系统的全局属性；</p>
<p><img src="" alt="命名空间"></p>
</li>
<li><p>UNIX进程总是会分配一个号码用于在其命名空间中唯一地标识它们，该号码被称作进程ID号， 简称PID；</p>
<p><img src="" alt="进程关系"></p>
</li>
<li><p>fork、vfork和clone系统调用的入口点分别是sys_fork、sys_vfork和sys_clone函数；</p>
</li>
<li><p>内核线程是直接由内核本身启动的进程。内核线程实际上是将内核函数委托给独立的进程，与系统中其他进程“并行”执行；</p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>社会工程—基础入门</title>
    <url>/2020/06/21/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E2%80%94%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> 只有了解各种钓鱼欺诈，才能更好地防范这些诈骗。了解钓鱼欺诈中所使用的心理学原则和技术工具， 可以辨识和防范各种类型和难度级别的钓鱼欺诈！几乎每一起成功的网络攻击的核心都是人的因素！<strong>推荐书籍：《社会工程·防范钓鱼欺诈（卷3）》· [美] Christopher·Hadnagy   Michele·Fincher 著 肖诗尧 译</strong>  </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>几乎所有的大型攻击事件的分析结果表明，绝大多数攻击都与社会工程有关，涉及网络钓鱼邮件（ phishing e-mail）、鱼叉式网络钓鱼（ spear phish）或恶意来电（ malicious phone call， vishing）；</li>
<li>各种形式的网络钓鱼已经成为一种备受关注的攻击手段，因为这是让人们不假思索行事的简单方法；    </li>
<li>鱼叉式网络钓鱼是一种非常有针对性的攻击方式。攻击者花时间对目标进行研究，然后创建与目标个人信息相关的或者私人化的电子邮件；</li>
<li>骗子会给刚收到钓鱼邮件的人打电话。这也被称为语音钓鱼（ vishing）或电话钓鱼； </li>
<li>钓鱼成功的原因：<ul>
<li>贪婪</li>
<li>缺乏教育    </li>
<li>过于轻信  </li>
</ul>
</li>
<li>网络钓鱼并不只是关于你点击了什么，而是关于你为什么会点击它！</li>
</ol>
<h2 id="心理学原则"><a href="#心理学原则" class="headerlink" title="心理学原则"></a>心理学原则</h2><ol>
<li><p>决策的好坏并不总是与我们对这个决策本身是否感到满意有关；</p>
</li>
<li><p>决策包含了一系列因素，如我们的看法和情绪；</p>
</li>
<li><p>我们每天都在做出或大或小的决策，即使在并不具备所需的全部相关信息的情况下；</p>
</li>
<li><p>我们不假思索地、频繁地做出这些或大或小的决策；</p>
</li>
<li><p>认知偏差是一种思维定势，通常源于过去的经验！</p>
</li>
<li><p>框架效应（ framing effect）就是一种认知偏差，它指的是你的反应取决于当时的情形，或者说你的反应依赖于语境；</p>
</li>
<li><p>确认偏误（ confirmation bias），你倾向于寻找支持你的观点的信息，或者按照支持你的观点的方式来解读信息；</p>
</li>
<li><p>研究人员发现，一夜未眠会导致做出更冒险的决策；</p>
</li>
<li><p><strong>人类有一种服从别人的倾向，尤其是在特定的情况下！</strong></p>
</li>
<li><p>钓鱼攻击者了解我们是如何决策的，并且试图操纵我们所面临的情况以引导我们做出错误决定；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/267c21684e3a513413e78966f5de813b-32506" alt="情绪化决策"></p>
</li>
<li><p>情绪反应是正常的，你要做的只是调整一下，这样你就可以避免一些日后会让你后悔的行为；</p>
</li>
<li><p>反思自己的决策：</p>
<ul>
<li>确保正确地理解问题   </li>
<li>尽可能完整地收集信</li>
<li>考虑切实可行的选项</li>
<li>做出决策</li>
<li>评估效果  </li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9cc31a660074178a43e4545cebbc8630-24580" alt="基础决策"></p>
</li>
</ol>
<h2 id="影响与操控"><a href="#影响与操控" class="headerlink" title="影响与操控"></a>影响与操控</h2><ol>
<li><p>影响（ influence）和操控（ manipulation） 都是指一个人采取了对另一个人生效的行为；</p>
</li>
<li><p>影响显然是积极的，操控则是消极的；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f81cdc25065e2aa9f55b9c7c86bf7899-48845" alt="影响与操控"></p>
</li>
<li><p>建立融洽的关系是成功的社会工程人员为了提高效率而必须快速培养的技能；</p>
</li>
<li><p><strong>人类和其他物种似乎有着天生的欺骗的倾向！</strong></p>
</li>
<li><p>欺骗是一种社交行为的适应性形式，没有必要总是把它想得那么负面；</p>
</li>
<li><p>通过惩罚来改变某个成年人的行为是完全可能的，但这并不是高明的暗中操纵，它只是简单的能产生某个后果的行为；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/952cbd06ade34a9a5702f59d1352727a-66751" alt="惩罚与操控"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1b204797b7e55909549bca7e56672501-99918" alt="操控的方法"></p>
</li>
<li><p>影响的原则：</p>
<img src="https://app.yinxiang.com/FileSharing.action?hash=1/9a3329d460a580e6cc4aec7e78f5931a-23373" alt="影响的原则" style="zoom:80%;" /> 

</li>
</ol>
<h2 id="自我保护"><a href="#自我保护" class="headerlink" title="自我保护"></a>自我保护</h2><ol>
<li>黑客会攻击全球范围内的真实的服务器，并用合法服务器来发送钓鱼邮件；</li>
<li>恶意钓鱼攻击者还有很多引诱受害者点击链接的手段；</li>
<li>病毒的指纹可以用来识别病毒，病毒的指纹被放进了反病毒软件的数据库中，然后反病毒软件对你的电脑进行扫描；</li>
<li>坏人更高明、坚定和努力。他们似乎领先于你，并依靠你的弱点取胜；</li>
<li>仅仅依靠技术是救不了你的，技术也不应该被视作社会工程学的解决方案；</li>
</ol>
<h2 id="钓鱼攻击工具包"><a href="#钓鱼攻击工具包" class="headerlink" title="钓鱼攻击工具包"></a>钓鱼攻击工具包</h2><ol>
<li>Rapid7 Metasploit Pro可以通过闭环漏洞验证来显示风险程度并进行风险优先级划分，还能通过模拟钓鱼邮件攻击来对安全意识进行衡量；</li>
<li>ThreatSim允许组织机构根据终端用户的行为评估和降低风险；</li>
<li>PhishMe是一种 SaaS 解决方案，利用浸入式教学法来对员工进行识别和规避钓鱼攻击的培训；</li>
<li>Wombat PhishGuru模拟钓鱼攻击服务，你可以通过发送模拟钓鱼邮件来评估你的员工易受攻击的程度并鼓励他们加强训练；</li>
<li>PhishLine是一种企业级的 SaaS 解决方案，可模拟真实世界的社会工程学和钓鱼攻击，提供在线安全意识训练、基于风险的调查以及详细的报告和指标；</li>
<li>SET为评估者提供了一种测试其培训和安全意识项目有效性的机制；</li>
<li>Phishing Frenzy是一款由 Ruby on Rails 构建的基于 Linux的开源应用，也是渗透测试者用于管理钓鱼邮件攻击的工具；                  </li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这世上没有公平竞争这一回事，要利用一切弱点！学校先教你知识然后考试，生活则通过考试来教你知识。安全永远最薄弱的环境当属人参与的环节！社会工程就是利用人的弱点来进行攻击！  </p>
]]></content>
      <categories>
        <category>社会工程</category>
      </categories>
  </entry>
  <entry>
    <title>社会招聘</title>
    <url>/2020/04/22/%E7%A4%BE%E4%BC%9A%E6%8B%9B%E8%81%98/</url>
    <content><![CDATA[<h1 id="硬性要求"><a href="#硬性要求" class="headerlink" title="硬性要求"></a>硬性要求</h1><ol>
<li>全日制统招本科生以上，不包含三本；</li>
<li>工作经验5年以上；</li>
<li>以前在集团工作过的不予考虑。</li>
</ol>
<h1 id="通用要求"><a href="#通用要求" class="headerlink" title="通用要求"></a>通用要求</h1><ol>
<li>具备良好的学习能力、逻辑思维能力、沟通能力、团队协作能力和执行力；</li>
<li>具有良好规范的文档和编程习惯，具备良好的沟通能力。</li>
</ol>
<hr>
<h1 id="算法工程师"><a href="#算法工程师" class="headerlink" title="算法工程师"></a>算法工程师</h1><h2 id="资格"><a href="#资格" class="headerlink" title="资格"></a>资格</h2><ol>
<li><strong>硕士以上；</strong></li>
<li><strong>扎实的数据结构和算法设计基础</strong>，掌握C/C++/Python/Perl等一门以上脚本语言；</li>
<li>对基础数据进行整理清洗和数据挖掘，利用统计分析、回归、决策树、神经网络等技术建立模型，参与各类模型的设计、开发、实施与跟踪，结合实际效果不断进行模型的训练和迭代，管理模型生命周期的全流程，挖掘用户画像和设备画像；</li>
<li>熟悉主流机器学习或深度学习，如<strong>Sklearn、Spark MLlib、Tensorflow</strong>等，熟练使用SQL，熟悉主流数据库环境；</li>
<li>熟悉<strong>图像处理、模式识别、图像滤波、轮廓提取、边缘检测、图像分割、图像拼接、图像融合</strong>等各类图像处理理论者优先；</li>
<li>熟悉<strong>语音信号处理、语言模型、声纹识别、模式识别、ASR、NLU、TTS</strong>等语音识别技术者优先；</li>
<li>地点：<strong>上海</strong></li>
</ol>
<h2 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h2><ol>
<li>从事利用深度学习技术研发实现图像识别和机器视觉的功能应用相关研究工作；</li>
<li>负责图像处理、图像特征提取、模型训练，识别衣服材质、件数、种类、颜色等；</li>
<li>负责ASR、NLU、TTS等语音识别技术实现。</li>
</ol>
<hr>
<h1 id="后端开发工程师"><a href="#后端开发工程师" class="headerlink" title="后端开发工程师"></a>后端开发工程师</h1><h2 id="资格-1"><a href="#资格-1" class="headerlink" title="资格"></a>资格</h2><ol>
<li>扎实的Java语言功底，熟悉JVM，熟练使用<strong>Jenkins、Maven、Git</strong>等常用工具；</li>
<li>熟悉<strong>springMvc、mybatis、hibernate、Docker、Kubernetes</strong>等开发框架；</li>
<li>熟悉常用的<strong>微服务框架（Dubbo/SpringCloud）</strong>以及其它常见的开源框架；</li>
<li>熟悉<strong>分布式缓存、消息中间件、RPC框架、负载均衡</strong>等技术，掌握各类中间件使用，包括<strong>Nginx、Tomcat、Redis、kafka</strong>等；</li>
<li>熟悉Linux操作系统，掌握常用的Linux命令；</li>
<li>有家电互联网经验的优先；</li>
<li>地点：<strong>上海</strong></li>
</ol>
<h2 id="职责-1"><a href="#职责-1" class="headerlink" title="职责"></a>职责</h2><ol>
<li>负责云端框架设计和搭建；</li>
<li>负责应用的微服务开发，满足产品功能需求；</li>
<li>负责跟IoT、前端、第三方供应商接口对接；</li>
<li>负责云端并发性、可靠性、容错性、稳定性、负载均衡等设计。   </li>
</ol>
<hr>
<h1 id="大数据工程师"><a href="#大数据工程师" class="headerlink" title="大数据工程师"></a>大数据工程师</h1><h2 id="资格-2"><a href="#资格-2" class="headerlink" title="资格"></a>资格</h2><ol>
<li>硕士以上；</li>
<li>熟悉<strong>常用设计模式，掌握分布式服务、高扩展，高可用，高性能系统的设计与编码，大规模存储系统、实时及离线计算、数据仓库</strong>方面有经验者优先；</li>
<li>熟悉大数据生态包括不限于 <strong>Hadoop/Spark/Hive/Hbase/Yarn/ClickHouse/ElasticSearch</strong>,并有相关项目开发经验；</li>
<li>熟悉流计算编程，熟练掌握<strong>Flink、Kafka、Flume</strong>等开源工具或框架；</li>
<li>熟悉<strong>数据ETL</strong>的流程和每个过程的关键数据处理方法和技巧，对<strong>OLAP、报表及可视化</strong>有一定的了解；</li>
<li>熟练使用Java/Python/SQL等编程语言，具备良好软件敏捷开发习惯；</li>
<li>地点：<strong>上海</strong></li>
</ol>
<h2 id="职责-2"><a href="#职责-2" class="headerlink" title="职责"></a>职责</h2><ol>
<li>负责大数据平台设计和搭建；</li>
<li>负责从海量日志<strong>提取数据和数据分析</strong>，支持市场以及营销活动的数据需求；</li>
<li>负责用户画像分析； </li>
<li>负责设备画像分析；</li>
<li>根据业务目标进行<strong>数据建模、数据挖掘，学习、研究Hadoop</strong>及相关技术内核，并将其运用与实践；</li>
</ol>
<hr>
<h1 id="测试工程师"><a href="#测试工程师" class="headerlink" title="测试工程师"></a>测试工程师</h1><h2 id="资格-3"><a href="#资格-3" class="headerlink" title="资格"></a>资格</h2><ol>
<li>5年以上互联网产品功能测试工作经验；</li>
<li>熟悉软件测试基本理论，掌握常用测试工具、软件测试流程及其各项规范，能独立承担测试工作（MONKEYRUNNER、DDMS、LR、SOAP等工具）；</li>
<li>有<strong>自动化测试</strong>经验，能独立设计用例并编写代码实现自动化测试，有产品性能、安全等测试经验；</li>
<li>很强的学习能力、分析能力和解决问题的能力，熟悉持续集成理论并有过相关实施经验，能够熟练使用<strong>持续集成平台</strong>及工具；</li>
<li>有家电互联网测试工作经验优先;</li>
<li>地点：<strong>上海</strong></li>
</ol>
<h2 id="职责-3"><a href="#职责-3" class="headerlink" title="职责"></a>职责</h2><ol>
<li>负责智能产品系统测试、如<strong>模块、app、云平台</strong>等的功能，性能测试；</li>
<li>参与自动化开发及测试；</li>
<li>参与测试技术规范和品质标准的制定。</li>
</ol>
<hr>
<h1 id="终端软件工程师"><a href="#终端软件工程师" class="headerlink" title="终端软件工程师"></a>终端软件工程师</h1><h2 id="资格-4"><a href="#资格-4" class="headerlink" title="资格"></a>资格</h2><ol>
<li>具有<strong>C/C++程序开发经验，熟悉Socket网络编程、文件I/O操作、音视频、多进程、多线程开发</strong>；</li>
<li>主要是<strong>界面和功能开发</strong>，使用工具Qt和miniGUI；</li>
<li>熟悉linux内核裁剪和定制、驱动开发、应用程序移植者优先；</li>
<li>熟悉shell脚本者优先；</li>
<li>深刻理解处理器架构，热爱处理器相关技术。深刻理解内存、DMA、中断等概念；</li>
<li>地点：<strong>无锡</strong></li>
</ol>
<h2 id="职责-4"><a href="#职责-4" class="headerlink" title="职责"></a>职责</h2><ol>
<li>嵌入式软件平台架构设计和技术解决方案提供；</li>
<li>带屏嵌入式系统UI开发和驱动开发；</li>
<li>组织软件沟通，评审，检讨；</li>
<li>从事智能产品开发工作，提高软件稳定性和安全性。</li>
</ol>
<hr>
<h1 id="终端硬件工程师"><a href="#终端硬件工程师" class="headerlink" title="终端硬件工程师"></a>终端硬件工程师</h1><h2 id="资格-5"><a href="#资格-5" class="headerlink" title="资格"></a>资格</h2><ol>
<li>有较强的模拟/数字电路的硬件设计和调试能力，经历过从单元板研发到整机产品研发到正式交付完整的研发周期；</li>
<li>负责产品硬件设计、器件选型、原理图设计和PCB Layout、硬件调试与设计迭代，有多层板设计经验者优先；</li>
<li>熟悉显示屏、扬声器、麦克风、摄像头、底盘马达、红外和LED等外设或传感器硬件；</li>
<li>撰写相关的标准, 流程，能够独立搭建测试环境与测试系统，能熟练运用示波器、逻辑分析仪、信号发生器等；</li>
<li>地点：<strong>无锡</strong></li>
</ol>
<h2 id="职责-5"><a href="#职责-5" class="headerlink" title="职责"></a>职责</h2><ol>
<li>负责硬件设计、器件选型、PCB layout、调试等；</li>
<li>负责标准化、硬件降本、wifi模组降本；</li>
<li>负责为各个模块选择合适的处理器平台及传感器； </li>
<li>对各类处理器平台和传感器进行比较分析（成本、性能、能耗、稳定性、兼容性），提交可行性报告。   </li>
</ol>
<hr>
<h1 id="其他要求"><a href="#其他要求" class="headerlink" title="其他要求"></a>其他要求</h1><ol>
<li>简历名称格式：葛先生-34岁-6年经验-机器视觉工程师-猎聘简历</li>
<li>一个岗位一周安排面试数要达到5个左右，但是不能超过5个人；</li>
</ol>
<p></p>
<hr>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="猎聘"><a href="#猎聘" class="headerlink" title="猎聘"></a>猎聘</h2><ol>
<li>网址：<a href="http://www.lietou.com/" target="_blank" rel="noopener">http://www.lietou.com/</a></li>
<li>账户：美的集团洗衣机事业部</li>
<li>密码：midea2019</li>
</ol>
<h2 id="前程无忧"><a href="#前程无忧" class="headerlink" title="前程无忧"></a>前程无忧</h2><ol>
<li>网址：<a href="http://www.51job.com/" target="_blank" rel="noopener">http://www.51job.com/</a></li>
<li><del>会员名：wx小天鹅1</del></li>
<li><del>用户名：mideaxyj-03</del></li>
<li><del>密码：xyj2019.</del></li>
<li>会员名：美的企业集团</li>
<li>用户名：mideaxyj</li>
<li>密码：xyj2019.</li>
</ol>
<h2 id="面试官"><a href="#面试官" class="headerlink" title="面试官"></a>面试官</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>面试人：倪志伟</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>面试人：冯艺 胡军辉</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>面试人：李祥明 胡军辉</p>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>面试人：胡军辉</p>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><p>面试人：胡军辉</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>面试人：苏忠城 胡军辉</p>
]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>程序员要有数学基础——统计思维</title>
    <url>/2020/06/05/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%9C%89%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E7%BB%9F%E8%AE%A1%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用编程理解统计学如概率、 分布、假设检验、贝叶斯估计、相关性等可能就不会觉得统计概率很枯燥了吧！离开了计算机， 统计在现代科学和工程领域寸步难行！如何用统计学方法分析大型数据集在这里会有所体现！<strong>推荐书籍：《统计思维：程序员数学之概率统计》· [美] Allen B. Downey 著 张建锋 陈钢 译</strong>   </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><ol>
<li>美国疾病控制与预防中心（Centers for Disease Control and Prevention，CDC）主持的全国家庭成长调查（National Survey of Family Growth，NSFG）项目，收集了美国人的避孕和男女健康等信息”，<a href="https://www.cdc.gov/nchs/nsfg.htm" target="_blank" rel="noopener">详细内容</a>；</li>
<li>国慢性病预防和健康促进中心主导的行为风险因素监测系统（the Behavioral Risk Factor Surveillance System，BRFSS） ， 该系统旨在跟踪“美国人的健康状况和危险行为”，<a href="http://cdc.gov/BRFSS/" target="_blank" rel="noopener">详细内容</a>；</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h3><ol>
<li>为了解决经验之谈的种种不足，会采用统计学手段：<ul>
<li>收集数据</li>
<li>描述性统计</li>
<li>探索性数据分析</li>
<li>假设检验</li>
<li>估计</li>
</ul>
</li>
<li>下载数据，同意协议，然后<a href="http://greenteapress.com/thinkstats/nsfg.html" target="_blank" rel="noopener">下载</a> 2002FemResp.dat.gz 和 2002FemPreg.dat.gz 两个文件：<ul>
<li>2002FemResp.dat.gz是被调查者文件， 每一行代表一个被调查者， 总共 7643 个女性被调查者</li>
<li>2002FemPreg.dat.gz是各个被调查者的怀孕情况文件</li>
</ul>
</li>
<li>重编码通常遵循数据一致性和准确性原则。 除非有特别原因一定要使用原始数据，否则就应该直接使用重编码后的数据！</li>
</ol>
<h2 id="统计学知识"><a href="#统计学知识" class="headerlink" title="统计学知识"></a>统计学知识</h2><ol>
<li><p>均值（mean）和平均值（average） 在很多情况下可以不加区分地使用，但还是有区别的：</p>
<ul>
<li>样本的“均值” 是计算出来的一个汇总统计量</li>
<li>“ 平均值” 是若干种可以用于描述样本的典型值或集中趋势（central tendency） 的汇总统计量之一  </li>
<li>有时候均值可以很好地描述一组值  </li>
</ul>
<p><img src="" alt="均值概念"></p>
</li>
<li><p>方差是描述分散情况的统计数据，一组值的方差等于：</p>
<p><img src="" alt="方差公式">  </p>
<ul>
<li>方差的平方根叫做标准差</li>
</ul>
</li>
<li><p>数据的分布（distribution）描述了各个值出现的频繁程度： </p>
<ol>
<li>表示分布最常用的方法是直方图（histogram）， 这种图用于展示各个值出现的频数或概率 </li>
<li>频数指的是数据集中一个值出现的次数  </li>
<li>概率就是频数除以样本数量 n</li>
<li>在 Python 中， 计算频数最简单的方法就是用字典</li>
<li>把频数转换成概率， 称为归一化（normalization），归一化之后的直方图称为 PMF（Probability Mass Function， 概率质量函数）    </li>
<li>直方图和概率质量函数通常画成条状图  </li>
</ol>
</li>
<li><p>分布中出现次数最多的值叫做众数；远离众数的值叫做异常值（outlier）；</p>
</li>
<li><p>异常值有可能是采集和处理数据过程中的错误导致的， 也有可能是罕见的正确结果；      </p>
</li>
<li><p>条件概率（conditional probability） 就是依赖于某个条件的概率；</p>
</li>
<li><p>区间（bin）：将相近数值进行分组的范围   </p>
</li>
<li><p>集中趋势（central tendency）：样本或总体的一种特征， 直观来说就是最能代表平均水平的值  </p>
</li>
<li><p>累积分布函数（Cumulative Distribution Function， CDF）是值到其在分布中百分等级的映射；</p>
</li>
<li><p>条件分布是根据某个条件选择的数据子集的分布；</p>
</li>
<li><p>若事件在每个时间点发生的概率相同， 那么间隔时间的分布就近似于指数分布，其CDF是：</p>
<p><img src="" alt="指数分布"></p>
<ul>
<li>取对数后的互补累积分布函数（Complementary CDF，CCDF）：1-CDF(x)</li>
</ul>
</li>
<li><p>帕累托分布广泛用于描述自然界和社会科学中的各种现象， 包括城镇大小、 砂粒和陨石、 森林火灾和地震等，其CDF是：</p>
<p><img src="" alt="帕累托分布">    </p>
</li>
<li><p>正态分布也称为高斯分布， 因其可以近似描述很多现象而成为最常用的分布，对于正态分布的 CDF 还没有一种准确的表达。 最常用的一种形式是以误差函数（error function） 表示 ：</p>
<p><img src="" alt="正态分布"></p>
</li>
<li><p>对于指数分布、 帕累托分布和威布尔分布， 都可以通过简单的转换来判断一个连续分布是否能用于某份数据集的建模，对于正态分布就不存在这样的变换；</p>
</li>
<li><p>如果一组数值做对数变换后服从正态分布， 我们就称其服从对数正态分布（lognormal distribution），CDF为：</p>
<p><img src="" alt="对数正态分布"></p>
</li>
<li><p><strong>真实世界的很多现象都可以用连续分布来建模！</strong></p>
</li>
<li><p>如果可以高效地计算出ICDF(p)（inverse CDF， 逆 CDF） ， 我们就可以方便地生成服从各种分布的随机值；</p>
</li>
</ol>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><ol>
<li><p>概率的含义一直就是一个有争议的话题，普遍认同概率是一个 0到1之间的值， 是一种定量度量， 对应于定性地描述某一件事发生的可能性的大小；</p>
</li>
<li><p>被赋予概率的“事情” 称为事件（event），如果 E 表示一个事件， 那么 P(E) 就表示该事件发生的概率。 检测 E 发生情况的过程就叫做试验（trial）；</p>
</li>
<li><p>大部分人都可以接受用一系列假想的重复试验来表示概率；</p>
</li>
<li><p>频率论（frequentism）， 就是用频率来定义概率；</p>
</li>
<li><p>贝叶斯认识论（bayesianism）将概率定义为事件发生的可信度；</p>
</li>
<li><p>蒙提霍尔问题（The Monty Hall problem） 有可能是历史上最富争议的概率问题！</p>
</li>
<li><p>二项分布（binomial distribution）， 其 PMF 是 ：</p>
<p><img src="" alt="二项分布"></p>
</li>
<li><p>聚类错觉（clustering illusion）， 指看上去好像有某种特点的聚类实际上是随机的 ；</p>
</li>
<li><p>贝叶斯定理（Bayes’s theorem） 描述的是两个事件的条件概率之间的关系，公式如下：</p>
<p><img src="" alt="贝叶斯公式">  </p>
</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>网路基础知识</title>
    <url>/2020/06/15/%E7%BD%91%E8%B7%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>户根勤是个全栈工程师，从软件到硬件，从服务器到交换机，似乎每一方面都在行，真的是一个牛人。<strong>不理解网络的全貌，也就无法理解每一种网络技术背后的本质意义！</strong>如果无法理解其本质意义，就只能停留在死记硬背的程度，无法做到实际应用。 <strong>推荐书籍：《网络是怎样连接的》· [日] 户根勤 著 周自恒 译</strong>            </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>浏览器并不会亲自负责数据的传送，会委托操作系统中的网络控制软件将消息发送给服务器；</li>
<li>协议栈（网络 控制软件叫作协议栈）会将从浏览器接收到的消息打包，然后加上目的地址等控制信息，然后将包交给网卡，网卡会将包转换为电信号并通过传输介质发送出去；</li>
<li>互联网的入口线路称为接入网，可以用电话线、ISDN、ADSL、有线电视、光线、专线等多种通信线路来接入互联网，这些通信 线路统称为接入网；</li>
<li>接入点（Point of Presence，PoP）的实体是一台专为运营商设计的路由器（高速大型路由器）；</li>
</ol>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ol>
<li><p>浏览器会根据网址的含义来生成请求消息，将用户需要哪些数据告知服务器；</p>
</li>
<li><p>浏览器需要向 DNS 服务器查询域名对应的 IP 地址，DNS存在的原因是因为人们通常很难记住IP地址，因此让人来使用名称，让路由器来使用 IP 地址。由于上级 DNS 服务器保管着所有下级DNS服务器的信息，所以可以从根域开始一路往下顺藤摸瓜找到任意一个域的 DNS 服务器；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7cbade67c4201a8edc4ceb71cecd9e81-398193" alt="DNS工作原理"></p>
</li>
<li><p>浏览器是一个具备多种客户端功能的综合性客户端软件，可以进行浏览网页，下载文件等等！</p>
</li>
<li><p>URL格式：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/449b8c93d9ce63db83fc7ee550ba00bc-252899" alt="各种URL"></p>
</li>
<li><p>Web解析URL的过程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a72b1aca6b6ef3658cf481f3a6ef2408-178535" alt="Web解析URL"></p>
</li>
<li><p>HTTP主要方法（方法表示需要让 Web 服务器完成怎样的工作）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a4cf7159321d9b9f0a4e70a10b11f264-456265" alt="HTTP主要方法"></p>
</li>
<li><p>HTTP消息的格式（消息头的规格中定义了很多项目，如日期、客户端支持的数据类型、语言、压缩格式、客户端和服务器的软件名称和版本、数据有 效期和最后更新时间等）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/059bf998216650e3cafec1eefd21259a-316780" alt="HTTP消息格式"></p>
</li>
<li><p>HTTP状态码：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/a7d3e07287df6f307e67fff62b99d75c-127813" alt="HTTP状态码"></p>
</li>
<li><p>HTTP方法示例：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/fba5e7b88c252aad987520027356c359-268438" alt="请求"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8b4f2f018ecc4d1177c4a192be7a19a5-399989" alt="服务器返回"></p>
</li>
</ol>
<h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><ol>
<li><p>分层结构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b137bbaef7a5b5ce3f0cc2c12e8e7065-228594" alt="TCP/IP分层"></p>
</li>
<li><p>浏览器、邮件等一般应用程序收发数据时用 TCP，DNS 查询等收发较短的控制数据时用 UDP；</p>
</li>
<li><p>协议栈是根据套接字中记录的控制信息来工作的；</p>
</li>
<li><p>TCP头部格式：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c855bd27a1439b79b720d7ee3da958e4-633082" alt="TCP头部格式"></p>
</li>
<li><p>协议栈并不是一收到数据就马上发送出去，而是会将数据存放在内部的发送缓冲区中，并等待应用程序的下一段数据，至于要积累多少数据才能发送，不同种类和版本的操作系统会有所不同；</p>
</li>
<li><p>数据拆分发送：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5be6bd87c2c20712b6ea9f145b683282-144096" alt="数据拆分"></p>
</li>
<li><p>序号和ACK:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/10a4782e25e17aee00699c715f0f49e2-270570" alt="序号和ACK"></p>
</li>
<li><p>协议栈会将接收到的数据复制到应用程序指定的内存地址中， 然后将控制流程交回应用程序，将数据交给应用程序之后，协议栈还需要找到合适的时机向发送方发送窗口更新；</p>
</li>
<li><p>协议栈在设计上允许任何一方先发起断开过程！</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2fcebb525fb3886f4c468a77f5f60abb-251993" alt="TCP协议流程"></p>
</li>
<li><p>TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模块将数据封装成包发送给通信对象；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bb6069b8a93dc9aeb1bbeb5760d3c725-610262" alt="IP头部格式"></p>
</li>
</ol>
<h2 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h2><ol>
<li><p>信号从计算机中流出之后，会在网线中经过集线器等设备前进；</p>
</li>
<li><p>双绞线分类：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1ef52ba5f3c690dcd7d2b6d2b9cf89e7-301717" alt="双绞线分类"></p>
</li>
<li><p>集线器将信号发送给所有连接在它上面的线路，其会原封不动地将信号广播出去，所以即便信号受到噪声的干扰发生了失真，也会原样发送到目的地；</p>
</li>
<li><p>交换机可以将输入端和输出端连接起来，信号线排列成网格状，每一个交叉点都有一个交换开关，交换开关是电子控制的，通过切换开关的状态就可以改变信号的流向。交换电路的输入端和输出端分别连接各个接收端口和发送端口，网络包通过这个网格状的电路在端口之间流动；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12e7c2f9f3261ac578bb426c6e83d593-452948" alt="交换机结构"></p>
<ul>
<li>交换机端口的 MAC 模块不具有 MAC 地址</li>
<li>交换机根据 MAC 地址表查找 MAC 地址， 然后将信号发送到相应的端口</li>
<li>交换机需要对 MAC 地址表的内容进行维护</li>
<li>交换机的全双工模式可以同时发送和接收信号</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4cc0bb36f257ed92f7f37b0064cbc9fd-140150" alt="不同源端口转发网络包"></p>
</li>
<li><p>交换机只将包转发到具有特定 MAC 地址的设备连接的端口，其他端口都是空闲的！</p>
</li>
<li><p>路由器是基于 IP 设计的，而交换机是基于以太网设计的。如果路由器的端口模块安装了支持无线局域网的硬件，就可以支持无线局域网了；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/982c30f3fba8ffeb4ca78f93787ee1c8-265101" alt="路由器结构"></p>
<ul>
<li><p>路由器的各个端口都具有 MAC 地址和 IP 地址</p>
</li>
<li><p>路由器则是根据 IP 头部中的 IP 地址来判断转发目标</p>
</li>
<li><p>路由聚合会将几个子网合并成一个子网， 并在路由表中只产生一条记录</p>
</li>
<li><p>路由表中子网掩码为 0.0.0.0 的记录表示“默认路由”</p>
</li>
<li><p>路由协议有很多种，例如 RIP、OSPC、BGP 等都属于路由协议</p>
</li>
<li><p>路由表的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量</p>
</li>
<li><p>路由器中的表叫作路由表</p>
</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0fba230f3628111570945657f82da41b-251710" alt="路由表"></p>
</li>
<li><p>路由器判断下一个转发目标的方法：</p>
<ul>
<li>如果路由表的网关列内容为 IP 地址， 则该地址就是下一个转发目标</li>
<li>如果路由表的网关列内容为空，则 IP 头部中的接收方 IP 地址就是下一个转发目标</li>
</ul>
</li>
<li><p>路由器也会使用 ARP 来查询下一个转发目标的 MAC 地址；</p>
</li>
<li><p>路由器将包的传输工作委托给交换机来进行；</p>
</li>
<li><p>路由器端口转发：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/daaebf6d2f999b4c9d96c50ce5d0d04e-359420" alt="路由器端口转发"></p>
</li>
</ol>
<h2 id="网络运营商"><a href="#网络运营商" class="headerlink" title="网络运营商"></a>网络运营商</h2><ol>
<li><p>家庭和公司的内网是通过接入网连接到网络运营商的，接入网需要通过用户名和密码验证用户的身份，然后由网络运营商向用户分配公有地址；</p>
</li>
<li><p>互联网整体架构：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0969ba6f3fd3a8218863dba13906364a-83664" alt="互联网整体架构"></p>
</li>
<li><p>互联网接入路由器是按照接入网规则来发送包的；</p>
</li>
<li><p>互联网接入路由器会在网络包前面加上 MAC 头部、PPPoE 头部、PPP 头 部 总 共 3 种 头 部， 然 后 发 送 给 ADSL Modem（PPPoE 方式下）；</p>
</li>
<li><p>PPP拨号操作：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/90c9571487602a6e2df49c8823d6147a-64814" alt="PPP拨号操作"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/75dbc8ffa9ba44e20b0ff418081bdbef-57604" alt="PPPoE协议包"></p>
<ul>
<li>PPPoE 是将 PPP 消息装入以太网包进行传输的方式</li>
</ul>
</li>
<li><p>隧道技术：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b7c217591e299eb724133762377927b0-65005" alt="隧道技术"></p>
<ul>
<li>互联网接入路由器通过 PPPoE 的发现机制查询 BAS 的 MAC 地址</li>
<li>BAS 下发的 TCP/IP 参数会被配置到互联网接入路由器的 BAS端的端口上，这样路由器就完成接入互联网的准备了</li>
<li>BAS 在收到用户路由器发送的网络包之后，会去掉 MAC 头部和PPPoE 头部，然后用隧道机制将包发送给网络运营商的路由器。然后用隧道机制将包发送给网络运营商的路由</li>
</ul>
</li>
<li><p>PPPoA 方式不添加 MAC 头部和 PPPoE 头部，而是直接将包装入信元中；</p>
</li>
<li><p>DHCP服务：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/99edb9d23ff7147bfb7ac6d42562bea2-30649" alt="DHCP服务"></p>
</li>
<li><p>网络包通过接入网之后，到达运营商 POP 的路由器；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d1e0d8d4d1c640dd0018a500c901c4c5-103265" alt="POP概览"></p>
</li>
<li><p>运营商信息交换：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eb66aa3f586ff71e9e06170206b1ae6c-69374" alt="运营商信息交换"></p>
</li>
<li><p>互联网内部使用 BGP 机制在运营商之间交换路由信息！</p>
</li>
<li><p>可以通过 DNS 服务器来进行负载均衡；</p>
</li>
<li><p>使用负载均衡器时， 首先要用负载均衡器的 IP 地址代替 Web 服务器的实际 地址注册到 DNS 服务器上；</p>
</li>
<li><p>缓存服务器是一台通过代理机制对数据进行缓存的服务器；</p>
</li>
<li><p>缓存服务器使用的代理机制最早就是放在客户端一侧的，这才是代理的原型，称为正向代理；</p>
</li>
<li><p>反向代理采用的是通过 DNS 服务器解析引导的方法；</p>
</li>
<li><p>使用透明代理时，用户不会察觉到代理的存在，也不会注意到 HTTP 消息是如何被转发的，因此大家更倾向于将透明代理说成是缓存；</p>
</li>
<li><p>缓存服务器部署方式：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5832dcffbd7d163af86fc98cd7a5e0ee-93153" alt="缓存服务器部署方式"></p>
</li>
<li><p>ContentType类型：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/965e98c697bb16d0baee0a0bca98f7b7-106348" alt="ContentType类型"></p>
</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从输入网址到显示出网页内容，这个过程只有短短几秒的时间，在这短短几秒的背后，离不开各种设备和软件的相互配合！网络相关的知识还需要继续学习，比如一个mqtt协议都可以去学习好久！每种协议都是为了解决某一类问题而研究的，都有存在的价值！</p>
]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>脚本语言基础原理快速入门</title>
    <url>/2020/07/05/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>设计程序时使用的语言称为程序设计语言。如 Java 语言、C 语言、Ruby 语言、C++ 语言、 Python 语言等，都是程序设计语言，程序员必须使用与各程序设计语言相匹配的软件来执行由该语言写成的程序，这种软件通常称为语言处理器。而有些程序设计语言无需借助软件执行，即不需要语言处理器，这些语言称为机器语言。机器语言可以由硬件直接解释执行，理论上不必使用软件。本文主要学习的是脚本语言的原理！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>创造一门编程语言,只需要一些 C 语言基础或者Java语言基础、一些正则表达式知识、加上不断思索的大脑就可以做到；</p>
</li>
<li><p>crowbar 是运行分析树的无类型语言,Diksam 是运行字节码的静态类型语言；</p>
</li>
<li><p>汇编程序可以说是一种最基本的语言处理器；</p>
</li>
<li><p>语言处理器可大致分为解释器与编译器两种：</p>
<ul>
<li>解释器——解释器根据程序中的算法执行运算</li>
<li>编译器——编译器能将某种语言写成的程序转换为另一种语言</li>
</ul>
</li>
<li><p>Java 语言首先会通过编译器把源代码转换为 Java 二进制代码，并将这种虚拟的机器语言保存在文件中；</p>
</li>
<li><p>选择 Java 语言设计语言处理器是为了以面向对象的方式设计语言处理器。语言处理器的复杂度适中，常用于实验或论证各种语言范型的性能；</p>
</li>
<li><p>无论是解释器还是编译器，语言处理器前半部分的程序结构都大同小异。源代码首先将进行词法分析，由一长串字符串细分为多个更小的字符串单元。分割后的字符串称为单词。之后处理器将执行语法分析处理，把单词的排列转换为抽象语法树。至此为止，解释器与编译器的处理方式相同。之后，编译器将会把抽象语法树转换为其他语言，而解释器将会一边分析抽象语法树一边执行运算；</p>
<p><img src="" alt="语言处理器内部的处理流程"></p>
</li>
<li><p>首先设计一种极为简单的语言，并开发相应的语言处理器，确保程序能 够正确运行。之后，再慢慢向其中添加诸如面向对象等一些复杂的语言功能；</p>
</li>
<li><p>在设计一种语言时，设计者必须多加注意， 确保语言中不出现模棱两可的歧义语法；</p>
</li>
<li><p>语言处理器的第一个组成部分是词法分析器（lexical analyzer、lexer 或 scanner）。词法分析将筛选出程序的解释与执行必需的成分，单词之间的空白或注释都会在这一阶段被去除。在经过词法分析之后，程序员便无需再处理代码的注释，也不用考虑单词之间是否含有空白符；</p>
</li>
<li><p>只要能够通过正则表达式来表示单词的定义，词法分析器的设计就没有太大的困难。</p>
</li>
</ol>
<h2 id="为什么要制作编程语言"><a href="#为什么要制作编程语言" class="headerlink" title="为什么要制作编程语言"></a>为什么要制作编程语言</h2><ol>
<li>可以帮助理解编程语言的内部运行机制；</li>
<li>能制作领域专用语言(DSL,Domain-Specific.Language)；</li>
<li>可以用编程语言扩展应用程序；</li>
<li>说不定还会变成名人；</li>
<li>自制编程语言非常有趣！</li>
</ol>
<h2 id="编程语言核心"><a href="#编程语言核心" class="headerlink" title="编程语言核心"></a>编程语言核心</h2><ol>
<li><p>现在大多数编程语言，都会将代码转换成一种叫做分析树（parse tree，语法分析树或语法树，抽象语法树）的东西。有些语言如Perl、Ruby等，一旦将代码转换成分析树之后，分析树将无法再还原回源代码。分析树结构如下所示：</p>
<p><img src="" alt="语法树"></p>
</li>
<li><p>Java等编程语言取代分析树的则是更为底层的字节码，通过解释器运行字节码。而Java语言，编译生成的字节码被保存在class文件中；</p>
</li>
<li><p>Java具备在运行的同时将字节码转换成机器码的功能，该功能称为“JIT(Just-In-Time)编译技术“，而这部分技术不属于解释器；</p>
</li>
<li><p>安装bison以及flex（用于替换yacc以及lex）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install bison</span><br><span class="line">sudo apt install flex</span><br></pre></td></tr></table></figure>

<ul>
<li>bison 的作用是将用户编写的配置文件输出为 C 语言格式的代码。根据语法规则自动生成解析器</li>
<li>flex 会像 bison 一样输出 C 代码,这里的 C 代码也像 bison 一样,会包含一些属于flex 的代码。根据词法规则自动生成词法分析器</li>
</ul>
</li>
<li><p>一般编程语言的语法处理流程：</p>
<ol>
<li>词法分析：将源代码分割为若干个 记号(token)的处理；</li>
<li>语法分析：从记号构建 分析树(parse.tree)的处理；</li>
<li>语义分析：检查程序中是否含有语法正确但是存在逻辑问题的错误；</li>
<li>生成代码：如果是 C 语言等生成机器码的编译器或 Java 这样生成字节码的编译器,在分析树构建完毕后会进入代码生成阶段。</li>
</ol>
</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>自定义通讯协议TLV</title>
    <url>/2020/05/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AETLV/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>通讯协议</strong>是指通信双方对数据传送控制的一种约定，约定中包括对数据格式，同步方式，传送速度，传送步骤，纠错方式以及控制字符定义等问题做出统一规定，通信双方必须共同遵守，倘若一方不遵守，便会直接导致数据不能被解析！可以理解两个以上节点之间为了协同工作实现信息交换，协商一定的规则和约定，例如规定字节序，各个字段类型等。用户自定义的通讯协议实现需要用户自己设定数据发送的格式以及数据的封装形式，然后通过上面的规范传输协议如TCP协议发送给对端，对端再根据自己定义好的协议对数据进行解析，从而得到想要的数据，TLV（Tag-Length-Value）属于自定义协议的一种。在学校里学习的时候没有接触过这种自定义协议类型，到了公司之后，阅读了后端代码才知道这种数据类型！挺惭愧的<del>~</del></p>
<p><img src="https://img-blog.csdnimg.cn/20191229140519775.gif#pic_center" alt=""></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>TLV是基于ASN.1标准的一种BER编码方式，数据的类型Tag（T），数据的长度Length（L），数据的值Value（V）构成的一组数据报文；</p>
</li>
<li><p>TLV是基于二进制编码的，将数据以（T -L- V）的形式编码为字节数组，属于字节流的数据传输协议，规定了一帧数据的首个字节或几个字节来表示数据类型，紧接着一个或几个字节表示数据长度，最后是数据的内容；</p>
<p><img src="https://img-blog.csdnimg.cn/20190328104702944.png" alt=""></p>
</li>
<li><p>TLV只是大致规定了封装格式，并没有固定的形式，需要用户自己设定，因为每个用户所要发送的数据类型、长度或者内容大都是不同的；</p>
</li>
<li><p>为了完善TLV协议，需要在我们的TLV协议数据封装格式之前加上一个帧头，作为每一帧数据解析的起始部分；</p>
</li>
<li><p>对协议进一步完善，在每帧数据的最后加上一个CRC校验和，那么一旦每帧数据出错了，那么CRC校验时就一定会出错，这样就会去解析下一帧数据；</p>
</li>
<li><p>较为完备的通讯协议格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">【帧头(n字节)】 【Tag】【Length】 【nBytes Value】 【CRC校验和】</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="深入TLV"><a href="#深入TLV" class="headerlink" title="深入TLV"></a>深入TLV</h2><ol>
<li><p>TLV几乎可以描任意数据类型，TLV的Value也可以是一个TLV结构，正因为这种嵌套的特性，可以让我们用来实现复杂的协议；</p>
</li>
<li><p>TLV这种编码方式不具备结构化（结构未知）特点，但是TLV具备很好的扩展性；</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haHEwMmcuZG0yMzAzLmxpdmVmaWxlc3RvcmUuY29tL3kycEU4bWFhSk9WaTJoVGxadjEzTzdTNkx4cUxzYlR6RmY3SENHLUotUm54aGcyVVd2bUtITVRUMnR2Rk1zM3pqSkdFYjdXSWRnUUUzZDhXdTZIcm9LeW5WSkcybjFqX3lGcjRja0hsYWQxLTd3L1RMVl9ESVNDLnBuZw?x-oss-process=image/format,png" alt=""></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haHEwMmcuZG0xLmxpdmVmaWxlc3RvcmUuY29tL3kycDB0R3B6dmMyNF9FcGRkZkJFWnNkRXFVQkhhUklNRlNvbTRpenlKTjRyeXJmMmJvRDdnNEZmcXlWdGlTcW1kNVVPYzlUdU54SHdtc0Nta20ySkZEOGhMLUhsT1lJY2l4YTZCTWdjOV9SYmdZL1RBR19OQi5wbmc?x-oss-process=image/format,png" alt=""></p>
</li>
<li><p>对基本数据类型(Primitive Data)进行约定，以便通信双方以一致的方式进行数据转换，这也是协议制定的一部分；</p>
</li>
<li><p>嵌套类型的TLV：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zdGF0aWMub3NjaGluYS5uZXQvdXBsb2Fkcy9pbWcvMjAxNTExLzEyMDkwNjQ2X0tZN0UucG5n?x-oss-process=image/format,png" alt=""></p>
</li>
</ol>
<h2 id="TLV优缺点"><a href="#TLV优缺点" class="headerlink" title="TLV优缺点"></a>TLV优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>可扩展性、简单易学、 跨语言特性</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>增加了2个额外的冗余信息，会浪费几倍存储空间；</li>
<li>需要通信双方事先得到描述文档，即TLV不具备结构化和自解释特性</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为公司的工作里大量使用TLV进行数据传输，这部分的学习也算是对自己知识的扩充吧！</p>
]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>计算机基础知识强化</title>
    <url>/2020/06/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>计算机科学是个新领域，不过它几乎已经触及人类工作的每个方面！计算机科学是一门抽象的科学，它为人们思考问题以 及找到适当的机械化技术解决问题而建立模型。 <strong>推荐书籍：《计算机科学的基础》· [美] Alfred·V.Aho Jeffrey·D.·Ullman 著 傅尔也 译   《计算机是怎样跑起来的》· [日] 矢泽久雄 著 胡屹 译</strong> </p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>抽象意味着简化，是将现实中复杂而详细的情景替换为解决问题所使用的 可理解模型；</li>
<li>数据模型：数据特征的抽象，用来描述问题；</li>
<li>数据结构：用来表示数据模型的编程语言结构；</li>
<li>算法：操作用数据模型抽象、数据结构等形式表示的数据，从而获取解决方案的技术；</li>
<li>任何数学概念都可称为数据模型；</li>
<li>计算机三大原则：<ul>
<li>计算机是执行输入、运算、输出的机器</li>
<li>程序是指令和数据的集合</li>
<li>计算机的处理方式有时与人们的思维习惯不同</li>
</ul>
</li>
<li>CPU 是计算机的大脑， 负责解释、执行程序。 内存负责存储程序和数据。I/O 是 Input/Output（输入／输出）的缩写，负责将计算机和外部设备（周边设备）连接在一起;</li>
<li>CPU、内存、I/O 中不但有地址总线引脚、数据总线引脚，还有其他引脚，通常把这些引脚统称为“控制引脚”；</li>
<li></li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>项目软件等的版本</title>
    <url>/2020/05/13/%E9%A1%B9%E7%9B%AE%E8%BD%AF%E4%BB%B6%E7%AD%89%E7%9A%84%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一些默认的比较出名的代码版本号，项目中可能用的上！</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="常用版本号"><a href="#常用版本号" class="headerlink" title="常用版本号"></a>常用版本号</h2><ol>
<li>Alpha：软件或系统的内部测试版本，会有很多Bug，仅内部人员使用</li>
<li>Beta：软件或系统的测试版本，这一版本通常是在Alpha版本后，会有很多新功能，同时也有不少Bug</li>
<li>Gamma：软件或系统接近于成熟的版本，只需要做一些小的改进就能发行</li>
</ol>
<h2 id="微软的版本号"><a href="#微软的版本号" class="headerlink" title="微软的版本号"></a>微软的版本号</h2><ol>
<li>RC（Release Candidate）：候选版本，这一版本不会增加新功能，多要进行Debug</li>
<li>GA（General Available）：正式发布版本，这个版本就是正式的版本</li>
<li>RTM（Release to Manufacture）：给工厂大量生产的压片版本，与正式版内容一样</li>
<li>OEM（Original Entrusted Manufacture）：给计算机厂商的出场销售版本，不零售只预装</li>
<li>RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版/英文版文档破解出来的</li>
<li>EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别</li>
<li>RTL（Retail）：零售版是真正的正式版，正式上架零售版</li>
</ol>
<h2 id="苹果版本号"><a href="#苹果版本号" class="headerlink" title="苹果版本号"></a>苹果版本号</h2><p>GM（Gold Master）：正式版前最后一个测试版，其实也就是正式版</p>
<h2 id="谷歌版本号"><a href="#谷歌版本号" class="headerlink" title="谷歌版本号"></a>谷歌版本号</h2><ol>
<li>Canary：迭代速度相对于Chromium版稍慢一些，功能非常新但未经过验证，同时崩溃的概率非常高</li>
<li>Chromium：开源版本，迭代速度极快，数小时就会有新版本，有很多新功能，等待验证后会移植到Chrome</li>
<li>Dev：基于Chromium开发，每周出新功能，并且这些功能还有一定的筛选，另外还修复了一些Bug和不稳定因素</li>
<li>Beta：基于Dev版，Chrome会基于这一版本进行改进，一般按月更新，功能更加完善</li>
<li>Stable：稳定版本，也就是Chrome的正式版本，这一版本基于Beta版，已知Bug都被修复，一般情况下，更新比较慢</li>
</ol>
<h2 id="Ubuntu版本号"><a href="#Ubuntu版本号" class="headerlink" title="Ubuntu版本号"></a>Ubuntu版本号</h2><p>LTS（Long Term Support）：长期演进版，Ubuntu会对这一版本的支持时间更长</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>版本号对于软件的发布真的非常重要，一定要注意不要使用那种1_10什么的，或者说不要超过10以上的数字，否则可能出现一些意想不到的维护问题！</p>
]]></content>
      <categories>
        <category>Base</category>
      </categories>
  </entry>
  <entry>
    <title>语音项目记录</title>
    <url>/2020/06/03/%E8%AF%AD%E9%9F%B3%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>语音功能事业部主要处理的是品类的lua脚本转换（美居APP终端语音操控智能家电时的协议转换脚本）。虽然有一些文档辅助理解，但是还是需要根据辅助文档结合事业部情况进行相应的处理。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h2><ol>
<li>NLU意图到lua Json的转换，比如开机转化成{“power”:”on”}；</li>
<li>状态的互斥，还有些特殊的情况比如设备可能不支持，需要区分机型，这个时候，可能要用到deviceSubType或deviceSN字段；</li>
<li>出错时，使用error_msg来回复给用户错误内容；</li>
</ol>
<h2 id="脚本关键内容"><a href="#脚本关键内容" class="headerlink" title="脚本关键内容"></a>脚本关键内容</h2><ol>
<li><p>intentToJson：通过NLU出来的结果JSON， 转换成对应IOT的控制指令</p>
</li>
<li><p>utils.lua：公共方法的脚本文件</p>
</li>
<li><p>json格式（样例）:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"checkSkillResult"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"baseScriptName"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"deviceMode"</span>: [</span><br><span class="line"><span class="string">"green_wool"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"localNluScriptName"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"remoteNluScriptName"</span>: <span class="string">"T_0000_DB_NLU_V2_GENERIC"</span>,</span><br><span class="line"><span class="attr">"devicestatus"</span>: &#123;</span><br><span class="line"><span class="attr">"stains"</span>: <span class="string">"255"</span>,</span><br><span class="line"><span class="attr">"memory"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"speedy"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"strong_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"appointment"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"program"</span>: <span class="string">"cotton"</span>,</span><br><span class="line"><span class="attr">"down_light"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"dehydration_time"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"mode"</span>: <span class="string">"factory_test"</span>,</span><br><span class="line"><span class="attr">"detergent"</span>: <span class="string">"255"</span>,</span><br><span class="line"><span class="attr">"nightly"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"temperature"</span>: <span class="string">"invalid"</span>,</span><br><span class="line"><span class="attr">"lock"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"expert_step"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"eye_wash"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"old_speedy"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"wash_time"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"remain_time"</span>: <span class="number">9</span>,</span><br><span class="line"><span class="attr">"wash_time_value"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"super_clean_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"softener"</span>: <span class="string">"255"</span>,</span><br><span class="line"><span class="attr">"power"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"water_level"</span>: <span class="string">"255"</span>,</span><br><span class="line"><span class="attr">"ultraviolet_lamp"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"appointment_time"</span>: <span class="number">65535</span>,</span><br><span class="line"><span class="attr">"dehydration_time_value"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"steam_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"spray_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"soak_count"</span>: <span class="string">"invalid"</span>,</span><br><span class="line"><span class="attr">"add_rinse"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="number">31</span>,</span><br><span class="line"><span class="attr">"intelligent_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"running_status"</span>: <span class="string">"standby"</span>,</span><br><span class="line"><span class="attr">"dirty_degree"</span>: <span class="string">"255"</span>,</span><br><span class="line"><span class="attr">"project_no"</span>: <span class="number">12336</span>,</span><br><span class="line"><span class="attr">"soak"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"fast_clean_wash"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"easy_ironing"</span>: <span class="string">"on"</span>,</span><br><span class="line"><span class="attr">"ai_flag"</span>: <span class="string">"off"</span>,</span><br><span class="line"><span class="attr">"data_type"</span>: <span class="string">"0303"</span>,</span><br><span class="line"><span class="attr">"progress"</span>: <span class="number">255</span>,</span><br><span class="line"><span class="attr">"microbubble"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"error_code"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"wind_dispel"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"beforehand_wash"</span>: <span class="string">"on"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"deviceinfo"</span>: &#123;</span><br><span class="line"><span class="attr">"deviceSubType"</span>: <span class="string">"12336"</span>,</span><br><span class="line"><span class="attr">"skillAttribute"</span>: &#123;</span><br><span class="line"><span class="attr">"wash_drying_60"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"fast_wash_15"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"single_drying"</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"deviceSN"</span>: <span class="string">"38109503"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"intent"</span>: &#123;</span><br><span class="line"><span class="attr">"intentType"</span>: <span class="string">"deviceSetFunction"</span>,</span><br><span class="line"><span class="attr">"negative"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"allVerb"</span>: <span class="string">"false"</span>,</span><br><span class="line"><span class="attr">"fallBack"</span>: <span class="string">"洗衣机选择绿标羊毛模式"</span>,</span><br><span class="line"><span class="attr">"slotMap"</span>: &#123;</span><br><span class="line"><span class="attr">"deviceMode"</span>: <span class="string">"green_wool"</span>,</span><br><span class="line"><span class="attr">"classifier"</span>: <span class="string">"mideaDomain"</span>,</span><br><span class="line"><span class="attr">"nextRoundNeeded"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"nextRoundNeededCount"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"possibleDeviceNames"</span>: [</span><br><span class="line"><span class="string">"洗衣机"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"deviceVerb"</span>: <span class="string">"set"</span>,</span><br><span class="line"><span class="attr">"domain"</span>: <span class="string">"DeviceControl"</span>,</span><br><span class="line"><span class="attr">"location"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"slot"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"parameter"</span>: <span class="string">"deviceMode"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"green_wool"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"parameter"</span>: <span class="string">"possibleDeviceNames"</span>,</span><br><span class="line"><span class="attr">"value"</span>: [</span><br><span class="line"><span class="string">"洗衣机"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"parameter"</span>: <span class="string">"classifier"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"mideaDomain"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"parameter"</span>: <span class="string">"nextRoundNeeded"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"parameter"</span>: <span class="string">"nextRoundNeededCount"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"deviceName"</span>: <span class="string">"洗衣机"</span>,</span><br><span class="line"><span class="attr">"utterance"</span>: <span class="string">"洗衣机选择绿标羊毛模式"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"roomName"</span>: <span class="string">"阳台"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>主要关注的是devicestatus、intent、slot；</p>
</li>
<li><p>DA测试脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">"T_0000_DA_NLU_GENERIC"</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            "checkSkillResult": true,</span></span><br><span class="line"><span class="comment">            "baseScriptName": "",</span></span><br><span class="line"><span class="comment">            "deviceMode": "auto_dispense",</span></span><br><span class="line"><span class="comment">            "localNluScriptName": "",</span></span><br><span class="line"><span class="comment">            "remoteNluScriptName": "T_0000_DB_NLU_V2_COLMO",</span></span><br><span class="line"><span class="comment">            "devicestatus": &#123;</span></span><br><span class="line"><span class="comment">                "dehydration_speed": "1000",</span></span><br><span class="line"><span class="comment">                "stains": "0",</span></span><br><span class="line"><span class="comment">                "memory": "off",</span></span><br><span class="line"><span class="comment">                "strong_wash": "off",</span></span><br><span class="line"><span class="comment">                "appointment": "off",</span></span><br><span class="line"><span class="comment">                "program": "insight_wash",</span></span><br><span class="line"><span class="comment">                "down_light": "on",</span></span><br><span class="line"><span class="comment">                "dehydration_time": 0,</span></span><br><span class="line"><span class="comment">                "mode": "normal",</span></span><br><span class="line"><span class="comment">                "detergent": "0",</span></span><br><span class="line"><span class="comment">                "nightly": "off",</span></span><br><span class="line"><span class="comment">                "temperature": "invalid",</span></span><br><span class="line"><span class="comment">                "lock": "off",</span></span><br><span class="line"><span class="comment">                "expert_step": 255,</span></span><br><span class="line"><span class="comment">                "eye_wash": "1",</span></span><br><span class="line"><span class="comment">                "wash_time": 0,</span></span><br><span class="line"><span class="comment">                "remain_time": 65535,</span></span><br><span class="line"><span class="comment">                "wash_time_value": 0,</span></span><br><span class="line"><span class="comment">                "super_clean_wash": "off",</span></span><br><span class="line"><span class="comment">                "softener": "0",</span></span><br><span class="line"><span class="comment">                "power": "on",</span></span><br><span class="line"><span class="comment">                "water_level": "low",</span></span><br><span class="line"><span class="comment">                "ultraviolet_lamp": "1",</span></span><br><span class="line"><span class="comment">                "appointment_time": 0,</span></span><br><span class="line"><span class="comment">                "dehydration_time_value": 10,</span></span><br><span class="line"><span class="comment">                "steam_wash": "off",</span></span><br><span class="line"><span class="comment">                "soak_count": "0",</span></span><br><span class="line"><span class="comment">                "spray_wash": "off",</span></span><br><span class="line"><span class="comment">                "add_rinse": "1",</span></span><br><span class="line"><span class="comment">                "intelligent_wash": "off",</span></span><br><span class="line"><span class="comment">                "version": 24,</span></span><br><span class="line"><span class="comment">                "dryer": "0",</span></span><br><span class="line"><span class="comment">                "running_status": "standby",</span></span><br><span class="line"><span class="comment">                "dirty_degree": "255",</span></span><br><span class="line"><span class="comment">                "fast_clean_wash": "off",</span></span><br><span class="line"><span class="comment">                "easy_ironing": "off",</span></span><br><span class="line"><span class="comment">                "microbubble": "1",</span></span><br><span class="line"><span class="comment">                "progress": 16,</span></span><br><span class="line"><span class="comment">                "error_code": 0,</span></span><br><span class="line"><span class="comment">                "wind_dispel": "1",</span></span><br><span class="line"><span class="comment">                "beforehand_wash": "off"</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            "deviceinfo": &#123;</span></span><br><span class="line"><span class="comment">                "deviceSubType": "14392",</span></span><br><span class="line"><span class="comment">                "skillAttribute": &#123;</span></span><br><span class="line"><span class="comment">                    "": 1,</span></span><br><span class="line"><span class="comment">                    "big": 1,</span></span><br><span class="line"><span class="comment">                    "wool": 1,</span></span><br><span class="line"><span class="comment">                    "auto_dispense": 1,</span></span><br><span class="line"><span class="comment">                    "color": 1,</span></span><br><span class="line"><span class="comment">                    "cotton": 1,</span></span><br><span class="line"><span class="comment">                    "appointment": 1,</span></span><br><span class="line"><span class="comment">                    "baby_clothes": 1,</span></span><br><span class="line"><span class="comment">                    "bucket_self_clean": 1,</span></span><br><span class="line"><span class="comment">                    "air_wash": 1,</span></span><br><span class="line"><span class="comment">                    "smart_drive": 1,</span></span><br><span class="line"><span class="comment">                    "rinse_dehydration": 1,</span></span><br><span class="line"><span class="comment">                    "wash_drying_60": 1,</span></span><br><span class="line"><span class="comment">                    "fast_wash_15": 1,</span></span><br><span class="line"><span class="comment">                    "appointmentComplete": 1,</span></span><br><span class="line"><span class="comment">                    "shirt": 1,</span></span><br><span class="line"><span class="comment">                    "mixed_wash": 1,</span></span><br><span class="line"><span class="comment">                    "eco_wash": 1,</span></span><br><span class="line"><span class="comment">                    "childLock": 1,</span></span><br><span class="line"><span class="comment">                    "sport_clothes": 1,</span></span><br><span class="line"><span class="comment">                    "dehydration": 1,</span></span><br><span class="line"><span class="comment">                    "single_drying": 1,</span></span><br><span class="line"><span class="comment">                    "down_jacket": 1</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                "deviceSN": "38118103"</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            "intent": &#123;</span></span><br><span class="line"><span class="comment">                "duration": null,</span></span><br><span class="line"><span class="comment">                "intentType": "deviceSetFunction",</span></span><br><span class="line"><span class="comment">                "negative": false,</span></span><br><span class="line"><span class="comment">                "allVerb": "false",</span></span><br><span class="line"><span class="comment">                "fallBack": "洗衣机选择节能洗程序",</span></span><br><span class="line"><span class="comment">                "deviceVerb": "set",</span></span><br><span class="line"><span class="comment">                "domain": "DeviceControl",</span></span><br><span class="line"><span class="comment">                "location": "",</span></span><br><span class="line"><span class="comment">                "slot": [&#123;</span></span><br><span class="line"><span class="comment">                    "parameter": "deviceMode",</span></span><br><span class="line"><span class="comment">                    "value": "insight_wash"</span></span><br><span class="line"><span class="comment">                &#125;, &#123;</span></span><br><span class="line"><span class="comment">                    "parameter": "possibleDeviceNames",</span></span><br><span class="line"><span class="comment">                    "value": ["洗衣机"]</span></span><br><span class="line"><span class="comment">                &#125;, &#123;</span></span><br><span class="line"><span class="comment">                    "parameter": "classifier",</span></span><br><span class="line"><span class="comment">                    "value": "mideaDomain"</span></span><br><span class="line"><span class="comment">                &#125;, &#123;</span></span><br><span class="line"><span class="comment">                    "parameter": "nextRoundNeeded",</span></span><br><span class="line"><span class="comment">                    "value": false</span></span><br><span class="line"><span class="comment">                &#125;, &#123;</span></span><br><span class="line"><span class="comment">                    "parameter": "nextRoundNeededCount",</span></span><br><span class="line"><span class="comment">                    "value": 0</span></span><br><span class="line"><span class="comment">                &#125;],</span></span><br><span class="line"><span class="comment">        "deviceName": "洗衣机",</span></span><br><span class="line"><span class="comment">        "utterance": "洗衣机选择节能洗程序"</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        "isLocal": false</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--打开洗衣机</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"off","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"pause","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOn","negative":false,"allVerb":"false","fallBack":"打开洗衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"打开洗衣机"&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--关闭洗衣机</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"pause","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"allVerb":"false","fallBack":"关闭洗衣机","deviceVerb":"stop","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"关闭洗衣机"&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动洗衣机</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"allVerb":"false","fallBack":"启动洗衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"启动洗衣机"&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--暂停洗衣机</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"allVerb":"false","fallBack":"暂停洗衣机","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"暂停洗衣机"&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--选择程序</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"洗衣机选择节能洗程序","deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"standard_wash"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"洗衣机选择节能洗程序"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br></pre></td></tr></table></figure>
</li>
<li><p>DB测试脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--require "T_0000_DB_NLU_LATEST"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--str = '&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"洗衣机选预约晚上十点钟洗完","deviceVerb":"appointmentComplete","nickName":"洗衣机","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"time","value":"at|10: 00: 00|pm"&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"洗衣机选预约晚上十点钟洗完"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--print(intentToJson(str))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--require "T_0000_DB_NLU_V2_COLMO"</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">"T_0000_DB_NLU_V2_GENERIC"</span></span><br><span class="line"><span class="comment">--超过24小时预约</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"single_dehytration","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":255,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"allVerb":"false","fallBack":"滚筒洗衣机预约明天14点32洗衣完成","deviceVerb":"appointmentComplete","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"time","value":"at|14: 32: 00|"&#125;,&#123;"parameter":"date","value":"2019-12-19"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"滚筒洗衣机","utterance":"滚筒洗衣机预约明天14点32洗衣完成"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--慧眼洗检测中打开童锁</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"start","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":255,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"allVerb":"false","fallBack":"滚筒洗衣机开启童锁","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;,&#123;"parameter":"deviceAspect","value":"childLock"&#125;],"deviceName":"滚筒洗衣机","utterance":"滚筒洗衣机开启童锁"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--烘干阶段暂停</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"start","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"allVerb":"false","fallBack":"滚筒洗衣机暂停","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"滚筒洗衣机","utterance":"滚筒洗衣机暂停"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--自动投放</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"single_dehytration","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"allVerb":"false","fallBack":"滚筒洗衣机打开自动投放","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;,&#123;"parameter":"deviceAspect","value":"auto_dispense"&#125;],"deviceName":"滚筒洗衣机","utterance":"滚筒洗衣机打开自动投放"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--选择当前程序</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"insight_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":65535,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"洗衣机选择节能洗程序","deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"insight_wash"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"洗衣机选择节能洗程序"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--预约完成</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":"auto_dispense","localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"1000","stains":"0","memory":"off","strong_wash":"off","appointment":"off","program":"mixed_wash","down_light":"on","dehydration_time":0,"mode":"normal","detergent":"0","nightly":"off","temperature":"invalid","lock":"off","expert_step":255,"eye_wash":"1","wash_time":0,"remain_time":48,"wash_time_value":0,"super_clean_wash":"off","softener":"0","power":"on","water_level":"low","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":10,"steam_wash":"off","soak_count":"0","spray_wash":"off","add_rinse":"1","intelligent_wash":"off","version":24,"dryer":"0","running_status":"standby","dirty_degree":"255","fast_clean_wash":"off","easy_ironing":"off","microbubble":"1","progress":16,"error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"14392","skillAttribute":&#123;"":1,"big":1,"wool":1,"auto_dispense":1,"color":1,"cotton":1,"appointment":1,"baby_clothes":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"appointmentComplete":1,"shirt":1,"mixed_wash":1,"eco_wash":1,"childLock":1,"sport_clothes":1,"dehydration":1,"single_drying":1,"down_jacket":1&#125;,"deviceSN":"38118103"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"洗衣机预约今天晚上十一点完成洗衣","deviceVerb":"appointmentComplete","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"time","value":"at|11: 00: 00|pm"&#125;,&#123;"parameter":"date","value":"2020-01-11"&#125;,&#123;"parameter":"timePeriod","value":"pm"&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"洗衣机预约今天晚上十一点完成洗衣"&#125;,"isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--洗衣机选择强烘干</span></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":["single_drying"],"localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_COLMO","devicestatus":&#123;"dehydration_speed":"800","stains":"0","memory":"off","speedy":"off","strong_wash":"off","appointment":"off","program":"new_water_cotton","dehydration_time":0,"down_light":"off","mode":"normal","detergent":"4","nightly":"off","temperature":"30","lock":"off","expert_step":255,"eye_wash":"1","old_speedy":"off","wash_time":0,"remain_time":198,"wash_time_value":17,"super_clean_wash":"off","softener":"1","power":"on","water_level":"auto","ultraviolet_lamp":"1","appointment_time":0,"dehydration_time_value":7,"steam_wash":"off","spray_wash":"off","soak_count":"2","add_rinse":"1","version":30,"intelligent_wash":"off","dryer":"2","running_status":"pause","dirty_degree":"255","project_no":25137,"soak":"off","fast_clean_wash":"off","easy_ironing":"off","ai_flag":"off","data_type":"0303","progress":255,"microbubble":"1","error_code":0,"wind_dispel":"1","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"25137","skillAttribute":&#123;"big":1,"auto_dispense":1,"wool":1,"color":1,"cotton":1,"baby_clothes":1,"appointment":1,"bucket_self_clean":1,"air_wash":1,"smart_drive":1,"rinse_dehydration":1,"wash_drying_60":1,"fast_wash_15":1,"mixed_wash":1,"shirt":1,"eco_wash":1,"sport_clothes":1,"childLock":1,"dehydration":1,"auto_detergent":1,"single_drying":1,"down_jacket":1,"auto_softener":1&#125;,"deviceSN":"38116708"&#125;,"intent":&#123;"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"卫生间的洗衣机选择弱烘干","slotMap":&#123;"deviceMode":"single_drying","classifier":"mideaDomain","levelNumber":"弱","nextRoundNeeded":false,"nextRoundNeededCount":0,"possibleDeviceNames":["洗衣机","干衣机"]&#125;,"deviceVerb":"set","domain":"DeviceControl","location":"bathroom","slot":[&#123;"parameter":"deviceMode","value":"single_drying"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机","干衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;,&#123;"parameter":"levelNumber","value":"弱"&#125;],"deviceName":"洗衣机","utterance":"卫生间的洗衣机选择弱烘干"&#125;,"roomName":"卫生间","isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str =<span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":["green_wool"],"localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_GENERIC","devicestatus":&#123;"stains":"255","memory":"on","speedy":"on","strong_wash":"on","appointment":"on","program":"cotton","down_light":"on","dehydration_time":255,"mode":"factory_test","detergent":"255","nightly":"on","temperature":"invalid","lock":"on","expert_step":255,"eye_wash":"1","old_speedy":"on","wash_time":255,"remain_time":9,"wash_time_value":255,"super_clean_wash":"on","softener":"255","power":"on","water_level":"255","ultraviolet_lamp":"1","appointment_time":65535,"dehydration_time_value":255,"steam_wash":"on","spray_wash":"on","soak_count":"invalid","add_rinse":"1","version":31,"intelligent_wash":"on","running_status":"standby","dirty_degree":"255","project_no":12336,"soak":"on","fast_clean_wash":"on","easy_ironing":"on","ai_flag":"off","data_type":"0303","progress":255,"microbubble":"1","error_code":0,"wind_dispel":"1","beforehand_wash":"on"&#125;,"deviceinfo":&#123;"deviceSubType":"12336","skillAttribute":&#123;"wash_drying_60":1,"fast_wash_15":1,"single_drying":1&#125;,"deviceSN":"38109503"&#125;,"intent":&#123;"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"洗衣机选择绿标羊毛模式","slotMap":&#123;"deviceMode":"green_wool","classifier":"mideaDomain","nextRoundNeeded":false,"nextRoundNeededCount":0,"possibleDeviceNames":["洗衣机"]&#125;,"deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"green_wool"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"洗衣机选择绿标羊毛模式"&#125;,"roomName":"阳台"&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":["appointment"],"localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_GENERIC","devicestatus":&#123;"dehydration_speed":"800","stains":"0","memory":"off","speedy":"off","strong_wash":"off","appointment":"off","program":"mixed_wash","dehydration_time":0,"down_light":"off","mode":"normal","detergent":"1","nightly":"off","temperature":"40","lock":"off","expert_step":0,"eye_wash":"0","old_speedy":"off","wash_time":0,"remain_time":56,"wash_time_value":0,"super_clean_wash":"off","softener":"1","power":"off","water_level":"auto","ultraviolet_lamp":"0","appointment_time":0,"dehydration_time_value":0,"steam_wash":"off","spray_wash":"off","soak_count":"2","add_rinse":"0","version":31,"intelligent_wash":"off","dryer":"0","running_status":"idle","dirty_degree":"0","project_no":12594,"soak":"off","fast_clean_wash":"off","easy_ironing":"off","ai_flag":"off","data_type":"0303","progress":0,"microbubble":"0","error_code":0,"wind_dispel":"0","beforehand_wash":"off"&#125;,"deviceinfo":&#123;"deviceSubType":"12594","skillAttribute":&#123;"big":1,"wool":1,"fast_dry":1,"water_fast_wash_30":1,"cotton":1,"silk_wash":1,"appointment":1,"baby_clothes":1,"fast_wash_30":1,"water_steep":1,"active_enzyme":1,"water_cold_wash":1,"soft_wash":1,"care_wash":1,"dehydration":1,"gentle":1,"auto_detergent":1,"down_jacket":1,"water_baby":1,"auto_softener":1,"green_wool":1,"water_eco":1,"auto_wash":1,"water_ssp":1,"jacket":1,"remove_odor":1,"water_outdoor":1,"mixed_wash":1,"fitness_clothes":1,"eco_wash":1,"childLock":1,"under_wear":1,"smell_good":1,"water_prevent_allergy":1,"fresh_remove_wrinkle":1,"auto_dispense":1,"new_water_cotton":1,"prevent_allergy":1,"color":1,"steep":1,"fast_wash":1,"water_intelligent":1,"cold_wash":1,"water_underwear":1,"bucket_self_clean":1,"steam_sterilize_wash":1,"summer":1,"smart_drive":1,"air_wash":1,"insight_wash":1,"sterilize_wash":1,"smart_specialist":1,"water_remove_mite_wash":1,"sport_clothes":1,"silk":1,"enzyme":1,"water_mixed_wash":1,"water_shirt":1,"devicePause":1,"rinse_dehydration":1,"outdoor":1,"wash_drying_60":1,"fast_wash_15":1,"shirt":1,"bath_towel":1,"single_drying":1,"night_fresh_wash":1&#125;,"deviceSN":"38111448"&#125;,"intent":&#123;"duration":"after|3600|sec","intentType":"devicePowerOn","negative":false,"allVerb":"false","fallBack":"卫生间洗衣机","slotMap":&#123;"duration":"after|3600|sec","classifier":"mideaDomain","nextRoundNeeded":false,"nextRoundNeededCount":0,"possibleDeviceNames":["洗衣机"]&#125;,"deviceVerb":"appointment","domain":"DeviceControl","location":"bathroom","slot":[&#123;"parameter":"duration","value":"after|3600|sec"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"洗衣机","utterance":"卫生间洗衣机,洗衣机一个小时后帮我洗衣服"&#125;,"roomName":"卫生间"&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br></pre></td></tr></table></figure>
</li>
<li><p>DC测试脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--require "T_0000_DC_NLU_LATEST"</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">"T_0000_DC_NLU_GENERIC"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------------------正常情况------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--开机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOn","negative":false,"fallBack":"打开干衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"打开干衣机"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"power":"on"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--关机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"fallBack":"关闭干衣机","deviceVerb":"stop","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"关闭干衣机"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"power":"off"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动干衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"启动干衣机"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"control_status":"start"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续干衣机","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"继续干衣机"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--暂停</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停干衣机","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"暂停干衣机"&#125;,"devicestatus":&#123;"running_status":"start"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"control_status":"pause"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--选程序</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"干衣机选择棉麻程序","deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"cotton"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"干衣机选择棉麻程序"&#125;,"devicestatus":&#123;"running_status":"standby"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询干衣机剩余时间:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceState","negative":false,"fallBack":"干衣机剩余时间","deviceVerb":null,"domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceParameter","value":"duration"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"干衣机剩余时间"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"query":&#123;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询干衣机多久烘好衣服</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceState","negative":false,"allVerb":"false","fallBack":"干衣机多久烘好衣服","deviceVerb":null,"domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceParameter","value":"duration"&#125;,&#123;"parameter":"deviceMode","value":"single_drying"&#125;,&#123;"parameter":"possibleDeviceNames","value":["干衣机","洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"干衣机多久烘好衣服"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"query":&#123;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------------------互斥情况------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--开机情况下开机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOn","negative":false,"fallBack":"打开干衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"打开干衣机"&#125;,"devicestatus":&#123;"power":"on"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--关机情况下关机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"fallBack":"关闭干衣机","deviceVerb":"stop","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"关闭干衣机"&#125;,"devicestatus":&#123;"power":"off"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动情况下启动:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动干衣机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"启动干衣机"&#125;,"devicestatus":&#123;"running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动情况下继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续干衣机","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"继续干衣机"&#125;,"devicestatus":&#123;"running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--暂停情况下暂停</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停干衣机","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"暂停干衣机"&#125;,"devicestatus":&#123;"running_status":"pause"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--运行情况下(童锁打开/关闭)选程序</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"干衣机选择棉麻程序","deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"cotton"&#125;,&#123;"parameter":"possibleDeviceNames","value":["洗衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"干衣机选择棉麻程序"&#125;,"devicestatus":&#123;"running_status":"start","baby_lock":1&#125;&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line">str = <span class="string">'&#123;"checkSkillResult":true,"baseScriptName":"","deviceMode":["big_dry"],"localNluScriptName":"","remoteNluScriptName":"T_0000_DB_NLU_V2_GENERIC","devicestatus":&#123;"dryness_level":0,"dry_time":0,"prevent_wrinkle":0,"appointment":0,"program":"mixed_wash","prevent_wrinkle_switch":0,"dry_temp":0,"remind_sound":0,"steam":2,"remain_time":90,"door_warn":0,"power":"on","sterilize":0,"ai_switch":0,"bucket_clean_switch":0,"eco_dry_switch":0,"steam_switch":0,"water_box":0,"appointment_time":0,"damp_dry_signal":0,"version":4,"running_status":"standby","intensity":1,"project_no":12597,"material":0,"light":0,"progress":1,"error_code":0,"baby_lock":0&#125;,"deviceinfo":&#123;"deviceSubType":"12597","skillAttribute":&#123;&#125;,"deviceSN":"66665555"&#125;,"intent":&#123;"intentType":"deviceSetFunction","negative":false,"allVerb":"false","fallBack":"干衣机选择大件烘","slotMap":&#123;"deviceMode":"big_dry","classifier":"mideaDomain","nextRoundNeeded":false,"nextRoundNeededCount":0,"possibleDeviceNames":["干衣机"]&#125;,"deviceVerb":"set","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceMode","value":"big_dry"&#125;,&#123;"parameter":"possibleDeviceNames","value":["干衣机"]&#125;,&#123;"parameter":"classifier","value":"mideaDomain"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"干衣机","utterance":"干衣机选择大件烘"&#125;,"roomName":"阳台","isLocal":false&#125;'</span></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br></pre></td></tr></table></figure>
</li>
<li><p>D9测试脚本：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">"T_0000_D9_NLU_LATEST"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------------------正常情况------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--开机</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOn","negative":false,"fallBack":"打开复式机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"打开复式机"&#125;,"devicestatus":&#123;"power":"off"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"db","db_power":"on"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--关机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"fallBack":"关闭复式机","deviceVerb":"stop","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"关闭复式机"&#125;,"devicestatus":&#123;"power":"on"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"db","db_power":"off"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动上桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动复式机上桶","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"启动复式机上桶"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"da","da_control_status":"start"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--启动下桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动复式机下桶","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"启动复式机下桶"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"db","db_control_status":"start"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--上桶继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续复式机上桶","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"继续复式机上桶"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--下桶继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续复式机下桶","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"继续复式机下桶"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--暂停上桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停复式机上桶","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"暂停复式机上桶"&#125;,"devicestatus":&#123;"da_running_status":"start"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"da","da_control_status":"pause"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--暂停下桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停复式机下桶","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"暂停复式机下桶"&#125;,"devicestatus":&#123;"db_running_status":"start"&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"control":&#123;"bucket":"db","db_control_status":"pause"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询上桶剩余时间:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceState","negative":false,"fallBack":"复式机上桶剩余时间","deviceVerb":null,"domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceParameter","value":"duration"&#125;,&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"复式机上桶剩余时间"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"query":&#123;"query_type":"da"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询下桶剩余时间:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceState","negative":false,"fallBack":"复式机下桶剩余时间","deviceVerb":null,"domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceParameter","value":"duration"&#125;,&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"复式机下桶剩余时间"&#125;,"devicestatus":&#123;&#125;&#125;'</span></span><br><span class="line"><span class="comment">--结果: &#123;"error":&#123;&#125;,"query":&#123;"query_type":"db"&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------------------互斥情况------------------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--开机情况下开机</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOn","negative":false,"fallBack":"打开复式机","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"打开复式机"&#125;,"devicestatus":&#123;"db_power":"on"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--关机情况下关机:</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePowerOff","negative":false,"fallBack":"关闭复式机","deviceVerb":"stop","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"关闭复式机"&#125;,"devicestatus":&#123;"db_power":"off"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--上桶运行情况下启动上桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动复式机上桶","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"启动复式机上桶"&#125;,"devicestatus":&#123;"da_running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--下桶运行情况下启动下桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceStart","negative":false,"fallBack":"启动复式机下桶","deviceVerb":"start","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"启动复式机下桶"&#125;,"devicestatus":&#123;"db_running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--上桶运行情况下继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续复式机上桶","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"继续复式机上桶"&#125;,"devicestatus":&#123;"da_running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--下桶运行情况下继续</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"deviceResume","negative":false,"fallBack":"继续复式机下桶","deviceVerb":"resume","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"继续复式机下桶"&#125;,"devicestatus":&#123;"db_running_status":"start"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--上桶暂停情况下暂停上桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停复式机上桶","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"上桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"暂停复式机上桶"&#125;,"devicestatus":&#123;"da_running_status":"pause"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">--下桶暂停情况下暂停下桶</span></span><br><span class="line">str = <span class="string">'&#123;"deviceinfo":&#123;"deviceSubType":"5","deviceSN":"00000021122250939813008921430000"&#125;,"intent":&#123;"duration":null,"intentType":"devicePause","negative":false,"fallBack":"暂停复式机下桶","deviceVerb":"pause","domain":"DeviceControl","location":"","slot":[&#123;"parameter":"deviceComponent","value":"下桶"&#125;,&#123;"parameter":"nextRoundNeeded","value":false&#125;,&#123;"parameter":"nextRoundNeededCount","value":0&#125;],"deviceName":"复式机","utterance":"暂停复式机下桶"&#125;,"devicestatus":&#123;"db_running_status":"pause"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(intentToJson(str))</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><ol>
<li><p>语料对应意图输出：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b8f05b8f04a933c806e87504390cc1e8-317446" alt="语料对应意图输出"></p>
</li>
<li><p>语音日志查询（注意环境）：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c10055657838043635885d369a763281-525774" alt="日志查询"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/821d580496cc59dd052f63e7e7bb85b5-1077847" alt="关注点"></p>
</li>
<li><p>处理关注点内容：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8979e8471624f07581494ab804ac7694-551903" alt="编码转换"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/22ebcccd9e8e6b171b901c87c8a7d7fb-629118" alt="编码关注点"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/035cdafd7313563041cea79c2da151e5-892719" alt="美化json"></p>
<ul>
<li>美化后的json可以辅助阅读代码，排除问题！</li>
</ul>
</li>
</ol>
<h2 id="常用网址："><a href="#常用网址：" class="headerlink" title="常用网址："></a>常用网址：</h2><ul>
<li><p><a href="https://nlu.sit.aimidea.cn:22012/test-nlu.html" target="_blank" rel="noopener">语料对应的意图输出</a></p>
</li>
<li><p><a href="http://logs-sit.aimidea.cn/app/kibana#/discover" target="_blank" rel="noopener">SIT环境语音日志</a> </p>
</li>
<li><p><del><a href="http://logs-uat.aimidea.cn/app/kibana#/discover" target="_blank" rel="noopener">UAT环境语音日志</a> （账号：bu_test_engineer-uat，密码：!@#qwe）</del></p>
</li>
<li><p><a href="http://logs-prod.aimidea.cn/app/kibana#/discover" target="_blank" rel="noopener">PRO环境语音日志</a> （账号：bu_test_engineer，密码：!@#qwe）</p>
<ul>
<li><p>搜索（洗衣机事业部）：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DA：</span><br><span class="line">("control" AND "applianceCode=3298544978875") OR ("jsonOrder" AND "typeNo=DA")</span><br><span class="line"></span><br><span class="line">DB：</span><br><span class="line">("control" AND "applianceCode=160528697745464") OR ("jsonOrder" AND "typeNo=DB")</span><br><span class="line"></span><br><span class="line">DC：</span><br><span class="line">("control" AND "applianceCode=162727720993914") OR ("jsonOrder" AND "typeNo=DC")</span><br><span class="line"></span><br><span class="line">D9：</span><br><span class="line">("control" AND "applianceCode=3298544980422") OR ("jsonOrder" AND "typeNo=D9")</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="https://admin.aimidea.cn/#/login" target="_blank" rel="noopener">线上环境机型语音管理</a> 账户密码123456 <strong>线上环境需要工程师刷新缓存</strong></p>
</li>
<li><p><a href="http://admin-sit.aimidea.cn/#/login" target="_blank" rel="noopener">SIT环境机型语音管理</a> 账户密码123456</p>
</li>
<li><p><a href="http://sit.aimidea.cn:11003/v1/skill/refreshSkillConfig?topic=refreshSkillCache&categoryNo=DB" target="_blank" rel="noopener">SIT环境刷新缓存</a> 修改对应的版本，比如DA</p>
</li>
<li><p><a href="http://wmspecs.oss-cn-hangzhou.aliyuncs.com/midea_json_new/DB/0000.db.29233.json" target="_blank" rel="noopener">语音洗衣机型号功能搜索</a></p>
</li>
</ul>
<h2 id="推荐小工具"><a href="#推荐小工具" class="headerlink" title="推荐小工具"></a>推荐小工具</h2><h3 id="FeHelper（谷歌浏览器插件）"><a href="#FeHelper（谷歌浏览器插件）" class="headerlink" title="FeHelper（谷歌浏览器插件）"></a>FeHelper（谷歌浏览器插件）</h3><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0d534f45d897efc3db9505dba640cdbb-746530" alt="目前支持功能"></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1>]]></content>
      <categories>
        <category>Work</category>
      </categories>
  </entry>
  <entry>
    <title>Java 核心技术-基础知识</title>
    <url>/2020/06/01/Java-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java的成功既有技术上的原因，也有非技术上的原因。Java特别注重架构的合理性，平台、架构、框架等存在大量的选择、开发资源丰富！学习任何一种语言：去除浮躁、认真学习、不断积累、寻找机遇！Java最成功的地方是服务器后端！<strong>推荐书籍：《Java 核心技术 卷一：基础知识（第8版）（评注版）》· [美] Cay S. Horstmann, Gary Cornell 著</strong></p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Java简史"><a href="#Java简史" class="headerlink" title="Java简史"></a>Java简史</h2><ol>
<li>1991年，Green项目，开发语言最初命名为Oak (橡树)</li>
<li>1994年，开发组意识到Oak 非常适合于互联网</li>
<li>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作</li>
<li>1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最</li>
<li>1998年，发布JDK 1.2，同年发布企业平台J2EE</li>
<li>1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生。</li>
<li>2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0</li>
<li>2005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME</li>
<li>2009年，Oracle公司收购SUN，交易价格74亿美元。</li>
<li>2011年，发布JDK 7.0</li>
<li>2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本。</li>
<li>2017年，发布JDK 9.0，最大限度实现模块化</li>
<li>2018年3月，发布JDK 10.0，版本号也称为18.3</li>
<li>2018年9月，发布JDK 11.0，版本号也称为18.9</li>
</ol>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>Java的语法参照了C++的语法，因此，学过C++的开发人员很容易入手Java；</p>
</li>
<li><p>Java源代码编译后生成的Bytecode形式的文件不能直接在操作系统上执行，必须由Java虚拟机（JVM）来解释执行；</p>
</li>
<li><p>虚拟机方式的优缺点：</p>
<ul>
<li>程序运行效率有所降低；</li>
<li>必须安装Java运行环境（Java Runtime Environment，JRE），以便由JVM来解释执行Java程序</li>
<li>一次编译，到处运行，即具备了很好的跨平台可移植性，虚拟机机制屏蔽了底层运行平台的差别</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2d3c5ad2c5ca0f4f486c7db058c883b0-51715" alt="Java跨平台"></p>
</li>
<li><p>Java语言的设计体现了分层的思想，分层是架构设计中的一个重要思想，很多时候增加一层就可以解决一些棘手的问题；理解架构设计的平衡艺术！</p>
</li>
<li><p>Java和JavaScript没有任何直接的关系，但是掌握JavaScript还是非常有用的！</p>
</li>
</ol>
<h2 id="Java环境介绍"><a href="#Java环境介绍" class="headerlink" title="Java环境介绍"></a>Java环境介绍</h2><ol>
<li><p>JRE（Java Runtime Environment，Java运行时环境）是Java程序运行的基本环境，主要是提供Java虚拟机（Java Virtual Machine，JVM）；</p>
</li>
<li><p>JDK（Java Development Kit，Java开发工具包），Java的各种IDE都是在JDK的基础上添加了图形界面和自动化工具，JDK中包含了JRE，安装JDK会自动安装JRE；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/940b6196f277150abd538570b7c998cf-74647" alt="JDK和JRE的关系"></p>
</li>
<li><p>J2SE（Java 2 Standard Edition，Java 2标准版），J2EE(Java 2 Enterprise Edition，Java 2企业版)，J2ME（Java 2 Micro Edition，Java 2微型版）；</p>
</li>
</ol>
<h2 id="Java编程基础"><a href="#Java编程基础" class="headerlink" title="Java编程基础"></a>Java编程基础</h2><ol>
<li><p>类和接口是Java程序编写的基本单元，Java所有的代码都在类或者接口中；</p>
</li>
<li><p>命名规范Java自身没有要求，但是开发规范可以保证项目的代码风格的一致性，可以方便团队协作，有助于提高代码的可读性和可维护性；</p>
</li>
<li><p>类的.java源代码文件名以及编译后生成的.class文件名与类名一致，而且一个java文件只能有一个public类；</p>
</li>
<li><p>当使用java命令执行一个类时，虚拟机会执行这个类的main方法，想使用java命令来执行类的话，就必须定义它的main方法；</p>
</li>
<li><p>JVM会自动监测内存中不用的字符串并自动释放，但是这种垃圾回收机制需要一个周期，在周期内，会因为来不及释放而增加对资源的占用；</p>
</li>
<li><p>String的比较字符串相等使用equals方法，不能使用==；</p>
</li>
<li><p><strong>关键字</strong>：被java语言赋予了特殊含义，用做专门用途的字符串（单词）</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/190399473ef0cc4b1adc14fec04c590c-74445" alt="关键字说明1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/679cbc44732d451d2ab21b76ddb64114-113948" alt="关键字说明2"></p>
</li>
<li><p><strong>保留字</strong>：现有Java版本尚未使用，但以后版本可能会作为关键字使用；</p>
</li>
<li><p><strong>标识符</strong>：java对各种变量、方法和类等要素命名的时候使用的字符序列；</p>
</li>
<li><p><strong>变量</strong>：程序中最基本的存储单元，包含变量类型、变量名和存储的值；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b5f35d03c598a794ea782ee0de5fd2a7-69659" alt="变量的分类方法1"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7c02fe7e7aae6ac8e68db0c9d760f14c-67541" alt="变量的分类方法2"></p>
</li>
<li><p>自动类型转换：容量小的数据类型自动转换为容量大的数据类型；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/ae3079949173fdaec60da0e2ede96ef3-37778" alt="自动类型转换"></p>
</li>
<li><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0fd5cd845e821c238a618625064ae175-92090" alt="算术运算符"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/edfd61a2094d7ffaa08184fc9f1ea6c1-62855" alt="比较运算符"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7cb30ce86b7f195b29ee636b930d1dde-78120" alt="逻辑运算符"></p>
</li>
<li><p>数组默认初始化值：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/864ca776527eed233c7c8f94fc75f512-53042" alt="数组默认初始化值"></p>
</li>
</ol>
<h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><ol>
<li><p>面向对象不仅是门技术，更是一种思想；</p>
<ol>
<li>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做</li>
<li>面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</li>
</ol>
</li>
<li><p>面向对象编程提供了更好的封装形式，可以做到在开发过程中只关心对象对外提供的数据和功能，而无须关心其实现。更加强调运用人类在日常的思维逻辑中采用的思想方法和原则，如抽象、分类、继承、聚合、多态等；</p>
</li>
<li><p>面向对象的三大特征：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li><p>面向对象程序设计的重点是类的设计。类的设计，其实就是类的成员的设计；</p>
</li>
<li><p>尽量避免在类的外部直接访问类的字段，而采取类的方法来间接访问类的字段；</p>
</li>
<li><p>类的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">  属性声明;</span><br><span class="line">  方法声明;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修饰符public表示类可以被任意访问</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JDK5之后：采用可变个数形参来定义方法，传入多个同一类型变量；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">pubilc <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String... books)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>可变参数：方法参数部分指定类型的参数格式是可变多个：0个、1个或多个</li>
<li>可变个数形参的方法和同名的方法之间，形成方法重载</li>
<li>可变参数方法的使用和方法参数部分使用数组是一致的</li>
<li>方法的参数部分有可变参数，需要放在形参声明的最后</li>
<li>在一个方法的形参位置，最多只能声明一个可变个数形参</li>
</ul>
</li>
<li><p><strong>UML已经是面向对象软件建模的标准语言，对于Java开发者，掌握UML是非常有必要的；</strong></p>
</li>
<li><p>建议一个类一个java源文件，如果真的要多个类，那建议只把密切相关的类放到同一个源文件中；</p>
</li>
<li><p>一个字段前使用final的意义是作为字段的这个变量在获得初始值后，其值不能再改变；</p>
</li>
<li><p>类的static方法中只能访问所在类的static类型字段，不能访问所在类的非static字段，因为static方法只和类关联，而不和类的具体字段关联；</p>
</li>
<li><p><strong>Java单元测试工具比较有名的JUnit可以进一步学习！</strong></p>
</li>
<li><p>如果变量是基本类型变量，则其中保存的值为实际的数据；如果是对象类型变量，其中保存的值是所指对象的地址；</p>
</li>
<li><p>Java提供了很多字段初始化方式，在实际开发中尽量采取简单易懂的方式，既可以减少出错的概率，同时还能提高代码的可读性与可维护性；</p>
</li>
<li><p>Java的垃圾收集机制只能在一定程度上有效，对于对象，能够手动释放就尽量手动释放；</p>
</li>
<li><p>注意：先进行设计，然后进行编码，其次设计的时候应该考虑充分，对一些设计的要点要熟练掌握！</p>
</li>
</ol>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol>
<li>子类是父类的一种具体类型，任何子类的对象都属于父类的类型；</li>
<li>子类具有父类的全部特征，并且在此基础上具有更多的特征，将通用的方法放到父类中，而将特有的方法放到子类中，父类和子类之间合理的功能划分是优秀设计的关键，需要长期的积累；</li>
<li>多态使得我们可以以一致的方式调用一个大的类别下具体类型的对象，甚至这种具体的类型可以是未知的将来开发实现的；</li>
<li>abstract类最大的两个意义：<ol>
<li>强制要求子类中必须实现所要求的abstract方法，否则不能实例化</li>
<li>限制对abstract类实例化</li>
</ol>
</li>
<li>普通数组比ArrayList更简单，拥有更好的性能，如果数组的大小可以估计，而且变化不大的情况下优先考虑使用普通数组；</li>
<li>Java中基本数据类型int、double等不适对象数据类型，不继承自Object；</li>
<li>如果需要使用Object类型的数字，则需要使用包装类Integer、Long、Float、Double等，但是它们的值一旦创建就不可改变，并且这些包装类是不能派生子类的；</li>
<li>反射机制可以获得一些动态特性、灵活性以及可扩展性，常用于开发工具以及一些框架中；</li>
</ol>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ol>
<li><p>进程可以进一步细化为线程，是一个程序内部的一条执行路径。如果一个进程同一时间并行执行多个线程，就是支持多线程的；</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c2db0ecb2a1aa738bbbd493c9342f477-48637" alt="进程和线程"></p>
</li>
<li><p>一个进程中的多个线程共享相同的内存单位/内存地址空间（它们从同一堆中分配对象，可以访问相同的变量和对象）。这就使得线程间的通信更简便、高效。但多个线程操作共享的系统资源可能会带来安全的隐患；</p>
</li>
<li><p>一个Java应用程序，其实至少有三个线程：main()方法主线程，gc垃圾回收线程，异常处理线程。如果不处理异常的情况下，发生异常会影响到主线程；</p>
</li>
<li><p>多线程的优点：</p>
<ul>
<li>提高了应用程序的响应。对图形化界面更有意义，增加了用户的体验</li>
<li>提高计算机系统CPU的利用率</li>
<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li>
</ul>
</li>
<li><p>Java线程的使用流程：</p>
<ol>
<li>定义子类继承Thread类</li>
<li>子类去重写Thread类中的run()方法</li>
<li>创建Thread子类对象，即创建了线程对象</li>
<li>调用线程对象的start()方法：启动线程，调用run()方法</li>
</ol>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"偶数是："</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EvenThread thread1 = <span class="keyword">new</span> EvenThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//start()方法  ①启动当前线程 ②调用当前线程中的run()方法</span></span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下的操作是在主线程(main()方法)中执行的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程执行结束:"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程的常用方法：</p>
<ul>
<li><p>启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程被调用时执行的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回线程的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置线程的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回当前的线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> Thread <span class="title">currentThread</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程让步。暂停当前执行的线程，把执行机会让给优先级相同或更高的线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>join()：当某个程序执行中调用其他线程的join()方法的时候，调用线程将被阻塞，知道join()方法加入的join线程执行完毕为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> <span class="title">InterruptedException</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程睡眠：让当前活动的线程在指定的时间段内放弃对CPU的执行权，使得其他线程有机会被执行，时间到了重新排队</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建线程的第二种方式：</p>
<ol>
<li>定义子类，实现Runnable接口</li>
<li>子类中重写Runnable接口中的run()方法</li>
<li>通过Thread类的有参构造器创建线程对象</li>
<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中</li>
<li>调用Thread类的start方法，开启线程</li>
</ol>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"票数:"</span> + tickets--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TicketThread t = <span class="keyword">new</span> TicketThread();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程的生命周期：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/33d7165085791a4a61a82c62f98f6a17-92628" alt="线程的生命周期"></p>
</li>
<li><p>Java对于多线程的安全问题体用了专业的解决方式：同步机制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">   <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"当前的票数是:"</span> + num--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket sellTicket = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程通信的方法:</p>
<ul>
<li>wait()方法：令当前线程挂起并放弃CPU的执行权以及同步资源等等，使得别的线程可以访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyall()方法唤醒后，唤醒后等待重新获得对CPU的执行权才能继续执行</li>
<li>notify()方法：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li>
<li>notifyall()方法：唤醒正在排队等待资源的所有线程结束等待</li>
<li>只有在synchronized方法或synchronized代码块中才能使用，否则会抛出java.lang.IllegalMonitorStateException异常。因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁，因此这三个方法定义在Object类中</li>
</ul>
</li>
<li><p>创建线程的方式三:</p>
<ol>
<li>实现Callable接口</li>
<li>实现Future接口</li>
</ol>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"sum:"</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用线程池:</p>
<ul>
<li>提前创建好多个线程，放入线程池中，使用的时候直接获取，使用完放回池中。可以避免频繁的创建销毁，实现重复利用；</li>
<li>JDK5.0提供了线程池的相关API：ExecutorService和Executors；</li>
<li>ExecutorService：真正的线程池接口。常见的子类ThreadPoolExecutor；</li>
<li>Executors:工具类、线程池的工厂类，用来创建并返回不同类型的线程池。</li>
</ul>
</li>
<li><p>线程池示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; future = executorService.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread((FutureTask)future).start();</span><br><span class="line"></span><br><span class="line">        Integer sum = future.get();</span><br><span class="line">        System.out.println(<span class="string">"sum:"</span> + sum);</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ol>
<li><p>Java集合就像容器一样，可以动态的把多个对象的引用放入到容器中。Java集合可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组；</p>
</li>
<li><p>Java集合可以分为Collection和Map体系：</p>
<ul>
<li>Collection接口——单列数据，定义了存取一组对象的方法的集合。其中，List是元素有序、可以重复的集合。Set是元素无序、不可重复的集合</li>
<li>Map接口——双列数组，保存具有映射关系的“key-value”键值对</li>
</ul>
</li>
<li><p>集合框架的继承树：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9880d75c8d57964e3e91fb7d216bc7cd-24758" alt="集合框架的继承树"></p>
</li>
<li><p>Collection接口中的常用方法：</p>
<ul>
<li><p>增加一个元素到集合中——boolean add(E e);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加一组元素（集合元素）到集合中——boolean addAll(Collection&lt;? extends E&gt; c);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; collection1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection1.add(<span class="string">"张三"</span>);</span><br><span class="line">        collection1.add(<span class="string">"李四"</span>);</span><br><span class="line">        collection.addAll(collection1);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合中有效元素的个数——int size();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">"张三"</span>);</span><br><span class="line">        collection.add(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"集合中元素的个数:"</span> + collection.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断元素是否是空集合（元素的个数为0）——boolean isEmpty();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(collection.isEmpty());<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断集合是否包含某个指定元素：调用元素的equals()和hashCode()方法判断的——boolean contains(Object o);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">"张三"</span>);</span><br><span class="line">        collection.add(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"判断是否包含某个元素:"</span> + collection.contains(<span class="string">"张三"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断集合中是否包含另一个集合中的所有元——boolean containsAll(Collection&lt;?&gt; c);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">"张三"</span>);</span><br><span class="line">        collection.add(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; collection1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        collection1.add(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"判断一个集合中是否包含另一个集合中的所有元素"</span> + collection.containsAll(collection1));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空集合中的所有元素——void clear();</p>
</li>
<li><p>从集合中删除某个元素——boolean remove(Object o);</p>
</li>
<li><p>从当前集合中删除指定集合在此集中中的所有元素：即求差集——boolean removeAll(Collection&lt;?&gt; c);</p>
</li>
<li><p>把交集的结果存在当前集合之中——boolean retainAll(Collection&lt;?&gt; c);</p>
</li>
<li><p>集合是否相等——boolean equals(Object o);</p>
</li>
<li><p>将集合转换为对象数组——Object[] toArray();</p>
</li>
<li><p>获取集合对象的哈希值——int hashCode();</p>
</li>
<li><p>集合对象的遍历：使用迭代器——Iterator&lt;E&gt; iterator();</p>
</li>
<li><p>迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(数据类型 元素名称: 集合名称或数组名)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Map中的key和value都可以是任何引用类型的数据，Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties；</p>
</li>
<li><p>Map接口中常用的方法：</p>
<ul>
<li><p>添加元素——V put(K key, V value);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"abc"</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"集合中的元素:"</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将指定Map集合中的元素添加到此Map集合之中——void putAll(Map&lt;? extends K, ? extends V&gt; m);</p>
</li>
<li><p>根据指定的key移除元素，并返回key对应的value——V remove(Object key);</p>
</li>
<li><p>清空map集合中的所有元素——void clear();</p>
</li>
<li><p>根据指定的key获取value——V get(Object key);</p>
</li>
<li><p>判断集合中是否包含指定的value——boolean containsValue(Object value);</p>
</li>
<li><p>返回map中key-value的个数——int size();</p>
</li>
<li><p>判断集合中是否包含元素（判断集合是否为空集合——boolean isEmpty();</p>
</li>
<li><p>判断当前map集合是否和指定的map集合相等——boolean equals(Object o);</p>
</li>
<li><p>返回map集合所有key构成的Set集合——Set&lt;K&gt; keySet();</p>
</li>
<li><p>返回所有value组成的Collection集合——Collection&lt;V&gt; values();</p>
</li>
<li><p>返回所有key-value组成的Set集合——Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</p>
</li>
</ul>
</li>
<li><p>Collections工具类：提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p>
</li>
<li><p>Collections工具类常用方法：</p>
<ul>
<li>对List集合中的元素进行反转——public static void reverse(List&lt;?&gt; list) { }</li>
<li>对List集合中的元素进行随机排序——public static void shuffle(List&lt;?&gt; list){}</li>
<li>对List集合中的元素按照自然顺序进行排序——public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list){}</li>
<li>对List集合的元素进行自定义排序——public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {}</li>
<li>将指定List集合中的i处元素和j处元素进行交换——public static void swap(List&lt;?&gt; list, int i, int j){}</li>
<li>根据元素的自然顺序，返回给定集合中的最大元素——public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll){}</li>
<li>根据Comparator指定的顺序，返回给定集合中的最大元素——public static &lt;T&gt; T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp){}</li>
<li>返回指定集合中指定元素出现的个数——public static int frequency(Collection&lt;?&gt; c, Object o){}</li>
<li>将List集合中的指定元素替换成指定的新元素——public static &lt;T&gt; boolean replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</li>
</ul>
</li>
</ol>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol>
<li><p>泛型允许在定义类、接口时通过一个标识来标识类中的某个属性的类型或者某个方法的返回值以及参数类型。这个类型参数将在使用的时候（如继承或实现这个接口，用这个类型声明变量、创建对象）确定（即传入实际的类型参数，也称为类型实参）；</p>
</li>
<li><p>泛型的优势：</p>
<ul>
<li>解决元素存储的安全性问题</li>
<li>解决获取数据的时候，需要强制类型转换的问题</li>
</ul>
</li>
<li><p>使用泛型和使用泛型之前：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/71c7cbbb238b00b7f2ef1a7271e4887d-48818" alt="不使用泛型"></p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4998c6ee4bd2bac6f333e1dd0fbc7688-40346" alt="使用泛型"></p>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">"张三"</span>);</span><br><span class="line">       list.add(<span class="string">"李四"</span>);</span><br><span class="line">       list.add(<span class="string">"王五"</span>);</span><br><span class="line">       list.add(<span class="string">"赵六"</span>);</span><br><span class="line">       list.add(<span class="string">"田七"</span>);</span><br><span class="line">       list.add(<span class="string">"王八"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">"集合中的元素是："</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义泛型：</p>
<ul>
<li><p>泛型类声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&lt;<span class="title">T</span>&gt;()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 接口名&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一定要在类名后面指定类型参数的值（类型）:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型参数只能是类，不可以是基本数据类型，但可以使用包装类填充</p>
</li>
<li><p>泛型类可能有多个参数，此时应该将多个参数一起放在&lt;&gt;中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>,<span class="title">T3</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型类的构造器是没有泛型符号的；</p>
</li>
<li><p>异常类不能是泛型的；</p>
</li>
<li><p>使用通配符&lt;?&gt;，例如List&lt;?&gt;，Map&lt;?,?&gt;。注意：List&lt;?&gt;是List&lt;String&gt;和List&lt;Integer&gt;的父类；</p>
</li>
<li><p>通配符指定上限：&lt;? extends 类或接口&gt;，使用指定的类型必须是继承某个类或者实现某个接口，即&lt;=；</p>
</li>
<li><p>通配符指定下限：&lt;? super 类&gt;，指定的类型不能小于操作的类；</p>
</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法中不能使用类的泛型，因为静态方法是优先于类执行的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static T getStaticT()&#123;</span></span><br><span class="line"><span class="comment">//        return t;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testT</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Object&gt; objectList =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">    list = objectList;</span><br><span class="line">    list = stringList;</span><br><span class="line">    list = integerList;</span><br><span class="line">    integerList.add(<span class="number">1</span>);</span><br><span class="line">    integerList.add(<span class="number">2</span>);</span><br><span class="line">    System.out.println(list.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><ol>
<li><p>java.io.File类是文件或文件目录路径的抽象表示形式，和平台无关。File类能创建、删除、重命名文件和目录，但File类不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流；</p>
</li>
<li><p>File类构造器：</p>
<ul>
<li>根据路径（相对路径和绝对路径）创建File对象——public File(String pathname){}</li>
<li>以parent为父路径，child为子路径创建File对象——public File(String parent, String child){}</li>
<li>根据一个父File对象和子文件路径创建File对象——public File(File parent, String child){}</li>
<li>为了解决不同平台的路径分隔符不同，File提供了一个常量，来表示路径分隔符——File.separator</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line">   </span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"/temp/a.txt"</span>);</span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"/temp/"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"/temp/"</span>),<span class="string">"a.txt"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>File类的常用方法：</p>
<ul>
<li><p>获取绝对路径——public String getAbsolutePath(){}</p>
</li>
<li><p>获取路径——public String getPath(){}</p>
</li>
<li><p>获取名称——public String getName(){}</p>
</li>
<li><p>获取文件或目录的上层路径（如果没有，返回null）——public String getParent(){}</p>
</li>
<li><p>获取文件的长度（即字节数，如果文件不存在，返回0，不能获取目录的长度）——public long length(){}</p>
</li>
<li><p>获取最后一次的修改时间，毫秒值（如果文件不存在，返回0）——public long lastModified(){}</p>
</li>
<li><p>获取指定目录下的所有文件或文件目录的名称数组——public String[] list(){}</p>
</li>
<li><p>获取指定目录下的所有文件或目录的File数组——public File[] listFiles(){}</p>
</li>
<li><p>文件重命名（需要注意的是重命名后的文件的父路径要和重命名前的父路径相同）——public boolean renameTo(File dest){}</p>
</li>
<li><p>判断文件或目录是否存在——public boolean exists(){}</p>
</li>
<li><p>判断是否为目录——public boolean isDirectory(){}</p>
</li>
<li><p>判断是否为文件——public boolean isFile(){}</p>
</li>
<li><p>判断文件或目录是否可读、可写、隐藏、可执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canExecute</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建文件（如果文件存在，就不创建，返回false）——public boolean createNewFile() throws IOException{}</p>
</li>
<li><p>创建目录——public boolean mkdirs(){}</p>
</li>
<li><p>文件或目录删除功能（注意不走回收站，如果是多级目录只能删除最里面的目录，而且必须是空目录）——public boolean delete(){}</p>
</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"/Volumes/Data/hexoBlog"</span> + File.separator + <span class="string">"package.json"</span>);</span><br><span class="line">    FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> (-<span class="number">1</span> != (ch = fileReader.read())) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != fileReader) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ol>
<li><p>I/O是input/output的缩写，IO技术是非常实用的技术，用于处理设备之间的数据传输，如读写文件，网络通讯等。Java程序中，对于数据的输入输出操作以“流Stream”的方式进行；</p>
</li>
<li><p>java.io包下提供了各种“流”类和接口，用来获取不同种类的数据，并通过标准的方法输入或输出数据：</p>
<ul>
<li>输入——读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中</li>
<li>输出——将程序（内存）数据输出到磁盘、光盘等存储设备中</li>
</ul>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0a14d395e1cac29b6992286ab5f9fb28-12411" alt="文件输入输出"></p>
</li>
<li><p>流的分类：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3bafce7cf91f18cd5fa774eb4264d386-18962" alt="流的分类"></p>
</li>
<li><p>FileReader：</p>
<ul>
<li><p>将文件的内容读取，一次只能读取一个字符，读取到文件末尾的时候返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取文件的内容，一次可以读取指定长度的字符</p>
</li>
</ul>
</li>
<li><p>FileWriter</p>
</li>
<li><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类的时候，会创建一个内部缓冲区数组，缺省使用8192个字节的缓冲区；</p>
</li>
<li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位的不同可以将其分为:</p>
<ul>
<li>BufferedInputStream和BufferedInputStream</li>
<li>BufferedReader和BufferedWriter</li>
</ul>
</li>
<li><p>转换流提供了在字节流和字符流之间的转换,Java API提供了两个转换流:</p>
<ul>
<li>InputStreamReader——将InputStream转换为Reader</li>
<li>OutputStreamWriter——将Writer转换为OutputStream</li>
</ul>
</li>
<li><p>System.in和System.out分别代表了系统标准的输入和输出设备，默认情况下，输入设备是键盘，输出设备是显示器。通过System类的setIn()和setOut()方法对默认设备进行改变；</p>
</li>
<li><p>打印流将基本数据类型的数据转换为字符串输出，PrintStream和PrintWriter提供了一系列重载的print()和println()方法，用于多种数据类型的输出；</p>
</li>
<li><p>ObjectInputStream和ObjectOutputStream是用于存储和读取基本数据类型数据或对应的处理流。其强大之处在于可以把java对象写入到数据源中，也能把对象从数据源中还原回来：</p>
<ul>
<li>序列化——用ObjectOutputStream类保存基本数据类型数据或对象的机制</li>
<li>反序列化——用ObjectInputStream类读取基本数据类型数据或对象的机制</li>
</ul>
</li>
<li><p>对象序列化机制允许把内存中的java对象转换成平台无关的二进制流，从而允许把这种二进制流持久化的保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其他程序获取了这种二进制流，就可以恢复成原来的java对象；</p>
</li>
<li><p>序列化的好处在于可将任何实现了Serializable接口的对象转换成字节数据，使其在保存和传输的时候可以被还原；</p>
</li>
<li><p>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现Serializable，否则，会抛出NotSerializableException异常！</p>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"b.txt"</span>);</span><br><span class="line">    FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileWriter = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        fileWriter.write(<span class="string">"abcedf"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != fileWriter)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ol>
<li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address；</p>
</li>
<li><p>InetAddress类的常用方法：</p>
<ul>
<li>获取本地主机的InetAddress类——public static InetAddress getLocalHost(){}</li>
<li>根据主机名称获取InetAddress类——public static InetAddress getByName(String host){}</li>
<li>返回IP地址——public String getHostAddress() {}</li>
<li>获取主机名——public String getHostName() {}</li>
<li>测试指定时间内是否可以达到该地址——public boolean isReachable(int timeout) throws IOException{}</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testNetWork</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class="line">    System.out.println(<span class="string">"获取本地地址："</span> + inetAddress);</span><br><span class="line">   </span><br><span class="line">    InetAddress address = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">    System.out.println(<span class="string">"获取IP地址："</span> + address.getHostAddress());</span><br><span class="line">    String hostName = address.getHostName();</span><br><span class="line">    System.out.println(<span class="string">"获取主机名："</span> + hostName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = address.isReachable(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"测试5毫秒是否可以到达该地址："</span> + flag);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><ol>
<li><p>String类：是一个final类，代表不可变的字符序列。String对象的字符内容是存储在一个字符数组value[]中的；</p>
</li>
<li><p>String常用方法：</p>
<ul>
<li><p>返回字符串的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回某索引处的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断字符串是否为空字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用默认语言环境，将String中的所有字符转换为小写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过指定语言环境，将String中的所有字符转换为小写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(Locale locale)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用默认语言环境，将String中的所有字符转换为大写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过指定语言环境，将String中的所有字符转换为大写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(Locale locale)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字符串的首尾空白去掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较字符串内容是否相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在忽略大小写的情况下，比较字符串内容是否相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字符串拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较字符串大小（如果小于0，说明当前的字符串比传入的字符串小；如果等于0，那么字符串相等；如果大于0，当前的字符串比插入的字符串大）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从指定索引位置开始截取字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字符串从指定位置截取到结束位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断当前字符串是否以指定的后缀结尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断当前字符串是否以指定的前缀开头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从指定索引开始，判断当前字符串是否以指定的前缀开头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断当前字符串是否包含指定的char值序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定子字符串出现在当前字符串的第一个索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定子字符串在当前字符串中最右边出现的索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从指定索引位置开始反向搜索，返回指定字符串在当前字符串中最右边出现的索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字符串中指定的字符替换为新的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用指定的字符序列替换所有匹配到的字符序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用给定的字符串替换所有匹配给定的正则表达式的子字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用给定的字符串替换匹配给定的正则表达式的第一个子字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断当前字符串是否匹配给定的正则表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据给定的正则表达式拆分当前字符串，并返回字符串数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>String转换:</p>
<ul>
<li><p>基本数据类型转换为String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String转换为基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseXxx</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符数组转换为String类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>部分字符数组转换为String类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>String类型转换为字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字节数组转换字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串转换为字节数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用平台默认的语言环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() &#123;&#125;</span><br><span class="line"><span class="comment">//使用指定的语言环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>StringBuffer类：表示可变的字符序列，JDK1.0中声明，可以对字符串的内容进行增删，此时不会产生新的对象；</p>
</li>
<li><p>StringBuffer常用方法：</p>
<ul>
<li><p>构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 设置底层数据的容量的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 设置String类型的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 设置CharSequence类型的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(CharSequence seq)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定位置上的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把指定[start,end]位置替换为str</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定的位置插入xxx</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, Object obj)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把当前的字符序列逆转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">reverse</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回子串在StringBuffer对象中的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从指定位置截取子串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回StringBuffer对象中内容的大小（不是容量）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定索引位置上的char字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定位置设置char字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>StringBuilder类：代表可变的字符序列，和StringBuffer类似；</p>
</li>
<li><p>日期API：</p>
<ul>
<li>System类提供的currentTimeMillis()方法用来返回当前时间和1970年1月1日0时0秒之间以毫秒为单位的时间差</li>
<li>java.util.Date表示特定的瞬间，精确到毫秒</li>
<li>java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类</li>
<li>java.util.Calendar类主要用于完成日期字段之间的相互操作的功能</li>
</ul>
</li>
<li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部；</p>
</li>
<li><p>System类常用方法：</p>
<ul>
<li><p>返回当前时间的毫秒值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出程序（其中status的值为0表示正常退出，非0表示异常退出）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求系统进行垃圾回收（至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取系统中属性名为key对应的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值一般为double类型；</p>
</li>
<li><p>java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger提供所有java的基本整数操作符的对应物，并提供java.lang.Math的所有相关方法。另外，BigInteger还提供模运算、GCD计算、质数测试、质数生成、位操作以及一些其他操作；</p>
</li>
<li><p>BigDecimal类支持不可变的、任意精度的有符号的十进制定点数！</p>
</li>
</ol>
<h2 id="反射-amp-动态代理"><a href="#反射-amp-动态代理" class="headerlink" title="反射&amp;动态代理"></a>反射&amp;动态代理</h2><ol>
<li><p>反射机制允许程序在执行期间借助Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法；</p>
</li>
<li><p>Java有一定的动态性，可以利用反射机制、字节码操作获取类似动态语言的特性；</p>
</li>
<li><p>Java反射机制的应用：</p>
<ul>
<li>在运行的时候判断任意一个对象所属的类</li>
<li>在运行的时候构造任意一个类的对象</li>
<li>在运行的时候判断任意一个类所具有的成员变量和方法</li>
<li>在运行的时候获取泛型信息</li>
<li>在运行的时候调用任意一个对象的成员变量和方法</li>
<li>在运行的时候处理注解</li>
<li>生成动态代理</li>
</ul>
</li>
<li><p>反射相关的API:</p>
<ul>
<li>java.lang.Class——代表一个类</li>
<li>java.lang.reflect.Method——代表类的方法</li>
<li>java.lang.reflect.Field——代表类的成员变量</li>
<li>java.lang.reflect.Constructor——代表类的构造器</li>
<li>… …</li>
</ul>
</li>
<li><p>Class类：</p>
<ol>
<li><p>在Object类中定义了以下的方法，此方法将被所有子类继承：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"><span class="comment">// 返回值的类型是一个Class类，此类是Java反射的源头,可以通过对象反射求出类的名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象通过反射后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口；</p>
</li>
<li><p>一个加载的类在JVM中只会有一个Class实例，一个Class对象对应的是一个加载到JVM中的一个.class文件。每个类的实例都会记得是由哪个Class实例所生成；通过Class可以完整的得到一个类中的所有被加载的结构，Class类是反射的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象；</p>
</li>
<li><p>获取Class的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：如果已知具体的类，那么可以通过类的class属性获取，该方法最为安全可靠，程序性能最高</span></span><br><span class="line"><span class="comment">// 方法二：已经知道某个类的实例，调用该实例的getClass()方法获取Class对象</span></span><br><span class="line"><span class="comment">// 如果知道一个类的全类名（完整的包名.类名），并且该类在类路径下，可以通过Class类的静态方法forName()获得，没有得到则抛出ClassNotFoundException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 方法一</span></span><br><span class="line">        Class&lt;?&gt; test1=String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">// 方法二</span></span><br><span class="line">        Class&lt;?&gt; test2=<span class="string">"hello"</span>.getClass();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 方法三</span></span><br><span class="line">            Class&lt;?&gt; test3=Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(test1.toGenericString());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// public final class java.lang.String</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拥有Class类的类型：</p>
<ul>
<li>类：外部类、内部类（成员内部类、静态内部类）、局部内部类、匿名内部类</li>
<li>接口</li>
<li>数组</li>
<li>枚举</li>
<li>注解</li>
<li>基本数据类型</li>
<li>void</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testClasses</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Object&gt; c1 = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;Comparable&gt; c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;String[]&gt; c3 = String[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;<span class="keyword">int</span>[][]&gt; c4 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;ElementType&gt; c5 = ElementType<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;Override&gt; c6 = Override<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;Integer&gt; c7 = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;Void&gt; c8 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Class&lt;Class&gt; c9 = Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">      </span><br><span class="line">    Class&lt;? extends <span class="keyword">int</span>[]&gt; c10 = a.getClass();</span><br><span class="line">    Class&lt;? extends <span class="keyword">int</span>[]&gt; c11 = b.getClass();</span><br><span class="line">      </span><br><span class="line">    System.out.println(c10 == c11);<span class="comment">//只要元素类型和维度一样，就是同一个Class true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>类的加载过程：</p>
<ol>
<li><p>当程序主动使用某个类的时候，如果该类还没被加载到内存中，则系统会通过如下的步骤来对该类进行初始化</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/12e1dca8ccdc93f98c6e9db933d5b6f8-41419" alt="类的加载机制"></p>
</li>
<li><p><strong>加载</strong>——将class字节码文件内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载过程需要类加载器的参与；</p>
</li>
<li><p><strong>链接</strong>——将Java类的二进制代码合并到JCM的运行状态的过程；</p>
</li>
<li><p><strong>初始化</strong>——执行类构造器&lt;clinit&gt;()方法！</p>
</li>
</ol>
</li>
<li><p>类加载器：将class字节码文件加载到内存中，并将这些静态数据转换成方法区的运行时的数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口；</p>
<ul>
<li><p>类的加载器执行过程：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6f7f648c205b69fc441f8b3b8da52854-18404" alt="加载器执行过程"></p>
</li>
<li><p>JVM规范中定义的类加载器:</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9ea0a3b875d6534cf22364590052ca77-177678" alt="JVM定义的类加载器"></p>
</li>
<li><p>引导类加载器：用C++编写的，是Java自带的类加载器，负责java平台核心库，用来装载核心类库，该加载器无法直接获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSystemClassloader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassLoader classLoader=String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    System.out.println(classLoader);</span><br><span class="line">    <span class="comment">// 输出 null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展类加载器：负责jre/lib/ext目录下的jar包或-D java.ext.dirs指定目录下的jar包装入工作库，该加载器可以被读取</p>
</li>
<li><p>系统类加载器：负责java的classpath或java.class.path所指的目录下的类和jar包装入工作，是最常用的加载器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testClassloader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//系统类记载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"系统类加载器:"</span> + systemClassLoader);</span><br><span class="line">        <span class="comment">//扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">"扩展类加载器:"</span> + parent);</span><br><span class="line">        <span class="comment">//引导类加载器</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(<span class="string">"引导类加载器:"</span> + parent1);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">系统类加载器:jdk.internal.loader.ClassLoaders$AppClassLoader@77556fd</span></span><br><span class="line"><span class="comment">扩展类加载器:jdk.internal.loader.ClassLoaders$PlatformClassLoader@abad89c</span></span><br><span class="line"><span class="comment">引导类加载器:null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建运行时类的对象：</p>
<ol>
<li><p>通过调用无参构造的方式创建类的对象：</p>
<ul>
<li>通过调用Class对象的newInstance()方法来创建类的对象<ul>
<li>类必须提供一个无参的构造器</li>
<li>类的构造器的访问权限需要足够</li>
</ul>
</li>
<li>通过Constructor对象的getDeclaredConstructor()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;Person&gt; personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Person person = personClass.newInstance();</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消类的访问控制</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = constructor.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过调用有参的构造器创建类的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateInstance2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">Integer</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            <span class="comment">//取消java语言的访问检查</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object o = constructor.newInstance(<span class="string">"张三"</span>, <span class="number">20</span>);</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">java.lang.NoSuchMethodException: com.wander.java.learnjava.Person.&lt;init&gt;(java.lang.String, java.lang.Integer)</span></span><br><span class="line"><span class="comment">	at java.base/java.lang.Class.getConstructor0(Class.java:3349)</span></span><br><span class="line"><span class="comment">	at java.base/java.lang.Class.getDeclaredConstructor(Class.java:2553)</span></span><br><span class="line"><span class="comment">	at com.wander.java.learnjava.LearnjavaApplicationTests.testCreateInstance2(LearnjavaApplicationTests.java:109)</span></span><br><span class="line"><span class="comment">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span><br><span class="line"><span class="comment">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span><br><span class="line"><span class="comment">	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span><br><span class="line"><span class="comment">	at java.base/java.lang.reflect.Method.invoke(Method.java:566)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:208)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)</span></span><br><span class="line"><span class="comment">	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span></span><br><span class="line"><span class="comment">	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span></span><br><span class="line"><span class="comment">	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)</span></span><br><span class="line"><span class="comment">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)</span></span><br><span class="line"><span class="comment">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)</span></span><br><span class="line"><span class="comment">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span></span><br><span class="line"><span class="comment">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span></span><br><span class="line"><span class="comment">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>需要添加有参构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><p>Class类中常用的方法：</p>
<ul>
<li><p>获取实现的全部接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getInterfaces()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所继承的父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;? <span class="keyword">super</span> T&gt; getSuperclass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取此Class对象所表示的类的所有public构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取此Class对象所表示的类的所有构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getDeclaredConstructors() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取此Class对象所表示的类的指定参数的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取此Class对象所表示的类的指定参数的public构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示类或接口的全部方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示类或接口的public的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示类或接口的指定名称的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchMethodException, SecurityException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示类或接口的指定的public的指定名称的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchMethodException, SecurityException</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的所有Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Field[] getDeclaredFields() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的所有public的Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的指定名称的Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchFieldException, SecurityException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的指定名称的public的Field</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchFieldException, SecurityException </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的所有注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getDeclaredAnnotations()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的指定注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getDeclaredAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的所有public的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Class对象所表示的类或接口的指定的public的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取包名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Package <span class="title">getPackage</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Constructor类的常用方法：</p>
<ul>
<li><p>获取访问修饰符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取方法名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Method类中常用的方法：</p>
<ul>
<li><p>获取全部的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getReturnType()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取全部的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取访问修饰符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取异常信息:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getExceptionTypes()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>File类中的常用方法:</p>
<ul>
<li><p>获取访问修饰符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Field的属性类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getType()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回Field的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>反射中泛型相关的常用方法:</p>
<ul>
<li><p>获取父类的泛型类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">getGenericSuperclass</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型类型是ParameterizedType</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameterizedType</span> <span class="keyword">extends</span> <span class="title">Type</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取实际的泛型类型参数数组</span></span><br><span class="line">    Type[] getActualTypeArguments();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用指定方法：</p>
<ul>
<li>通过Class类的getMethod(String name,Class… parameterTypes)方法或其他类似的方法获取一个Method对象，并设置此方法操作时所需要的参数类型</li>
<li>然后使用调用Method类的Object invoke(Object obj,Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息</li>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Object instance = clazz.newInstance();</span><br><span class="line">        Method setName = clazz.getDeclaredMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//取消java语言的安全检查</span></span><br><span class="line">        setName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        setName.invoke(instance, <span class="string">"张三"</span>);</span><br><span class="line">        Method getName = clazz.getDeclaredMethod(<span class="string">"getName"</span>);</span><br><span class="line">        <span class="comment">//取消java语言的安全检查</span></span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = getName.invoke(instance);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用指定属性：</p>
<ul>
<li>可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作</li>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFiled</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    Object instance = clazz.newInstance();</span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    name.set(instance,<span class="string">"张三"</span>);</span><br><span class="line">    Object o = name.get(instance);</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态代理:</p>
<ul>
<li>动态代理是指客户通过代理类来调用其他对象的方法，并且在程序运行时根据需要动态创建目标类的代理对象</li>
<li>抽象角色中（接口）声明的是所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和同一的处理众多的方法</li>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBeilef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeilef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Nothing to Believe!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperMan eat "</span>+ food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Object o = Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(obj, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 动态代理</span></span><br><span class="line">    Human human = (Human) ProxyFactory.getProxyInstance(<span class="keyword">new</span> SuperMan());</span><br><span class="line">    String belief = human.getBeilef();</span><br><span class="line">    System.out.println(<span class="string">"信仰是："</span> + belief);</span><br><span class="line">    human.eat(<span class="string">"苹果"</span>);</span><br><span class="line">    <span class="comment">// 接口</span></span><br><span class="line">    Human human1=<span class="keyword">new</span> SuperMan();</span><br><span class="line">    String belief1 =human1.getBeilef();</span><br><span class="line">    System.out.println(<span class="string">"信仰是："</span> + belief1);</span><br><span class="line">    human1.eat(<span class="string">"苹果"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot ELK Quick Start</title>
    <url>/2020/10/02/SpringBoot-ELK-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>随着互联网的快速发展，系统越来越庞大，依赖肉眼分析日志文件来排查问题的方式渐渐凸显出一些问题：</p>
<ul>
<li>分布式集群环境下，服务器数量可能达到成百上千，如何准确定位？</li>
<li>微服务架构中，如何根据异常信息，定位其他各服务的上下文信息？</li>
<li>随着日志文件的不断增大，可能面临在服务器上不能直接打开的尴尬。</li>
<li>文本搜索太慢、无法多维度查询等… …</li>
</ul>
<p>面临这些问题，就需要集中化的日志管理，将所有服务器节点上的日志统一收集，管理，访问。ELK（Elasticsearch Logstash Kibana）的强大在之前的文章中有介绍过，这里主要记录如何在SpringBoot中使用ELK记录日志。后续可能还会将ELK引入项目中作为搜索引擎提供搜索功能，这里先记录下日志记录功能。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p><code>Elasticsearch</code>基于 Lucene 开发，目前使用最广的开源搜索引擎之一，是一个分布式的搜索和分析引擎，可以用于全文检索、结构化检索和分析，并能将这三者结合起来。</p>
</li>
<li><p><code>Logstash</code>简单来说就是一根具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端，与此同时这根管道还可以根据需求在中间加上滤网，提供了很多功能强大的滤网以满足各种应用场景。</p>
</li>
<li><p><code>Kibana</code>是一个开源的分析与可视化平台，可以用<code>Kibana</code>搜索、查看、交互存放在<code>Elasticsearch</code>索引里的数据，使用各种不同的图标、表格、地图等，<code>Kibana</code>能够很轻易的展示高级数据分析与可视化。</p>
</li>
<li><p><code>Logstash</code>可以从本地磁盘，网络服务（自己监听端口，接受用户日志），消息队列中收集各种各样的日志，然后进行过滤分析，并将日志输出到<code>Elasticsearch</code>中。</p>
</li>
<li><p>轻量级数据采集器Beats官网：<a href="https://www.elastic.co/cn/beats/" target="_blank" rel="noopener">https://www.elastic.co/cn/beats/</a></p>
</li>
<li><p>ELKB架构图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4c796fcaa7eea35a4d48bb6a1efee623-206417" alt="ELK架构图"></p>
</li>
<li><p>ELKR架构图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/57d725d8092bef5760dac89f00892ced-246693" alt="ELKR架构图"></p>
</li>
<li><p>程序写入日志时序图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f852ca8e0dd5fbbcdd2377edddc11d0d-70104" alt="程序写入日志时序图"></p>
</li>
<li><p>ELK收集日志及Kibina查询日志时序图：</p>
<p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/56d44272ab155a82b18aacf1a22f5a7f-123940" alt="ELK收集日志及Kibina查询日志时序图"></p>
</li>
</ol>
<h2 id="ELK环境构建（Docker单机）"><a href="#ELK环境构建（Docker单机）" class="headerlink" title="ELK环境构建（Docker单机）"></a>ELK环境构建（Docker单机）</h2><ol>
<li><p><strong>注意版本保持一致，这里都使用7.6.2版本！</strong></p>
</li>
<li><p>Docker镜像拉取：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull logstash:7.6.2</span><br><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>在要启动的镜像的命令处创建一个<code>elk</code>目录，主要用于放置ELK的数据和配置，在<code>elk</code>目录中添加<code>esdata</code>目录，给予777权限，然后运行下面的docker命令，用于启动<code>elasticsearch</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch \</span><br><span class="line">-v "$PWD/esdata":/usr/share/elasticsearch/data \</span><br><span class="line">-e "discovery.type=single-node" \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后访问启动<code>elasticsearch</code>服务的主机的9200端口，看到如下类似内容就表示启动成功：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"46f533f30381"</span>,</span><br><span class="line"><span class="attr">"cluster_name"</span>: <span class="string">"docker-cluster"</span>,</span><br><span class="line"><span class="attr">"cluster_uuid"</span>: <span class="string">"4HvY1D4PSqWzRNANscHFEw"</span>,</span><br><span class="line"><span class="attr">"version"</span>: &#123;</span><br><span class="line"><span class="attr">"number"</span>: <span class="string">"7.6.2"</span>,</span><br><span class="line"><span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line"><span class="attr">"build_type"</span>: <span class="string">"docker"</span>,</span><br><span class="line"><span class="attr">"build_hash"</span>: <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line"><span class="attr">"build_date"</span>: <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line"><span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"lucene_version"</span>: <span class="string">"8.4.0"</span>,</span><br><span class="line"><span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line"><span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用如下命令启动<code>Kibana</code>服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">--link elasticsearch:elasticsearch \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>等待启动成功之后就可以访问启动<code>Kibana</code>服务的主机的5601端口，可以看到<code>Kibana</code>的主页。</p>
</li>
<li><p>在<code>elk</code>目录下创建<code>logstash</code>、<code>logstash/conf</code>、<code>logstash/pipeline</code>、<code>logstash/data</code>目录，在<code>logstash/conf</code>目录下创建<code>jvm.options</code>、<code>log4j2.properties</code>、<code>logstash.yml</code>、<code>pipelines.yml</code>、<code>startup.options</code>文件，文件内容分别如下：</p>
<ul>
<li><p><code>jvm.options</code>：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## JVM configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="attr">-Xms1g</span></span><br><span class="line"><span class="attr">-Xmx1g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">## Expert settings</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## All settings below this section are considered</span></span><br><span class="line"><span class="comment">## expert settings. Don't tamper with them unless</span></span><br><span class="line"><span class="comment">## you understand what you are doing</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC configuration</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseConcMarkSweepGC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Locale</span></span><br><span class="line"><span class="comment"># Set the locale language</span></span><br><span class="line"><span class="comment">#-Duser.language=en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale country</span></span><br><span class="line"><span class="comment">#-Duser.country=US</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale variant, if any</span></span><br><span class="line"><span class="comment">#-Duser.variant=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## basic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the I/O temp directory</span></span><br><span class="line"><span class="comment">#-Djava.io.tmpdir=$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set to headless, just in case</span></span><br><span class="line"><span class="meta">-Djava.awt.headless</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ensure UTF-8 encoding by default (e.g. filenames)</span></span><br><span class="line"><span class="meta">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use our provided JNA always versus the system one</span></span><br><span class="line"><span class="comment">#-Djna.nosys=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn on JRuby invokedynamic</span></span><br><span class="line"><span class="meta">-Djruby.compile.invokedynamic</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># Force Compilation</span></span><br><span class="line"><span class="meta">-Djruby.jit.threshold</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Make sure joni regexp interruptability is enabled</span></span><br><span class="line"><span class="meta">-Djruby.regexp.interruptible</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## heap dumps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a heap dump when an allocation from the Java heap fails</span></span><br><span class="line"><span class="comment"># heap dumps are created in the working directory of the JVM</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># specify an alternative path for heap dumps</span></span><br><span class="line"><span class="comment"># ensure the directory exists and has sufficient space</span></span><br><span class="line"><span class="comment">#-XX:HeapDumpPath=$&#123;LOGSTASH_HOME&#125;/heapdump.hprof</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC logging</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCTimeStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDateStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintClassHistogram</span></span><br><span class="line"><span class="comment">#-XX:+PrintTenuringDistribution</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCApplicationStoppedTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log GC status to a file with time stamps</span></span><br><span class="line"><span class="comment"># ensure the directory exists</span></span><br><span class="line"><span class="comment">#-Xloggc:$&#123;LS_GC_LOG_FILE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Entropy source for randomness</span></span><br><span class="line"><span class="meta">-Djava.security.egd</span>=<span class="string">file:/dev/urandom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the logging context from parent threads to children</span></span><br><span class="line"><span class="meta">-Dlog4j2.isThreadContextMapInheritable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>log4j2.properties</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">status</span> = <span class="string">error</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">LogstashPropertiesConfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.console.name</span> = <span class="string">plain_console</span></span><br><span class="line"><span class="meta">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="meta">appender.console.layout.pattern</span> = <span class="string">[%d&#123;ISO8601&#125;][%-5p][%-25c]%notEmpty&#123;[%X&#123;pipeline.id&#125;]&#125; %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.json_console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.json_console.name</span> = <span class="string">json_console</span></span><br><span class="line"><span class="meta">appender.json_console.layout.type</span> = <span class="string">JSONLayout</span></span><br><span class="line"><span class="meta">appender.json_console.layout.compact</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">appender.json_console.layout.eventEol</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">rootLogger.level</span> = <span class="string">$&#123;sys:ls.log.level&#125;</span></span><br><span class="line"><span class="meta">rootLogger.appenderRef.console.ref</span> = <span class="string">$&#123;sys:ls.log.format&#125;_console</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>logstash.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">logstash-203</span></span><br><span class="line"><span class="comment"># 日志文件目录配置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/logstash/logs</span></span><br><span class="line"><span class="comment"># # 验证配置文件及存在性</span></span><br><span class="line"><span class="attr">config.test_and_exit:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 配置文件改变时是否自动加载</span></span><br><span class="line"><span class="attr">config.reload.automatic:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 重新加载配置文件间隔</span></span><br><span class="line"><span class="attr">config.reload.interval:</span> <span class="string">60s</span></span><br><span class="line"><span class="comment"># # debug模式 开启后会打印解析后的配置文件 包括密码等信息 慎用</span></span><br><span class="line"><span class="comment"># # 需要同时配置日志等级为debug</span></span><br><span class="line"><span class="attr">config.debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">log.level:</span> <span class="string">debug</span></span><br><span class="line"><span class="comment"># # The bind address for the metrics REST endpoint.</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># # 日志格式 json/plain</span></span><br><span class="line"><span class="attr">log.format:</span> <span class="string">json</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>pipelines.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is where you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="comment"># For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="comment">#   https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>startup.options</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># These settings are ONLY used by $LS_HOME/bin/system-install to create a custom</span></span><br><span class="line"><span class="comment"># startup script for Logstash and is not used by Logstash itself. It should</span></span><br><span class="line"><span class="comment"># automagically use the init system (systemd, upstart, sysv, etc.) that your</span></span><br><span class="line"><span class="comment"># Linux distribution uses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After changing anything here, you need to re-run $LS_HOME/bin/system-install</span></span><br><span class="line"><span class="comment"># as root to push the changes to the init script.</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override Java location</span></span><br><span class="line"><span class="comment">#JAVACMD=/usr/bin/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a home directory</span></span><br><span class="line"><span class="attr">LS_HOME</span>=<span class="string">/usr/share/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logstash settings directory, the path which contains logstash.yml</span></span><br><span class="line"><span class="attr">LS_SETTINGS_DIR</span>=<span class="string">/etc/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to logstash</span></span><br><span class="line"><span class="attr">LS_OPTS</span>=<span class="string">"--path.settings $&#123;LS_SETTINGS_DIR&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to java</span></span><br><span class="line"><span class="attr">LS_JAVA_OPTS</span>=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pidfiles aren't used the same way for upstart and systemd; this is for sysv users.</span></span><br><span class="line"><span class="attr">LS_PIDFILE</span>=<span class="string">/var/run/logstash.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user and group id to be invoked as</span></span><br><span class="line"><span class="attr">LS_USER</span>=<span class="string">logstash</span></span><br><span class="line"><span class="attr">LS_GROUP</span>=<span class="string">logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable GC logging by uncommenting the appropriate lines in the GC logging</span></span><br><span class="line"><span class="comment"># section in jvm.options</span></span><br><span class="line"><span class="attr">LS_GC_LOG_FILE</span>=<span class="string">/var/log/logstash/gc.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open file limit</span></span><br><span class="line"><span class="attr">LS_OPEN_FILES</span>=<span class="string">16384</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nice level</span></span><br><span class="line"><span class="attr">LS_NICE</span>=<span class="string">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change these to have the init script named and described differently</span></span><br><span class="line"><span class="comment"># This is useful when running multiple instances of Logstash on the same</span></span><br><span class="line"><span class="comment"># physical box or vm</span></span><br><span class="line"><span class="attr">SERVICE_NAME</span>=<span class="string">"logstash"</span></span><br><span class="line"><span class="attr">SERVICE_DESCRIPTION</span>=<span class="string">"logstash"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you need to run a command or script before launching Logstash, put it</span></span><br><span class="line"><span class="comment"># between the lines beginning with `read` and `EOM`, and uncomment those lines.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## read -r -d '' PRESTART &lt;&lt; EOM</span></span><br><span class="line"><span class="comment">## EOM</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在<code>logstash/pipeline</code>目录下创建<code>logstash.conf</code>文件，文件内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-test-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于多个输出（多端口）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment"> # 我们创建了两个微服务demo 所以建立两个不同的输入，将两个服务的日志分别输入到不同的索引中</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"  # 允许任意主机发送日志</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk1"      # 设定type以区分每个输入源</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4567      </span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines    # 数据格式</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk2"</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4667</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">filter</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #Only matched data are send to output.</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">output</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # For detail config for elasticsearch as output,</span></span><br><span class="line"><span class="comment">  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk1" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          # 输出时创建映射</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   # ElasticSearch 的地址和端口</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk1"         # 指定索引名</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk2" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          #The operation on ES</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   #ElasticSearch host, can be array.</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk2"         #The index to write data to.</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于同一个端口区分应用日志：</p>
<ul>
<li><code>logstash.conf</code>：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-%&#123;[appname]&#125;-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot项目日志配置文件<code>logback-spring.xml</code>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"hello"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="9">
<li><p>在<code>elk</code>目录下运行下面的docker命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name logstash -p 5600:5600 \</span><br><span class="line">-v "$PWD/logstash/conf":/usr/share/logstash/config \</span><br><span class="line">-v "$PWD/logstash/data":/usr/share/logstash/data \</span><br><span class="line">-v "$PWD/logstash/logs":/usr/share/logstash/logs \</span><br><span class="line">-v "$PWD/logstash/pipeline":/usr/share/logstash/pipeline \</span><br><span class="line">--link elasticsearch:elasticsearch -d logstash:7.6.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>至此<code>ELK</code>的环境已经搭建完成，只要在项目中访问提供<code>ELK</code>服务主机的5600端口即可，如果没什么问题，应该在<code>ELK</code>主机上使用<code>docker ps</code>命令即可看到三个docker容器已经启动了：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# docker ps </span></span><br><span class="line"><span class="attr">CONTAINER</span> <span class="string">ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span></span><br><span class="line"><span class="attr">0b955f2b892a</span>        <span class="string">logstash:7.6.2        "/usr/local/bin/do..."   52 minutes ago      Up 40 minutes       5044/tcp, 9600/tcp, 0.0.0.0:5600-&gt;5600/tcp       logstash</span></span><br><span class="line"><span class="attr">c13e9a66500a</span>        <span class="string">kibana:7.6.2          "/usr/local/bin/du..."   About an hour ago   Up About an hour    0.0.0.0:5601-&gt;5601/tcp                           kibana</span></span><br><span class="line"><span class="attr">46f533f30381</span>        <span class="string">elasticsearch:7.6.2   "/usr/local/bin/do..."   About an hour ago   Up About an hour    0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>docker-composer.yml</code>（待验证）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="comment"># 设置集群名称为elasticsearch</span></span><br><span class="line">        <span class="attr">cluster:</span></span><br><span class="line">            <span class="string">name=elasticsearch</span></span><br><span class="line">        <span class="comment"># # 以单一节点模式启动</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">            <span class="string">type=single-node</span></span><br><span class="line">        <span class="comment"># 设置使用jvm内存大小</span></span><br><span class="line">        <span class="attr">ES_JAVA_OPTS:</span> <span class="string">-Xms512m</span> <span class="string">-Xmx512m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="comment"># 插件文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">        <span class="comment"># 数据文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/var/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 挂载logstash的配置文件</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="comment"># logstash在elasticsearch启动之后再启动</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="comment"># 可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9600</span><span class="string">:9600</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5044</span><span class="string">:5044</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"elasticsearch.hosts=http://es:9200"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml</span></span><br><span class="line"><span class="comment"># 使外网可连接</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">"ZSX"</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["ZSX"]</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="SpringBoot日志项目"><a href="#SpringBoot日志项目" class="headerlink" title="SpringBoot日志项目"></a>SpringBoot日志项目</h2><ol>
<li><p>创建一个SpringBoot项目，然后在依赖中添加<code>logstash</code>依赖（pom.xml）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>resources</code>目录下添加<code>logback-spring.xml</code>文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意<code>LOGSTASH_HOST</code>、<code>LOGSTASH_PORT</code>要和提供ELK的IP和端口一致</li>
</ul>
</li>
<li><p>配置文件中添加：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>创建一个控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        log.info(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，然后在<code>Kibana</code>中就会有相应的<code>index</code>，然后添加<code>index</code>的检索就可以了，至此SpringBoot日志使用ELK检索以完成！<code>Kibana</code>中一条日志的<code>JSON</code>格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"logstash-file-test-2020.10.02"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"JfAF63QBTKzFrbF7CZbO"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">    <span class="attr">"level_value"</span>: <span class="number">20000</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"hello"</span>,</span><br><span class="line">    <span class="attr">"logger_name"</span>: <span class="string">"com.example.demo.controller"</span>,</span><br><span class="line">    <span class="attr">"thread_name"</span>: <span class="string">"http-nio-8080-exec-5"</span>,</span><br><span class="line">    <span class="attr">"@version"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"tcplog"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"192.168.37.1"</span>,</span><br><span class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2020-10-02T12:35:17.081Z"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1618</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"@timestamp"</span>: [</span><br><span class="line">      <span class="string">"2020-10-02T12:35:17.081Z"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    <span class="number">1601642117081</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ELK的功能远不止于此，这里先学习在SpringBoot项目中引用ELK进行日志记录，在生产环境出现问题的话就可以快速定位问题所在，在工作中可以作为快速接入指南进行使用。后续还可以使用ELK进行搜索引擎为项目提供搜索服务！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Serializer&amp;Deserializer Quick Start</title>
    <url>/2020/10/06/SpringBoot-Serializer-Deserializer-Quick-Start/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>序列化和反序列化是编程语言中的一个概念，在Java里是一个较为基础的知识点，但是什么是序列化和反序列化，有什么作用，底层实现原理是什么，一连问之后可能整个人会蒙。这里主要记录Java序列化、反序列化的概念以及如何进行序列化和反序列化，包括在这当中用到的工具包等。</p>
<hr>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><code>Java (Serializer)序列化</code>是指把Java对象转换为字节序列的过程，而<code>Java (Deserializer )反序列化</code>是指把字节序列恢复为Java对象的过程。</li>
<li>主要功能：对象序列化最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性；对象反序列化则用于重建对象。</li>
<li>本质：序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</li>
<li>用处：<ul>
<li>实现了数据持久化</li>
<li>利用序列化实现远程通信</li>
<li>利用序列化在进程间传递对象</li>
</ul>
</li>
<li>序列化以及反序列化必须保证字节流中所保存的对象状态及描述信息完整！</li>
<li>Java中提供了对象的序列化与反序列化，但是目前常用的数据传输格式主要有<code>xml</code>、<code>json</code>，在后端开发中一般使用<code>json</code>进行接口数据传输，因此在本文中主要涉及到序列化之后的内容呈现为<code>json</code>格式。</li>
<li>对于采用实现原生Java API的序列化接口<code>Serializable</code>的方式：<strong>为了提高serialVersionUID的独立性和确定性，强烈建议在一个可序列化类中显示的定义serialVersionUID，为它赋予明确的值。</strong></li>
<li><code>json</code>格式规范：<ul>
<li>英文版：<a href="https://google.github.io/styleguide/jsoncstyleguide.xml" target="_blank" rel="noopener">https://google.github.io/styleguide/jsoncstyleguide.xml</a></li>
<li>中文版：<a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md</a></li>
<li><code>json API</code>格式规范：<a href="http://jsonapi.org.cn/format/" target="_blank" rel="noopener">http://jsonapi.org.cn/format/</a></li>
</ul>
</li>
<li>几个常用的json类库：<ul>
<li>Gson: 谷歌开发的<code>json</code>库，功能十分全面</li>
<li>FastJson: 阿里巴巴开发的 <code>json</code>库，性能十分优秀</li>
<li>Jackson: 社区十分活跃且更新速度很快</li>
</ul>
</li>
<li><code>Gson</code>、<code>FastJson</code>、<code>Jackson</code>要求序列化/反序列化的是标准的类，否则无法解析，因为都用到了反射！</li>
</ol>
<h2 id="JSON的一些经验"><a href="#JSON的一些经验" class="headerlink" title="JSON的一些经验"></a>JSON的一些经验</h2><ol>
<li>遵循Java Beans规范与JSON规范，能减少大部分的问题。</li>
<li>使用正常的key，尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。</li>
<li>关于日期处理尽量使用标准的日期格式，或者序列化和反序列化里都是用同样的datePattern格式。</li>
<li>如果JSONObject与正常的POJO混用，出现问题的概率较高。</li>
<li>尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。</li>
<li>尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。</li>
<li>尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。</li>
<li>注意编码和不可见字符！</li>
</ol>
<h2 id="Fastjson基础"><a href="#Fastjson基础" class="headerlink" title="Fastjson基础"></a>Fastjson基础</h2><ol>
<li><p><code>fastjson</code>是一个阿里开源的基于<code>Java</code>语言编写的高性能功能完善的json库，非常适合用于<code>Java</code>的序列化以及反序列化。如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fastjson</code>源码地址：<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">https://github.com/alibaba/fastjson</a></p>
</li>
<li><p><code>fastjson</code>快速使用以及<a href="https://github.com/alibaba/fastjson/wiki/FastJson-文档链接" target="_blank" rel="noopener">文档链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = JSON.toJSONString(obj); <span class="comment">//序列化</span></span><br><span class="line">VO vo = JSON.parseObject(<span class="string">"&#123;...&#125;"</span>, VO<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//反序列化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fastjson</code>序列化API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，支持各种各种Java基本类型和JavaBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，返回JSON字符串的utf-8 bytes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toJSONBytes(Object object, SerializerFeature... features);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，写入到Writer中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeJSONString</span><span class="params">(Writer writer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       Object object, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，按UTF-8编码写入到OutputStream中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">writeJSONString</span><span class="params">(OutputStream os, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            Object object, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            SerializerFeature... features)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fastjson</code>反序列化API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String jsonStr, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(<span class="keyword">byte</span>[] jsonBytes,  // UTF<span class="number">-8</span>格式的JSON字符串</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为泛型类型的JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    TypeReference&lt;T&gt; type, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列为JSONObject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fastjson</code>支持的时间格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String            defaultPatttern    = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 H时m分s秒"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter ISO_FIXED_FORMAT =</span><br><span class="line">        DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).withZone(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String formatter_iso8601_pattern     = <span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fastjson</code>目前没有废弃的SerializerFeature介绍：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QuoteFieldNames <span class="comment">// key使用引号</span></span><br><span class="line">UseSingleQuotes <span class="comment">// 使用单引号</span></span><br><span class="line">WriteMapNullValue <span class="comment">// 输出Map的null值</span></span><br><span class="line">WriteEnumUsingToString <span class="comment">// 枚举属性输出toString的结果</span></span><br><span class="line">WriteEnumUsingName <span class="comment">// 枚举数据输出name</span></span><br><span class="line">UseISO8601DateFormat <span class="comment">// 使用日期格式</span></span><br><span class="line">WriteNullListAsEmpty <span class="comment">// List为空则输出[]</span></span><br><span class="line">WriteNullStringAsEmpty <span class="comment">// String为空则输出""</span></span><br><span class="line">WriteNullNumberAsZero <span class="comment">// Number类型为空则输出0</span></span><br><span class="line">WriteNullBooleanAsFalse <span class="comment">// Boolean类型为空则输出false</span></span><br><span class="line">SkipTransientField <span class="comment">// 忽略使用了transient关键字的内容</span></span><br><span class="line">SortField <span class="comment">// 排序字段</span></span><br></pre></td></tr></table></figure>

<ul>
<li>支持多个SerializerFeature同时作用</li>
</ul>
</li>
</ol>
<h2 id="Gson基础"><a href="#Gson基础" class="headerlink" title="Gson基础"></a>Gson基础</h2><ol>
<li><p>源码地址：<a href="https://github.com/google/gson" target="_blank" rel="noopener">https://github.com/google/gson</a></p>
</li>
<li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Gson</code>序列化、反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonStr = gson.toJson(beanObject); <span class="comment">// 序列化</span></span><br><span class="line">BeanType bean = gson.fromJson(jsonData, BeanType<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 反序列化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Gson</code>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GSONTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"['北京','天津','杭州']"</span>;</span><br><span class="line"></span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        <span class="comment">//解析对象：第一个参数：待解析的字符串 第二个参数结果数据类型的Class对象</span></span><br><span class="line">        Grade grade=gson.fromJson(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        <span class="comment">//解析数组要求使用Type</span></span><br><span class="line">        ArrayList&lt;String&gt; list=gson.fromJson(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//将对象转换为诶JSON格式字符串</span></span><br><span class="line">        String json=gson.toJson(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Jackson基础"><a href="#Jackson基础" class="headerlink" title="Jackson基础"></a>Jackson基础</h2><ol>
<li><p>源码地址：<a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-databind</a></p>
</li>
<li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Jackson</code>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JackSonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;\"id\":1,\"name\":\"JAVAEE-1703\",\"stus\":[&#123;\"id\":101,\"name\":\"刘一\",\"age\":16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"[\"北京\",\"天津\",\"杭州\"]"</span>;</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Grade grade=mapper.readValue(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        ArrayList&lt;String&gt; list=mapper.readValue(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException</span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式字符串</span></span><br><span class="line">        String json=mapper.writeValueAsString(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>序列化这部分主要是看官方文档以及一些比较有价值的博客，示例代码都不太想写了，写规范的<code>json</code>是要遵守规则的，否则会出现问题！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
</search>
