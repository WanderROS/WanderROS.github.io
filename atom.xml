<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WanderROS&#39;S Daily</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wanderros.github.io/"/>
  <updated>2020-10-19T15:43:52.747Z</updated>
  <id>https://wanderros.github.io/</id>
  
  <author>
    <name>WanderROS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Crypt&amp;DeCrypt Qucik Start</title>
    <link href="https://wanderros.github.io/2020/10/19/Java-Crypt-DeCrypt-Qucik-Start/"/>
    <id>https://wanderros.github.io/2020/10/19/Java-Crypt-DeCrypt-Qucik-Start/</id>
    <published>2020-10-19T13:38:13.000Z</published>
    <updated>2020-10-19T15:43:52.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>对称加密：从明文加密到密文和从密文解密到明文用的都是相同的一套密钥。</li><li>非对称加密：加密和解密的密钥不同。</li><li>常见的对称加密算法有<code>DES</code>、<code>IDEA</code>、<code>RC2</code>、<code>RC4</code>、<code>SKIPJACK</code>、<code>RC5</code>、<code>AES</code> 等。</li><li>DES 加密可以给字节数组加密，也可以给文件加密。</li><li>数字摘要：发送方把原信息用<code>HASH</code>函数加密成摘要，然后把数字摘要和原信息一起发送到接收方，接收方也用<code>HASH</code>函数把原消息加密为摘要，看两个摘要是否相同，若相同，则表明信息的完整，否则不完整。</li><li>数字摘要用来保证信息的完整性。</li><li>数字信封：发送方使用对称密钥来加密数据，然后将此对称密钥用接收方的公钥加密，称为加密数据的“数字信封”，将其和加密数据一起发送给接收方，接收方先用自己的私钥解密数字信封，得到对称密钥，然后使用对称密钥解密数据。</li><li>数字信封用来保证信息的保密性。</li><li>数字签名：发送方首先用<code>HASH</code>函数对原文件生成数字摘要，用自己的私钥对这个数字摘要进行加密来形成发送方的电子签名，附在文件后。然后用一个对称密钥对带有电子签名的原文件加密，再用接收方的公钥给对称密钥加密，然后把加密后的密钥文件传送给接收方。接收方用自己的私钥对密钥密文解密，得到对称密钥，用对称密钥对原文件密文进行解密，同时得到原文件的电子签名，再用发送方的公钥对电子签名解密，得到电子签名的<code>HASH</code>值，然后用<code>HASH</code>函数对得到的原文件重新计算 HASH 值，并与解密电子签名得到的 HASH 值进行对比。</li><li>数字签名用来保证信息的不可抵赖性和完整性。</li></ol><h2 id="DES加密-解密"><a href="#DES加密-解密" class="headerlink" title="DES加密/解密"></a>DES加密/解密</h2><ol><li><p>在加解密之前需要产生密钥，密钥可以通过给定的字节数组或者生成一个随机的密钥来获得。</p></li><li><p>创建一个加解密辅助类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一个随机的DES密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Key <span class="title">randomKey</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        KeyGenerator generator = KeyGenerator.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">        SecretKey key = generator.generateKey();</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 byte 数组获得密钥对象</span></span><br><span class="line"><span class="comment">     * 只能传入一个 8 个字节长度的字节数组实例化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Key <span class="title">getKey</span><span class="params">(<span class="keyword">byte</span>[] arrKey)</span> <span class="keyword">throws</span> InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化 DES 密钥Spec</span></span><br><span class="line">        DESKeySpec spec = <span class="keyword">new</span> DESKeySpec(arrKey);</span><br><span class="line">        <span class="comment">// 实例化 DES 密钥工厂</span></span><br><span class="line">        SecretKeyFactory factory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generateSecret(spec); <span class="comment">// 生成key</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DES加密数据data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByteArr(<span class="keyword">byte</span>[] data, Key key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// using DES in ECB mode</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">// 用密匙初始化 Cipher 对象</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DES解密数据data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByteArr(<span class="keyword">byte</span>[] data, Key key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// using DES in ECB mode</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">// 用密匙初始化 Cipher 对象</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DES解密数据data 返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BadPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalBlockSizeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByteArr2Str</span><span class="params">(<span class="keyword">byte</span>[] data, Key key)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException </span>&#123;</span><br><span class="line">        <span class="comment">// using DES in ECB mode</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">// 用密匙初始化 Cipher 对象</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(data));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DES加密字符串 str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptStr(String str, Key key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// using DES in ECB mode</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES/ECB/PKCS5Padding"</span>);</span><br><span class="line">        <span class="comment">// 用密匙初始化 Cipher 对象</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">byte</span>[] data=str.getBytes();</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File file, File dest, Key key)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException </span>&#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">        CipherInputStream cis = <span class="keyword">new</span> CipherInputStream(is, cipher);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        <span class="keyword">while</span> ((r = cis.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        cis.close();</span><br><span class="line">        is.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptFile</span><span class="params">(File file, File dest, Key key)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException </span>&#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">        CipherInputStream cis = <span class="keyword">new</span> CipherInputStream(is, cipher);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        <span class="keyword">while</span> ((r = cis.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        cis.close();</span><br><span class="line">        is.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试加密解密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Key key = DESUtil.randomKey();</span><br><span class="line">       <span class="keyword">byte</span>[] encrData=DESUtil.encryptStr(<span class="string">"hello world!"</span>,key);</span><br><span class="line">       String decrData=DESUtil.decryptByteArr2Str(encrData,key);</span><br><span class="line">       System.out.println(decrData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">hello world!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基于口令加密（PBE）"><a href="#基于口令加密（PBE）" class="headerlink" title="基于口令加密（PBE）"></a>基于口令加密（PBE）</h2><ol><li><p>DES 加密算法密钥的长度决定了加密的安全性，但是这种密钥比较难记忆而且需要存储。</p></li><li><p>PBE 算法是一种基于口令的对比如 DES 这样的算法进行了包装，采用随机数加口令的方式保证数据的安全算法。</p></li><li><p>常用的 PBE 算法有 PBEWITHMD5andDES。</p></li><li><p>PBE辅助类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEParameterSpec;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PBEUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 算法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">"PBEWITHMD5andDES"</span>;</span><br><span class="line">    <span class="comment">/** 迭代次数 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ITERAT_COUNT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个长度为8的字节数组的盐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] initSalt() &#123;</span><br><span class="line">        SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">        <span class="keyword">return</span> random.generateSeed(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据口令生成key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title">getKey</span><span class="params">(String password)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class="line">        PBEKeySpec spec = <span class="keyword">new</span> PBEKeySpec(password.toCharArray());</span><br><span class="line">        SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);</span><br><span class="line">        <span class="keyword">return</span> factory.generateSecret(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidAlgorithmParameterException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BadPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalBlockSizeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] enCryByteArr(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] data) <span class="keyword">throws</span> InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</span><br><span class="line">        Key key = getKey(password);</span><br><span class="line">        <span class="comment">// 实例化 PBE 参数</span></span><br><span class="line">        PBEParameterSpec params = <span class="keyword">new</span> PBEParameterSpec(salt, ITERAT_COUNT);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key, params);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidAlgorithmParameterException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BadPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalBlockSizeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] deCryByteArr(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] data) <span class="keyword">throws</span> InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</span><br><span class="line">        Key key  = getKey(password);</span><br><span class="line">        <span class="comment">// 实例化 PBE 参数材料</span></span><br><span class="line">        PBEParameterSpec params = <span class="keyword">new</span> PBEParameterSpec(salt, ITERAT_COUNT);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key, params);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试加密解密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PBEMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, NoSuchAlgorithmException, IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException, InvalidKeySpecException </span>&#123;</span><br><span class="line">        String data = <span class="string">"需要处理的数据"</span>;</span><br><span class="line">        String password = <span class="string">"helloworld"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] salt = PBEUtil.initSalt();</span><br><span class="line">        <span class="keyword">byte</span>[] cryptograph = PBEUtil.enCryByteArr(password, salt, data.getBytes(<span class="string">"GBK"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] newData = PBEUtil.deCryByteArr(password, salt, cryptograph);</span><br><span class="line"></span><br><span class="line">        System.out.println(data);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(newData, <span class="string">"GBK"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="非对称密钥算法RSA"><a href="#非对称密钥算法RSA" class="headerlink" title="非对称密钥算法RSA"></a>非对称密钥算法RSA</h2><ol><li><p>RSA 是最常用非对称加密算法，常用于消息签名。使用私钥加密只能用对应的公钥才能解密。</p></li><li><p>RSA 加密对明文的长度是有限制的，RSA 加密明文最大长度 117 字节，解密要求密文最大长度为 128 字节，所以在加密和解密的过程中需要分块进行。</p></li><li><p>RSA 辅助类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.KeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成密钥对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">initKey</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化密钥对生成器</span></span><br><span class="line">        KeyPairGenerator gener = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        gener.initialize(<span class="number">1024</span>);</span><br><span class="line">        KeyPair pair = gener.generateKeyPair();</span><br><span class="line">        PrivateKey priKey = pair.getPrivate();</span><br><span class="line">        PublicKey pubKey = pair.getPublic();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        keyMap.put(<span class="string">"PrivateKey"</span>, priKey);</span><br><span class="line">        keyMap.put(<span class="string">"PublicKey"</span>, pubKey);</span><br><span class="line">        <span class="keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> priKeyByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalBlockSizeException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BadPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptByPriKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] priKeyByte) <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException,</span><br><span class="line">            InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, InvalidKeySpecException &#123;</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 获取私钥</span></span><br><span class="line">        KeySpec spec = <span class="keyword">new</span> PKCS8EncodedKeySpec(priKeyByte);</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        Key priKey = keyFactory.generatePrivate(spec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, priKey);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchPaddingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalBlockSizeException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BadPaddingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptByPubKey(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] pubKeyByte) <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException,</span><br><span class="line">            InvalidKeyException, IllegalBlockSizeException, BadPaddingException &#123;</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 获取公钥</span></span><br><span class="line">        KeySpec spec = <span class="keyword">new</span> X509EncodedKeySpec(pubKeyByte);</span><br><span class="line">        <span class="comment">// 生成公钥</span></span><br><span class="line">        Key pubKey = keyFactory.generatePublic(spec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, pubKey);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 MD5withRSA 算法，加签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> priKeyByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SignatureException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] sign(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] priKeyByte) <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, SignatureException &#123;</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 获取私钥</span></span><br><span class="line">        KeySpec spec = <span class="keyword">new</span> PKCS8EncodedKeySpec(priKeyByte);</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        PrivateKey priKey = keyFactory.generatePrivate(spec);</span><br><span class="line"></span><br><span class="line">        Signature signature = Signature.getInstance(<span class="string">"MD5withRSA"</span>);</span><br><span class="line">        signature.initSign(priKey);</span><br><span class="line">        signature.update(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signature.sign();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 MD5withRSA 算法，验签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pubKeyByte</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SignatureException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] pubKeyByte, <span class="keyword">byte</span>[] sign)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException,</span></span><br><span class="line"><span class="function">            SignatureException </span>&#123;</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="comment">// 获取公钥</span></span><br><span class="line">        KeySpec spec = <span class="keyword">new</span> X509EncodedKeySpec(pubKeyByte);</span><br><span class="line">        <span class="comment">// 生成公钥</span></span><br><span class="line">        PublicKey pubKey = keyFactory.generatePublic(spec);</span><br><span class="line">        Signature signature = Signature.getInstance(<span class="string">"MD5withRSA"</span>);</span><br><span class="line">        signature.initVerify(pubKey);</span><br><span class="line">        signature.update(data);</span><br><span class="line">        <span class="keyword">return</span> signature.verify(sign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, InvalidKeySpecException, NoSuchPaddingException, SignatureException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加解密过程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 生成RSA密钥对</span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = RSAUtil.initKey();</span><br><span class="line">        PrivateKey priKey = (PrivateKey) keyMap.get(<span class="string">"PrivateKey"</span>);</span><br><span class="line">        PublicKey pubKey = (PublicKey) keyMap.get(<span class="string">"PublicKey"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] arr=<span class="string">"hello world"</span>.getBytes(); <span class="comment">// 待加密明文</span></span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptData = RSAUtil.encryptByPriKey(arr, priKey.getEncoded());</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = RSAUtil.decryptByPubKey(encryptData, pubKey.getEncoded());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 签名,验签</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] sign = RSAUtil.sign(arr, priKey.getEncoded());</span><br><span class="line">        <span class="keyword">boolean</span> b = RSAUtil.verify(arr, pubKey.getEncoded(), sign);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">hello world</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java FSM Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/19/Java-FSM-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/19/Java-FSM-Quick-Start/</id>
    <published>2020-10-19T10:09:47.000Z</published>
    <updated>2020-10-19T13:36:52.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>大部分的软件开发都是在处理业务逻辑，没有什么是<code>if-else</code>解决不了的业务逻辑，但是当遇到非常复杂的逻辑时，过度使用<code>if-else</code>会使得代码逻辑不清晰，可扩展性不强。因此有必要引入有限状态机这种模型来辅助复杂业务逻辑的开发。本文主要记录如何使用Java来实现简单的有限状态机。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>有限状态（自动）机（Finite State Machine，FSM）简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</li><li>以请假流程为例：<ul><li>员工提交请假单，这时请假单是“待审批”状态，上级可以“同意”或“拒绝”，同意后变成“审批通过”状态，拒绝后变成“审批拒绝”状态</li></ul></li><li>概念抽象：<ol><li><code>状态（State）</code>即流程所处的节点状态，同上述例子的：“待审批”，“审批通过”，“审批拒绝”</li><li><code>事件（Event）</code>即流程都是在节点上触发了某个事件才往下走更改状态的，如：“待审批”触发了“同意”事件才变成“审批通过”的</li><li><code>动作（Transition）</code>即流程流转过程中具体的业务逻辑，如：“待审批”触发“同意”事件变成“审批通过”，这中间可能需要发送邮件通知，系统销假等操作</li></ol></li><li>一个完整的状态机应该包括：状态，事件，动作，以及状态机入口。</li></ol><h2 id="简单状态机"><a href="#简单状态机" class="headerlink" title="简单状态机"></a>简单状态机</h2><ol><li><p>状态，维护状态编码，以及该状态下可支持的动作，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 状态编码 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String stateCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前状态下可允许执行的动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Transition&gt; transitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(String stateCode, Transition... transitions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stateCode = stateCode;</span><br><span class="line">        <span class="keyword">for</span> (Transition transition : transitions) &#123;</span><br><span class="line">            <span class="keyword">this</span>.transitions.add(transition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTransition</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line">        transitions.add(transition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stateCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件，维护事件编码，以及事件附属的业务参数信息，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发的事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 事件标识(编码) */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String eventCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 附属的业务参数 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; attributes = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String eventCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventCode = eventCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String eventCode, Map&lt;Object, Object&gt; attributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventCode = eventCode;</span><br><span class="line">        <span class="keyword">this</span>.attributes = attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eventCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动作，维护触发该动作的事件，触发前状态，触发后状态，以及具体的动作内容，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动作基类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 张振伟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 触发事件 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String eventCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 触发当前状态 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> State currState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 触发后状态 */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> State nextState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transition</span><span class="params">(String eventCode, State currState, State nextState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.eventCode = eventCode;</span><br><span class="line">        <span class="keyword">this</span>.currState = currState;</span><br><span class="line">        <span class="keyword">this</span>.nextState = nextState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">execute</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"当前是：%s 状态，执行：%s 操作后，流转成：%s 状态。"</span>, currState, eventCode, nextState));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.doExecute(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.nextState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行动作的具体业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">doExecute</span><span class="params">(Event event)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态机，维护该状态机所有支持的状态，以及调用入口，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态机基类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义的所有状态 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;State&gt; allStates = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态机执行事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">execute</span><span class="params">(String stateCode, Event event)</span> </span>&#123;</span><br><span class="line">        State startState = <span class="keyword">this</span>.getState(stateCode);</span><br><span class="line">        <span class="keyword">for</span> (Transition transition : startState.getTransitions()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.getEventCode().equals(transition.getEventCode())) &#123;</span><br><span class="line">                <span class="keyword">return</span> transition.execute(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">"StateMachine[&#123;&#125;] Can not find transition for stateId[&#123;&#125;] eventCode[&#123;&#125;]"</span>, <span class="keyword">this</span>.getClass().getSimpleName(), stateCode, event.getEventCode());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">(String stateCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (allStates == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"StateMachine declareAllStates"</span>);</span><br><span class="line">            allStates = <span class="keyword">this</span>.declareAllStates();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (State state : allStates) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.getStateCode().equals(stateCode)) &#123;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由具体的状态机定义所有状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;State&gt; <span class="title">declareAllStates</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体的状态机就要继承<code>StateMachine</code>以及<code>Transition</code>，并实例化事件和状态。</p></li></ol><h2 id="请假流程状态机实现"><a href="#请假流程状态机实现" class="headerlink" title="请假流程状态机实现"></a>请假流程状态机实现</h2><ol><li><p>定义一个请假审批的状态机，包括三个状态，两个事件，两个动作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的请假审批状态机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuditStateMachine</span> <span class="keyword">extends</span> <span class="title">StateMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;State&gt; <span class="title">declareAllStates</span><span class="params">()</span> </span>&#123; <span class="comment">// 定义状态机的状态</span></span><br><span class="line">        List&lt;State&gt; stateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        State pendingState = <span class="keyword">new</span> State(StateCodeContents.PENDING);</span><br><span class="line">        State passedState = <span class="keyword">new</span> State(StateCodeContents.PASSED);</span><br><span class="line">        State refusedState = <span class="keyword">new</span> State(StateCodeContents.REFUSED);</span><br><span class="line"></span><br><span class="line">        pendingState.addTransition(<span class="keyword">new</span> PassTransition(pendingState, passedState));</span><br><span class="line">        pendingState.addTransition(<span class="keyword">new</span> RefuseTransition(pendingState, refusedState));</span><br><span class="line"></span><br><span class="line">        stateList.add(pendingState);</span><br><span class="line">        stateList.add(passedState);</span><br><span class="line">        stateList.add(refusedState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stateList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义“通过”动作 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassTransition</span> <span class="keyword">extends</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PassTransition</span><span class="params">(State currState, State nextState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(EventCodeContents.PASS, currState, nextState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">doExecute</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"执行通过操作..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义“拒绝”动作 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefuseTransition</span> <span class="keyword">extends</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RefuseTransition</span><span class="params">(State currState, State nextState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(EventCodeContents.REFUSE, currState, nextState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">doExecute</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"执行拒绝操作..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 事件编码 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventCodeContents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"审核通过"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFUSE = <span class="string">"审核拒绝"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 状态编码 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateCodeContents</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PENDING = <span class="string">"待审批"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSED = <span class="string">"审批通过"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFUSED = <span class="string">"审批拒绝"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试，“待审批”-&gt;“审批通过”场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuavaApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StateMachine sm = <span class="keyword">new</span> AuditStateMachine();</span><br><span class="line">        State state = sm.execute(AuditStateMachine.StateCodeContents.PENDING, <span class="keyword">new</span> Event(AuditStateMachine.EventCodeContents.REFUSE));</span><br><span class="line">        System.out.println(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">当前是：待审批 状态，执行：审核拒绝 操作后，流转成：审批拒绝 状态。</span></span><br><span class="line"><span class="comment">执行拒绝操作...</span></span><br><span class="line"><span class="comment">审批拒绝</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;大部分的软件开发都是在处理业务逻辑，没有什么是&lt;code&gt;if-else&lt;/code&gt;解决不了的业务逻辑，但是当遇到非常复杂的逻辑时，过度使
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Base 1</title>
    <link href="https://wanderros.github.io/2020/10/19/Java-Base-1/"/>
    <id>https://wanderros.github.io/2020/10/19/Java-Base-1/</id>
    <published>2020-10-19T08:23:06.000Z</published>
    <updated>2020-10-19T13:36:52.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java语言的知识点相对其他语言来说规则不少，写出优秀的代码是要进行一些防御性编程的，这需要有良好的Java编程基础。本文主要记录Java编程语言基础、技巧等。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="自动装箱-拆箱"><a href="#自动装箱-拆箱" class="headerlink" title="自动装箱/拆箱"></a>自动装箱/拆箱</h2><ol><li><p>在自定义类中尽量使用包装类，可以防御转换中的<code>null</code>，比如<code>Integer i = Integer.valueOf(100);</code>。</p></li><li><p>Integer 非线程安全，例如<code>i++</code>，<code>i--</code>，多线程访问无法保证一致性。</p></li><li><p>Integer默认缓存-128到127。</p></li><li><p><code>java.util.concurrent.atomic.AtomicInteger</code>是提供原子操作的 Integer 类。内部通过 volatile 实现多线程可见性，使用原生 Unsafe 类实现同步修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ AtomicInteger</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>; <span class="comment">// 获取当前的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span></span>; <span class="comment">// 取当前的值，并设置新的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>; <span class="comment">// 获取当前的值，并自增</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span></span>; <span class="comment">// 获取当前的值，并自减</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span></span>; <span class="comment">// 获取当前的值，并加上预期的值</span></span><br><span class="line"></span><br><span class="line">AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>一个字符串常量只有一个拷贝，具有不可变性，内容存放常量池。</li><li>StringBuilder 线程不安全，StringBuffer 线程安全（synchronized）。定义常量时，使用 String速度快。</li><li>在<code>Spring</code>中可以使用 <code>org.springframework.util.StringUtils</code> 工具类处理字符串：<ul><li>判断长度，包括空格<code>StringUtils.hasLength(&quot;Hello&quot;)</code></li><li>判断是否包含文本<code>StringUtils.hasText(&quot;12345&quot;)</code></li><li>是否包含空白字符<code>StringUtils.containsWhitespace(&quot; &quot;)</code></li><li>去空格<code>StringUtils.trimWhitespace(&quot; a b &quot;)</code>、<code>StringUtils.trimLeadingWhitespace(&quot; a &quot;)</code>、<code>StringUtils.trimTrailingWhitespace(&quot; a&quot;)</code>、<code>StringUtils.trimAllWhitespace(&quot; a b &quot;)</code></li><li>统计一个子字符串在字符串出现的次数<code>StringUtils.countOccurrencesOf(&quot;erowoiueoiur&quot;, &quot;oi&quot;)</code></li><li>获取给定完整路径的简单文件名<code>StringUtils.getFilename(&quot;myfile&quot;)</code></li><li>获取文件名字符串的扩展名<code>StringUtils.getFilenameExtension(&quot;mypath/myfile.txt&quot;)</code></li><li>去掉文件名的扩展名<code>StringUtils.stripFilenameExtension(&quot;mypath/myfile.txt&quot;)</code></li></ul></li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ol><li>Java 反射机制主要提供了以下功能：<ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的方法</li><li>生成动态代理</li></ul></li></ol><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><ol><li><p>链式编程：方法可链式调用，方法调用完后返回对象本身，然后又可以继续调用该对象的方法。</p></li><li><p>以<code>User</code>类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">setUserId</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果使用链式编程方式，需要先修改 Setter 方法，返回<code>return this;</code></li><li>可在需要重复调用 Setter 方法的类上可以改成这种方式</li></ul></li><li><p>Lombok 对链式编程的支持：只需要在类上加上注解 @Accessors(chain = true)，这个类生成的Setter 方法就是支持链式调用的了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>) <span class="comment">// Lombok 链式编程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Java语言的知识点相对其他语言来说规则不少，写出优秀的代码是要进行一些防御性编程的，这需要有良好的Java编程基础。本文主要记录Java编
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 7z-Compress Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/19/Java-7z-Compress-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/19/Java-7z-Compress-Quick-Start/</id>
    <published>2020-10-19T02:46:08.000Z</published>
    <updated>2020-10-19T13:36:52.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>7z 是一种主流高效的压缩格式，拥有极高的压缩比，而且 7-Zip 是一款开源软件，大部分源代码遵循 GNU LGPL License，使用 7-Zip 软件，无需注册，免费。本文主要记录如何在Java中支持文件的7z格式压缩与解压缩。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="工具类封装与使用"><a href="#工具类封装与使用" class="headerlink" title="工具类封装与使用"></a>工具类封装与使用</h2><ol><li><p>添加maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.tukaani<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现7z 压缩和解压工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.archivers.sevenz.SevenZFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 7z 压缩和解压工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SevenZUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(SevenZUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩多个文件到 7z 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compressFilePath 生成的 7z 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFiles 多个需要加入压缩的文件，支持文件夹。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress7z</span><span class="params">(String compressFilePath, File... inputFiles)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inputFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"InputFiles is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File inputFile : inputFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inputFile.exists()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"InputFile:"</span> + inputFile.getPath() + <span class="string">"not exists."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        File compressFile = <span class="keyword">new</span> File(compressFilePath);</span><br><span class="line">        <span class="keyword">if</span> (compressFile != <span class="keyword">null</span> &amp;&amp; compressFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"7zFile:"</span> + compressFile.getPath() + <span class="string">"exists."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SevenZOutputFile sevenZOutput = <span class="keyword">new</span> SevenZOutputFile(compressFile);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (File inputFile : inputFiles) &#123;</span><br><span class="line">                compress(sevenZOutput, inputFile, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sevenZOutput.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(SevenZOutputFile sevenZOutput, File inputFile, String name)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            name = inputFile.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputFile.isDirectory()) &#123; <span class="comment">// 目录</span></span><br><span class="line">            File[] childFiles = inputFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (childFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">                SevenZArchiveEntry entry = sevenZOutput.createArchiveEntry(inputFile, name);</span><br><span class="line">                sevenZOutput.putArchiveEntry(entry);</span><br><span class="line">                sevenZOutput.closeArchiveEntry();</span><br><span class="line">                logger.info(<span class="string">"Compress dir:"</span> + inputFile.getPath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (File childFile : childFiles) &#123;</span><br><span class="line">                    compress(sevenZOutput, childFile, name + File.separator + childFile.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 单个文件</span></span><br><span class="line">            BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(inputFile));</span><br><span class="line">            SevenZArchiveEntry entry = sevenZOutput.createArchiveEntry(inputFile, name);</span><br><span class="line">            sevenZOutput.putArchiveEntry(entry);</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                sevenZOutput.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            inputStream.close();</span><br><span class="line">            sevenZOutput.closeArchiveEntry();</span><br><span class="line">            logger.info(<span class="string">"Compress file:"</span> + inputFile.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压 7z 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compressFilePath 7z 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputDir 解压目标目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unCompress7z</span><span class="params">(String compressFilePath, String outputDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File compressFile = <span class="keyword">new</span> File(compressFilePath);</span><br><span class="line">        <span class="keyword">if</span> (compressFile == <span class="keyword">null</span> || !compressFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"7zFile not exists."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File output = <span class="keyword">new</span> File(outputDir);</span><br><span class="line">        <span class="keyword">if</span> (output == <span class="keyword">null</span> || !output.exists() || !output.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid outputDir:"</span> + outputDir);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环解压</span></span><br><span class="line">        SevenZFile sevenZFile = <span class="keyword">new</span> SevenZFile(compressFile);</span><br><span class="line">        SevenZArchiveEntry entry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((entry = sevenZFile.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String newFilePath = outputDir + File.separator + entry.getName();</span><br><span class="line">            File newFile = <span class="keyword">new</span> File(newFilePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理目录</span></span><br><span class="line">            <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> mkdirs = newFile.mkdirs();</span><br><span class="line">                <span class="keyword">if</span> (!mkdirs) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail mkdir:"</span> + newFilePath);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">"Mkdir:"</span> + newFilePath);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解压文件</span></span><br><span class="line">            OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(newFile);</span><br><span class="line">                <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">                <span class="keyword">while</span> ((length = sevenZFile.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    outputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">"UnCompress file:"</span> + newFilePath);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    outputStream.flush();</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuavaApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"qrcode.jpg"</span>;</span><br><span class="line">        File file=<span class="keyword">new</span> File(path);</span><br><span class="line">        File file1=<span class="keyword">new</span> File(<span class="string">"pom.xml"</span>);</span><br><span class="line">        SevenZUtil.compress7z(<span class="string">"qrCode.7z"</span>,file,file1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;7z 是一种主流高效的压缩格式，拥有极高的压缩比，而且 7-Zip 是一款开源软件，大部分源代码遵循 GNU LGPL License，使用
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
      <category term="7z" scheme="https://wanderros.github.io/tags/7z/"/>
    
  </entry>
  
  <entry>
    <title>Java QrCode Qucik Start</title>
    <link href="https://wanderros.github.io/2020/10/19/Java-QrCode-Qucik-Start/"/>
    <id>https://wanderros.github.io/2020/10/19/Java-QrCode-Qucik-Start/</id>
    <published>2020-10-19T01:29:31.000Z</published>
    <updated>2020-10-19T13:36:52.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>得益于二维码的信息容量大、容错能力强、制作成本低等优点，在移动互联网时代，二维码得到了非常广泛的应用。使用人员不需要懂任何技术，只要将自己的二维码给商家扫描就能付款，非常方便。本文主要记录如何在java环境下生成和解析二维码。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>二维码一共有40个尺寸（版本Version），<code>Version 1</code>是<code>21 x 21</code>，然后每增加一个<code>Version</code>，增加4个单位，公式为<code>(V-1)*4 + 21</code>（V是版本号），最高<code>Version 40</code>为<code>171 x 171</code>。</p></li><li><p>二维码的生成和解析自然涉及到编码算法，Java第三方包那么多，当然也不缺二维码的包，这里引入Google的二维码包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/javase --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="项目中引入二维码"><a href="#项目中引入二维码" class="headerlink" title="项目中引入二维码"></a>项目中引入二维码</h2><ol><li><p>pom.xml文件中引入Google二维码包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.zxing/javase --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>二维码工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.zxing.*;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageConfig;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二维码图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 图片大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outPath 图片输出路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onColor 前景色，默认黑色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offColor 背景色， 默认白色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateQRCode</span><span class="params">(String content, <span class="keyword">int</span> size, String outPath, Color onColor, Color offColor)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File imageFile = <span class="keyword">new</span> File(outPath);</span><br><span class="line">        <span class="keyword">if</span> (imageFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Image:"</span> + outPath + <span class="string">"exist."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, StandardCharsets.UTF_8); <span class="comment">// 内容编码</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); <span class="comment">// 纠错级别</span></span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">1</span>); <span class="comment">// 外边距</span></span><br><span class="line">        <span class="comment">// 设置颜色（默认黑白）</span></span><br><span class="line">        <span class="keyword">if</span> (onColor == <span class="keyword">null</span>) onColor = Color.BLACK;</span><br><span class="line">        <span class="keyword">if</span> (offColor == <span class="keyword">null</span>) offColor = Color.WHITE;</span><br><span class="line">        MatrixToImageConfig config = <span class="keyword">new</span> MatrixToImageConfig(onColor.getRGB(), offColor.getRGB());</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, size, size, hints);</span><br><span class="line">        MatrixToImageWriter.writeToPath(bitMatrix, <span class="string">"jpg"</span>, imageFile.toPath(), config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageInputStream 图片输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readQRCode</span><span class="params">(InputStream imageInputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (imageInputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Image inputStream is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> readQRCode(ImageIO.read(imageInputStream));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageFile 二维码文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readQRCode</span><span class="params">(File imageFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!imageFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Image not exist."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> readQRCode(ImageIO.read(imageFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readQRCode</span><span class="params">(BufferedImage image)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;DecodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, StandardCharsets.UTF_8);</span><br><span class="line">        BufferedImageLuminanceSource source = <span class="keyword">new</span> BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source));</span><br><span class="line">        Result result = <span class="keyword">new</span> MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        <span class="keyword">return</span> result.getText();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuavaApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"qrcode.jpg"</span>;</span><br><span class="line">        <span class="comment">// 生成</span></span><br><span class="line">        QRCodeUtils.generateQRCode(<span class="string">"https://wanderros.github.io"</span>, <span class="number">200</span>, path, Color.BLACK, <span class="keyword">new</span> Color(<span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>));</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        String content = QRCodeUtils.readQRCode(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">        System.out.println(<span class="string">"解析二维码："</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;得益于二维码的信息容量大、容错能力强、制作成本低等优点，在移动互联网时代，二维码得到了非常广泛的应用。使用人员不需要懂任何技术，只要将自己的
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
      <category term="QrCode" scheme="https://wanderros.github.io/tags/QrCode/"/>
    
  </entry>
  
  <entry>
    <title>Java Google Guava Qucik Start</title>
    <link href="https://wanderros.github.io/2020/10/17/Java-Google-Guava-Qucik-Start/"/>
    <id>https://wanderros.github.io/2020/10/17/Java-Google-Guava-Qucik-Start/</id>
    <published>2020-10-17T08:23:35.000Z</published>
    <updated>2020-10-19T13:36:52.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Guava是谷歌开源的Java库，提供了用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。谷歌里的很多项目都使用了Guava，优秀的Java开发人员都在用，有什么理由不用？</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>Guava产生背景：谷歌作为大公司，当然会从日常的工作中提取中很多高效率的方法出来，因而产生了Guava。</p></li><li><p>Guava的源码地址：<a href="https://github.com/google/guava" target="_blank" rel="noopener">https://github.com/google/guava</a></p></li><li><p>Guava的优势：</p><ul><li>标准化——Guava库是由谷歌托管</li><li>高效可靠——被Google的开发者设计，实现和使用</li><li>高效优化</li><li>函数式编程</li><li>实用工具函数</li><li>提供标准的故障安全验证机制</li><li>最佳实践</li></ul></li><li><p>Maven引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>29.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="字符串工具类"><a href="#字符串工具类" class="headerlink" title="字符串工具类"></a>字符串工具类</h2><p>截止目前为止，Guava提供了如下的类来处理字符串：</p><ul><li><code>Joiner</code>（连接器）会按照指定的分隔符等将输入内容连接起来形成需要的格式的字符串</li><li><code>Splitter</code>（拆分器）会按照指定的模式来对输入字符串进行拆分获得指定格式的类型，同<code>Joiner</code>属于逆向操作</li><li><code>CharMatcher</code>（字符匹配器）会对字符内容按照指定格式进行匹配</li><li><code>Charsets</code>（字符集）针对所有Java平台的六种字符集提供了常量引用</li><li><code>CaseFormat</code>（大小写格式）用来在各种ASCII 大小写规范间转换字符串</li><li><code>Strings</code>封装了通用型的字符串工具类</li></ul><h3 id="Joiner（连接器）"><a href="#Joiner（连接器）" class="headerlink" title="Joiner（连接器）"></a>Joiner（连接器）</h3><ol><li><p><code>Joiner</code>可以使用<code>on</code>方法来定义连接的字符或者字符串；可以使用<code>skipNulls</code>方法来忽略要连接的为<code>null</code>的字符串；可以使用<code>useForNull</code>方法来替换为<code>null</code>的字符串的连接，<code>skipNulls</code>和<code>useForNull</code>不能同时使用；可以使用<code>withKeyValueSeparator</code>来为键值对类型添加键值对分隔符。</p></li><li><p><code>Joiner</code>可以用来连接对象类型，连接对象时会把对象的<code>toString</code>方法的值连接起来。</p></li><li><p><code>Joiner</code>对象实例总是不可变的，用来定义<code>Joiner</code>目标语义的配置方法总会返回一个新的<code>Joiner</code>实例，因而<code>Joiner</code>实例都是线程安全的，可以将其定义为<code>static final</code>常量。</p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Joiner joiner = Joiner.on(<span class="string">","</span>).skipNulls();</span><br><span class="line">String str1 = joiner.join(<span class="string">"Harry"</span>, <span class="keyword">null</span>, <span class="string">"Ron"</span>, <span class="string">"Hermione"</span>);</span><br><span class="line"><span class="comment">// str1="Harry,Ron,Hermione"</span></span><br><span class="line">String str2 = Joiner.on(<span class="string">","</span>).join(Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line"><span class="comment">// str2="1,5,7"</span></span><br><span class="line">Joiner.MapJoiner joiner1 = Joiner.on(<span class="string">","</span>).withKeyValueSeparator(<span class="string">"=="</span>);</span><br><span class="line">Map&lt;String,Person&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Person person1=<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">23</span>,<span class="string">"Beijing"</span>); <span class="comment">// 自定义类Person，并重写了toString方法</span></span><br><span class="line">Person person2=<span class="keyword">new</span> Person(<span class="string">"wangwu"</span>,<span class="number">24</span>,<span class="string">"Xian"</span>);</span><br><span class="line">map.put(<span class="string">"first"</span>,person1);</span><br><span class="line">map.put(<span class="string">"second"</span>,person2);</span><br><span class="line">String str3=joiner1.join(map);</span><br><span class="line"><span class="comment">// str3="first==Person&#123;name='lisi', age=23, address='Beijing'&#125;,second==Person&#123;name='wangwu', age=24, address='Xian'&#125;"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Splitter（拆分器）"><a href="#Splitter（拆分器）" class="headerlink" title="Splitter（拆分器）"></a>Splitter（拆分器）</h3><ol><li><p><code>Splitter</code>可以按照多种模式来拆分字符串，而且不会出现异常情况，目前可以通过<code>on</code>方法设置的模式有：</p><ul><li>按单个字符拆分</li><li>按字符匹配器拆分</li><li>按字符串拆分</li><li>按正则表达式拆分</li><li>按固定长度拆分</li></ul></li><li><p>拆分器支持多种修饰符：</p><ul><li><code>omitEmptyStrings</code>从结果中自动忽略空字符串</li><li><code>trimResults</code>移除结果字符串的前导空白和尾部空白</li><li><code>trimResults(CharMatcher)</code>给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符</li><li><code>limit</code>限制拆分出的字符串数量，如果拆分有剩余则追加到最后一个拆分的字符串上</li></ul></li><li><p>实际使用时通常将<code>omitEmptyStrings</code>和<code>trimResults</code>一起使用才能到达想要的效果。</p></li><li><p><code>Splitter</code>对象实例总是不可变的，同样也是线程安全的，可以将其定义为<code>static final</code>常量。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = Splitter.fixedLength(<span class="number">2</span>).trimResults().omitEmptyStrings().splitToList(<span class="string">"  1223110f0e0d1e       "</span>);</span><br><span class="line"><span class="comment">// list1 = [12, 23, 11, 0f, 0e, 0d, 1e]</span></span><br><span class="line">List&lt;String&gt; list2 = Splitter.fixedLength(<span class="number">2</span>).trimResults().omitEmptyStrings().limit(<span class="number">3</span>).splitToList(<span class="string">"  1223110f0e0d1e       "</span>);</span><br><span class="line"><span class="comment">// list2 = [12, 23, 110f0e0d1e]</span></span><br><span class="line">List&lt;String&gt; list3 = Splitter.fixedLength(<span class="number">2</span>).splitToList(<span class="string">"  1223110f0e0d1e       "</span>);</span><br><span class="line"><span class="comment">// list3 = [  , 12, 23, 11, 0f, 0e, 0d, 1e,   ,   ,   ,  ]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="CharMatcher（字符匹配器）"><a href="#CharMatcher（字符匹配器）" class="headerlink" title="CharMatcher（字符匹配器）"></a>CharMatcher（字符匹配器）</h3><ol><li><p>直观上可以认为一个<code>CharMatcher</code>实例代表着某一类字符，如数字或空白字符。本质上<code>CharMatcher</code>实例就是对字符的布尔判断。</p></li><li><p><code>CharMatcher</code>提供了修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等一系列对字符作特定类型的操作。</p></li><li><p>对匹配串操作的常用方法有：</p><ul><li><code>retainFrom</code>保留匹配串</li><li><code>removeFrom</code>删除匹配串</li><li><code>replaceFrom</code>替换匹配串</li><li><code>collapseFrom</code>去掉接连匹配的字符串，并用指定字符代替</li><li><code>trimFrom</code>删除首尾匹配串</li><li><code>countIn</code>统计匹配串</li><li><code>matchesAnyOf</code>判断是否匹配任一字符</li><li><code>trimLeadingFrom</code>删除首部匹配串</li><li><code>trimTrailingFrom</code>删除尾部匹配串</li><li><code>matchesAnyOf(CharSequence sequence)</code>只要sequence中有任意字符能匹配Matcher,返回true</li><li><code>matchesAllOf(CharSequence sequence)</code>sequence中所有字符都能匹配Matcher,返回true</li><li><code>matchesNoneOf(CharSequence sequence)</code>sequence中所有字符都不能匹配Matcher,返回true</li><li><code>indexIn(CharSequence sequence)</code>返回sequence中匹配到的第一个字符的坐标</li><li><code>indexIn(CharSequence sequence, int start)</code>返回从start开始,在sequence中匹配到的第一个字符的坐标</li></ul></li><li><p>支持使用<code>or</code>(或)、<code>negate</code>(取反)、<code>and</code>(并)进行逻辑组合。</p></li><li><p>常用匹配策略（创建CharMatcher的静态方法）：</p><ul><li><code>any</code>匹配任意字符</li><li><code>none</code>不匹配任何字符</li><li><code>whitespace</code>匹配空格</li><li><code>breakingWhitespace</code>所有可换行的空白字符(不包括非换行空白字符）</li><li><code>ascii</code>匹配ASCII字符（字符数值小于128）</li><li><code>javaIsoControl</code>匹配ISO控制字符</li><li><code>is</code>匹配指定字符</li><li><code>isNot</code>不匹配指定字符</li><li><code>anyOf(CharSequence sequence)</code>匹配sequence中任意字符</li><li><code>noneOf(CharSequence sequence)</code>不匹配sequence中任何一个字符</li><li><code>inRange(char startInclusive, char endIncludesive)</code>匹配范围内任意字符</li></ul></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个匹配数字字符的CharMatcher</span></span><br><span class="line">CharMatcher numMatcher = CharMatcher.inRange(<span class="string">'0'</span>, <span class="string">'9'</span>);</span><br><span class="line"><span class="comment">// 创建匹配任何字符的Matcher</span></span><br><span class="line">CharMatcher anyMatcher = CharMatcher.any();</span><br><span class="line"><span class="comment">// 创建了一个匹配字母的Matcher</span></span><br><span class="line">CharMatcher letterMatcher = CharMatcher.inRange(<span class="string">'a'</span>, <span class="string">'z'</span>).or(CharMatcher.inRange(<span class="string">'A'</span>, <span class="string">'Z'</span>));</span><br><span class="line"><span class="comment">// 非字母的Matcher negate()规则相反</span></span><br><span class="line">CharMatcher notLetterMatcher = letterMatcher.negate();</span><br><span class="line"><span class="comment">// 创建了一个只匹配a字母的Matcher</span></span><br><span class="line">CharMatcher letterMatcher = CharMatcher.is(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">boolean</span> res=numMatcher.matches(<span class="string">'a'</span>); <span class="comment">// res = false</span></span><br><span class="line">res=numMatcher.matches(<span class="string">'2'</span>); <span class="comment">// res = true</span></span><br><span class="line">String str=numMatcher.retainFrom(<span class="string">"123abc789"</span>); <span class="comment">// str = "123789"</span></span><br><span class="line">str=numMatcher.removeFrom(<span class="string">"123abc789"</span>);<span class="comment">// str = "abc"</span></span><br><span class="line">str = letterMatcher.collapseFrom(<span class="string">"abc123aaabc中"</span>,<span class="string">'-'</span>); <span class="comment">// str ="-bc123-bc"</span></span><br></pre></td></tr></table></figure><ul><li><code>CharMatcher</code>可以通过静态方法创建出各种符合要求的<code>Matcher</code>，然后使用该<code>Matcher</code>以及方法就可以对字符串进行判断或者操作</li></ul></li></ol><h3 id="Charset（字符集）"><a href="#Charset（字符集）" class="headerlink" title="Charset（字符集）"></a>Charset（字符集）</h3><ol><li><p>本质上是对字符集进行封装，然后提供常量引用，目的就是规范。</p></li><li><p>定义的字符集有：</p><ul><li><code>US_ASCII</code></li><li><code>ISO_8859_1</code></li><li><code>UTF_8</code></li><li><code>UTF_16BE</code></li><li><code>UTF_16LE</code></li><li><code>UTF_16</code></li></ul></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = string.getBytes(Charsets.UTF_8);</span><br></pre></td></tr></table></figure></li></ol><h3 id="CaseFormat（字符串格式）"><a href="#CaseFormat（字符串格式）" class="headerlink" title="CaseFormat（字符串格式）"></a>CaseFormat（字符串格式）</h3><ol><li><p><code>CaseFormat</code>可以方便地在各种ASCII大小写规范间转换字符串，比如编程语言的命名规范，在编写代码生成器的时候就比较有用。</p></li><li><p>目前支持的格式有：</p><ul><li><code>LOWER_HYPHEN</code>（小写横杠）如lower-hyphen</li><li><code>LOWER_UNDERSCORE</code>（小写下划线）如lower_underscore</li><li><code>LOWER_CAMEL</code>（小驼峰）如lowerCamel</li><li><code>UPPER_CAMEL</code>（大驼峰）如UpperCamel</li><li><code>UPPER_UNDERSCORE</code>（大写下划线）如UPPER_UNDERSCORE</li></ul></li><li><p>需要注意的是<code>CaseFormat</code>提供的是格式之间的相互转换。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, <span class="string">"constant-name"</span>);</span><br><span class="line"><span class="comment">// str = ConstantName</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Strings（字符串类）"><a href="#Strings（字符串类）" class="headerlink" title="Strings（字符串类）"></a>Strings（字符串类）</h3><ol><li><p>提供一些常用的字符串相关的静态方法。灵活使用<code>Strings</code>工具类，会使开发省时省力，并且代码健壮性和可读性更高，更简洁。</p></li><li><p><code>Strings</code>工具类提供以下方法：</p><ul><li><code>nullToEmpty</code>将值为<code>null</code>的字符串返回空字符串</li><li><code>emptyToNull</code>将值为空字符串的返回为<code>null</code></li><li><code>isNullOrEmpty</code>判断一个字符串的值是否为空或者<code>null</code></li><li><code>padStart</code>在给定字符串前填充指定的字符以达到最短字符长度要求然后返回拼接后的字符串</li><li><code>padEnd</code>在给定字符串尾部填充指定的字符以达到最短字符长度要求然后返回拼接后的字符串</li><li><code>repeat</code>获得一个字符串重复指定次数的字符串（重复次数大于等于0）</li><li><code>commonPrefix</code>获得字符串的公共前缀</li><li><code>commonSuffix</code>获得字符串的公共后缀</li><li><code>lenientFormat</code>格式化输出字符串</li></ul></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String str1 = Strings.nullToEmpty(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// str1 = ""</span></span><br><span class="line">String str2 = Strings.emptyToNull(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// str2 = null</span></span><br><span class="line"><span class="keyword">boolean</span> res = Strings.isNullOrEmpty(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// res = true</span></span><br><span class="line">String str3 = Strings.padStart(<span class="string">"123"</span>,<span class="number">6</span>,<span class="string">' '</span>);</span><br><span class="line"><span class="comment">// str3 = "   123"</span></span><br><span class="line">String str4 = Strings.padEnd(<span class="string">"123"</span>,<span class="number">6</span>,<span class="string">'x'</span>);</span><br><span class="line"><span class="comment">// str4 = "123xxx"</span></span><br><span class="line">String str5 = Strings.repeat(<span class="string">"123"</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// str5 = "123123"</span></span><br><span class="line">String str6 = Strings.commonPrefix(<span class="string">"123"</span>,<span class="string">"125"</span>);</span><br><span class="line"><span class="comment">// str6 = "12"</span></span><br><span class="line">String str7 = Strings.commonSuffix(<span class="string">"123"</span>,<span class="string">"1223"</span>);</span><br><span class="line"><span class="comment">// str7 = "23"</span></span><br><span class="line">String str8 = Strings.lenientFormat(<span class="string">"&#123;%s+%s=%s,%s&#125;"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"hello"</span>);</span><br><span class="line"><span class="comment">// str8 = "&#123;1+2=3,hello&#125;"</span></span><br></pre></td></tr></table></figure></li><li><p>从应用的角度来讲，<code>Strings</code>工具类提供的方法略微有点少，可能不完全满足日常开发，可以考虑<code>Apache</code>的工具库。</p></li></ol><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>程序世界的算法都要在时间，资源占用甚至正确率等多种因素间进行平衡。同样的问题所属的量级或场景不同，所用算法也会不同，其中也会涉及很多的权衡。如何判断一个值是否存在于已有的集合问题在很多场景下都会遇到，比如说防止缓存击穿，爬虫重复URL检测，字典纠缠和CDN代理缓存等。</p><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p><a href="https://www.jasondavies.com/bloomfilter/?spm=a2c4e.11153940.blogcont683602.11.21181fe6hVAGjH" target="_blank" rel="noopener">布隆过滤器演示</a></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4a2adccee81303ad83bdcfb59e429e08-134817" alt="原理"></p></li><li><p>Bloom Filter（布隆过滤器）是一种空间效率很高的随机数据结构，它利用位数组很简洁地表示一个集合，并能判断一个元素是否属于这个集合，如果一个元素不在集合中，那么它一定是不在的，但是判断该元素在集合中，有可能是不在集合中的，即存在假阳性问题。</p></li><li><p>布隆过滤器的特点：</p><ul><li>空间效率高的概率型数据结构，用来检查一个元素是否在一个集合中</li><li>对于一个元素检测是否存在的调用，布隆过滤器会告诉调用者两个结果之一：可能存在或者一定不存在</li></ul></li><li><p>布隆过滤器的应用场景：</p><ul><li>网络爬虫</li><li>处理缓存击穿</li><li>避免磁盘读取等</li><li>Goole Bigtable，Apache HBase和Postgresql等都使用了布隆过滤器</li><li>检查单词是否拼写正确、网络爬虫的URL去重、黑名单检验，微博中昵称不能重复的检测等</li></ul></li><li><p>布隆过滤器是由一个长度为m比特的位数组（bit array）与k个哈希函数（hash function）组成的数据结构。</p></li><li><p>布隆过滤器的优点：</p><ul><li>不需要存储数据本身，只用比特表示，因此空间占用相对于传统方式有巨大的优势，并且能够保密数据</li><li>时间效率也较高，插入和查询的时间复杂度均为O(k)</li><li>哈希函数之间相互独立，可以在硬件指令层面并行计算</li></ul></li><li><p>布隆过滤器的缺点：</p><ul><li>存在假阳性的概率，不适用于任何要求100%准确率的场景</li><li>只能插入和查询元素，不能删除元素</li></ul></li><li><p>Guava引入了一个叫做<code>Funnel</code>的类，<code>Funnel</code>类定义了如何把一个具体的对象类型分解为原生字段值，从而将值分解为Byte以供后面BloomFilter进行hash运算。通过使用这个类，我们可以自己定义一个属于自己类的Funnel。而且Guava预定义了一些原生类型的Funnel，如String、Long、Integer。</p></li><li><p>Guava库中的布隆过滤器使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BloomFilter&lt;String&gt; b = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8), <span class="number">1000</span>, <span class="number">0.000001</span>);</span><br><span class="line">b.put(<span class="string">"121"</span>);</span><br><span class="line">b.put(<span class="string">"122"</span>);</span><br><span class="line">b.put(<span class="string">"123"</span>);</span><br><span class="line">System.out.println(b.mightContain(<span class="string">"121"</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(b.mightContain(<span class="string">"12123"</span>)); <span class="comment">// false</span></span><br><span class="line">BloomFilter&lt;String&gt; b1 = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8), <span class="number">1000</span>, <span class="number">0.000001</span>);</span><br><span class="line">b1.put(<span class="string">"aba"</span>);</span><br><span class="line">b1.put(<span class="string">"abb"</span>);</span><br><span class="line">b1.put(<span class="string">"abc"</span>);</span><br><span class="line">b1.putAll(b); <span class="comment">// "将布隆过滤器b的已经存在的元素放入b1中"</span></span><br><span class="line">System.out.println(b1.mightContain(<span class="string">"123"</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>布隆缓存过滤器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomCacheFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicQuery dynamicQuery; <span class="comment">// 查询数据库类的注入</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 运行时执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String nativeSql = <span class="string">"SELECT id FROM blog"</span>;</span><br><span class="line">        List&lt;Object&gt; list = dynamicQuery.query(nativeSql,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">        bloomFilter = BloomFilter.create(Funnels.integerFunnel(), list.size());<span class="comment">// 创建布隆过滤器</span></span><br><span class="line">        list.forEach(blog -&gt;bloomFilter.put(Integer.parseInt(blog.toString()))); <span class="comment">// 将元素加入布隆过滤器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">mightContain</span><span class="params">(<span class="keyword">long</span> key)</span></span>&#123; <span class="comment">// 判断key值是否在布隆过滤器中</span></span><br><span class="line">        <span class="keyword">return</span> bloomFilter.mightContain((<span class="keyword">int</span>)key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述示例主要用于解决缓存穿透问题</li><li>比如 90% 的请求数据都不在缓存中，那么这些请求就都会落到数据库上，这就是缓存穿透</li><li>将已存在的缓存放到布隆中，当黑客访问不存在的缓存时迅速返回避免缓存及数据库挂掉</li><li>正确估计预期插入数量是非常关键的</li></ul></li><li><p>缓存场景：</p><ol><li><p>一般业务流程：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/599fd663f4793946268f951c60d8d31e-42505" alt="一般业务流程"></p></li><li><p>redis缓存：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e4ac6d904f745d15cbc95bf0de60f906-59416" alt="redis缓存"></p></li><li><p>布隆过滤器：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/aeda84325e7287641fbe472243111dc2-17265" alt="布隆过滤器"></p></li></ol></li></ol><h3 id="Redis实现布隆过滤器"><a href="#Redis实现布隆过滤器" class="headerlink" title="Redis实现布隆过滤器"></a>Redis实现布隆过滤器</h3><ol><li><p>Redis v4.0 之后有了 Module（模块/插件） 功能，Redis Modules 让 Redis 可以使用外部模块扩展其功能 。布隆过滤器就是其中的 Module。当然也可以使用Docker来快速使用。</p></li><li><p>Docker镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redislabs/rebloom:latest # 拉取镜像</span><br></pre></td></tr></table></figure></li><li><p>运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis-redisbloom redislabs/rebloom:latest #运行容器</span><br><span class="line">docker exec -it redis-redisbloom bash</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure></li><li><p>Redis布隆过滤器基本指令：</p><ul><li><code>bf.add</code> 添加元素到布隆过滤器</li><li><code>bf.exists</code> 判断元素是否在布隆过滤器</li><li><code>bf.madd</code> 添加多个元素到布隆过滤器，bf.add 只能添加一个</li><li><code>bf.mexists</code> 判断多个元素是否在布隆过滤器</li></ul></li></ol><h3 id="SpringBoot项目中使用"><a href="#SpringBoot项目中使用" class="headerlink" title="SpringBoot项目中使用"></a>SpringBoot项目中使用</h3><ol><li><p>创建一个配置类（示例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BloomFilter&lt;String&gt; <span class="title">initBloomFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BloomFilter.create(Funnels.stringFunnel(Charset.defaultCharset()),<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>BloomFilterService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BloomFilter&lt;String&gt; bloomFilter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        bloomFilter.put(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bloomFilter.mightContain(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Controller层中就可以使用<code>BloomFilterService</code>。</p></li></ol><h2 id="缓存实现接口防止重复点击"><a href="#缓存实现接口防止重复点击" class="headerlink" title="缓存实现接口防止重复点击"></a>缓存实现接口防止重复点击</h2><ol><li><p>实现接口防刷帮助类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口防重复点击帮助类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(IdempotentHelper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 缓存 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cache&lt;String, Object&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">1000</span>) <span class="comment">// 最大 Key 数</span></span><br><span class="line">            .expireAfterWrite(<span class="number">3</span>, TimeUnit.SECONDS) <span class="comment">// 3 秒超期，一般接口 3 秒足够执行完成了。</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给 Key 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Object obj = cache.getIfPresent(key);</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Try lock key: &#123;&#125; fail."</span>, key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 加锁失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key, <span class="keyword">new</span> Object());</span><br><span class="line">        logger.info(<span class="string">"Lock key: &#123;&#125; success."</span>, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁失败抛出异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lockThrowException</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lock(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"系统正在处理中，请勿重复操作！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Unlock key: &#123;&#125;"</span>, key);</span><br><span class="line">        cache.invalidate(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在接口中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/order/submit.do"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String orderId)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String key = <span class="string">"SUBMIT_ORDER_"</span> + orderId;</span><br><span class="line">        IdempotentHelper.lockThrowException(key); <span class="comment">// 尝试加锁，加锁失败直接抛异常</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// TODO 具体的业务处理逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IdempotentHelper.unlock(key); <span class="comment">// finally 释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 Guava 的本地缓存，不用调用远程服务</li><li>推荐在内部管理系统中使用</li></ul></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字符串处理工具类的灵活使用，可以使得开发中效率急速上升，实际上很多逻辑处理都和字符串相关，使用像Guava这种大型企业级的工具包能让开发更加得心应手。Guava中还有很多其他内容没有学习与使用，后续慢慢深入学习吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Guava是谷歌开源的Java库，提供了用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。谷歌里的很多项目都使
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
      <category term="Guava" scheme="https://wanderros.github.io/tags/Guava/"/>
    
  </entry>
  
  <entry>
    <title>nexus私库搭建与使用</title>
    <link href="https://wanderros.github.io/2020/10/13/nexus%E7%A7%81%E5%BA%93%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://wanderros.github.io/2020/10/13/nexus%E7%A7%81%E5%BA%93%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-10-13T11:33:30.000Z</published>
    <updated>2020-10-17T08:19:50.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>如果无法访问外网的时候，SpringBoot项目中有那么多的依赖包，开发的公共构件怎么让其它项目使用？这个时候我们不得不为自己的团队搭建属于自己的maven私服，这样既节省了网络带宽也会加速项目搭建的进程，当然前提条件就是你的私服中拥有项目所需的所有构件。nexus提供了这样的功能，但是远不止于此。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>Nexus是一个文件服务器，可以用来存储jar、docker、 npm等软件包，也可以存储其他文件格式。</p></li><li><p>Nexus官方文档：<a href="https://help.sonatype.com/repomanager3/release-notes" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/release-notes</a></p></li><li><p>Apache Maven是一个创新的软件项目管理和综合工具，提供了一个基于项目对象模型（POM）文件的新概念来管理项目的构建，可以从一个中心资料片管理项目构建，报告和文件。</p></li><li><p>Maven简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。</p></li><li><p>搭建了Nexus服务器之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p></li><li><p>Nexus默认的仓库类型有：</p><ul><li><p>group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定的仓库</p></li><li><p>hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库）</p></li><li><p>proxy(代理类型)：从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的Configuration页签下Remote Storage Location属性的值即被代理的远程仓库的路径）</p><ul><li>代理阿里镜像仓库：<a href="http://maven.aliyun.com/nexus/content/groups/public/" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/groups/public/</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>privatemaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>private maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>virtual(虚拟类型)：虚拟仓库（基本用不到）</p></li></ul></li><li><p>在生产环境中，我们不可能所有的服务器都能连接外网更新RPM包，比较理想的环境是：有一台Linux服务器可以连接外网，剩余的服务器通过这台YUM服务器更新。</p><ul><li>yum包镜像代理： <a href="http://mirrors.163.com/centos/7/updates/x86_64/" target="_blank" rel="noopener">http://mirrors.163.com/centos/7/updates/x86_64/</a></li></ul></li></ol><h2 id="Docker构建环境"><a href="#Docker构建环境" class="headerlink" title="Docker构建环境"></a>Docker构建环境</h2><ol><li><p>拉取nexus镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></table></figure></li><li><p>快速使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus sonatype/nexus3</span><br></pre></td></tr></table></figure></li><li><p>保存数据则创建共享文件夹，然后挂载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/docker/nexus/nexus-data</span><br><span class="line">docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3</span><br></pre></td></tr></table></figure><ul><li><code>docker-compose.yml</code>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">"no"</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span> </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/nexus/nexus-data:/nexus-data</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务之后，通过admin加密码访问<a href="http://localhost:8081，密码在/nexus-data中的`admin.password`文件中。进入之后按照要求修改密码即可。">http://localhost:8081，密码在/nexus-data中的`admin.password`文件中。进入之后按照要求修改密码即可。</a></p></li></ol><h2 id="SpringBoot项目发布"><a href="#SpringBoot项目发布" class="headerlink" title="SpringBoot项目发布"></a>SpringBoot项目发布</h2><ol><li><p>在maven的配置文件setting.xml文件中添加私库信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>：nexus仓库名称</li><li><code>username</code>：nexus用户名</li><li><code>password</code>：nexus用户密码</li></ul></li><li><p>修改项目maven文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-snapshots-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-releases-repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>snapshotRepository</code>： 快照仓库</li><li><code>repository</code>：发行仓库</li><li><code>id</code>：nexus仓库名称</li><li><code>url</code>：仓库地址，从nexus中可以找到</li><li>maven会根据<code>&lt;version/&gt;</code>中是否含有<code>SANPSHOT</code>来选择是发布到快照仓库，还是发行版仓库</li></ul></li><li><p>项目打包以及发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 项目打包</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 项目发布</span></span><br><span class="line">mvn deploy</span><br></pre></td></tr></table></figure></li><li><p>项目中引入私库（pom.xml）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Plugin Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>url</code>节点填写的都是<code>maven-public</code>组的url，而<code>maven-releases</code>、<code>maven-snapshots</code>、<code>third</code>都包含在<code>maven-public</code>中</li></ul></li><li><p>有时项目开发时，一些maven依赖下载不下来，一直报错。这时，可以手动下载jar包，将其安装到nexus私服，再从nexus解决依赖问题，样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.google.code.kaptcha -DartifactId=kaptcha -Dversion=2.3 -Dpackaging=jar -Dfile=kaptcha-2.3.2.jar -Durl=http://localhost:8081/repository/third/ -DrepositoryId=third</span><br></pre></td></tr></table></figure><ul><li>groupId：jar包的groupId</li><li>version：jar包的版本</li><li>file：jar包所在位置</li><li>url：仓库地址</li><li>repositoryId：仓库名</li><li>注意要在setting.xml增加一个server节点，配置用户名和密码。同时要将third仓库加到maven-public组中</li></ul></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>自建私有镜像库还是很有用的，Nexus能够做到的还有很多，比如作为OSS存储功能，还需要后续探索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;如果无法访问外网的时候，SpringBoot项目中有那么多的依赖包，开发的公共构件怎么让其它项目使用？这个时候我们不得不为自己的团队搭建属于
      
    
    </summary>
    
    
      <category term="nexus" scheme="https://wanderros.github.io/categories/nexus/"/>
    
    
      <category term="Docker" scheme="https://wanderros.github.io/tags/Docker/"/>
    
      <category term="nexus" scheme="https://wanderros.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>开发经验之谈</title>
    <link href="https://wanderros.github.io/2020/10/13/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    <id>https://wanderros.github.io/2020/10/13/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/</id>
    <published>2020-10-13T06:27:36.000Z</published>
    <updated>2020-10-17T08:19:50.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ol><li>做权限管理核心思想就是后端做权限控制，前端做的所有工作都只是为了提高用户体验，不能依靠前端展示或者隐藏一个按钮来实现权限控制，这样肯定是不安全的。</li></ol><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ol><li>用户注册时需要输入邮箱地址，前端校验之后，后端还是要校验，两个校验目的不同，前端校验是为了提高响应速度，优化用户体验，后端校验则是为了确保数据完整性。</li></ol><h2 id="动态菜单"><a href="#动态菜单" class="headerlink" title="动态菜单"></a>动态菜单</h2><ol><li>方案1：后端根据权限动态返回，后端相对比较麻烦点。</li><li>方案2：前端动态渲染，前端处理比较麻烦，但是后端就比较舒服。</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Base" scheme="https://wanderros.github.io/categories/Base/"/>
    
    
      <category term="Base" scheme="https://wanderros.github.io/tags/Base/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Logback Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/12/SpringBoot-Logback-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/12/SpringBoot-Logback-Quick-Start/</id>
    <published>2020-10-12T14:01:17.000Z</published>
    <updated>2020-10-17T08:19:50.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在开发项目过程中调试是必备的技能，学会看日志，分析日志也是十分有必要的，如果配置好了日志功能，项目<code>debug</code>过程就异常舒适。项目如果部署在生产环境了，日志就显得更为重要了，虽然可以配置监控服务去监控服务运行状态，但是定位问题还是离不开日志。什么样格式的日志才算好的日志呢？这部分主要记录SpringBoot中如何配置日志输出格式，以及将日志按照指定格式输出到文件中。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>一般而言，一个接口或者说一段程序，其入口要有日志，记录传入的数据是什么；部分重要的处理逻辑要有日志输出；程序出口也要有日志，记录其最终的处理结果。这样在解决生产上的问题时，可以很快的定位问题的位置，是传入数据的问题还是代码逻辑写错了。</li><li>SpringBoot中目前默认的日志框架采用的是Logback，Logback主要包含了三个重要的组件：<ul><li>logback-core——核心组件，是其他组件的基础</li><li>logback-classic——实现了<code>Slf4j</code>的<code>API</code></li><li>logback-access——提供<code>http-access</code>的日志接口</li></ul></li><li>一份完整的logback配置文件由三部分组成：<ul><li><code>appender</code>——对日志的输出格式以及滚动规则进行配置</li><li><code>logger</code>—— 设置某一个包或者具体的某一个类的日志打印级别、指定appender</li><li><code>root</code>—— 根logger,可以包含零个或多个appender-ref元素，表示这个appender将会添加到这个logger</li></ul></li><li>SpringBoot官方推荐Logback的配置文件名称为：<code>logback-spring.xml</code>，命名为<code>logback-spring.xml</code>的日志配置文件，SpringBoot可以为它添加一些SpringBoot特有的配置项。</li><li>日志级别从低到高分为<code>TRACE</code> &lt; <code>DEBUG</code> &lt; <code>INFO</code> &lt; <code>WARN</code> &lt; <code>ERROR</code> &lt; <code>FATAL</code>，如果设置为<code>WARN</code>，则低于WARN的信息都不会输出。</li><li>Logback官网文档：<a href="http://logback.qos.ch/manual/introduction.html" target="_blank" rel="noopener">http://logback.qos.ch/manual/introduction.html</a></li><li><code>SLF4J</code>（Simple Logging Facade For Java）是一个针对于各类Java日志框架的统一Facade抽象。</li><li><code>Kafaka Appender</code>：<a href="https://github.com/danielwegener/logback-kafka-appender" target="_blank" rel="noopener">https://github.com/danielwegener/logback-kafka-appender</a></li></ol><h2 id="关键字-amp-配置文件"><a href="#关键字-amp-配置文件" class="headerlink" title="关键字&amp;配置文件"></a>关键字&amp;配置文件</h2><ol><li><p><code>configuration</code>：标记配置内容。</p></li><li><p><code>property</code>：定义变量，name的值是变量的名称，value的值时变量定义的值。定义变量后，可以使<code>${}</code>来使用变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"mylog/"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>彩色日志格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>appender</code>： 输出配置，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ch.qos.logback.core.rolling.RollingFileAppender</code>——输出到文件<ul><li>file：记录的日志文件的路径及文件名</li><li>encoder：日志文件输出格式<ul><li>pattern：模式<ul><li>%d{HH: mm:ss.SSS}——日志输出时间</li><li>%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</li><li>%-5level——日志级别，并且使用5个字符靠左对齐</li><li>%logger{36}——日志输出者的名字</li><li>%msg——日志消息</li><li>%n——平台的换行符</li></ul></li><li>charset：字符集</li></ul></li><li>rollingPolicy：日志记录器的滚动策略，按日期，按大小记录<ul><li><code>ch.qos.logback.core.rolling.TimeBasedRollingPolicy</code></li><li><code>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy</code></li><li><code>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy</code></li><li><code>ch.qos.logback.core.rolling.FixedWindowRollingPolicy</code></li><li><code>ch.qos.logback.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy</code></li></ul></li><li>filter：过滤器</li></ul></li><li><code>ch.qos.logback.core.ConsoleAppender</code>——输出到控制台</li></ul></li><li><p><code>logger</code>：用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。</p></li><li><p><code>root</code>：必选节点，用来指定最基础的日志输出级别，只有一个level属性。</p></li><li><p><code>springProfile</code>：spring环境关键字，使用name指定开发环境，如<code>dev</code>、<code>sit</code>、<code>pro</code>。</p></li><li><p>配置文件示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback-spring.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;include resource="org/springframework/boot/logging/logback/base.xml" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"log"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DEBUG_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、</span></span><br><span class="line"><span class="comment">        以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">        addtivity:是否向上级logger传递打印信息。默认是true。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;logger name="org.springframework.web" level="info"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level="info"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span></span><br><span class="line"><span class="comment">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.nmys.view"</span> <span class="attr">level</span>=<span class="string">"debug"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    生产环境:输出到文件</span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h2><ol><li><p>在代码中添加自定义日志颜色类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.pattern.color.ANSIConstants;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.pattern.color.ForegroundCompositeConverterBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackColorful</span> <span class="keyword">extends</span> <span class="title">ForegroundCompositeConverterBase</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getForegroundColorCode</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">        Level level = event.getLevel();</span><br><span class="line">        <span class="keyword">switch</span> (level.toInt()) &#123;</span><br><span class="line">            <span class="comment">//ERROR等级为红色</span></span><br><span class="line">            <span class="keyword">case</span> Level.ERROR_INT:</span><br><span class="line">                <span class="keyword">return</span> ANSIConstants.RED_FG;</span><br><span class="line">            <span class="comment">//WARN等级为黄色</span></span><br><span class="line">            <span class="keyword">case</span> Level.WARN_INT:</span><br><span class="line">                <span class="keyword">return</span> ANSIConstants.YELLOW_FG;</span><br><span class="line">            <span class="comment">//INFO等级为蓝色</span></span><br><span class="line">            <span class="keyword">case</span> Level.INFO_INT:</span><br><span class="line">                <span class="keyword">return</span> ANSIConstants.BLUE_FG;</span><br><span class="line">            <span class="comment">//DEBUG等级为绿色</span></span><br><span class="line">            <span class="keyword">case</span> Level.DEBUG_INT:</span><br><span class="line">                <span class="keyword">return</span> ANSIConstants.GREEN_FG;</span><br><span class="line">            <span class="comment">//其他为默认颜色</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> ANSIConstants.DEFAULT_FG;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在日志配置文件中引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"customcolor"</span> <span class="attr">converterClass</span>=<span class="string">"com.example.demo.LogbackColorful"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;include resource="org/springframework/boot/logging/logback/base.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender：把日志输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%red(%d&#123;HH:mm:ss.SSS&#125;) %green([%thread]) %customcolor(%-5level) %boldMagenta(%logger) -  %yellow(%msg%n)<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"demolog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/demo.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件名：log/demo.2017-12-05.0.log --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/demo.%d.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每产生一个日志文件，该日志文件的保存期限为30天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB，测试时可改成1KB看效果 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1KB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 记录日志的编码:此处设置字符集 - --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.liyan为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 级别依次为【从高到低】：FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"demolog"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局处理异常"><a href="#全局处理异常" class="headerlink" title="全局处理异常"></a>全局处理异常</h2><ol><li><p>异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">processException</span><span class="params">(Exception ex, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> MissingServletRequestParameterException)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">400</span>, ex.getMessage(), <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> NoFoundExcepiton)&#123;</span><br><span class="line"></span><br><span class="line">            LOGGER.error(<span class="string">"======="</span>+ex.getMessage()+<span class="string">"======="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">401</span>, <span class="string">"无法找到相应数据！"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">500</span>, ex.getMessage(), <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种(Demo)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String logExceptionFormat = <span class="string">"Capture Exception By GlobalExceptionHandler: Code: %s Detail: %s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">runtimeExceptionHandler</span>(<span class="title">RuntimeException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">1</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空指针异常    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">nullPointerExceptionHandler</span>(<span class="title">NullPointerException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">2</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型转换异常    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ClassCastException<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">classCastExceptionHandler</span>(<span class="title">ClassCastException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">3</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//IO异常    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IOException<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">iOExceptionHandler</span>(<span class="title">IOException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">4</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//未知方法异常    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NoSuchMethodException<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">noSuchMethodExceptionHandler</span>(<span class="title">NoSuchMethodException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">5</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组越界异常    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IndexOutOfBoundsException<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">indexOutOfBoundsExceptionHandler</span>(<span class="title">IndexOutOfBoundsException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">6</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//400错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpMessageNotReadableException<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">requestNotReadable</span>(<span class="title">HttpMessageNotReadableException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"400..requestNotReadable"</span>);  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">7</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//400错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;TypeMismatchException<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">requestTypeMismatch</span>(<span class="title">TypeMismatchException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"400..TypeMismatchException"</span>);  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">8</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//400错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;MissingServletRequestParameterException<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">requestMissingServletRequest</span>(<span class="title">MissingServletRequestParameterException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"400..MissingServletRequest"</span>);  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">9</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//405错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpRequestMethodNotSupportedException<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">request405</span>(<span class="title">HttpRequestMethodNotSupportedException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">10</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//406错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpMediaTypeNotAcceptableException<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">request406</span>(<span class="title">HttpMediaTypeNotAcceptableException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"406..."</span>);  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">11</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//500错误    </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;ConversionNotSupportedException<span class="class">.<span class="keyword">class</span>, <span class="title">HttpMessageNotWritableException</span>.<span class="title">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">server500</span>(<span class="title">RuntimeException</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"500..."</span>);  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">12</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈溢出  </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;StackOverflowError<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">requestStackOverflow</span>(<span class="title">StackOverflowError</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">13</span>, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他错误  </span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">exception</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">14</span>, ex);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义异常捕获</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;MyException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">myException</span>(<span class="title">MyException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1111111111111111111"</span>);</span><br><span class="line">        <span class="keyword">return</span> exceptionFormat(<span class="number">999</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T extends Throwable&gt; <span class="function">String <span class="title">exceptionFormat</span><span class="params">(Integer code, T ex)</span> </span>&#123;  </span><br><span class="line">        log.error(String.format(logExceptionFormat, code, ex.getMessage()));  </span><br><span class="line">        <span class="keyword">return</span> JsonResult.failed(code, ex.getMessage());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;   <span class="comment">//返回码 非0即失败  </span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//消息提示  </span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data; <span class="comment">//返回的数据  </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">()</span></span>&#123;&#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonResult</span><span class="params">(<span class="keyword">int</span> code, String msg, Map&lt;String, Object&gt; data)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.code = code;  </span><br><span class="line">        <span class="keyword">this</span>.msg = msg;  </span><br><span class="line">        <span class="keyword">this</span>.data = data;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">success</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">new</span> JsonResult(<span class="number">0</span>, <span class="string">"解析成功"</span>, data));  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">failed</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> failed(<span class="string">"解析失败"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">failed</span><span class="params">(String msg)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> failed(-<span class="number">1</span>, msg);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">failed</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">new</span> JsonResult(code, msg, <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>)));  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>NoFoundExcepiton.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFoundExcepiton</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5955607821816077172L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoFoundExcepiton</span><span class="params">(String errorInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(errorInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ResponseResult.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在代码中抛出异常即可测试。</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>可以将日志进行颜色输出，这样在控制台上看的比较显眼。</li><li>日志文件可以进行按日期保存，日志文件按照指定大小进行分割，这样不会导致一个日志文件过于庞大，不好定位问题。</li><li>日志文件最好区分日志级别，如<code>info</code>、<code>debug</code>、<code>error</code>、<code>warn</code>。</li><li>在生产环境上严禁使用System.out输出。</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>建议在项目开发中使用自定义的日志配置，这样能更好的定位问题，而且定制化的日志可以结合WebSocket进行前台日志展示！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在开发项目过程中调试是必备的技能，学会看日志，分析日志也是十分有必要的，如果配置好了日志功能，项目&lt;code&gt;debug&lt;/code&gt;过程就
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/tags/SpringBoot/"/>
    
      <category term="Logback" scheme="https://wanderros.github.io/tags/Logback/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Nacos Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/12/SpringCloud-Nacos-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/12/SpringCloud-Nacos-Quick-Start/</id>
    <published>2020-10-12T06:34:05.000Z</published>
    <updated>2020-10-17T08:19:50.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在微服务架构体系中，服务发现是非常重要的组件。Euerka、Consul、zookeeper、etcd、Nacos等都是注册中心，本主要记录Nacos作为注册中心，如何进行服务注册以及进行配置中心配置。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理，能够用于发现、配置和管理微服务。</li><li>Nacos文档官网：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></li><li>Nacos提供配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪等配置管理特性，安全地在生产环境中管理配置变更并降低配置变更带来的风险。<ul><li>金丝雀发布一般先发 1 台，或者一个小比例，例如 2% 的服务器，主要做流量验证用，也称为金丝雀 (Canary) 测试（国内常称灰度测试）</li><li>滚动式发布一般先发 1 台，或者一个小比例，如 2% 服务器，主要做流量验证用，类似金丝雀 (Canary) 测试，需要比较复杂的发布工具和智能 LB，支持平滑的版本替换和流量拉入拉出</li><li>蓝绿发布仅适用于双服务器组发布，可以认为是对蛮力发布的一种简单优化发布方式</li><li>利用代码中的功能开关（Feature Flag/Toggle/Switch）来控制发布逻辑，一般不需要复杂的发布工具和智能 LB 配合，是一种相对比较低成本和简单的发布方式</li></ul></li><li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 可以实现配置的动态变更。</li><li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 可以实现服务的注册与发现。</li></ol><h2 id="Dcker环境"><a href="#Dcker环境" class="headerlink" title="Dcker环境"></a>Dcker环境</h2><ol><li><p>下载Docker-Compose.yml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nacos-group/nacos-docker.git</span><br></pre></td></tr></table></figure></li><li><p>进入文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nacos-docker</span><br></pre></td></tr></table></figure></li><li><p>单机模式(Derby)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f example/standalone-derby.yaml up</span><br></pre></td></tr></table></figure></li><li><p>集群模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f example/cluster-hostname.yaml up</span><br></pre></td></tr></table></figure></li><li><p>Nacos 控制台:</p><ul><li>网址：<a href="http://localhost:8848/nacos/" target="_blank" rel="noopener">http://localhost:8848/nacos/</a></li><li>默认账户：nacos</li><li>默认密码：nacos</li></ul></li><li><p>测试：</p><ul><li><p>服务注册：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080'</span><br></pre></td></tr></table></figure></li><li><p>服务发现:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=nacos.naming.serviceName'</span><br></pre></td></tr></table></figure></li><li><p>发布配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld</span><br></pre></td></tr></table></figure></li><li><p>获取配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET "http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test"</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通用配置：</p><table><thead><tr><th align="left">name</th><th align="left">description</th><th align="left">option</th></tr></thead><tbody><tr><td align="left">MODE</td><td align="left">cluster模式/standalone模式</td><td align="left">cluster/standalone default cluster</td></tr><tr><td align="left">NACOS_SERVERS</td><td align="left">nacos cluster地址</td><td align="left">eg. ip1,ip2,ip3</td></tr><tr><td align="left">PREFER_HOST_MODE</td><td align="left">是否支持hostname</td><td align="left">hostname/ip default ip</td></tr><tr><td align="left">NACOS_SERVER_PORT</td><td align="left">nacos服务器端口</td><td align="left">default 8848</td></tr><tr><td align="left">NACOS_SERVER_IP</td><td align="left">多网卡下的自定义nacos服务器IP</td><td align="left"></td></tr><tr><td align="left">SPRING_DATASOURCE_PLATFORM</td><td align="left">standalone 支持 mysql</td><td align="left">mysql / empty default empty</td></tr><tr><td align="left">MYSQL_MASTER_SERVICE_HOST</td><td align="left">mysql 主节点host</td><td align="left"></td></tr><tr><td align="left">MYSQL_MASTER_SERVICE_PORT</td><td align="left">mysql 主节点端口</td><td align="left">default : 3306</td></tr><tr><td align="left">MYSQL_MASTER_SERVICE_DB_NAME</td><td align="left">mysql 主节点数据库</td><td align="left"></td></tr><tr><td align="left">MYSQL_MASTER_SERVICE_USER</td><td align="left">数据库用户名</td><td align="left"></td></tr><tr><td align="left">MYSQL_MASTER_SERVICE_PASSWORD</td><td align="left">数据库密码</td><td align="left"></td></tr><tr><td align="left">MYSQL_SLAVE_SERVICE_HOST</td><td align="left">mysql从节点host</td><td align="left"></td></tr><tr><td align="left">MYSQL_SLAVE_SERVICE_PORT</td><td align="left">mysql从节点端口</td><td align="left">default :3306</td></tr><tr><td align="left">MYSQL_DATABASE_NUM</td><td align="left">数据库数量</td><td align="left">default :2</td></tr><tr><td align="left">JVM_XMS</td><td align="left">-Xms</td><td align="left">default :2g</td></tr><tr><td align="left">JVM_XMX</td><td align="left">-Xmx</td><td align="left">default :2g</td></tr><tr><td align="left">JVM_XMN</td><td align="left">-Xmn</td><td align="left">default :1g</td></tr><tr><td align="left">JVM_MS</td><td align="left">-XX:MetaspaceSize</td><td align="left">default :128m</td></tr><tr><td align="left">JVM_MMS</td><td align="left">-XX:MaxMetaspaceSize</td><td align="left">default :320m</td></tr><tr><td align="left">NACOS_DEBUG</td><td align="left">开启远程调试</td><td align="left">y/n default :n</td></tr><tr><td align="left">TOMCAT_ACCESSLOG_ENABLED</td><td align="left">server.tomcat.accesslog.enabled</td><td align="left">default :false</td></tr></tbody></table></li><li><p>集群模式下yaml文件示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="string">server‐addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848,127.0.0.1:8849,127.0.0.1:8850</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><ol><li><p>在项目依赖中添加Nacos的注册插件依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9080</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加服务注册注解<code>@EnableDiscoveryClient</code>并添加服务:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosconsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosconsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestController</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;<span class="keyword">this</span>.restTemplate = restTemplate;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping</span>(value = <span class="string">"/echo/&#123;str&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String str)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://test/echo/"</span> + str, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加第二个注册项目（类似），配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9080</span></span><br></pre></td></tr></table></figure></li><li><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Nacos2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Nacos2Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EchoController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String string)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello Nacos Discovery "</span> + string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动两个测试项目即可进行测试，测试示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9080/echo/test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Hello Nacos Discovery <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><ol><li><p>项目中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置(bootstrap.yml)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">file-extension:</span> <span class="string">properties</span></span><br><span class="line">      <span class="comment"># namespace: 4c56e77a-2345-43e6-abf2-dc0779cb2434</span></span><br><span class="line">      <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9080</span></span><br></pre></td></tr></table></figure></li><li><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosconsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosconsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestController</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;<span class="keyword">this</span>.restTemplate = restTemplate;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping</span>(value = <span class="string">"/echo/&#123;str&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(@PathVariable String str)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://test/echo/"</span> + str, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;useLocalCache:false&#125;"</span>)</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> useLocalCache;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> useLocalCache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Nacos管理页面添加配置<code>consumer-dev.properties</code>，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useLocalCache</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p>然后就可以测试了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9080/get</span><br></pre></td></tr></table></figure></li><li><p>官方教程：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</a></p></li><li><p>态度：目前持观望态度，配置的问题（bug）个人感觉还是不少的！</p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Nacos作为注册中心目前没有感觉到优势，实际上配置中心也没有说的那么理想，至少这个版本的bug还是不少的，还不如注册中心就单独当个注册中心，真心不觉得有啥优势！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在微服务架构体系中，服务发现是非常重要的组件。Euerka、Consul、zookeeper、etcd、Nacos等都是注册中心，本主要记录
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="https://wanderros.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown高级特性：绘图</title>
    <link href="https://wanderros.github.io/2020/10/09/MarkDown%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E7%BB%98%E5%9B%BE/"/>
    <id>https://wanderros.github.io/2020/10/09/MarkDown%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E7%BB%98%E5%9B%BE/</id>
    <published>2020-10-09T11:13:14.000Z</published>
    <updated>2020-10-09T13:45:01.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前不知道MarkDown还能绘制图表，在看到一些博文之后发现了MarkDown使用了mermaid之后支持各种图，真的是爱了。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="各种图"><a href="#各种图" class="headerlink" title="各种图"></a>各种图</h2><h3 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```mermaid</span></span><br><span class="line"><span class="attr">graph</span> <span class="string">LR</span></span><br><span class="line"><span class="meta">A[方形]</span> <span class="string">--&gt;B(圆角)</span></span><br><span class="line">    <span class="attr">B</span> <span class="string">--&gt; C&#123;条件a&#125;</span></span><br><span class="line">    <span class="attr">C</span> <span class="string">--&gt;|a=1| D[结果1]</span></span><br><span class="line">    <span class="attr">C</span> <span class="string">--&gt;|a=2| E[结果2]</span></span><br><span class="line">    <span class="attr">F[横向流程图]</span></span><br><span class="line">    <span class="attr">G((dname))</span></span><br><span class="line">    <span class="attr">H&gt;ename]</span></span><br><span class="line">    <span class="attr">I&#123;fname&#125;</span></span><br><span class="line">  <span class="attr">subgraph</span> <span class="string">g1</span></span><br><span class="line">    <span class="attr">a1--&gt;b1</span></span><br><span class="line">  <span class="attr">end</span></span><br><span class="line">  <span class="attr">a1--&gt;I</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 图方向：</span><br><span class="line">  - TB，从上到下</span><br><span class="line">  - TD，从上到下</span><br><span class="line">  - BT，从下到上</span><br><span class="line">  - RL，从右到左</span><br><span class="line">  - LR，从左到右</span><br><span class="line">- 节点形状：</span><br><span class="line">  - 默认节点 A</span><br><span class="line">  - 文本节点 B[bname]</span><br><span class="line">  - 圆角节点 C(cname)</span><br><span class="line">  - 圆形节点 D((dname))</span><br><span class="line">  - 非对称节点 E&gt;ename]</span><br><span class="line">  - 菱形节点 F&#123;fname&#125;</span><br><span class="line">- 连线：</span><br><span class="line">  - 箭头连接 A1–-&gt;B1</span><br><span class="line">  - 开放连接 A2—B2</span><br><span class="line">  - 标签连接 A3–text—B3</span><br><span class="line">  - 箭头标签连接 A4–text–&gt;B4</span><br><span class="line">  - 虚线开放连接 A5.-B5</span><br><span class="line">  - 虚线箭头连接 A6-.-&gt;B6</span><br><span class="line">  - 标签虚线连接 A7-.text.-B7</span><br><span class="line">  - 标签虚线箭头连接 A8-.text.-&gt;B8</span><br><span class="line">  - 粗线开放连接 A9&#x3D;&#x3D;&#x3D;B9</span><br><span class="line">  - 粗线箭头连接 A10&#x3D;&#x3D;&gt;B10</span><br><span class="line">  - 标签粗线开放连接 A11&#x3D;&#x3D;text&#x3D;&#x3D;&#x3D;B11</span><br><span class="line">  - 标签粗线箭头连接 A12&#x3D;&#x3D;text&#x3D;&#x3D;&gt;B12</span><br><span class="line">- 子图：subgraph</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br><span class="line">    G((dname))</span><br><span class="line">    H&gt;ename]</span><br><span class="line">    I&#123;fname&#125;</span><br><span class="line">  subgraph g1</span><br><span class="line">    a1--&gt;b1</span><br><span class="line">  end</span><br><span class="line">  a1--&gt;I</span><br></pre></td></tr></table></figure><h3 id="竖向流程图"><a href="#竖向流程图" class="headerlink" title="竖向流程图"></a>竖向流程图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```mermaid</span></span><br><span class="line"><span class="attr">graph</span> <span class="string">TD</span></span><br><span class="line"><span class="meta">A[方形]</span> <span class="string">--&gt; B(圆角)</span></span><br><span class="line">    <span class="attr">B</span> <span class="string">--&gt; C&#123;条件a&#125;</span></span><br><span class="line">    <span class="attr">C</span> <span class="string">--&gt; |a=1| D[结果1]</span></span><br><span class="line">    <span class="attr">C</span> <span class="string">--&gt; |a=2| E[结果2]</span></span><br><span class="line">    <span class="attr">F[竖向流程图]</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><h3 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```flow</span></span><br><span class="line"><span class="attr">st</span>=<span class="string">&gt;start: 开始框</span></span><br><span class="line"><span class="attr">op</span>=<span class="string">&gt;operation: 处理框</span></span><br><span class="line"><span class="attr">cond</span>=<span class="string">&gt;condition: 判断框(是或否?)</span></span><br><span class="line"><span class="attr">sub1</span>=<span class="string">&gt;subroutine: 子流程</span></span><br><span class="line"><span class="attr">io</span>=<span class="string">&gt;inputoutput: 输入输出框</span></span><br><span class="line"><span class="attr">e</span>=<span class="string">&gt;end: 结束框</span></span><br><span class="line"><span class="attr">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="attr">cond(yes)-&gt;io-&gt;e</span></span><br><span class="line"><span class="attr">cond(no)-&gt;sub1(right)-&gt;op</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="标准流程图（横向）"><a href="#标准流程图（横向）" class="headerlink" title="标准流程图（横向）"></a>标准流程图（横向）</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```flow</span></span><br><span class="line"><span class="attr">st</span>=<span class="string">&gt;start: 开始框</span></span><br><span class="line"><span class="attr">op</span>=<span class="string">&gt;operation: 处理框</span></span><br><span class="line"><span class="attr">cond</span>=<span class="string">&gt;condition: 判断框(是或否?)</span></span><br><span class="line"><span class="attr">sub1</span>=<span class="string">&gt;subroutine: 子流程</span></span><br><span class="line"><span class="attr">io</span>=<span class="string">&gt;inputoutput: 输入输出框</span></span><br><span class="line"><span class="attr">e</span>=<span class="string">&gt;end: 结束框</span></span><br><span class="line"><span class="attr">st(right)-&gt;op(right)-&gt;cond</span></span><br><span class="line"><span class="attr">cond(yes)-&gt;io(bottom)-&gt;e</span></span><br><span class="line"><span class="attr">cond(no)-&gt;sub1(right)-&gt;op</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- start&#x2F;end，表示程序的开始与结束</span><br><span class="line">- operation，表示程序的处理块</span><br><span class="line">- subroutine，表示子程序块</span><br><span class="line">- condition，表示程序的条件判断</span><br><span class="line">- inputoutput，表示程序的出入输出</span><br><span class="line">- right&#x2F;left，表示当前连线在当前模块上的起点(默认从下端开始)</span><br><span class="line">- yes&#x2F;no， 表示condition判断的分支(可以和right，left同时使用)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```sequence</span></span><br><span class="line"><span class="meta">对象A-&gt;对象B</span>: <span class="string">对象B你好吗?（请求）</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="meta">对象B--&gt;对象A</span>: <span class="string">我很好(响应)</span></span><br><span class="line"><span class="meta">对象A-&gt;对象B</span>: <span class="string">你真的好吗？</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- participant：参与者，相当先定义模块</span><br><span class="line">- note：便签</span><br><span class="line">- 连线:</span><br><span class="line">  - 无箭头实线 -&gt;</span><br><span class="line">  - 有箭头实线 -&gt;&gt;</span><br><span class="line">  - 无箭头虚线 –&gt;</span><br><span class="line">  - 有箭头虚线 –&gt;&gt;</span><br><span class="line">  - 带x实线 -x</span><br><span class="line">  - 带x虚线 –x</span><br><span class="line">- sequenceDiagram：时序子图</span><br><span class="line">- loop ... end：循环</span><br><span class="line">- alt ... else ... end : 选择</span><br><span class="line">- opt ... end ：选择 </span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```sequence</span></span><br><span class="line"><span class="attr">Title</span>: <span class="string">标题：复杂使用</span></span><br><span class="line"><span class="meta">对象A-&gt;对象B</span>: <span class="string">对象B你好吗?（请求）</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="meta">对象B--&gt;对象A</span>: <span class="string">我很好(响应)</span></span><br><span class="line"><span class="meta">对象B-&gt;小三</span>: <span class="string">你好吗</span></span><br><span class="line"><span class="meta">小三--&gt;&gt;对象A</span>: <span class="string">对象B找我了</span></span><br><span class="line"><span class="meta">对象A-&gt;对象B</span>: <span class="string">你真的好吗？</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">over 小三,对象B: 我们是朋友</span></span><br><span class="line"><span class="attr">participant</span> <span class="string">C</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">right of C: 没人陪我玩</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```mermaid</span></span><br><span class="line"><span class="meta">%%</span> <span class="string">时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 --&gt;&gt;虚线箭头</span></span><br><span class="line">  <span class="attr">sequenceDiagram</span></span><br><span class="line">    <span class="attr">participant</span> <span class="string">张三</span></span><br><span class="line">    <span class="attr">participant</span> <span class="string">李四</span></span><br><span class="line">    <span class="meta">张三-&gt;王五</span>: <span class="string">王五你好吗？</span></span><br><span class="line">    <span class="attr">loop</span> <span class="string">健康检查</span></span><br><span class="line">        <span class="meta">王五-&gt;王五</span>: <span class="string">与疾病战斗</span></span><br><span class="line">    <span class="attr">end</span></span><br><span class="line">    <span class="attr">Note</span> <span class="string">right of 王五: 合理 食物 &lt;br/&gt;看医生...</span></span><br><span class="line">    <span class="meta">李四--&gt;&gt;张三</span>: <span class="string">很好!</span></span><br><span class="line">    <span class="meta">王五-&gt;李四</span>: <span class="string">你怎么样?</span></span><br><span class="line">    <span class="meta">李四--&gt;王五</span>: <span class="string">很好!</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 --&gt;&gt;虚线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```sequence</span></span><br><span class="line"><span class="attr">title</span>: <span class="string">时序图</span></span><br><span class="line"><span class="attr">participant</span> <span class="string">客户端</span></span><br><span class="line"><span class="attr">participant</span> <span class="string">服务器</span></span><br><span class="line"><span class="attr">participant</span> <span class="string">数据库</span></span><br><span class="line"><span class="meta">客户端-&gt;服务器</span>:<span class="string">请求数据</span></span><br><span class="line"><span class="attr">Note</span> <span class="string">left of 客户端:备注</span></span><br><span class="line"><span class="meta">服务器-&gt;数据库</span>:<span class="string">获取记录</span></span><br><span class="line"><span class="meta">数据库--&gt;服务器</span>:<span class="string">返回记录</span></span><br><span class="line"><span class="meta">服务器--&gt;&gt;客户端</span>:<span class="string">返回封装好的数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- title : 标题 </span><br><span class="line">- participant : 对象</span><br><span class="line">- \-代表实线 ， 主动发送消息</span><br><span class="line">- \&gt;代表实心箭头 ， 同步消息</span><br><span class="line">- \-\- 代表虚线，表示返回消息</span><br><span class="line">-  \&gt;\&gt; 代表非实心箭头 ，异步消息</span><br><span class="line">- note：注释</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">title: 时序图</span><br><span class="line">participant 客户端</span><br><span class="line">participant 服务器</span><br><span class="line">participant 数据库</span><br><span class="line">客户端-&gt;服务器:请求数据</span><br><span class="line">Note left of 客户端:备注</span><br><span class="line">服务器-&gt;数据库:获取记录</span><br><span class="line">数据库--&gt;服务器:返回记录</span><br><span class="line">服务器--&gt;&gt;客户端:返回封装好的数据</span><br></pre></td></tr></table></figure><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%%</span> <span class="string">语法示例</span></span><br><span class="line">        <span class="attr">gantt</span></span><br><span class="line">        <span class="attr">dateFormat</span>  <span class="string">YYYY-MM-DD</span></span><br><span class="line">        <span class="attr">title</span> <span class="string">软件开发甘特图</span></span><br><span class="line">        <span class="attr">section</span> <span class="string">设计</span></span><br><span class="line">        <span class="meta">需求</span>                      :<span class="string">done,    des1, 2020-10-01,2020-10-08</span></span><br><span class="line">        <span class="meta">原型</span>                      :<span class="string">active,  des2, 2020-10-09, 3d</span></span><br><span class="line">        <span class="meta">UI设计</span>                     :         <span class="string">des3, after des2, 5d</span></span><br><span class="line">    <span class="meta">未来任务</span>                     :         <span class="string">des4, after des3, 5d</span></span><br><span class="line">        <span class="attr">section</span> <span class="string">开发</span></span><br><span class="line">        <span class="meta">学习准备理解需求</span>                      :<span class="string">crit, done, 2020-10-01,24h</span></span><br><span class="line">        <span class="meta">设计框架</span>                             :<span class="string">crit, done, after des2, 2d</span></span><br><span class="line">        <span class="meta">开发</span>                                 :<span class="string">crit, active, 3d</span></span><br><span class="line">        <span class="meta">未来任务</span>                              :<span class="string">crit, 5d</span></span><br><span class="line">        <span class="meta">耍</span>                                   :<span class="string">2d</span></span><br><span class="line">        <span class="attr">section</span> <span class="string">测试</span></span><br><span class="line">        <span class="meta">功能测试</span>                              :<span class="string">active, a1, after des3, 3d</span></span><br><span class="line">        <span class="meta">压力测试</span>                               :<span class="string">after a1  , 20h</span></span><br><span class="line">        <span class="meta">测试报告</span>                               : <span class="string">48h</span></span><br></pre></td></tr></table></figure><ul><li>dateFormat：日期格式</li><li>section 模块</li><li>Completed： 已经完成</li><li>Active：当前正在进行</li><li>Future：后续待处理</li><li>crit：关键阶段</li><li>日期缺失则默认从上一项完成后</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2020-10-01,2020-10-08</span><br><span class="line">        原型                      :active,  des2, 2020-10-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2020-10-01,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">　　　dateFormat　YYYY-MM-DD</span><br><span class="line">　　　title Adding GANTT diagram functionality to mermaid</span><br><span class="line">　　　section A section</span><br><span class="line">　　　Completed task　　:done, des1, 2014-01-06,2014-01-08</span><br><span class="line">　　　Active task 　　　　:active, des2, 2014-01-09, 3d</span><br><span class="line">　　　future task 　　　　:　　　  des3, after des2, 5d</span><br><span class="line">　　　future task2　　　　:　　　  des4, after des3, 5d</span><br><span class="line">　　　section Critical tasks</span><br><span class="line">　　　Completed task in the critical line　:crit, done, 2014-01-06,24h</span><br><span class="line">　　　Implement parser and json　　　　　　:crit, done, after des1, 2d</span><br><span class="line">　　　Create tests for parser　　　　　　　:crit, active, 3d</span><br><span class="line">　　　Future task in critical line　　　　　:crit, 5d</span><br><span class="line">　　　Create tests for renderer　　　　　　:2d</span><br><span class="line">　　　Add to ,mermaid　　　　　　　　　　　:1d</span><br></pre></td></tr></table></figure><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">​```mermaid</span></span><br><span class="line"><span class="attr">pie</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">title</span> <span class="string">Key elements in Product X</span></span><br><span class="line">  <span class="meta">"Calcium"</span> : <span class="string">42.96</span></span><br><span class="line">  <span class="meta">"Potassium"</span> : <span class="string">50.05</span></span><br><span class="line">  <span class="meta">"Magnesium"</span> : <span class="string">10.01</span></span><br><span class="line">  <span class="meta">"Iron"</span> :  <span class="string">5</span></span><br><span class="line"><span class="attr">​</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mermaid</span><br><span class="line">pie</span><br><span class="line"></span><br><span class="line">  title Key elements in Product X</span><br><span class="line">  &quot;Calcium&quot; : 42.96</span><br><span class="line">  &quot;Potassium&quot; : 50.05</span><br><span class="line">  &quot;Magnesium&quot; : 10.01</span><br><span class="line">  &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li>mermaid：<a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">https://mermaid-js.github.io/mermaid/#/</a></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以后需要图的时候再也不需要什么Visio了，直接MarkDown吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;之前不知道MarkDown还能绘制图表，在看到一些博文之后发现了MarkDown使用了mermaid之后支持各种图，真的是爱了。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="MarkDown" scheme="https://wanderros.github.io/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="https://wanderros.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目打包Docker镜像</title>
    <link href="https://wanderros.github.io/2020/10/09/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Docker%E9%95%9C%E5%83%8F/"/>
    <id>https://wanderros.github.io/2020/10/09/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Docker%E9%95%9C%E5%83%8F/</id>
    <published>2020-10-09T08:30:04.000Z</published>
    <updated>2020-10-09T13:45:01.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringBoot微服务开发过程中可以直接生成jar包之后通过java命令运行在服务端，也可以使用<code>pm2</code>进行管理，当然也可以通过docker命令生成镜像然后推送到镜像仓库通过k8s进行动态管理，这不失为一种较为理想的运维方案（目前而言）。本文主要记录通过maven插件来打包SpringBoot项目的Docker镜像过程。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>需要掌握基础的Docker命令以及Dockerfile语法基础。</li><li>需要掌握SpringBoot项目开发技术。</li><li>在我们持续集成过程中，项目工程一般使用 Maven 编译打包，然后生成镜像，通过镜像上线，能够大大提供上线效率，同时能够快速动态扩容，快速回滚，着实很方便。docker-maven-plugin 插件就是为了帮助我们在Maven工程中，通过简单的配置，自动生成镜像并推送到仓库中。</li><li>手动部署:首先基于源码打包生成jar包(或war包)，写个Dockerfile文件，基于基础镜像搞个新镜像，将jar包(或war包)上传至虚拟机并拷贝至JDK容器。</li><li>通过Maven插件自动部署，这是本文介绍的内容，需要注意的是该方法有漏洞,容易被黑客远程放入挖矿机镜像,开启需做好防范。</li></ol><h2 id="Maven-Docker插件"><a href="#Maven-Docker插件" class="headerlink" title="Maven Docker插件"></a>Maven Docker插件</h2><ol><li><p>插件源码地址：<a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">https://github.com/spotify/docker-maven-plugin</a></p></li><li><p>打包SpringBoot项目需要编写Dokcerfile文件,比如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker image for springboot file run</span></span><br><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># Author: wanderROS</span></span><br><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>.<span class="number">8</span>-jre</span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> wanderROS &lt;wanderROS@xxx.com&gt;</span><br><span class="line"><span class="comment"># VOLUME 指定了临时文件目录为/tmp。</span></span><br><span class="line"><span class="comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>可以将Dockerfile文件放置在项目的<code>src/main/docker</code>目录下,当然其他目录也是可以的。</p></li><li><p>在pom.xml文件中添加<code>docker-maven-plugin</code>插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>test<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Docker maven plugin start --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Docker maven plugin end --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>docker.image.prefix</code>用于在打包的镜像名称前添加一个前缀</li><li><code>imageTags</code>用于给镜像打标签</li><li><code>imageName</code>用于给镜像设置名称</li><li><code>dockerDirectory</code>用于标识构建镜像的<code>Dockerfile</code>文件路径</li><li>其他基本上按照上面的来即可</li></ul></li><li><p>需要注意的是要先编译通过并生成项目的<code>jar</code>文件才能进行后续的镜像打包操作，官方给出了些便捷的命令：</p><ul><li>编译并打包镜像：<code>mvn clean package docker:build</code></li><li>编译并打包推送镜像：<code>mvn clean package docker:build -DpushImage</code></li><li>追加标签：<code>mvn ... docker:build -DpushImageTag -DdockerImageTags=latest,another-tag</code></li></ul></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Docker的存在方便了开发过程，这点深有体会，使用插件来打包镜像可以结合Jenkins来进行CI/CD，非常适合敏捷开发！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;SpringBoot微服务开发过程中可以直接生成jar包之后通过java命令运行在服务端，也可以使用&lt;code&gt;pm2&lt;/code&gt;进行管理
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/tags/SpringBoot/"/>
    
      <category term="Docker" scheme="https://wanderros.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis高可用之Sentinel</title>
    <link href="https://wanderros.github.io/2020/10/08/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8BSentinel/"/>
    <id>https://wanderros.github.io/2020/10/08/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8BSentinel/</id>
    <published>2020-10-08T14:13:16.000Z</published>
    <updated>2020-10-08T15:16:15.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前学习过Redis的基础使用，没有涉及到高可用相关的内容，在真实业务场景中可能需要Redis的高可用，不仅仅是高并发，还有当主从环境下的主机宕机情况的快速恢复服务，这就涉及到Redis的Sentinel模式和Cluster模式。本文主要记录Snetinel模式。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>在服务中，使用单个Redis来提供缓存服务是不可靠的，而且官方宣传单机性能可以达到10w OPS（真实环境是没有的），当出现这种状况时就要分布式<code>Redis</code>了。</p></li><li><p>主从切换技术的方法是：<strong>当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong></p></li><li><p><code>Redis-Sentinel</code>本身也有单点问题，当出现问题时整个redis集群系统将无法按照预期的方式切换主从。官方建议一个健康的集群部署，至少需要3个Sentinel实例。</p></li><li><p><code>Redis-Sentinel</code>只需要配置监控Redis主节点，而集群之间可以通过主节点相互通信。典型的<code>Redis-Sentinel</code>如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e64f47a8684956ef1de9f7c4a9ff4f07-70110" alt="典型模式"></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5c3e4c21233ba0e78b24ee69a6a5200a-47830" alt="多哨兵"></p></li><li><p>Sentinel主要执行以下三个任务：</p><ul><li>监控 (Monitor): 检查redis主、从实例是否正常运作</li><li>通知 (Notification): 监控的redis服务出现问题时，可通过API发送通知告警</li><li>自动故障迁移 (Automatic Failover): 当检测到redis主节点不能正常工作时，<code>Sentinel</code>会开始做自动故障判断、迁移等操作，先是移除失效<code>Redis</code>主节点，然后将其中一个从节点升级为新的主节点，并让失效主节点的其他从节点改为复制新的主节点。当客户端试图连接失效的主节点时，集群也会向客户端返回最新主节点的地址，使得集群可以使用新的主节点来代替失效的旧主节点</li></ul></li><li><p>Redis Sentinel 集群模式的 “仲裁会”：</p><ul><li>当一个master被sentinel集群监控时，需要为它指定一个参数，这个参数指定了当需要判决master为不可用，并且进行failover时，所需要的sentinel数量</li><li>当failover主备切换真正被触发后，failover并不会马上进行，还需要sentinel中的大多数sentinel授权后才可以进行failover</li><li>failover一旦被触发，尝试去进行failover的sentinel会去获得“大多数”sentinel的授权（如果票数比大多数还要大的时候，则询问更多的sentinel)这个区别看起来很微妙，但是很容易理解和使用</li><li>例如，集群中有5个sentinel，票数被设置为2，当2个sentinel认为一个master已经不可用了以后，将会触发failover，但是，进行failover的那个sentinel必须先获得至少3个sentinel的授权才可以实行failover。如果票数被设置为5，要达到ODOWN状态，必须所有5个sentinel都主观认为master为不可用，要进行failover，那么得获得所有5个sentinel的授权</li></ul></li><li><p>官方文档：<a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">https://redis.io/topics/sentinel</a></p></li><li><p>sentinel.conf是启动redis-sentinel的核心配置文件，可以从官网下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable/sentinel.conf</span><br></pre></td></tr></table></figure></li><li><p>修改的Sentinel配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *** IMPORTANT ***</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default Sentinel will not be reachable from interfaces different than</span></span><br><span class="line"><span class="comment"># localhost, either use the 'bind' directive to bind to a list of network</span></span><br><span class="line"><span class="comment"># interfaces, or disable protected mode with "protected-mode no" by</span></span><br><span class="line"><span class="comment"># adding it to this configuration file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Before doing that MAKE SURE the instance is protected from the outside</span></span><br><span class="line"><span class="comment"># world via firewalling or other means.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example you may use one of the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 192.168.1.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># protected-mode no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port &lt;sentinel-port&gt;</span></span><br><span class="line"><span class="comment"># The port that this sentinel instance will run on</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis Sentinel does not run as a daemon. Use 'yes' if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis-sentinel.pid when</span></span><br><span class="line"><span class="comment"># daemonized.</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running daemonized, Redis Sentinel writes a pid file in</span></span><br><span class="line"><span class="comment"># /var/run/redis-sentinel.pid by default. You can specify a custom pid file</span></span><br><span class="line"><span class="comment"># location here.</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Sentinel to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel announce-ip &lt;ip&gt;</span></span><br><span class="line"><span class="comment"># sentinel announce-port &lt;port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The above two configuration directives are useful in environments where,</span></span><br><span class="line"><span class="comment"># because of NAT, Sentinel is reachable from outside via a non-local address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When announce-ip is provided, the Sentinel will claim the specified IP address</span></span><br><span class="line"><span class="comment"># in HELLO messages used to gossip its presence, instead of auto-detecting the</span></span><br><span class="line"><span class="comment"># local address as it usually does.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Similarly when announce-port is provided and is valid and non-zero, Sentinel</span></span><br><span class="line"><span class="comment"># will announce the specified TCP port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The two options don't need to be used together, if only announce-ip is</span></span><br><span class="line"><span class="comment"># provided, the Sentinel will announce the specified IP and the server port</span></span><br><span class="line"><span class="comment"># as specified by the "port" option. If only announce-port is provided, the</span></span><br><span class="line"><span class="comment"># Sentinel will announce the auto-detected local IP and the specified port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel announce-ip 1.2.3.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir &lt;working-directory&gt;</span></span><br><span class="line"><span class="comment"># Every long running process should have a well-defined working directory.</span></span><br><span class="line"><span class="comment"># For Redis Sentinel to chdir to /tmp at startup is the simplest thing</span></span><br><span class="line"><span class="comment"># for the process to don't interfere with administrative tasks such as</span></span><br><span class="line"><span class="comment"># unmounting filesystems.</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">"/tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">myid 802e66d5d163ee0477ba40d83c94d11de9e1395b</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Tells Sentinel to monitor this master, and to consider it in O_DOWN</span></span><br><span class="line"><span class="comment"># (Objectively Down) state only if at least &lt;quorum&gt; sentinels agree.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that whatever is the ODOWN quorum, a Sentinel will require to</span></span><br><span class="line"><span class="comment"># be elected by the majority of the known Sentinels in order to</span></span><br><span class="line"><span class="comment"># start a failover, so no failover can be performed in minority.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Replicas are auto-discovered, so you don't need to specify replicas in</span></span><br><span class="line"><span class="comment"># any way. Sentinel itself will rewrite this configuration file adding</span></span><br><span class="line"><span class="comment"># the replicas using additional configuration options.</span></span><br><span class="line"><span class="comment"># Also note that the configuration file is rewritten when a</span></span><br><span class="line"><span class="comment"># replica is promoted to master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> master name should not include special characters or spaces.</span></span><br><span class="line"><span class="comment"># The valid charset is A-z 0-9 and the three characters ".-_".</span></span><br><span class="line"><span class="comment">#sentinel monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the password to use to authenticate with the master and replicas.</span></span><br><span class="line"><span class="comment"># Useful if there is a password set in the Redis instances to monitor.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that the master password is also used for replicas, so it is not</span></span><br><span class="line"><span class="comment"># possible to set a different password in masters and replicas instances</span></span><br><span class="line"><span class="comment"># if you want to be able to monitor these instances with Sentinel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However you can have Redis instances without the authentication enabled</span></span><br><span class="line"><span class="comment"># mixed with Redis instances requiring the authentication (as long as the</span></span><br><span class="line"><span class="comment"># password set is the same for all the instances requiring the password) as</span></span><br><span class="line"><span class="comment"># the AUTH command will have no effect in Redis instances with authentication</span></span><br><span class="line"><span class="comment"># switched off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-user &lt;master-name&gt; &lt;username&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is useful in order to authenticate to instances having ACL capabilities,</span></span><br><span class="line"><span class="comment"># that is, running Redis 6.0 or greater. When just auth-pass is provided the</span></span><br><span class="line"><span class="comment"># Sentinel instance will authenticate to Redis using the old "AUTH &lt;pass&gt;"</span></span><br><span class="line"><span class="comment"># method. When also an username is provided, it will use "AUTH &lt;user&gt; &lt;pass&gt;".</span></span><br><span class="line"><span class="comment"># In the Redis servers side, the ACL to provide just minimal access to</span></span><br><span class="line"><span class="comment"># Sentinel instances, should be configured along the following lines:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     user sentinel-user &gt;somepassword +client +subscribe +publish \</span></span><br><span class="line"><span class="comment">#                        +ping +info +multi +slaveof +config +client +exec on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Number of milliseconds the master (or any attached replica or sentinel) should</span></span><br><span class="line"><span class="comment"># be unreachable (as in, not acceptable reply to PING, continuously, for the</span></span><br><span class="line"><span class="comment"># specified period) in order to consider it in S_DOWN state (Subjectively</span></span><br><span class="line"><span class="comment"># Down).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 30 seconds.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">deny-scripts-reconfig yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># requirepass &lt;password&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure Sentinel itself to require a password, however when doing</span></span><br><span class="line"><span class="comment"># so Sentinel will try to authenticate with the same password to all the</span></span><br><span class="line"><span class="comment"># other Sentinels. So you need to configure all your Sentinels in a given</span></span><br><span class="line"><span class="comment"># group with the same "requirepass" password. Check the following documentation</span></span><br><span class="line"><span class="comment"># for more info: https://redis.io/topics/sentinel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># How many replicas we can reconfigure to point to the new replica simultaneously</span></span><br><span class="line"><span class="comment"># during the failover. Use a low number if you use the replicas to serve query</span></span><br><span class="line"><span class="comment"># to avoid that all the replicas will be unreachable at about the same</span></span><br><span class="line"><span class="comment"># time while performing the synchronization with the master.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor myredis 172.17.0.3 6379 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the failover timeout in milliseconds. It is used in many ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to re-start a failover after a previous failover was</span></span><br><span class="line"><span class="comment">#   already tried against the same master by a given Sentinel, is two</span></span><br><span class="line"><span class="comment">#   times the failover timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed for a replica replicating to a wrong master according</span></span><br><span class="line"><span class="comment">#   to a Sentinel current configuration, to be forced to replicate</span></span><br><span class="line"><span class="comment">#   with the right master, is exactly the failover timeout (counting since</span></span><br><span class="line"><span class="comment">#   the moment a Sentinel detected the misconfiguration).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to cancel a failover that is already in progress but</span></span><br><span class="line"><span class="comment">#   did not produced any configuration change (SLAVEOF NO ONE yet not</span></span><br><span class="line"><span class="comment">#   acknowledged by the promoted replica).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The maximum time a failover in progress waits for all the replicas to be</span></span><br><span class="line"><span class="comment">#   reconfigured as replicas of the new master. However even after this time</span></span><br><span class="line"><span class="comment">#   the replicas will be reconfigured by the Sentinels anyway, but not with</span></span><br><span class="line"><span class="comment">#   the exact parallel-syncs progression as specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 3 minutes.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">config-epoch myredis 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script and sentinel reconfig-script are used in order</span></span><br><span class="line"><span class="comment"># to configure scripts that are called to notify the system administrator</span></span><br><span class="line"><span class="comment"># or to reconfigure clients after a failover. The scripts are executed</span></span><br><span class="line"><span class="comment"># with the following rules for error handling:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "1" the execution is retried later (up to a maximum</span></span><br><span class="line"><span class="comment"># number of times currently set to 10).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "2" (or an higher value) the script execution is</span></span><br><span class="line"><span class="comment"># not retried.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script terminates because it receives a signal the behavior is the same</span></span><br><span class="line"><span class="comment"># as exit code 1.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A script has a maximum running time of 60 seconds. After this limit is</span></span><br><span class="line"><span class="comment"># reached the script is terminated with a SIGKILL and the execution retried.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTIFICATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Call the specified notification script for any sentinel event that is</span></span><br><span class="line"><span class="comment"># generated in the WARNING level (for instance -sdown, -odown, and so forth).</span></span><br><span class="line"><span class="comment"># This script should notify the system administrator via email, SMS, or any</span></span><br><span class="line"><span class="comment"># other messaging system, that there is something wrong with the monitored</span></span><br><span class="line"><span class="comment"># Redis systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script is called with just two arguments: the first is the event type</span></span><br><span class="line"><span class="comment"># and the second the event description.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script must exist and be executable in order for sentinel to start if</span></span><br><span class="line"><span class="comment"># this option is provided.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script mymaster /var/redis/notify.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CLIENTS RECONFIGURATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When the master changed because of a failover a script can be called in</span></span><br><span class="line"><span class="comment"># order to perform application-specific tasks to notify the clients that the</span></span><br><span class="line"><span class="comment"># configuration has changed and the master is at a different address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following arguments are passed to the script:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;state&gt; is currently always "failover"</span></span><br><span class="line"><span class="comment"># &lt;role&gt; is either "leader" or "observer"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The arguments from-ip, from-port, to-ip, to-port are used to communicate</span></span><br><span class="line"><span class="comment"># the old address of the master and the new address of the elected replica</span></span><br><span class="line"><span class="comment"># (now a master).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be resistant to multiple invocations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default SENTINEL SET will not be able to change the notification-script</span></span><br><span class="line"><span class="comment"># and client-reconfig-script at runtime. This avoids a trivial security issue</span></span><br><span class="line"><span class="comment"># where clients can set the script to anything and trigger a failover in order</span></span><br><span class="line"><span class="comment"># to get the program executed.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">leader-epoch myredis 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REDIS COMMANDS RENAMING</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Sometimes the Redis server has certain commands, that are needed for Sentinel</span></span><br><span class="line"><span class="comment"># to work correctly, renamed to unguessable strings. This is often the case</span></span><br><span class="line"><span class="comment"># of CONFIG and SLAVEOF in the context of providers that provide Redis as</span></span><br><span class="line"><span class="comment"># a service, and don't want the customers to reconfigure the instances outside</span></span><br><span class="line"><span class="comment"># of the administration console.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In such case it is possible to tell Sentinel to use different command names</span></span><br><span class="line"><span class="comment"># instead of the normal ones. For example if the master "mymaster", and the</span></span><br><span class="line"><span class="comment"># associated replicas, have "CONFIG" all renamed to "GUESSME", I could use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL rename-command mymaster CONFIG GUESSME</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After such configuration is set, every time Sentinel would use CONFIG it will</span></span><br><span class="line"><span class="comment"># use GUESSME instead. Note that there is no actual need to respect the command</span></span><br><span class="line"><span class="comment"># case, so writing "config guessme" is the same in the example above.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL SET can also be used in order to perform this configuration at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to set a command back to its original name (undo the renaming), it</span></span><br><span class="line"><span class="comment"># is possible to just rename a command to itsef:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL rename-command mymaster CONFIG CONFIG</span></span><br><span class="line"><span class="comment"># Generated by CONFIG REWRITE</span></span><br></pre></td></tr></table></figure><ul><li>多个Sentinel则需要修改端口号</li></ul></li></ol><h2 id="Docker环境部署"><a href="#Docker环境部署" class="headerlink" title="Docker环境部署"></a>Docker环境部署</h2><ol><li><p>一主多从：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-master -p 6379:6379 redis</span><br><span class="line">docker run -itd --name redis-slave -p 6380:6379 --link redis-master:redis-master redis</span><br><span class="line">docker run -itd --name redis-slave1 -p 6381:6379 --link redis-master:redis-master redis</span><br></pre></td></tr></table></figure></li><li><p>需要进入两个从节点使用客户端执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof redis-master 6379</span><br></pre></td></tr></table></figure></li><li><p>在主节点中执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.17.0.2,port=6379,state=online,offset=474223,lag=1</span><br><span class="line">slave1:ip=172.17.0.4,port=6379,state=online,offset=474357,lag=0</span><br><span class="line">master_replid:92708a81b61dcd5b6067dedd7138e8f89a8cc996</span><br><span class="line">master_replid2:8da9d74e82754291f0d18563ac2f546a5d20a240</span><br><span class="line">master_repl_offset:474491</span><br><span class="line">second_repl_offset:107113</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:90764</span><br><span class="line">repl_backlog_histlen:383728</span><br></pre></td></tr></table></figure></li><li><p>启动三个Sentinel：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name redis-sentinel1 -p 26379:26379 -v /root/sentinel1.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br><span class="line"></span><br><span class="line">docker run -it --name redis-sentinel2 -p 26380:26380 -v /root/sentinel2.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br><span class="line"></span><br><span class="line">docker run -it --name redis-sentinel3 -p 26381:26381 -v /root/sentinel3.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>在每个Sentinel中执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /data/sentinel.conf</span><br></pre></td></tr></table></figure></li><li><p>在任意一个节点中使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info sentinel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=myredis,status=ok,address=172.17.0.3:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure></li><li><p>可以在Redis主节点上启动客户端执行下面命令测试主节点切换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug sleep 60</span><br></pre></td></tr></table></figure></li><li><p>上述过程人工参与的过程太多，需要考虑如何自动化操作，不然对于运维人员来说，实在是太痛苦了，有痛点的地方就有需求，之前看到搜狐有开发一款Redis运维工具，但是没有去尝试，后续可已考虑自动化。</p></li></ol><h2 id="Java中使用哨兵模式"><a href="#Java中使用哨兵模式" class="headerlink" title="Java中使用哨兵模式"></a>Java中使用哨兵模式</h2><ol><li><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端连接原理：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/897d6a3b67b5636303d266a39c949a0f-18480" alt="客户端连接原理"></p></li><li><p>测试（仅供参考）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSentinels</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSentinel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 哨兵信息</span></span><br><span class="line">        Set&lt;String&gt; sentinels = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">"192.168.37.128:26379"</span>,</span><br><span class="line">                <span class="string">"192.168.37.128:26380"</span>,<span class="string">"192.168.37.128:26381"</span>));</span><br><span class="line">        <span class="comment">// 创建连接池</span></span><br><span class="line">        JedisSentinelPool pool = <span class="keyword">new</span> JedisSentinelPool(<span class="string">"myredis"</span>, sentinels,jedisPoolConfig,<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 获取客户端</span></span><br><span class="line">        Jedis jedis = pool.getResource();</span><br><span class="line">        <span class="comment">// 执行两个命令</span></span><br><span class="line">        jedis.set(<span class="string">"mykey"</span>, <span class="string">"myvalue"</span>);</span><br><span class="line">        String value = jedis.get(<span class="string">"mykey"</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ol><li>在使用的过程中，随着业务的增加不可避免的要对Redis进行扩容，熟知的扩容方式有两种，一种是垂直扩容，一种是水平扩容。</li><li>垂直扩容表示通过加内存方式来增加整个缓存体系的容量比如将缓存大小由2G调整到4G,这种扩容不需要应用程序支持；水平扩容表示表示通过增加节点的方式来增加整个缓存体系的容量比如本来有1个节点变成2个节点，这种扩容方式需要应用程序支持。</li><li>垂直扩容看似最便捷的扩容，但是受到机器的限制，一个机器的内存是有限的，所以垂直扩容到一定阶段不可避免的要进行水平扩容，如果预留出很多节点感觉又是对资源的一种浪费。</li><li>Redis Sentinel 水平扩容一直都是程序猿心中的痛点，因为水平扩容牵涉到数据的迁移。迁移过程一方面要保证自己的业务是可用的，一方面要保证尽量不丢失数据所以数据能不迁移就尽量不迁移。</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis Sentinel不失为一种高可用方案，在业务量不是特别大的时候可以考虑，但是业务量大就不行，需要Cluster模式！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;之前学习过Redis的基础使用，没有涉及到高可用相关的内容，在真实业务场景中可能需要Redis的高可用，不仅仅是高并发，还有当主从环境下的主
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://wanderros.github.io/categories/Redis/"/>
    
    
      <category term="Base" scheme="https://wanderros.github.io/tags/Base/"/>
    
      <category term="Redis" scheme="https://wanderros.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>项目开发中的抽象概念</title>
    <link href="https://wanderros.github.io/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A6%82%E5%BF%B5/"/>
    <id>https://wanderros.github.io/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A6%82%E5%BF%B5/</id>
    <published>2020-10-08T02:53:59.000Z</published>
    <updated>2020-10-08T14:09:43.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在项目开发中，阅读不同开发人员的代码时，会因为开发人员的命名习惯不同，而出现项目中的文件夹名称晦涩难懂，因此，在这里记录开发过程中的各种抽象概念。</p><hr><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object(对象)"></a>Object(对象)</h2><ol><li>PO(Persistant Object)持久对象：可以看成是与数据库中的表相映射的对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</li><li>DO(Domain Object)领域对象：从现实世界中抽象出来的有形或无形的业务实体。</li><li>TO(Transfer Object)传输对象：不同的应用程序之间传输的对象。</li><li>DTO(Data Transfer Object)数据传输对象：泛指用于展示层与服务层之间的数据传输对象。</li><li>VO（View Object）视图对象：用于业务层之间的数据传递的对象。</li><li>BO(Business Object)业务对象：用于表示业务逻辑的对象。</li><li>POJO（Plain Ordinary Java Object）简单的Java对象：DO/DTO/BO/VO的统称。</li><li>DAO(Data Access Object) 数据访问对象：DAO中包含了歌中歌数据库的操作方法，结合PO完成对数据库的各种操作。</li></ol><h2 id="Manufactuce（制造业）"><a href="#Manufactuce（制造业）" class="headerlink" title="Manufactuce（制造业）"></a>Manufactuce（制造业）</h2><ol><li>OEM(Original Equipment Manufactuce)原始设备生产商：“代工生产”或“贴牌生产”。</li><li>ODM(Original Design Manufactuce)原始设计制造商：客户只需向ODM服务商提出产品的功能、性能甚至只需提供产品的构思，ODM服务商就可以将产品从设想变为现实。</li><li>OBM(Orignal Brand Manufactuce)原始品牌制造商：生产商自行创立产品品牌，生产、销售拥有自主品牌的产品。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在项目开发中，阅读不同开发人员的代码时，会因为开发人员的命名习惯不同，而出现项目中的文件夹名称晦涩难懂，因此，在这里记录开发过程中的各种抽象
      
    
    </summary>
    
    
      <category term="Base" scheme="https://wanderros.github.io/categories/Base/"/>
    
    
      <category term="Base" scheme="https://wanderros.github.io/tags/Base/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 对象存储minIO Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/08/SpringBoot-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8minIO-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/08/SpringBoot-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8minIO-Quick-Start/</id>
    <published>2020-10-08T00:40:27.000Z</published>
    <updated>2020-10-08T14:09:43.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>minIO是对象存储服务的一种，与Amazon S3云存储服务兼容，非常适合存储非结构化数据，比如照片、视频、日志文件等。阿里云提供了OSS兑现存储服务，提供的服务相对来说比minIO要多，但是minIO也不失为一种自建对象存储服务的方案。本文记录minIO的部署以及使用SprinBoot项目访问对象存储服务。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>存储桶命名规则：</p><ul><li>存储桶名称必须长在 3 到 63 个字符之间</li><li>存储桶名称只能由小写字母、数字、点 （.） 和连字符 （-） 组成</li><li>存储桶名称必须以字母或数字开头和结尾</li><li>存储桶名称不得格式化为 IP 地址（例如，192.168.5.4）</li><li>存储桶名称在分区中必须是唯一的</li><li>与 Amazon S3 传输加速一起使用的存储桶的名称中不能有点 （.）</li></ul></li><li><p>对象存储是面向对象/文件的、海量的互联网存储，也可以直接被称为“云存储”。</p></li><li><p>对象存储没有像文件系统那样有一个很多层级的文件结构，而是只有一个“桶”（bucket）的概念（也就是存储空间），“桶”里面全部都是对象，是一种非常扁平化的存储方式。</p></li><li><p>对象存储（Object-based Storage）是一种新的网络存储架构，基于对象存储技术的设备就是对象存储设备（Object-based Storage Device）简称OSD。</p></li><li><p>对象存储是一种基于对象的存储设备，具备智能、自我管理能力，通过web服务协议(如：REST、SOAP)实现对象的读写和存储资源的访问。</p></li><li><p>minIO官网文档：</p><ul><li>英文：<a href="https://docs.min.io/" target="_blank" rel="noopener">https://docs.min.io/</a></li><li>中文：<a href="https://docs.min.io/cn/" target="_blank" rel="noopener">https://docs.min.io/cn/</a></li></ul></li></ol><ol start="7"><li>Minio可以做为云存储的解决方案用来保存海量的图片，视频，文档。</li></ol><h2 id="minIO环境搭建（Docker）"><a href="#minIO环境搭建（Docker）" class="headerlink" title="minIO环境搭建（Docker）"></a>minIO环境搭建（Docker）</h2><ol><li><p>拉取镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure></li><li><p>实例化minIO容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">  -e "MINIO_ACCESS_KEY=minio" \</span><br><span class="line">  -e "MINIO_SECRET_KEY=gulimall_minio" \</span><br><span class="line">  -v /Users/wander/docker/minio/data:/data \</span><br><span class="line">  -v /Users/wander/docker/minio/config:/root/.minio \</span><br><span class="line">  -d minio/minio server /data</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:9000，输入minio以及gulimall_minio即可访问对象存储后台管理页面。">http://localhost:9000，输入minio以及gulimall_minio即可访问对象存储后台管理页面。</a></p></li></ol><h2 id="SpringBoot项目访问minIO"><a href="#SpringBoot项目访问minIO" class="headerlink" title="SpringBoot项目访问minIO"></a>SpringBoot项目访问minIO</h2><ol><li><p>创建一个SpringBoot项目，添加如下依赖（maven）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jlefebure/spring-boot-starter-minio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jlefebure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置minIO（application.yml）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:9000/</span></span><br><span class="line">    <span class="attr">access-key:</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">secret-key:</span> <span class="string">gulimall_minio</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">gulimall</span></span><br><span class="line">    <span class="attr">create-bucket:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioException;</span><br><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioService;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MinioService minioService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfigurationProperties configurationProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/files"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">testMinio</span><span class="params">()</span> <span class="keyword">throws</span> MinioException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioService.fullList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件名称下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> com.jlefebure.spring.boot.minio.MinioException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"files/&#123;object&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getObject</span><span class="params">(@PathVariable(<span class="string">"object"</span>)</span> String object, HttpServletResponse response) <span class="keyword">throws</span> com.jlefebure.spring.boot.minio.MinioException, IOException, IOException, IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = minioService.get(Paths.get(object));</span><br><span class="line">        InputStreamResource inputStreamResource = <span class="keyword">new</span> InputStreamResource(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the content type and attachment header.</span></span><br><span class="line">        response.addHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + object);</span><br><span class="line">        response.setContentType(URLConnection.guessContentTypeFromName(object));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Copy the stream to the response's output stream.</span></span><br><span class="line">        IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttachement</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        String filename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// System.out.println(filename);</span></span><br><span class="line">        <span class="comment">// Path path = Paths.get(file.getResource().getURI());</span></span><br><span class="line">        Path path = Paths.get(filename);</span><br><span class="line">        String url = configurationProperties.getUrl() + <span class="string">"/"</span> + configurationProperties.getBucket() + path.toAbsolutePath();</span><br><span class="line">        <span class="comment">// System.out.println(path.toAbsolutePath());</span></span><br><span class="line">        <span class="comment">// url += path.toAbsolutePath();</span></span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="comment">// System.out.println(path);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioService.upload(path, file.getInputStream(), file.getContentType());</span><br><span class="line">            System.out.println(<span class="string">"上传完成！！！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (com.jlefebure.spring.boot.minio.MinioException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The file cannot be upload on the internal storage. Please retry later"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The file cannot be read"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.Result;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MinioClient mmclient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InvalidKeyException, NoSuchAlgorithmException, InsufficientDataException, InvalidExpiresRangeException, InvalidResponseException, InternalException, NoResponseException, InvalidBucketNameException, XmlPullParserException, ErrorResponseException, BucketPolicyTooLargeException, InvalidObjectPrefixException </span>&#123;</span><br><span class="line">        System.out.println(mmclient);</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = mmclient.listObjects(<span class="string">"gulimall"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">            Item item = result.get();</span><br><span class="line">            System.out.println(item.lastModified() + <span class="string">", "</span> + item.size() + <span class="string">", "</span> + item.objectName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据文件名称获取浏览地址,此种方式在不设置策略的情况下【使用默认策略】是不能直接下载文件的</span></span><br><span class="line">        String gulimall = mmclient.presignedGetObject(<span class="string">"gulimall"</span>, <span class="string">"11111.jpg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"下载地址："</span>+gulimall);</span><br><span class="line">        String gulimall1 = mmclient.getBucketLifeCycle(<span class="string">"gulimall"</span>);</span><br><span class="line">        System.out.println(gulimall1);<span class="comment">// 空</span></span><br><span class="line">        String policy = mmclient.getBucketPolicy(<span class="string">"gulimall"</span>);</span><br><span class="line">        System.out.println(<span class="string">"policy:"</span>+policy);</span><br><span class="line">        <span class="comment">//通过修改桶策略即可使用返回的url直接访问minio中的文件【推荐这种方式！！！】</span></span><br><span class="line">        String objectUrl = mmclient.getObjectUrl(<span class="string">"gulimall"</span>, <span class="string">"刘德华+-+练习.ape"</span>);</span><br><span class="line">        System.out.println(<span class="string">"objectUrl:"</span> + objectUrl);</span><br><span class="line">        <span class="comment">//不能下载</span></span><br><span class="line">        String putObject = mmclient.presignedPutObject(<span class="string">"gulimall"</span>, <span class="string">"刘德华+-+练习.ape"</span>);</span><br><span class="line">        System.out.println(<span class="string">"putObject:"</span>+putObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>minIO的记录目前很浅显，但是作为一个mark吧，后续如果不考虑其他互联网公司的对象存储服务的话，可以考虑使用minIO搭建自己的对象存储服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;minIO是对象存储服务的一种，与Amazon S3云存储服务兼容，非常适合存储非结构化数据，比如照片、视频、日志文件等。阿里云提供了OSS
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/tags/SpringBoot/"/>
    
      <category term="OSS" scheme="https://wanderros.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程并发编程</title>
    <link href="https://wanderros.github.io/2020/10/07/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://wanderros.github.io/2020/10/07/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2020-10-07T02:29:46.000Z</published>
    <updated>2020-10-07T03:01:10.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>多线程并发编程是非常重要的编程技术，需要深刻理解并掌握。在Java中，多线程主要的实现方式有四种：</p><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口通过FutureTask包装器来创建Thread线程</li><li>使用ExecutorService、Callable、Future实现有返回结果的多线程</li></ul><p>其中前两种方式线程执行完后都没有返回值，而后两种是带返回值的。除了以上四种主要的线程创建方式之外，也还有很多其他的方式可以启动多线程任务！</p><hr><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="继承Thread类创建线程"><a href="#继承Thread类创建线程" class="headerlink" title="继承Thread类创建线程"></a>继承Thread类创建线程</h2><ol><li><p>Thread类本质上也是实现了Runnable接口的一个实例，代表一个线程的实例。</p></li><li><p>启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。</p></li><li><p>这种方式实现多线程比较简单，通过继承Thread类并复写run()方法，就可以启动新线程并执行自己定义的run()方法。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateThreadDemo1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置当前线程的名字</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前运行的线程名为： "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里，要调用start方法才能启动线程，不能调用run方法</span></span><br><span class="line">        <span class="keyword">new</span> CreateThreadDemo1(<span class="string">"MyThread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> CreateThreadDemo1(<span class="string">"MyThread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h2><ol><li><p>实现Runnable接口并实现其中的run方法，然后通过构造Thread实例，传入Runnable实现类，然后调用Thread的start方法即可开启一个新线程。</p></li><li><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前运行的线程名为： "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CreateThreadDemo2 runnable = <span class="keyword">new</span> CreateThreadDemo2();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"MyThread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"MyThread2"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现Callable接口通过FutureTask包装器来创建Thread线程"><a href="#实现Callable接口通过FutureTask包装器来创建Thread线程" class="headerlink" title="实现Callable接口通过FutureTask包装器来创建Thread线程"></a>实现Callable接口通过FutureTask包装器来创建Thread线程</h2><ol><li><p>首先需要一个实现Callable接口的实例，然后实现该接口的唯一方法call的业务逻辑，接着把Callable实例包装成FutureTask传递给Thread实例启动新线程。</p></li><li><p>FutureTask本质上也实现了Runnable接口，所以同样可以用来构造Thread实例。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程任务，lambada方式实现接口并实现call方法</span></span><br><span class="line">        Callable&lt;Integer&gt; callable = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程任务开始执行了..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将任务封装为FutureTask</span></span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(callable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程，执行线程任务</span></span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ====================</span></span><br><span class="line">        <span class="comment">// 这里是在线程启动之后，线程结果返回之前</span></span><br><span class="line">        System.out.println(<span class="string">"线程启动之后，线程结果返回之前..."</span>);</span><br><span class="line">        <span class="comment">// ====================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程结束之后，拿到线程的执行结果 ，线程不结束会阻塞</span></span><br><span class="line">        Integer result = task.get();</span><br><span class="line">        System.out.println(<span class="string">"主线程中拿到异步任务执行的结果为："</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）"><a href="#使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）" class="headerlink" title="使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）"></a>使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）</h2><ol><li><p>ExecutorService、Callable、Future三个接口都是属于Executor框架。</p></li><li><p>可返回值的任务必须实现Callable接口。通过ExecutorService执行Callable任务后，可以获取到一个Future的对象，在该对象上调用get()就可以获取到Callable任务返回的结果了。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- 主程序开始运行 ----"</span>);</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> taskSize = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 创建一个线程池,Executors提供了创建各种类型线程池的方法，具体详情请自行查阅</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">        List&lt;Future&gt; futureList = <span class="keyword">new</span> ArrayList&lt;Future&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">            Callable callable = <span class="keyword">new</span> MyCallable(i);</span><br><span class="line">            <span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">            Future future = executorService.submit(callable);</span><br><span class="line">            futureList.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有并发任务的运行结果</span></span><br><span class="line">        <span class="keyword">for</span> (Future future : futureList) &#123;</span><br><span class="line">            <span class="comment">// 从Future对象上获取任务的返回值，并输出到控制台</span></span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + future.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Date endTime = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        System.out.println(<span class="string">"---- 主程序结束运行 ----，程序运行耗时【"</span> + (endTime.getTime() - startTime.getTime()) + <span class="string">"毫秒】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</span><br><span class="line"></span><br><span class="line">    MyCallable(<span class="keyword">int</span> taskNum) &#123;</span><br><span class="line">        <span class="keyword">this</span>.taskNum = taskNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + taskNum + <span class="string">" 线程任务启动"</span>);</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        Date endTime = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> time = endTime.getTime() - startTime.getTime();</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + taskNum + <span class="string">" 线程任务终止"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskNum + <span class="string">"线程任务返回运行结果, 当前任务耗时【"</span> + time + <span class="string">"毫秒】"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>锁从宏观上分类，只分为两种悲观锁与乐观锁：<ul><li>乐观锁的策略是认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。Java中的乐观锁基本都是通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败</li><li>悲观锁的策略是认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转换为悲观锁，如RetreenLock自旋锁</li></ul></li><li>Java的线程是映射到操作系统原生线程之上的，如果要阻塞或唤醒一个线程就需要操作系统介入，需要在户态与核心态之间切换，这种切换会消耗大量的系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等，用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。</li><li>synchronized会导致争用不到锁的线程进入阻塞状态，所以说它是<code>java</code>语言中一个重量级的同步操纵，被称为重量级锁。</li><li><code>synchronized</code>可以把任意一个非<code>null</code>的对象当作锁：<ul><li>作用于方法时，锁住的是对象的实例(this)</li><li>作用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（jdk1.8则是metaspace），永久带是全局共享的，因此静态方法锁相当于类的一个全局锁，会锁所有调用该方法的线程</li><li>作用于一个对象实例时，锁住的是所有以该对象为锁的代码块</li></ul></li><li>还有其他的轻量级锁。</li></ol><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><ol><li><code>减少锁的时间</code>：不需要同步执行的代码，能不放在同步块里面执行就不要放在同步块内，可以让锁尽快释放。</li><li><code>减少锁的粒度</code>：将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。</li><li><code>锁粗化</code>：（场景）假如有一个循环，循环内的操作需要加锁，我们应该把锁放到循环外面，否则每次进出循环，都进出一次临界区，效率是非常差的。</li><li>使用读写锁：读操作加读锁，可以并发读，写操作使用写锁，只能单线程写。</li><li>读写分离</li><li>使用CAS</li><li>消除缓存行的伪共享</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>并发编程调试起来很难，这部分还需要深入研究！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;多线程并发编程是非常重要的编程技术，需要深刻理解并掌握。在Java中，多线程主要的实现方式有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承Threa
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML Qucik Start</title>
    <link href="https://wanderros.github.io/2020/10/06/PlantUML-Qucik-Start/"/>
    <id>https://wanderros.github.io/2020/10/06/PlantUML-Qucik-Start/</id>
    <published>2020-10-06T11:27:54.000Z</published>
    <updated>2020-10-06T12:17:05.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从学校步入工作之后，面对的就是沟通效率问题，越发觉得用专业的图形（用例图，时序图，ER图等等）去准确表达想法是很重要的。针对某个需求绘制的的用例图，比一段乏味的文字来的更加有意义，也便于别人理解。而且很多书籍中都会使用类图，时序图等UML语言来描述逻辑关系，因此这部分主要介绍如何UML以及使用PlantUML来绘制UML图。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="UML语言"><a href="#UML语言" class="headerlink" title="UML语言"></a>UML语言</h2><ol><li><em>UML</em>语言是一种面向对象的模型语言，通过<em>UML</em>语言的组合来表达某些事物之间的逻辑关系。</li><li>UML 是一种为面向对象开发系统的产品进行说明、可视化、和编制文档的标准语言。</li><li>UML使得开发人员可以专注于建立产品的模型和结构，而不是选用什么程序语言和算法实现。</li><li>UML中有多种关系：<ul><li>依赖（Dependency）：使用的关系（一个类的实现需要另一个类的协助），带箭头的虚线，指向被使用者</li><li>关联（Association）：拥有的关系（类内部变量与类的关系），带普通箭头的实心线，指向被拥有者</li><li>实现（Realization）：类与接口的关系，带三角箭头的虚线，箭头指向接口</li><li>泛化（Generalization）：继承关系，带三角箭头的实线，箭头指向父类</li><li>聚合（Aggregation）：整体与部分的关系，带空心菱形的实心线，菱形指向整体</li><li>组合（Composition）：整体与部分的关系，但部分不能离开整体而单独存在，带实心菱形的实线，菱形指向整体</li></ul></li><li>UML中文学习网址：<a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="noopener">https://www.w3cschool.cn/uml_tutorial/</a></li><li>UML有用性论点：<ul><li>在复杂需求中，UML图是非常必要的。所有的图都是协助团队策划稿能源更高效地厘清问题，掌握知识，高效解决问题的</li><li>“假敏捷开发”太多。UML统一了各种方法对不同类型的系统、不同开发阶段以及不同内部概念的不同观点，从而有效的消除了各种建模语言之间不必要的差异</li><li>UML 在业界依然在被应用。在团队开发中显得尤为重要</li><li>UML 有用例图、顺序图、活动图、状态图、组件图等，每一种图都代表着工程的一个特定维度，它们的专注点是正交的，都有其独特的用处。使用 UML 来分析和设计，可以让大家对整个系统有个更全面的认知</li><li>… …</li></ul></li><li>UML然并卵：<ul><li>复杂就是复杂，不会因为描述形式变了而简化。放弃了这方面。你觉得图看起来简洁，是因为图描述了骨架，但是大量细节都屏蔽掉了</li><li>作为图型这货太复杂，作为语言这货没卵用，没有编译器和IDE支持或者说相较于程序设计语言支持就是个渣渣……</li><li>UML是不符合程序员思维的，有一种东西比UML表现能力更强，更通用，那就是代码</li><li>画图有用不等于UML有用。图没有必要按照 UML 来, 最重要的是直观 ,便于沟通</li><li>… …</li></ul></li></ol><h2 id="PlanUML"><a href="#PlanUML" class="headerlink" title="PlanUML"></a>PlanUML</h2><ol><li><p><code>PlatnUML</code>的优点：</p><ul><li>PlantUML是开源的，有一个相对比较成熟的网站，通过简单的UML语言来实现想要的效果</li><li>PlantUML有比较详细的各类语言的guide文档</li><li>PlantUML做了很多的适配，比如常用的编译器eclipse，IDEA intelliJ都有对应的插件</li><li>PlantUML语言简单直接易学，就好像Markdown语法一样，简单高效</li></ul></li><li><p><code>Docker</code>搭建<code>PlatnUML</code>环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull plantuml/plantuml-server</span><br><span class="line">docker run -d -p 8080:8080 plantuml/plantuml-server</span><br></pre></td></tr></table></figure></li><li><p><code>PlatnUML</code>官网：<a href="https://plantuml.com/" target="_blank" rel="noopener">https://plantuml.com/</a></p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就目前而言，UML个人认为还是有用的，比如时序图，绘制良好的图对于代码的开发，业务逻辑的理解还是非常有用的，多会一样东西还是没有坏处的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;从学校步入工作之后，面对的就是沟通效率问题，越发觉得用专业的图形（用例图，时序图，ER图等等）去准确表达想法是很重要的。针对某个需求绘制的的
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://wanderros.github.io/categories/Tool/"/>
    
    
      <category term="Tool" scheme="https://wanderros.github.io/tags/Tool/"/>
    
      <category term="UML" scheme="https://wanderros.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Serializer&amp;Deserializer Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/06/SpringBoot-Serializer-Deserializer-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/06/SpringBoot-Serializer-Deserializer-Quick-Start/</id>
    <published>2020-10-06T08:16:18.000Z</published>
    <updated>2020-10-06T10:03:35.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>序列化和反序列化是编程语言中的一个概念，在Java里是一个较为基础的知识点，但是什么是序列化和反序列化，有什么作用，底层实现原理是什么，一连问之后可能整个人会蒙。这里主要记录Java序列化、反序列化的概念以及如何进行序列化和反序列化，包括在这当中用到的工具包等。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><code>Java (Serializer)序列化</code>是指把Java对象转换为字节序列的过程，而<code>Java (Deserializer )反序列化</code>是指把字节序列恢复为Java对象的过程。</li><li>主要功能：对象序列化最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性；对象反序列化则用于重建对象。</li><li>本质：序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</li><li>用处：<ul><li>实现了数据持久化</li><li>利用序列化实现远程通信</li><li>利用序列化在进程间传递对象</li></ul></li><li>序列化以及反序列化必须保证字节流中所保存的对象状态及描述信息完整！</li><li>Java中提供了对象的序列化与反序列化，但是目前常用的数据传输格式主要有<code>xml</code>、<code>json</code>，在后端开发中一般使用<code>json</code>进行接口数据传输，因此在本文中主要涉及到序列化之后的内容呈现为<code>json</code>格式。</li><li>对于采用实现原生Java API的序列化接口<code>Serializable</code>的方式：<strong>为了提高serialVersionUID的独立性和确定性，强烈建议在一个可序列化类中显示的定义serialVersionUID，为它赋予明确的值。</strong></li><li><code>json</code>格式规范：<ul><li>英文版：<a href="https://google.github.io/styleguide/jsoncstyleguide.xml" target="_blank" rel="noopener">https://google.github.io/styleguide/jsoncstyleguide.xml</a></li><li>中文版：<a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md</a></li><li><code>json API</code>格式规范：<a href="http://jsonapi.org.cn/format/" target="_blank" rel="noopener">http://jsonapi.org.cn/format/</a></li></ul></li><li>几个常用的json类库：<ul><li>Gson: 谷歌开发的<code>json</code>库，功能十分全面</li><li>FastJson: 阿里巴巴开发的 <code>json</code>库，性能十分优秀</li><li>Jackson: 社区十分活跃且更新速度很快</li></ul></li><li><code>Gson</code>、<code>FastJson</code>、<code>Jackson</code>要求序列化/反序列化的是标准的类，否则无法解析，因为都用到了反射！</li></ol><h2 id="JSON的一些经验"><a href="#JSON的一些经验" class="headerlink" title="JSON的一些经验"></a>JSON的一些经验</h2><ol><li>遵循Java Beans规范与JSON规范，能减少大部分的问题。</li><li>使用正常的key，尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。</li><li>关于日期处理尽量使用标准的日期格式，或者序列化和反序列化里都是用同样的datePattern格式。</li><li>如果JSONObject与正常的POJO混用，出现问题的概率较高。</li><li>尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。</li><li>尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。</li><li>尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。</li><li>注意编码和不可见字符！</li></ol><h2 id="Fastjson基础"><a href="#Fastjson基础" class="headerlink" title="Fastjson基础"></a>Fastjson基础</h2><ol><li><p><code>fastjson</code>是一个阿里开源的基于<code>Java</code>语言编写的高性能功能完善的json库，非常适合用于<code>Java</code>的序列化以及反序列化。如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>源码地址：<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">https://github.com/alibaba/fastjson</a></p></li><li><p><code>fastjson</code>快速使用以及<a href="https://github.com/alibaba/fastjson/wiki/FastJson-文档链接" target="_blank" rel="noopener">文档链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String text = JSON.toJSONString(obj); <span class="comment">//序列化</span></span><br><span class="line">VO vo = JSON.parseObject(<span class="string">"&#123;...&#125;"</span>, VO<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//反序列化</span></span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>序列化API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，支持各种各种Java基本类型和JavaBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，返回JSON字符串的utf-8 bytes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toJSONBytes(Object object, SerializerFeature... features);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，写入到Writer中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeJSONString</span><span class="params">(Writer writer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       Object object, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，按UTF-8编码写入到OutputStream中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">writeJSONString</span><span class="params">(OutputStream os, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            Object object, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            SerializerFeature... features)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>反序列化API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String jsonStr, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(<span class="keyword">byte</span>[] jsonBytes,  // UTF<span class="number">-8</span>格式的JSON字符串</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为泛型类型的JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    TypeReference&lt;T&gt; type, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列为JSONObject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>支持的时间格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String            defaultPatttern    = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 H时m分s秒"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter ISO_FIXED_FORMAT =</span><br><span class="line">        DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).withZone(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String formatter_iso8601_pattern     = <span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>目前没有废弃的SerializerFeature介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QuoteFieldNames <span class="comment">// key使用引号</span></span><br><span class="line">UseSingleQuotes <span class="comment">// 使用单引号</span></span><br><span class="line">WriteMapNullValue <span class="comment">// 输出Map的null值</span></span><br><span class="line">WriteEnumUsingToString <span class="comment">// 枚举属性输出toString的结果</span></span><br><span class="line">WriteEnumUsingName <span class="comment">// 枚举数据输出name</span></span><br><span class="line">UseISO8601DateFormat <span class="comment">// 使用日期格式</span></span><br><span class="line">WriteNullListAsEmpty <span class="comment">// List为空则输出[]</span></span><br><span class="line">WriteNullStringAsEmpty <span class="comment">// String为空则输出""</span></span><br><span class="line">WriteNullNumberAsZero <span class="comment">// Number类型为空则输出0</span></span><br><span class="line">WriteNullBooleanAsFalse <span class="comment">// Boolean类型为空则输出false</span></span><br><span class="line">SkipTransientField <span class="comment">// 忽略使用了transient关键字的内容</span></span><br><span class="line">SortField <span class="comment">// 排序字段</span></span><br></pre></td></tr></table></figure><ul><li>支持多个SerializerFeature同时作用</li></ul></li></ol><h2 id="Gson基础"><a href="#Gson基础" class="headerlink" title="Gson基础"></a>Gson基础</h2><ol><li><p>源码地址：<a href="https://github.com/google/gson" target="_blank" rel="noopener">https://github.com/google/gson</a></p></li><li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Gson</code>序列化、反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonStr = gson.toJson(beanObject); <span class="comment">// 序列化</span></span><br><span class="line">BeanType bean = gson.fromJson(jsonData, BeanType<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 反序列化</span></span><br></pre></td></tr></table></figure></li><li><p><code>Gson</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GSONTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"['北京','天津','杭州']"</span>;</span><br><span class="line"></span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        <span class="comment">//解析对象：第一个参数：待解析的字符串 第二个参数结果数据类型的Class对象</span></span><br><span class="line">        Grade grade=gson.fromJson(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        <span class="comment">//解析数组要求使用Type</span></span><br><span class="line">        ArrayList&lt;String&gt; list=gson.fromJson(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//将对象转换为诶JSON格式字符串</span></span><br><span class="line">        String json=gson.toJson(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Jackson基础"><a href="#Jackson基础" class="headerlink" title="Jackson基础"></a>Jackson基础</h2><ol><li><p>源码地址：<a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-databind</a></p></li><li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Jackson</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JackSonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;\"id\":1,\"name\":\"JAVAEE-1703\",\"stus\":[&#123;\"id\":101,\"name\":\"刘一\",\"age\":16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"[\"北京\",\"天津\",\"杭州\"]"</span>;</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Grade grade=mapper.readValue(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        ArrayList&lt;String&gt; list=mapper.readValue(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException</span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式字符串</span></span><br><span class="line">        String json=mapper.writeValueAsString(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>序列化这部分主要是看官方文档以及一些比较有价值的博客，示例代码都不太想写了，写规范的<code>json</code>是要遵守规则的，否则会出现问题！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;序列化和反序列化是编程语言中的一个概念，在Java里是一个较为基础的知识点，但是什么是序列化和反序列化，有什么作用，底层实现原理是什么，一连
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot ELK Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/02/SpringBoot-ELK-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/02/SpringBoot-ELK-Quick-Start/</id>
    <published>2020-10-02T12:36:20.000Z</published>
    <updated>2020-10-02T15:29:20.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>随着互联网的快速发展，系统越来越庞大，依赖肉眼分析日志文件来排查问题的方式渐渐凸显出一些问题：</p><ul><li>分布式集群环境下，服务器数量可能达到成百上千，如何准确定位？</li><li>微服务架构中，如何根据异常信息，定位其他各服务的上下文信息？</li><li>随着日志文件的不断增大，可能面临在服务器上不能直接打开的尴尬。</li><li>文本搜索太慢、无法多维度查询等… …</li></ul><p>面临这些问题，就需要集中化的日志管理，将所有服务器节点上的日志统一收集，管理，访问。ELK（Elasticsearch Logstash Kibana）的强大在之前的文章中有介绍过，这里主要记录如何在SpringBoot中使用ELK记录日志。后续可能还会将ELK引入项目中作为搜索引擎提供搜索功能，这里先记录下日志记录功能。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p><code>Elasticsearch</code>基于 Lucene 开发，目前使用最广的开源搜索引擎之一，是一个分布式的搜索和分析引擎，可以用于全文检索、结构化检索和分析，并能将这三者结合起来。</p></li><li><p><code>Logstash</code>简单来说就是一根具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端，与此同时这根管道还可以根据需求在中间加上滤网，提供了很多功能强大的滤网以满足各种应用场景。</p></li><li><p><code>Kibana</code>是一个开源的分析与可视化平台，可以用<code>Kibana</code>搜索、查看、交互存放在<code>Elasticsearch</code>索引里的数据，使用各种不同的图标、表格、地图等，<code>Kibana</code>能够很轻易的展示高级数据分析与可视化。</p></li><li><p><code>Logstash</code>可以从本地磁盘，网络服务（自己监听端口，接受用户日志），消息队列中收集各种各样的日志，然后进行过滤分析，并将日志输出到<code>Elasticsearch</code>中。</p></li><li><p>轻量级数据采集器Beats官网：<a href="https://www.elastic.co/cn/beats/" target="_blank" rel="noopener">https://www.elastic.co/cn/beats/</a></p></li><li><p>ELKB架构图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4c796fcaa7eea35a4d48bb6a1efee623-206417" alt="ELK架构图"></p></li><li><p>ELKR架构图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/57d725d8092bef5760dac89f00892ced-246693" alt="ELKR架构图"></p></li><li><p>程序写入日志时序图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f852ca8e0dd5fbbcdd2377edddc11d0d-70104" alt="程序写入日志时序图"></p></li><li><p>ELK收集日志及Kibina查询日志时序图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/56d44272ab155a82b18aacf1a22f5a7f-123940" alt="ELK收集日志及Kibina查询日志时序图"></p></li></ol><h2 id="ELK环境构建（Docker单机）"><a href="#ELK环境构建（Docker单机）" class="headerlink" title="ELK环境构建（Docker单机）"></a>ELK环境构建（Docker单机）</h2><ol><li><p><strong>注意版本保持一致，这里都使用7.6.2版本！</strong></p></li><li><p>Docker镜像拉取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull logstash:7.6.2</span><br><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>在要启动的镜像的命令处创建一个<code>elk</code>目录，主要用于放置ELK的数据和配置，在<code>elk</code>目录中添加<code>esdata</code>目录，给予777权限，然后运行下面的docker命令，用于启动<code>elasticsearch</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch \</span><br><span class="line">-v "$PWD/esdata":/usr/share/elasticsearch/data \</span><br><span class="line">-e "discovery.type=single-node" \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>然后访问启动<code>elasticsearch</code>服务的主机的9200端口，看到如下类似内容就表示启动成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"46f533f30381"</span>,</span><br><span class="line"><span class="attr">"cluster_name"</span>: <span class="string">"docker-cluster"</span>,</span><br><span class="line"><span class="attr">"cluster_uuid"</span>: <span class="string">"4HvY1D4PSqWzRNANscHFEw"</span>,</span><br><span class="line"><span class="attr">"version"</span>: &#123;</span><br><span class="line"><span class="attr">"number"</span>: <span class="string">"7.6.2"</span>,</span><br><span class="line"><span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line"><span class="attr">"build_type"</span>: <span class="string">"docker"</span>,</span><br><span class="line"><span class="attr">"build_hash"</span>: <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line"><span class="attr">"build_date"</span>: <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line"><span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"lucene_version"</span>: <span class="string">"8.4.0"</span>,</span><br><span class="line"><span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line"><span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用如下命令启动<code>Kibana</code>服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">--link elasticsearch:elasticsearch \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>等待启动成功之后就可以访问启动<code>Kibana</code>服务的主机的5601端口，可以看到<code>Kibana</code>的主页。</p></li><li><p>在<code>elk</code>目录下创建<code>logstash</code>、<code>logstash/conf</code>、<code>logstash/pipeline</code>、<code>logstash/data</code>目录，在<code>logstash/conf</code>目录下创建<code>jvm.options</code>、<code>log4j2.properties</code>、<code>logstash.yml</code>、<code>pipelines.yml</code>、<code>startup.options</code>文件，文件内容分别如下：</p><ul><li><p><code>jvm.options</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## JVM configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="attr">-Xms1g</span></span><br><span class="line"><span class="attr">-Xmx1g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">## Expert settings</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## All settings below this section are considered</span></span><br><span class="line"><span class="comment">## expert settings. Don't tamper with them unless</span></span><br><span class="line"><span class="comment">## you understand what you are doing</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC configuration</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseConcMarkSweepGC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Locale</span></span><br><span class="line"><span class="comment"># Set the locale language</span></span><br><span class="line"><span class="comment">#-Duser.language=en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale country</span></span><br><span class="line"><span class="comment">#-Duser.country=US</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale variant, if any</span></span><br><span class="line"><span class="comment">#-Duser.variant=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## basic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the I/O temp directory</span></span><br><span class="line"><span class="comment">#-Djava.io.tmpdir=$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set to headless, just in case</span></span><br><span class="line"><span class="meta">-Djava.awt.headless</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ensure UTF-8 encoding by default (e.g. filenames)</span></span><br><span class="line"><span class="meta">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use our provided JNA always versus the system one</span></span><br><span class="line"><span class="comment">#-Djna.nosys=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn on JRuby invokedynamic</span></span><br><span class="line"><span class="meta">-Djruby.compile.invokedynamic</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># Force Compilation</span></span><br><span class="line"><span class="meta">-Djruby.jit.threshold</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Make sure joni regexp interruptability is enabled</span></span><br><span class="line"><span class="meta">-Djruby.regexp.interruptible</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## heap dumps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a heap dump when an allocation from the Java heap fails</span></span><br><span class="line"><span class="comment"># heap dumps are created in the working directory of the JVM</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># specify an alternative path for heap dumps</span></span><br><span class="line"><span class="comment"># ensure the directory exists and has sufficient space</span></span><br><span class="line"><span class="comment">#-XX:HeapDumpPath=$&#123;LOGSTASH_HOME&#125;/heapdump.hprof</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC logging</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCTimeStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDateStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintClassHistogram</span></span><br><span class="line"><span class="comment">#-XX:+PrintTenuringDistribution</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCApplicationStoppedTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log GC status to a file with time stamps</span></span><br><span class="line"><span class="comment"># ensure the directory exists</span></span><br><span class="line"><span class="comment">#-Xloggc:$&#123;LS_GC_LOG_FILE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Entropy source for randomness</span></span><br><span class="line"><span class="meta">-Djava.security.egd</span>=<span class="string">file:/dev/urandom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the logging context from parent threads to children</span></span><br><span class="line"><span class="meta">-Dlog4j2.isThreadContextMapInheritable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p><code>log4j2.properties</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">status</span> = <span class="string">error</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">LogstashPropertiesConfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.console.name</span> = <span class="string">plain_console</span></span><br><span class="line"><span class="meta">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="meta">appender.console.layout.pattern</span> = <span class="string">[%d&#123;ISO8601&#125;][%-5p][%-25c]%notEmpty&#123;[%X&#123;pipeline.id&#125;]&#125; %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.json_console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.json_console.name</span> = <span class="string">json_console</span></span><br><span class="line"><span class="meta">appender.json_console.layout.type</span> = <span class="string">JSONLayout</span></span><br><span class="line"><span class="meta">appender.json_console.layout.compact</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">appender.json_console.layout.eventEol</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">rootLogger.level</span> = <span class="string">$&#123;sys:ls.log.level&#125;</span></span><br><span class="line"><span class="meta">rootLogger.appenderRef.console.ref</span> = <span class="string">$&#123;sys:ls.log.format&#125;_console</span></span><br></pre></td></tr></table></figure></li><li><p><code>logstash.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">logstash-203</span></span><br><span class="line"><span class="comment"># 日志文件目录配置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/logstash/logs</span></span><br><span class="line"><span class="comment"># # 验证配置文件及存在性</span></span><br><span class="line"><span class="attr">config.test_and_exit:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 配置文件改变时是否自动加载</span></span><br><span class="line"><span class="attr">config.reload.automatic:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 重新加载配置文件间隔</span></span><br><span class="line"><span class="attr">config.reload.interval:</span> <span class="string">60s</span></span><br><span class="line"><span class="comment"># # debug模式 开启后会打印解析后的配置文件 包括密码等信息 慎用</span></span><br><span class="line"><span class="comment"># # 需要同时配置日志等级为debug</span></span><br><span class="line"><span class="attr">config.debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">log.level:</span> <span class="string">debug</span></span><br><span class="line"><span class="comment"># # The bind address for the metrics REST endpoint.</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># # 日志格式 json/plain</span></span><br><span class="line"><span class="attr">log.format:</span> <span class="string">json</span></span><br></pre></td></tr></table></figure></li><li><p><code>pipelines.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is where you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="comment"># For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="comment">#   https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br></pre></td></tr></table></figure></li><li><p><code>startup.options</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># These settings are ONLY used by $LS_HOME/bin/system-install to create a custom</span></span><br><span class="line"><span class="comment"># startup script for Logstash and is not used by Logstash itself. It should</span></span><br><span class="line"><span class="comment"># automagically use the init system (systemd, upstart, sysv, etc.) that your</span></span><br><span class="line"><span class="comment"># Linux distribution uses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After changing anything here, you need to re-run $LS_HOME/bin/system-install</span></span><br><span class="line"><span class="comment"># as root to push the changes to the init script.</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override Java location</span></span><br><span class="line"><span class="comment">#JAVACMD=/usr/bin/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a home directory</span></span><br><span class="line"><span class="attr">LS_HOME</span>=<span class="string">/usr/share/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logstash settings directory, the path which contains logstash.yml</span></span><br><span class="line"><span class="attr">LS_SETTINGS_DIR</span>=<span class="string">/etc/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to logstash</span></span><br><span class="line"><span class="attr">LS_OPTS</span>=<span class="string">"--path.settings $&#123;LS_SETTINGS_DIR&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to java</span></span><br><span class="line"><span class="attr">LS_JAVA_OPTS</span>=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pidfiles aren't used the same way for upstart and systemd; this is for sysv users.</span></span><br><span class="line"><span class="attr">LS_PIDFILE</span>=<span class="string">/var/run/logstash.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user and group id to be invoked as</span></span><br><span class="line"><span class="attr">LS_USER</span>=<span class="string">logstash</span></span><br><span class="line"><span class="attr">LS_GROUP</span>=<span class="string">logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable GC logging by uncommenting the appropriate lines in the GC logging</span></span><br><span class="line"><span class="comment"># section in jvm.options</span></span><br><span class="line"><span class="attr">LS_GC_LOG_FILE</span>=<span class="string">/var/log/logstash/gc.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open file limit</span></span><br><span class="line"><span class="attr">LS_OPEN_FILES</span>=<span class="string">16384</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nice level</span></span><br><span class="line"><span class="attr">LS_NICE</span>=<span class="string">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change these to have the init script named and described differently</span></span><br><span class="line"><span class="comment"># This is useful when running multiple instances of Logstash on the same</span></span><br><span class="line"><span class="comment"># physical box or vm</span></span><br><span class="line"><span class="attr">SERVICE_NAME</span>=<span class="string">"logstash"</span></span><br><span class="line"><span class="attr">SERVICE_DESCRIPTION</span>=<span class="string">"logstash"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you need to run a command or script before launching Logstash, put it</span></span><br><span class="line"><span class="comment"># between the lines beginning with `read` and `EOM`, and uncomment those lines.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## read -r -d '' PRESTART &lt;&lt; EOM</span></span><br><span class="line"><span class="comment">## EOM</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在<code>logstash/pipeline</code>目录下创建<code>logstash.conf</code>文件，文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-test-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>对于多个输出（多端口）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment"> # 我们创建了两个微服务demo 所以建立两个不同的输入，将两个服务的日志分别输入到不同的索引中</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"  # 允许任意主机发送日志</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk1"      # 设定type以区分每个输入源</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4567      </span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines    # 数据格式</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk2"</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4667</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">filter</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #Only matched data are send to output.</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">output</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # For detail config for elasticsearch as output,</span></span><br><span class="line"><span class="comment">  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk1" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          # 输出时创建映射</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   # ElasticSearch 的地址和端口</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk1"         # 指定索引名</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk2" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          #The operation on ES</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   #ElasticSearch host, can be array.</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk2"         #The index to write data to.</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>对于同一个端口区分应用日志：</p><ul><li><code>logstash.conf</code>：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-%&#123;[appname]&#125;-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>SpringBoot项目日志配置文件<code>logback-spring.xml</code>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"hello"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="9"><li><p>在<code>elk</code>目录下运行下面的docker命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name logstash -p 5600:5600 \</span><br><span class="line">-v "$PWD/logstash/conf":/usr/share/logstash/config \</span><br><span class="line">-v "$PWD/logstash/data":/usr/share/logstash/data \</span><br><span class="line">-v "$PWD/logstash/logs":/usr/share/logstash/logs \</span><br><span class="line">-v "$PWD/logstash/pipeline":/usr/share/logstash/pipeline \</span><br><span class="line">--link elasticsearch:elasticsearch -d logstash:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>至此<code>ELK</code>的环境已经搭建完成，只要在项目中访问提供<code>ELK</code>服务主机的5600端口即可，如果没什么问题，应该在<code>ELK</code>主机上使用<code>docker ps</code>命令即可看到三个docker容器已经启动了：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# docker ps </span></span><br><span class="line"><span class="attr">CONTAINER</span> <span class="string">ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span></span><br><span class="line"><span class="attr">0b955f2b892a</span>        <span class="string">logstash:7.6.2        "/usr/local/bin/do..."   52 minutes ago      Up 40 minutes       5044/tcp, 9600/tcp, 0.0.0.0:5600-&gt;5600/tcp       logstash</span></span><br><span class="line"><span class="attr">c13e9a66500a</span>        <span class="string">kibana:7.6.2          "/usr/local/bin/du..."   About an hour ago   Up About an hour    0.0.0.0:5601-&gt;5601/tcp                           kibana</span></span><br><span class="line"><span class="attr">46f533f30381</span>        <span class="string">elasticsearch:7.6.2   "/usr/local/bin/do..."   About an hour ago   Up About an hour    0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker-composer.yml</code>（待验证）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="comment"># 设置集群名称为elasticsearch</span></span><br><span class="line">        <span class="attr">cluster:</span></span><br><span class="line">            <span class="string">name=elasticsearch</span></span><br><span class="line">        <span class="comment"># # 以单一节点模式启动</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">            <span class="string">type=single-node</span></span><br><span class="line">        <span class="comment"># 设置使用jvm内存大小</span></span><br><span class="line">        <span class="attr">ES_JAVA_OPTS:</span> <span class="string">-Xms512m</span> <span class="string">-Xmx512m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="comment"># 插件文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">        <span class="comment"># 数据文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/var/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 挂载logstash的配置文件</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="comment"># logstash在elasticsearch启动之后再启动</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="comment"># 可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9600</span><span class="string">:9600</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5044</span><span class="string">:5044</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"elasticsearch.hosts=http://es:9200"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml</span></span><br><span class="line"><span class="comment"># 使外网可连接</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">"ZSX"</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["ZSX"]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot日志项目"><a href="#SpringBoot日志项目" class="headerlink" title="SpringBoot日志项目"></a>SpringBoot日志项目</h2><ol><li><p>创建一个SpringBoot项目，然后在依赖中添加<code>logstash</code>依赖（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>目录下添加<code>logback-spring.xml</code>文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意<code>LOGSTASH_HOST</code>、<code>LOGSTASH_PORT</code>要和提供ELK的IP和端口一致</li></ul></li><li><p>配置文件中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>创建一个控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        log.info(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，然后在<code>Kibana</code>中就会有相应的<code>index</code>，然后添加<code>index</code>的检索就可以了，至此SpringBoot日志使用ELK检索以完成！<code>Kibana</code>中一条日志的<code>JSON</code>格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"logstash-file-test-2020.10.02"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"JfAF63QBTKzFrbF7CZbO"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">    <span class="attr">"level_value"</span>: <span class="number">20000</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"hello"</span>,</span><br><span class="line">    <span class="attr">"logger_name"</span>: <span class="string">"com.example.demo.controller"</span>,</span><br><span class="line">    <span class="attr">"thread_name"</span>: <span class="string">"http-nio-8080-exec-5"</span>,</span><br><span class="line">    <span class="attr">"@version"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"tcplog"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"192.168.37.1"</span>,</span><br><span class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2020-10-02T12:35:17.081Z"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1618</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"@timestamp"</span>: [</span><br><span class="line">      <span class="string">"2020-10-02T12:35:17.081Z"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    <span class="number">1601642117081</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ELK的功能远不止于此，这里先学习在SpringBoot项目中引用ELK进行日志记录，在生产环境出现问题的话就可以快速定位问题所在，在工作中可以作为快速接入指南进行使用。后续还可以使用ELK进行搜索引擎为项目提供搜索服务！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;随着互联网的快速发展，系统越来越庞大，依赖肉眼分析日志文件来排查问题的方式渐渐凸显出一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式集群环境下，
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot WebSocket Quick Start</title>
    <link href="https://wanderros.github.io/2020/09/30/SpringBoot-WebSocket-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/09/30/SpringBoot-WebSocket-Quick-Start/</id>
    <published>2020-09-30T08:55:45.000Z</published>
    <updated>2020-10-01T08:52:15.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议,使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。有了WebSocket技术之后，后端就可以像客户端推送消息，比如向商家客户端推送订单消息等。这里记录在SpringBoot中使用WebSocket的过程。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></li><li><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p></li><li><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p></li><li><p>WebSocket 使用 ws 或 wss 的统一资源标志符，类似于 HTTPS，其中 wss 表示在 TLS 之上的 Websocket,如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws:<span class="comment">//example.com/wsapi</span></span><br><span class="line">wss:<span class="comment">//secure.example.com/wsapi</span></span><br></pre></td></tr></table></figure></li><li><p>从分层的角度来讲，Socket 是传输控制层协议，WebSocket 是应用层协议。</p></li><li><p>WebSocket的调试可以安装一个谷歌浏览器插件<code>Browser WebSocket Client</code>（印象笔记中文档服务笔记本有保存），或者访问在线调试网址：<a href="http://www.websocket-test.com/。" target="_blank" rel="noopener">http://www.websocket-test.com/。</a></p></li><li><p>SpringFramework官方中文介绍WebSocket网址：<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket" target="_blank" rel="noopener">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket</a></p></li><li><p>尽管 WebSocket 设计为与 HTTP 兼容并以 HTTP 请求开头，但重要的是要了解这两个协议导致了截然不同的体系结构和应用程序编程模型。</p></li><li><p>应用场景：</p><ul><li>可以使网页具有动态性和交互性</li><li>新闻，邮件和社交订阅源</li><li>协作，游戏和金融应用程序</li></ul></li><li><p>服务器与Web客户端之间的双向通行策略：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/47bfa9136df7ac80c4ef082f95d28ebe-35615" alt="Web服务客户端互通策略"></p></li></ol><h2 id="创建一个WebSocket-Server端"><a href="#创建一个WebSocket-Server端" class="headerlink" title="创建一个WebSocket Server端"></a>创建一个<code>WebSocket Server</code>端</h2><ol><li><p>在创建的项目中引入maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>WebSocket处理器用来处理客户端发送的消息,常用有<code>TextWebSocketHandler</code>和<code>BinaryWebSocketHandler</code>，这里创建一个<code>TextWebSocketHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"建立连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = message.getPayload();</span><br><span class="line">        System.out.println(<span class="string">"收到消息： "</span>+msg);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"Hello"</span>+msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>afterConnectionEstablished</code> 成功创建连接后调用</li><li><code>handleTextMessage</code> 收到客户端消息后调用</li><li><code>handleTransportError</code> 连接异常时调用</li><li><code>afterConnectionClosed</code> 连接关闭后调用</li><li><code>sendMessage</code>用于向客户端发送消息</li><li><code>WebSocketSession</code>是客户端与服务端建立的回话，可以通过<code>close()</code>方法主动关闭连接</li><li><code>TextMessage</code>为收到的消息，可以通过<code>getPayload()</code>方法获取消息内容</li></ul></li><li><p>配置WebSocket，将处理器映射到指定的path上，还可以添加一些额外的配置，通过实现<code>WebSocketConfigurer</code>以及添加注解<code>@EnableWebSocket</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(chatWebSocketHandler(), <span class="string">"chat"</span>,<span class="string">"chat1"</span>) <span class="comment">// 添加消息处理器,可以添加多个path</span></span><br><span class="line">                <span class="comment">//.addInterceptors(chatHandshakeInterceptor()) // 添加握手拦截器</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>); <span class="comment">// 设置跨域</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatWebSocketHandler <span class="title">chatWebSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatHandshakeInterceptor <span class="title">chatHandshakeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line">        container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line">        container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addHandler()</code>用于添加消息处理器，并指定映射<code>path</code>，服务端WebSocket地址为 <code>ws://host:port/path</code></li><li><code>setAllowedOrigins</code>用于设置跨域</li><li><code>addInterceptors</code>用于添加拦截器</li></ul></li><li><p>创建一个握手拦截器（可选），只要实现<code>HandshakeInterceptor</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------握手前拦截"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------完成握手"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>beforeHandshake</code>握手前，该方法返回<code>true</code>表示继续建立连接，返回<code>false</code>则终止</li><li><code>afterHandshake</code>握手后动作</li></ul></li><li><p>Session空闲失效时间配置，可以增加一些配置来约束超时时间；还可以设置消息缓冲区大小等(<code>WebSocketConfigurer</code>实现的配置中注入Bean)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line"> container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line"> container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line"> <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前还没有在真实业务中使用WebSocket，但是查看调试信息可以看到公司邮箱系统是有用到WebSocket的，在后续需要的时候再继续深入吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议,使得客户端和服务器之间的数据交换变得更加简单，
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
</feed>
