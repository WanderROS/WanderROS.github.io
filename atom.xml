<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WanderROS&#39;S Daily</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wanderros.github.io/"/>
  <updated>2020-10-08T15:16:15.775Z</updated>
  <id>https://wanderros.github.io/</id>
  
  <author>
    <name>WanderROS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis高可用之Sentinel</title>
    <link href="https://wanderros.github.io/2020/10/08/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8BSentinel/"/>
    <id>https://wanderros.github.io/2020/10/08/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8BSentinel/</id>
    <published>2020-10-08T14:13:16.000Z</published>
    <updated>2020-10-08T15:16:15.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前学习过Redis的基础使用，没有涉及到高可用相关的内容，在真实业务场景中可能需要Redis的高可用，不仅仅是高并发，还有当主从环境下的主机宕机情况的快速恢复服务，这就涉及到Redis的Sentinel模式和Cluster模式。本文主要记录Snetinel模式。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>在服务中，使用单个Redis来提供缓存服务是不可靠的，而且官方宣传单机性能可以达到10w OPS（真实环境是没有的），当出现这种状况时就要分布式<code>Redis</code>了。</p></li><li><p>主从切换技术的方法是：<strong>当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong></p></li><li><p><code>Redis-Sentinel</code>本身也有单点问题，当出现问题时整个redis集群系统将无法按照预期的方式切换主从。官方建议一个健康的集群部署，至少需要3个Sentinel实例。</p></li><li><p><code>Redis-Sentinel</code>只需要配置监控Redis主节点，而集群之间可以通过主节点相互通信。典型的<code>Redis-Sentinel</code>如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e64f47a8684956ef1de9f7c4a9ff4f07-70110" alt="典型模式"></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/5c3e4c21233ba0e78b24ee69a6a5200a-47830" alt="多哨兵"></p></li><li><p>Sentinel主要执行以下三个任务：</p><ul><li>监控 (Monitor): 检查redis主、从实例是否正常运作</li><li>通知 (Notification): 监控的redis服务出现问题时，可通过API发送通知告警</li><li>自动故障迁移 (Automatic Failover): 当检测到redis主节点不能正常工作时，<code>Sentinel</code>会开始做自动故障判断、迁移等操作，先是移除失效<code>Redis</code>主节点，然后将其中一个从节点升级为新的主节点，并让失效主节点的其他从节点改为复制新的主节点。当客户端试图连接失效的主节点时，集群也会向客户端返回最新主节点的地址，使得集群可以使用新的主节点来代替失效的旧主节点</li></ul></li><li><p>Redis Sentinel 集群模式的 “仲裁会”：</p><ul><li>当一个master被sentinel集群监控时，需要为它指定一个参数，这个参数指定了当需要判决master为不可用，并且进行failover时，所需要的sentinel数量</li><li>当failover主备切换真正被触发后，failover并不会马上进行，还需要sentinel中的大多数sentinel授权后才可以进行failover</li><li>failover一旦被触发，尝试去进行failover的sentinel会去获得“大多数”sentinel的授权（如果票数比大多数还要大的时候，则询问更多的sentinel)这个区别看起来很微妙，但是很容易理解和使用</li><li>例如，集群中有5个sentinel，票数被设置为2，当2个sentinel认为一个master已经不可用了以后，将会触发failover，但是，进行failover的那个sentinel必须先获得至少3个sentinel的授权才可以实行failover。如果票数被设置为5，要达到ODOWN状态，必须所有5个sentinel都主观认为master为不可用，要进行failover，那么得获得所有5个sentinel的授权</li></ul></li><li><p>官方文档：<a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">https://redis.io/topics/sentinel</a></p></li><li><p>sentinel.conf是启动redis-sentinel的核心配置文件，可以从官网下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable/sentinel.conf</span><br></pre></td></tr></table></figure></li><li><p>修改的Sentinel配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *** IMPORTANT ***</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default Sentinel will not be reachable from interfaces different than</span></span><br><span class="line"><span class="comment"># localhost, either use the 'bind' directive to bind to a list of network</span></span><br><span class="line"><span class="comment"># interfaces, or disable protected mode with "protected-mode no" by</span></span><br><span class="line"><span class="comment"># adding it to this configuration file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Before doing that MAKE SURE the instance is protected from the outside</span></span><br><span class="line"><span class="comment"># world via firewalling or other means.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example you may use one of the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 192.168.1.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># protected-mode no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port &lt;sentinel-port&gt;</span></span><br><span class="line"><span class="comment"># The port that this sentinel instance will run on</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis Sentinel does not run as a daemon. Use 'yes' if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis-sentinel.pid when</span></span><br><span class="line"><span class="comment"># daemonized.</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When running daemonized, Redis Sentinel writes a pid file in</span></span><br><span class="line"><span class="comment"># /var/run/redis-sentinel.pid by default. You can specify a custom pid file</span></span><br><span class="line"><span class="comment"># location here.</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Sentinel to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel announce-ip &lt;ip&gt;</span></span><br><span class="line"><span class="comment"># sentinel announce-port &lt;port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The above two configuration directives are useful in environments where,</span></span><br><span class="line"><span class="comment"># because of NAT, Sentinel is reachable from outside via a non-local address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When announce-ip is provided, the Sentinel will claim the specified IP address</span></span><br><span class="line"><span class="comment"># in HELLO messages used to gossip its presence, instead of auto-detecting the</span></span><br><span class="line"><span class="comment"># local address as it usually does.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Similarly when announce-port is provided and is valid and non-zero, Sentinel</span></span><br><span class="line"><span class="comment"># will announce the specified TCP port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The two options don't need to be used together, if only announce-ip is</span></span><br><span class="line"><span class="comment"># provided, the Sentinel will announce the specified IP and the server port</span></span><br><span class="line"><span class="comment"># as specified by the "port" option. If only announce-port is provided, the</span></span><br><span class="line"><span class="comment"># Sentinel will announce the auto-detected local IP and the specified port.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel announce-ip 1.2.3.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir &lt;working-directory&gt;</span></span><br><span class="line"><span class="comment"># Every long running process should have a well-defined working directory.</span></span><br><span class="line"><span class="comment"># For Redis Sentinel to chdir to /tmp at startup is the simplest thing</span></span><br><span class="line"><span class="comment"># for the process to don't interfere with administrative tasks such as</span></span><br><span class="line"><span class="comment"># unmounting filesystems.</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">"/tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">myid 802e66d5d163ee0477ba40d83c94d11de9e1395b</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Tells Sentinel to monitor this master, and to consider it in O_DOWN</span></span><br><span class="line"><span class="comment"># (Objectively Down) state only if at least &lt;quorum&gt; sentinels agree.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that whatever is the ODOWN quorum, a Sentinel will require to</span></span><br><span class="line"><span class="comment"># be elected by the majority of the known Sentinels in order to</span></span><br><span class="line"><span class="comment"># start a failover, so no failover can be performed in minority.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Replicas are auto-discovered, so you don't need to specify replicas in</span></span><br><span class="line"><span class="comment"># any way. Sentinel itself will rewrite this configuration file adding</span></span><br><span class="line"><span class="comment"># the replicas using additional configuration options.</span></span><br><span class="line"><span class="comment"># Also note that the configuration file is rewritten when a</span></span><br><span class="line"><span class="comment"># replica is promoted to master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> master name should not include special characters or spaces.</span></span><br><span class="line"><span class="comment"># The valid charset is A-z 0-9 and the three characters ".-_".</span></span><br><span class="line"><span class="comment">#sentinel monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the password to use to authenticate with the master and replicas.</span></span><br><span class="line"><span class="comment"># Useful if there is a password set in the Redis instances to monitor.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that the master password is also used for replicas, so it is not</span></span><br><span class="line"><span class="comment"># possible to set a different password in masters and replicas instances</span></span><br><span class="line"><span class="comment"># if you want to be able to monitor these instances with Sentinel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However you can have Redis instances without the authentication enabled</span></span><br><span class="line"><span class="comment"># mixed with Redis instances requiring the authentication (as long as the</span></span><br><span class="line"><span class="comment"># password set is the same for all the instances requiring the password) as</span></span><br><span class="line"><span class="comment"># the AUTH command will have no effect in Redis instances with authentication</span></span><br><span class="line"><span class="comment"># switched off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-user &lt;master-name&gt; &lt;username&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is useful in order to authenticate to instances having ACL capabilities,</span></span><br><span class="line"><span class="comment"># that is, running Redis 6.0 or greater. When just auth-pass is provided the</span></span><br><span class="line"><span class="comment"># Sentinel instance will authenticate to Redis using the old "AUTH &lt;pass&gt;"</span></span><br><span class="line"><span class="comment"># method. When also an username is provided, it will use "AUTH &lt;user&gt; &lt;pass&gt;".</span></span><br><span class="line"><span class="comment"># In the Redis servers side, the ACL to provide just minimal access to</span></span><br><span class="line"><span class="comment"># Sentinel instances, should be configured along the following lines:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     user sentinel-user &gt;somepassword +client +subscribe +publish \</span></span><br><span class="line"><span class="comment">#                        +ping +info +multi +slaveof +config +client +exec on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Number of milliseconds the master (or any attached replica or sentinel) should</span></span><br><span class="line"><span class="comment"># be unreachable (as in, not acceptable reply to PING, continuously, for the</span></span><br><span class="line"><span class="comment"># specified period) in order to consider it in S_DOWN state (Subjectively</span></span><br><span class="line"><span class="comment"># Down).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 30 seconds.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">deny-scripts-reconfig yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># requirepass &lt;password&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure Sentinel itself to require a password, however when doing</span></span><br><span class="line"><span class="comment"># so Sentinel will try to authenticate with the same password to all the</span></span><br><span class="line"><span class="comment"># other Sentinels. So you need to configure all your Sentinels in a given</span></span><br><span class="line"><span class="comment"># group with the same "requirepass" password. Check the following documentation</span></span><br><span class="line"><span class="comment"># for more info: https://redis.io/topics/sentinel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># How many replicas we can reconfigure to point to the new replica simultaneously</span></span><br><span class="line"><span class="comment"># during the failover. Use a low number if you use the replicas to serve query</span></span><br><span class="line"><span class="comment"># to avoid that all the replicas will be unreachable at about the same</span></span><br><span class="line"><span class="comment"># time while performing the synchronization with the master.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor myredis 172.17.0.3 6379 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the failover timeout in milliseconds. It is used in many ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to re-start a failover after a previous failover was</span></span><br><span class="line"><span class="comment">#   already tried against the same master by a given Sentinel, is two</span></span><br><span class="line"><span class="comment">#   times the failover timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed for a replica replicating to a wrong master according</span></span><br><span class="line"><span class="comment">#   to a Sentinel current configuration, to be forced to replicate</span></span><br><span class="line"><span class="comment">#   with the right master, is exactly the failover timeout (counting since</span></span><br><span class="line"><span class="comment">#   the moment a Sentinel detected the misconfiguration).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The time needed to cancel a failover that is already in progress but</span></span><br><span class="line"><span class="comment">#   did not produced any configuration change (SLAVEOF NO ONE yet not</span></span><br><span class="line"><span class="comment">#   acknowledged by the promoted replica).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The maximum time a failover in progress waits for all the replicas to be</span></span><br><span class="line"><span class="comment">#   reconfigured as replicas of the new master. However even after this time</span></span><br><span class="line"><span class="comment">#   the replicas will be reconfigured by the Sentinels anyway, but not with</span></span><br><span class="line"><span class="comment">#   the exact parallel-syncs progression as specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 3 minutes.</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">config-epoch myredis 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script and sentinel reconfig-script are used in order</span></span><br><span class="line"><span class="comment"># to configure scripts that are called to notify the system administrator</span></span><br><span class="line"><span class="comment"># or to reconfigure clients after a failover. The scripts are executed</span></span><br><span class="line"><span class="comment"># with the following rules for error handling:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "1" the execution is retried later (up to a maximum</span></span><br><span class="line"><span class="comment"># number of times currently set to 10).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script exits with "2" (or an higher value) the script execution is</span></span><br><span class="line"><span class="comment"># not retried.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If script terminates because it receives a signal the behavior is the same</span></span><br><span class="line"><span class="comment"># as exit code 1.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A script has a maximum running time of 60 seconds. After this limit is</span></span><br><span class="line"><span class="comment"># reached the script is terminated with a SIGKILL and the execution retried.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTIFICATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Call the specified notification script for any sentinel event that is</span></span><br><span class="line"><span class="comment"># generated in the WARNING level (for instance -sdown, -odown, and so forth).</span></span><br><span class="line"><span class="comment"># This script should notify the system administrator via email, SMS, or any</span></span><br><span class="line"><span class="comment"># other messaging system, that there is something wrong with the monitored</span></span><br><span class="line"><span class="comment"># Redis systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script is called with just two arguments: the first is the event type</span></span><br><span class="line"><span class="comment"># and the second the event description.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The script must exist and be executable in order for sentinel to start if</span></span><br><span class="line"><span class="comment"># this option is provided.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel notification-script mymaster /var/redis/notify.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CLIENTS RECONFIGURATION SCRIPT</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When the master changed because of a failover a script can be called in</span></span><br><span class="line"><span class="comment"># order to perform application-specific tasks to notify the clients that the</span></span><br><span class="line"><span class="comment"># configuration has changed and the master is at a different address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following arguments are passed to the script:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;state&gt; is currently always "failover"</span></span><br><span class="line"><span class="comment"># &lt;role&gt; is either "leader" or "observer"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The arguments from-ip, from-port, to-ip, to-port are used to communicate</span></span><br><span class="line"><span class="comment"># the old address of the master and the new address of the elected replica</span></span><br><span class="line"><span class="comment"># (now a master).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be resistant to multiple invocations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default SENTINEL SET will not be able to change the notification-script</span></span><br><span class="line"><span class="comment"># and client-reconfig-script at runtime. This avoids a trivial security issue</span></span><br><span class="line"><span class="comment"># where clients can set the script to anything and trigger a failover in order</span></span><br><span class="line"><span class="comment"># to get the program executed.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">leader-epoch myredis 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REDIS COMMANDS RENAMING</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Sometimes the Redis server has certain commands, that are needed for Sentinel</span></span><br><span class="line"><span class="comment"># to work correctly, renamed to unguessable strings. This is often the case</span></span><br><span class="line"><span class="comment"># of CONFIG and SLAVEOF in the context of providers that provide Redis as</span></span><br><span class="line"><span class="comment"># a service, and don't want the customers to reconfigure the instances outside</span></span><br><span class="line"><span class="comment"># of the administration console.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In such case it is possible to tell Sentinel to use different command names</span></span><br><span class="line"><span class="comment"># instead of the normal ones. For example if the master "mymaster", and the</span></span><br><span class="line"><span class="comment"># associated replicas, have "CONFIG" all renamed to "GUESSME", I could use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL rename-command mymaster CONFIG GUESSME</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After such configuration is set, every time Sentinel would use CONFIG it will</span></span><br><span class="line"><span class="comment"># use GUESSME instead. Note that there is no actual need to respect the command</span></span><br><span class="line"><span class="comment"># case, so writing "config guessme" is the same in the example above.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL SET can also be used in order to perform this configuration at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to set a command back to its original name (undo the renaming), it</span></span><br><span class="line"><span class="comment"># is possible to just rename a command to itsef:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SENTINEL rename-command mymaster CONFIG CONFIG</span></span><br><span class="line"><span class="comment"># Generated by CONFIG REWRITE</span></span><br></pre></td></tr></table></figure><ul><li>多个Sentinel则需要修改端口号</li></ul></li></ol><h2 id="Docker环境部署"><a href="#Docker环境部署" class="headerlink" title="Docker环境部署"></a>Docker环境部署</h2><ol><li><p>一主多从：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-master -p 6379:6379 redis</span><br><span class="line">docker run -itd --name redis-slave -p 6380:6379 --link redis-master:redis-master redis</span><br><span class="line">docker run -itd --name redis-slave1 -p 6381:6379 --link redis-master:redis-master redis</span><br></pre></td></tr></table></figure></li><li><p>需要进入两个从节点使用客户端执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof redis-master 6379</span><br></pre></td></tr></table></figure></li><li><p>在主节点中执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.17.0.2,port=6379,state=online,offset=474223,lag=1</span><br><span class="line">slave1:ip=172.17.0.4,port=6379,state=online,offset=474357,lag=0</span><br><span class="line">master_replid:92708a81b61dcd5b6067dedd7138e8f89a8cc996</span><br><span class="line">master_replid2:8da9d74e82754291f0d18563ac2f546a5d20a240</span><br><span class="line">master_repl_offset:474491</span><br><span class="line">second_repl_offset:107113</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:90764</span><br><span class="line">repl_backlog_histlen:383728</span><br></pre></td></tr></table></figure></li><li><p>启动三个Sentinel：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name redis-sentinel1 -p 26379:26379 -v /root/sentinel1.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br><span class="line"></span><br><span class="line">docker run -it --name redis-sentinel2 -p 26380:26380 -v /root/sentinel2.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br><span class="line"></span><br><span class="line">docker run -it --name redis-sentinel3 -p 26381:26381 -v /root/sentinel3.conf:/data/sentinel.conf -d --link redis-master:redis-master redis /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>在每个Sentinel中执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /data/sentinel.conf</span><br></pre></td></tr></table></figure></li><li><p>在任意一个节点中使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info sentinel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=myredis,status=ok,address=172.17.0.3:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure></li><li><p>可以在Redis主节点上启动客户端执行下面命令测试主节点切换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug sleep 60</span><br></pre></td></tr></table></figure></li><li><p>上述过程人工参与的过程太多，需要考虑如何自动化操作，不然对于运维人员来说，实在是太痛苦了，有痛点的地方就有需求，之前看到搜狐有开发一款Redis运维工具，但是没有去尝试，后续可已考虑自动化。</p></li></ol><h2 id="Java中使用哨兵模式"><a href="#Java中使用哨兵模式" class="headerlink" title="Java中使用哨兵模式"></a>Java中使用哨兵模式</h2><ol><li><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端连接原理：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/897d6a3b67b5636303d266a39c949a0f-18480" alt="客户端连接原理"></p></li><li><p>测试（仅供参考）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSentinels</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSentinel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 哨兵信息</span></span><br><span class="line">        Set&lt;String&gt; sentinels = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">"192.168.37.128:26379"</span>,</span><br><span class="line">                <span class="string">"192.168.37.128:26380"</span>,<span class="string">"192.168.37.128:26381"</span>));</span><br><span class="line">        <span class="comment">// 创建连接池</span></span><br><span class="line">        JedisSentinelPool pool = <span class="keyword">new</span> JedisSentinelPool(<span class="string">"myredis"</span>, sentinels,jedisPoolConfig,<span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 获取客户端</span></span><br><span class="line">        Jedis jedis = pool.getResource();</span><br><span class="line">        <span class="comment">// 执行两个命令</span></span><br><span class="line">        jedis.set(<span class="string">"mykey"</span>, <span class="string">"myvalue"</span>);</span><br><span class="line">        String value = jedis.get(<span class="string">"mykey"</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ol><li>在使用的过程中，随着业务的增加不可避免的要对Redis进行扩容，熟知的扩容方式有两种，一种是垂直扩容，一种是水平扩容。</li><li>垂直扩容表示通过加内存方式来增加整个缓存体系的容量比如将缓存大小由2G调整到4G,这种扩容不需要应用程序支持；水平扩容表示表示通过增加节点的方式来增加整个缓存体系的容量比如本来有1个节点变成2个节点，这种扩容方式需要应用程序支持。</li><li>垂直扩容看似最便捷的扩容，但是受到机器的限制，一个机器的内存是有限的，所以垂直扩容到一定阶段不可避免的要进行水平扩容，如果预留出很多节点感觉又是对资源的一种浪费。</li><li>Redis Sentinel 水平扩容一直都是程序猿心中的痛点，因为水平扩容牵涉到数据的迁移。迁移过程一方面要保证自己的业务是可用的，一方面要保证尽量不丢失数据所以数据能不迁移就尽量不迁移。</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis Sentinel不失为一种高可用方案，在业务量不是特别大的时候可以考虑，但是业务量大就不行，需要Cluster模式！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;之前学习过Redis的基础使用，没有涉及到高可用相关的内容，在真实业务场景中可能需要Redis的高可用，不仅仅是高并发，还有当主从环境下的主
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://wanderros.github.io/categories/Redis/"/>
    
    
      <category term="Base" scheme="https://wanderros.github.io/tags/Base/"/>
    
      <category term="Redis" scheme="https://wanderros.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>项目开发中的抽象概念</title>
    <link href="https://wanderros.github.io/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A6%82%E5%BF%B5/"/>
    <id>https://wanderros.github.io/2020/10/08/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A6%82%E5%BF%B5/</id>
    <published>2020-10-08T02:53:59.000Z</published>
    <updated>2020-10-08T14:09:43.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在项目开发中，阅读不同开发人员的代码时，会因为开发人员的命名习惯不同，而出现项目中的文件夹名称晦涩难懂，因此，在这里记录开发过程中的各种抽象概念。</p><hr><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object(对象)"></a>Object(对象)</h2><ol><li>PO(Persistant Object)持久对象：可以看成是与数据库中的表相映射的对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</li><li>DO(Domain Object)领域对象：从现实世界中抽象出来的有形或无形的业务实体。</li><li>TO(Transfer Object)传输对象：不同的应用程序之间传输的对象。</li><li>DTO(Data Transfer Object)数据传输对象：泛指用于展示层与服务层之间的数据传输对象。</li><li>VO（View Object）视图对象：用于业务层之间的数据传递的对象。</li><li>BO(Business Object)业务对象：用于表示业务逻辑的对象。</li><li>POJO（Plain Ordinary Java Object）简单的Java对象：DO/DTO/BO/VO的统称。</li><li>DAO(Data Access Object) 数据访问对象：DAO中包含了歌中歌数据库的操作方法，结合PO完成对数据库的各种操作。</li></ol><h2 id="Manufactuce（制造业）"><a href="#Manufactuce（制造业）" class="headerlink" title="Manufactuce（制造业）"></a>Manufactuce（制造业）</h2><ol><li>OEM(Original Equipment Manufactuce)原始设备生产商：“代工生产”或“贴牌生产”。</li><li>ODM(Original Design Manufactuce)原始设计制造商：客户只需向ODM服务商提出产品的功能、性能甚至只需提供产品的构思，ODM服务商就可以将产品从设想变为现实。</li><li>OBM(Orignal Brand Manufactuce)原始品牌制造商：生产商自行创立产品品牌，生产、销售拥有自主品牌的产品。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在项目开发中，阅读不同开发人员的代码时，会因为开发人员的命名习惯不同，而出现项目中的文件夹名称晦涩难懂，因此，在这里记录开发过程中的各种抽象
      
    
    </summary>
    
    
      <category term="Base" scheme="https://wanderros.github.io/categories/Base/"/>
    
    
      <category term="Base" scheme="https://wanderros.github.io/tags/Base/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 对象存储minIO Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/08/SpringBoot-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8minIO-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/08/SpringBoot-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8minIO-Quick-Start/</id>
    <published>2020-10-08T00:40:27.000Z</published>
    <updated>2020-10-08T14:09:43.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>minIO是对象存储服务的一种，与Amazon S3云存储服务兼容，非常适合存储非结构化数据，比如照片、视频、日志文件等。阿里云提供了OSS兑现存储服务，提供的服务相对来说比minIO要多，但是minIO也不失为一种自建对象存储服务的方案。本文记录minIO的部署以及使用SprinBoot项目访问对象存储服务。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>存储桶命名规则：</p><ul><li>存储桶名称必须长在 3 到 63 个字符之间</li><li>存储桶名称只能由小写字母、数字、点 （.） 和连字符 （-） 组成</li><li>存储桶名称必须以字母或数字开头和结尾</li><li>存储桶名称不得格式化为 IP 地址（例如，192.168.5.4）</li><li>存储桶名称在分区中必须是唯一的</li><li>与 Amazon S3 传输加速一起使用的存储桶的名称中不能有点 （.）</li></ul></li><li><p>对象存储是面向对象/文件的、海量的互联网存储，也可以直接被称为“云存储”。</p></li><li><p>对象存储没有像文件系统那样有一个很多层级的文件结构，而是只有一个“桶”（bucket）的概念（也就是存储空间），“桶”里面全部都是对象，是一种非常扁平化的存储方式。</p></li><li><p>对象存储（Object-based Storage）是一种新的网络存储架构，基于对象存储技术的设备就是对象存储设备（Object-based Storage Device）简称OSD。</p></li><li><p>对象存储是一种基于对象的存储设备，具备智能、自我管理能力，通过web服务协议(如：REST、SOAP)实现对象的读写和存储资源的访问。</p></li><li><p>minIO官网文档：</p><ul><li>英文：<a href="https://docs.min.io/" target="_blank" rel="noopener">https://docs.min.io/</a></li><li>中文：<a href="https://docs.min.io/cn/" target="_blank" rel="noopener">https://docs.min.io/cn/</a></li></ul></li></ol><ol start="7"><li>Minio可以做为云存储的解决方案用来保存海量的图片，视频，文档。</li></ol><h2 id="minIO环境搭建（Docker）"><a href="#minIO环境搭建（Docker）" class="headerlink" title="minIO环境搭建（Docker）"></a>minIO环境搭建（Docker）</h2><ol><li><p>拉取镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure></li><li><p>实例化minIO容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">  -e "MINIO_ACCESS_KEY=minio" \</span><br><span class="line">  -e "MINIO_SECRET_KEY=gulimall_minio" \</span><br><span class="line">  -v /Users/wander/docker/minio/data:/data \</span><br><span class="line">  -v /Users/wander/docker/minio/config:/root/.minio \</span><br><span class="line">  -d minio/minio server /data</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:9000，输入minio以及gulimall_minio即可访问对象存储后台管理页面。">http://localhost:9000，输入minio以及gulimall_minio即可访问对象存储后台管理页面。</a></p></li></ol><h2 id="SpringBoot项目访问minIO"><a href="#SpringBoot项目访问minIO" class="headerlink" title="SpringBoot项目访问minIO"></a>SpringBoot项目访问minIO</h2><ol><li><p>创建一个SpringBoot项目，添加如下依赖（maven）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.jlefebure/spring-boot-starter-minio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jlefebure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置minIO（application.yml）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:9000/</span></span><br><span class="line">    <span class="attr">access-key:</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">secret-key:</span> <span class="string">gulimall_minio</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">gulimall</span></span><br><span class="line">    <span class="attr">create-bucket:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioException;</span><br><span class="line"><span class="keyword">import</span> com.jlefebure.spring.boot.minio.MinioService;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MinioService minioService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfigurationProperties configurationProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/files"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">testMinio</span><span class="params">()</span> <span class="keyword">throws</span> MinioException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioService.fullList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件名称下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> com.jlefebure.spring.boot.minio.MinioException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"files/&#123;object&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getObject</span><span class="params">(@PathVariable(<span class="string">"object"</span>)</span> String object, HttpServletResponse response) <span class="keyword">throws</span> com.jlefebure.spring.boot.minio.MinioException, IOException, IOException, IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = minioService.get(Paths.get(object));</span><br><span class="line">        InputStreamResource inputStreamResource = <span class="keyword">new</span> InputStreamResource(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the content type and attachment header.</span></span><br><span class="line">        response.addHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + object);</span><br><span class="line">        response.setContentType(URLConnection.guessContentTypeFromName(object));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Copy the stream to the response's output stream.</span></span><br><span class="line">        IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttachement</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        String filename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// System.out.println(filename);</span></span><br><span class="line">        <span class="comment">// Path path = Paths.get(file.getResource().getURI());</span></span><br><span class="line">        Path path = Paths.get(filename);</span><br><span class="line">        String url = configurationProperties.getUrl() + <span class="string">"/"</span> + configurationProperties.getBucket() + path.toAbsolutePath();</span><br><span class="line">        <span class="comment">// System.out.println(path.toAbsolutePath());</span></span><br><span class="line">        <span class="comment">// url += path.toAbsolutePath();</span></span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="comment">// System.out.println(path);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioService.upload(path, file.getInputStream(), file.getContentType());</span><br><span class="line">            System.out.println(<span class="string">"上传完成！！！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (com.jlefebure.spring.boot.minio.MinioException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The file cannot be upload on the internal storage. Please retry later"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The file cannot be read"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.Result;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MinioClient mmclient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InvalidKeyException, NoSuchAlgorithmException, InsufficientDataException, InvalidExpiresRangeException, InvalidResponseException, InternalException, NoResponseException, InvalidBucketNameException, XmlPullParserException, ErrorResponseException, BucketPolicyTooLargeException, InvalidObjectPrefixException </span>&#123;</span><br><span class="line">        System.out.println(mmclient);</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = mmclient.listObjects(<span class="string">"gulimall"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">            Item item = result.get();</span><br><span class="line">            System.out.println(item.lastModified() + <span class="string">", "</span> + item.size() + <span class="string">", "</span> + item.objectName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据文件名称获取浏览地址,此种方式在不设置策略的情况下【使用默认策略】是不能直接下载文件的</span></span><br><span class="line">        String gulimall = mmclient.presignedGetObject(<span class="string">"gulimall"</span>, <span class="string">"11111.jpg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"下载地址："</span>+gulimall);</span><br><span class="line">        String gulimall1 = mmclient.getBucketLifeCycle(<span class="string">"gulimall"</span>);</span><br><span class="line">        System.out.println(gulimall1);<span class="comment">// 空</span></span><br><span class="line">        String policy = mmclient.getBucketPolicy(<span class="string">"gulimall"</span>);</span><br><span class="line">        System.out.println(<span class="string">"policy:"</span>+policy);</span><br><span class="line">        <span class="comment">//通过修改桶策略即可使用返回的url直接访问minio中的文件【推荐这种方式！！！】</span></span><br><span class="line">        String objectUrl = mmclient.getObjectUrl(<span class="string">"gulimall"</span>, <span class="string">"刘德华+-+练习.ape"</span>);</span><br><span class="line">        System.out.println(<span class="string">"objectUrl:"</span> + objectUrl);</span><br><span class="line">        <span class="comment">//不能下载</span></span><br><span class="line">        String putObject = mmclient.presignedPutObject(<span class="string">"gulimall"</span>, <span class="string">"刘德华+-+练习.ape"</span>);</span><br><span class="line">        System.out.println(<span class="string">"putObject:"</span>+putObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>minIO的记录目前很浅显，但是作为一个mark吧，后续如果不考虑其他互联网公司的对象存储服务的话，可以考虑使用minIO搭建自己的对象存储服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;minIO是对象存储服务的一种，与Amazon S3云存储服务兼容，非常适合存储非结构化数据，比如照片、视频、日志文件等。阿里云提供了OSS
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/tags/SpringBoot/"/>
    
      <category term="OSS" scheme="https://wanderros.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程并发编程</title>
    <link href="https://wanderros.github.io/2020/10/07/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://wanderros.github.io/2020/10/07/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2020-10-07T02:29:46.000Z</published>
    <updated>2020-10-07T03:01:10.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>多线程并发编程是非常重要的编程技术，需要深刻理解并掌握。在Java中，多线程主要的实现方式有四种：</p><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口通过FutureTask包装器来创建Thread线程</li><li>使用ExecutorService、Callable、Future实现有返回结果的多线程</li></ul><p>其中前两种方式线程执行完后都没有返回值，而后两种是带返回值的。除了以上四种主要的线程创建方式之外，也还有很多其他的方式可以启动多线程任务！</p><hr><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="继承Thread类创建线程"><a href="#继承Thread类创建线程" class="headerlink" title="继承Thread类创建线程"></a>继承Thread类创建线程</h2><ol><li><p>Thread类本质上也是实现了Runnable接口的一个实例，代表一个线程的实例。</p></li><li><p>启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。</p></li><li><p>这种方式实现多线程比较简单，通过继承Thread类并复写run()方法，就可以启动新线程并执行自己定义的run()方法。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateThreadDemo1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置当前线程的名字</span></span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前运行的线程名为： "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里，要调用start方法才能启动线程，不能调用run方法</span></span><br><span class="line">        <span class="keyword">new</span> CreateThreadDemo1(<span class="string">"MyThread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> CreateThreadDemo1(<span class="string">"MyThread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h2><ol><li><p>实现Runnable接口并实现其中的run方法，然后通过构造Thread实例，传入Runnable实现类，然后调用Thread的start方法即可开启一个新线程。</p></li><li><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前运行的线程名为： "</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CreateThreadDemo2 runnable = <span class="keyword">new</span> CreateThreadDemo2();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"MyThread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable, <span class="string">"MyThread2"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现Callable接口通过FutureTask包装器来创建Thread线程"><a href="#实现Callable接口通过FutureTask包装器来创建Thread线程" class="headerlink" title="实现Callable接口通过FutureTask包装器来创建Thread线程"></a>实现Callable接口通过FutureTask包装器来创建Thread线程</h2><ol><li><p>首先需要一个实现Callable接口的实例，然后实现该接口的唯一方法call的业务逻辑，接着把Callable实例包装成FutureTask传递给Thread实例启动新线程。</p></li><li><p>FutureTask本质上也实现了Runnable接口，所以同样可以用来构造Thread实例。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程任务，lambada方式实现接口并实现call方法</span></span><br><span class="line">        Callable&lt;Integer&gt; callable = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程任务开始执行了..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将任务封装为FutureTask</span></span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(callable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程，执行线程任务</span></span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ====================</span></span><br><span class="line">        <span class="comment">// 这里是在线程启动之后，线程结果返回之前</span></span><br><span class="line">        System.out.println(<span class="string">"线程启动之后，线程结果返回之前..."</span>);</span><br><span class="line">        <span class="comment">// ====================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程结束之后，拿到线程的执行结果 ，线程不结束会阻塞</span></span><br><span class="line">        Integer result = task.get();</span><br><span class="line">        System.out.println(<span class="string">"主线程中拿到异步任务执行的结果为："</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）"><a href="#使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）" class="headerlink" title="使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）"></a>使用ExecutorService、Callable、Future实现有返回结果的线程（线程池方式）</h2><ol><li><p>ExecutorService、Callable、Future三个接口都是属于Executor框架。</p></li><li><p>可返回值的任务必须实现Callable接口。通过ExecutorService执行Callable任务后，可以获取到一个Future的对象，在该对象上调用get()就可以获取到Callable任务返回的结果了。</p></li><li><p>Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadDemo4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- 主程序开始运行 ----"</span>);</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> taskSize = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 创建一个线程池,Executors提供了创建各种类型线程池的方法，具体详情请自行查阅</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">        List&lt;Future&gt; futureList = <span class="keyword">new</span> ArrayList&lt;Future&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">            Callable callable = <span class="keyword">new</span> MyCallable(i);</span><br><span class="line">            <span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">            Future future = executorService.submit(callable);</span><br><span class="line">            futureList.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有并发任务的运行结果</span></span><br><span class="line">        <span class="keyword">for</span> (Future future : futureList) &#123;</span><br><span class="line">            <span class="comment">// 从Future对象上获取任务的返回值，并输出到控制台</span></span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + future.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Date endTime = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        System.out.println(<span class="string">"---- 主程序结束运行 ----，程序运行耗时【"</span> + (endTime.getTime() - startTime.getTime()) + <span class="string">"毫秒】"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</span><br><span class="line"></span><br><span class="line">    MyCallable(<span class="keyword">int</span> taskNum) &#123;</span><br><span class="line">        <span class="keyword">this</span>.taskNum = taskNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + taskNum + <span class="string">" 线程任务启动"</span>);</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        Date endTime = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> time = endTime.getTime() - startTime.getTime();</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + taskNum + <span class="string">" 线程任务终止"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskNum + <span class="string">"线程任务返回运行结果, 当前任务耗时【"</span> + time + <span class="string">"毫秒】"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>锁从宏观上分类，只分为两种悲观锁与乐观锁：<ul><li>乐观锁的策略是认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。Java中的乐观锁基本都是通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败</li><li>悲观锁的策略是认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized，AQS框架下的锁则是先尝试CAS乐观锁去获取锁，获取不到，才会转换为悲观锁，如RetreenLock自旋锁</li></ul></li><li>Java的线程是映射到操作系统原生线程之上的，如果要阻塞或唤醒一个线程就需要操作系统介入，需要在户态与核心态之间切换，这种切换会消耗大量的系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等，用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。</li><li>synchronized会导致争用不到锁的线程进入阻塞状态，所以说它是<code>java</code>语言中一个重量级的同步操纵，被称为重量级锁。</li><li><code>synchronized</code>可以把任意一个非<code>null</code>的对象当作锁：<ul><li>作用于方法时，锁住的是对象的实例(this)</li><li>作用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（jdk1.8则是metaspace），永久带是全局共享的，因此静态方法锁相当于类的一个全局锁，会锁所有调用该方法的线程</li><li>作用于一个对象实例时，锁住的是所有以该对象为锁的代码块</li></ul></li><li>还有其他的轻量级锁。</li></ol><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><ol><li><code>减少锁的时间</code>：不需要同步执行的代码，能不放在同步块里面执行就不要放在同步块内，可以让锁尽快释放。</li><li><code>减少锁的粒度</code>：将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。</li><li><code>锁粗化</code>：（场景）假如有一个循环，循环内的操作需要加锁，我们应该把锁放到循环外面，否则每次进出循环，都进出一次临界区，效率是非常差的。</li><li>使用读写锁：读操作加读锁，可以并发读，写操作使用写锁，只能单线程写。</li><li>读写分离</li><li>使用CAS</li><li>消除缓存行的伪共享</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>并发编程调试起来很难，这部分还需要深入研究！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;多线程并发编程是非常重要的编程技术，需要深刻理解并掌握。在Java中，多线程主要的实现方式有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承Threa
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wanderros.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanderros.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML Qucik Start</title>
    <link href="https://wanderros.github.io/2020/10/06/PlantUML-Qucik-Start/"/>
    <id>https://wanderros.github.io/2020/10/06/PlantUML-Qucik-Start/</id>
    <published>2020-10-06T11:27:54.000Z</published>
    <updated>2020-10-06T12:17:05.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从学校步入工作之后，面对的就是沟通效率问题，越发觉得用专业的图形（用例图，时序图，ER图等等）去准确表达想法是很重要的。针对某个需求绘制的的用例图，比一段乏味的文字来的更加有意义，也便于别人理解。而且很多书籍中都会使用类图，时序图等UML语言来描述逻辑关系，因此这部分主要介绍如何UML以及使用PlantUML来绘制UML图。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="UML语言"><a href="#UML语言" class="headerlink" title="UML语言"></a>UML语言</h2><ol><li><em>UML</em>语言是一种面向对象的模型语言，通过<em>UML</em>语言的组合来表达某些事物之间的逻辑关系。</li><li>UML 是一种为面向对象开发系统的产品进行说明、可视化、和编制文档的标准语言。</li><li>UML使得开发人员可以专注于建立产品的模型和结构，而不是选用什么程序语言和算法实现。</li><li>UML中有多种关系：<ul><li>依赖（Dependency）：使用的关系（一个类的实现需要另一个类的协助），带箭头的虚线，指向被使用者</li><li>关联（Association）：拥有的关系（类内部变量与类的关系），带普通箭头的实心线，指向被拥有者</li><li>实现（Realization）：类与接口的关系，带三角箭头的虚线，箭头指向接口</li><li>泛化（Generalization）：继承关系，带三角箭头的实线，箭头指向父类</li><li>聚合（Aggregation）：整体与部分的关系，带空心菱形的实心线，菱形指向整体</li><li>组合（Composition）：整体与部分的关系，但部分不能离开整体而单独存在，带实心菱形的实线，菱形指向整体</li></ul></li><li>UML中文学习网址：<a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="noopener">https://www.w3cschool.cn/uml_tutorial/</a></li><li>UML有用性论点：<ul><li>在复杂需求中，UML图是非常必要的。所有的图都是协助团队策划稿能源更高效地厘清问题，掌握知识，高效解决问题的</li><li>“假敏捷开发”太多。UML统一了各种方法对不同类型的系统、不同开发阶段以及不同内部概念的不同观点，从而有效的消除了各种建模语言之间不必要的差异</li><li>UML 在业界依然在被应用。在团队开发中显得尤为重要</li><li>UML 有用例图、顺序图、活动图、状态图、组件图等，每一种图都代表着工程的一个特定维度，它们的专注点是正交的，都有其独特的用处。使用 UML 来分析和设计，可以让大家对整个系统有个更全面的认知</li><li>… …</li></ul></li><li>UML然并卵：<ul><li>复杂就是复杂，不会因为描述形式变了而简化。放弃了这方面。你觉得图看起来简洁，是因为图描述了骨架，但是大量细节都屏蔽掉了</li><li>作为图型这货太复杂，作为语言这货没卵用，没有编译器和IDE支持或者说相较于程序设计语言支持就是个渣渣……</li><li>UML是不符合程序员思维的，有一种东西比UML表现能力更强，更通用，那就是代码</li><li>画图有用不等于UML有用。图没有必要按照 UML 来, 最重要的是直观 ,便于沟通</li><li>… …</li></ul></li></ol><h2 id="PlanUML"><a href="#PlanUML" class="headerlink" title="PlanUML"></a>PlanUML</h2><ol><li><p><code>PlatnUML</code>的优点：</p><ul><li>PlantUML是开源的，有一个相对比较成熟的网站，通过简单的UML语言来实现想要的效果</li><li>PlantUML有比较详细的各类语言的guide文档</li><li>PlantUML做了很多的适配，比如常用的编译器eclipse，IDEA intelliJ都有对应的插件</li><li>PlantUML语言简单直接易学，就好像Markdown语法一样，简单高效</li></ul></li><li><p><code>Docker</code>搭建<code>PlatnUML</code>环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull plantuml/plantuml-server</span><br><span class="line">docker run -d -p 8080:8080 plantuml/plantuml-server</span><br></pre></td></tr></table></figure></li><li><p><code>PlatnUML</code>官网：<a href="https://plantuml.com/" target="_blank" rel="noopener">https://plantuml.com/</a></p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就目前而言，UML个人认为还是有用的，比如时序图，绘制良好的图对于代码的开发，业务逻辑的理解还是非常有用的，多会一样东西还是没有坏处的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;从学校步入工作之后，面对的就是沟通效率问题，越发觉得用专业的图形（用例图，时序图，ER图等等）去准确表达想法是很重要的。针对某个需求绘制的的
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://wanderros.github.io/categories/Tool/"/>
    
    
      <category term="Tool" scheme="https://wanderros.github.io/tags/Tool/"/>
    
      <category term="UML" scheme="https://wanderros.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Serializer&amp;Deserializer Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/06/SpringBoot-Serializer-Deserializer-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/06/SpringBoot-Serializer-Deserializer-Quick-Start/</id>
    <published>2020-10-06T08:16:18.000Z</published>
    <updated>2020-10-06T10:03:35.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>序列化和反序列化是编程语言中的一个概念，在Java里是一个较为基础的知识点，但是什么是序列化和反序列化，有什么作用，底层实现原理是什么，一连问之后可能整个人会蒙。这里主要记录Java序列化、反序列化的概念以及如何进行序列化和反序列化，包括在这当中用到的工具包等。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><code>Java (Serializer)序列化</code>是指把Java对象转换为字节序列的过程，而<code>Java (Deserializer )反序列化</code>是指把字节序列恢复为Java对象的过程。</li><li>主要功能：对象序列化最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性；对象反序列化则用于重建对象。</li><li>本质：序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</li><li>用处：<ul><li>实现了数据持久化</li><li>利用序列化实现远程通信</li><li>利用序列化在进程间传递对象</li></ul></li><li>序列化以及反序列化必须保证字节流中所保存的对象状态及描述信息完整！</li><li>Java中提供了对象的序列化与反序列化，但是目前常用的数据传输格式主要有<code>xml</code>、<code>json</code>，在后端开发中一般使用<code>json</code>进行接口数据传输，因此在本文中主要涉及到序列化之后的内容呈现为<code>json</code>格式。</li><li>对于采用实现原生Java API的序列化接口<code>Serializable</code>的方式：<strong>为了提高serialVersionUID的独立性和确定性，强烈建议在一个可序列化类中显示的定义serialVersionUID，为它赋予明确的值。</strong></li><li><code>json</code>格式规范：<ul><li>英文版：<a href="https://google.github.io/styleguide/jsoncstyleguide.xml" target="_blank" rel="noopener">https://google.github.io/styleguide/jsoncstyleguide.xml</a></li><li>中文版：<a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md</a></li><li><code>json API</code>格式规范：<a href="http://jsonapi.org.cn/format/" target="_blank" rel="noopener">http://jsonapi.org.cn/format/</a></li></ul></li><li>几个常用的json类库：<ul><li>Gson: 谷歌开发的<code>json</code>库，功能十分全面</li><li>FastJson: 阿里巴巴开发的 <code>json</code>库，性能十分优秀</li><li>Jackson: 社区十分活跃且更新速度很快</li></ul></li><li><code>Gson</code>、<code>FastJson</code>、<code>Jackson</code>要求序列化/反序列化的是标准的类，否则无法解析，因为都用到了反射！</li></ol><h2 id="JSON的一些经验"><a href="#JSON的一些经验" class="headerlink" title="JSON的一些经验"></a>JSON的一些经验</h2><ol><li>遵循Java Beans规范与JSON规范，能减少大部分的问题。</li><li>使用正常的key，尽量不要使用数字等字符开头的key，尽量使用符合Java的class或property命名规范的key，这样会减少不必要的冲突。</li><li>关于日期处理尽量使用标准的日期格式，或者序列化和反序列化里都是用同样的datePattern格式。</li><li>如果JSONObject与正常的POJO混用，出现问题的概率较高。</li><li>尽量不要在使用过多的层次嵌套的同时使用泛型（List、Map等），可能导致类型丢失，而且问题比较难查。</li><li>尽量不要在同一个Bean的层次结构里使用多个子类型对象，可能导致类型丢失，而且问题比较难查。</li><li>尽量避免循环引用，这个虽然可以通过序列化特性禁掉，但是如果能避免则避免。</li><li>注意编码和不可见字符！</li></ol><h2 id="Fastjson基础"><a href="#Fastjson基础" class="headerlink" title="Fastjson基础"></a>Fastjson基础</h2><ol><li><p><code>fastjson</code>是一个阿里开源的基于<code>Java</code>语言编写的高性能功能完善的json库，非常适合用于<code>Java</code>的序列化以及反序列化。如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>源码地址：<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">https://github.com/alibaba/fastjson</a></p></li><li><p><code>fastjson</code>快速使用以及<a href="https://github.com/alibaba/fastjson/wiki/FastJson-文档链接" target="_blank" rel="noopener">文档链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String text = JSON.toJSONString(obj); <span class="comment">//序列化</span></span><br><span class="line">VO vo = JSON.parseObject(<span class="string">"&#123;...&#125;"</span>, VO<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//反序列化</span></span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>序列化API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，支持各种各种Java基本类型和JavaBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，返回JSON字符串的utf-8 bytes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toJSONBytes(Object object, SerializerFeature... features);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，写入到Writer中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeJSONString</span><span class="params">(Writer writer, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       Object object, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       SerializerFeature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Java对象序列化为JSON字符串，按UTF-8编码写入到OutputStream中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">writeJSONString</span><span class="params">(OutputStream os, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            Object object, // </span></span></span><br><span class="line"><span class="function"><span class="params">                                            SerializerFeature... features)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>反序列化API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String jsonStr, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(<span class="keyword">byte</span>[] jsonBytes,  // UTF<span class="number">-8</span>格式的JSON字符串</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Class&lt;T&gt; clazz, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列化为泛型类型的JavaBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    TypeReference&lt;T&gt; type, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    Feature... features)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将JSON字符串反序列为JSONObject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>支持的时间格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String            defaultPatttern    = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter defaultFormatter   = DateTimeFormatter.ofPattern(defaultPatttern);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_tw  = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_cn_1  = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日 H时m分s秒"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_kr  = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일 HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_us  = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_eur = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_de  = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_dt19_in  = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d8       = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_tw   = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_cn   = DateTimeFormatter.ofPattern(<span class="string">"yyyy年M月d日"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_kr   = DateTimeFormatter.ofPattern(<span class="string">"yyyy년M월d일"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_us   = DateTimeFormatter.ofPattern(<span class="string">"MM/dd/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_eur  = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_de   = DateTimeFormatter.ofPattern(<span class="string">"dd.MM.yyyy"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_d10_in   = DateTimeFormatter.ofPattern(<span class="string">"dd-MM-yyyy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter ISO_FIXED_FORMAT =</span><br><span class="line">        DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).withZone(ZoneId.systemDefault());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String formatter_iso8601_pattern     = <span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> DateTimeFormatter formatter_iso8601  = DateTimeFormatter.ofPattern(formatter_iso8601_pattern);</span><br></pre></td></tr></table></figure></li><li><p><code>fastjson</code>目前没有废弃的SerializerFeature介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QuoteFieldNames <span class="comment">// key使用引号</span></span><br><span class="line">UseSingleQuotes <span class="comment">// 使用单引号</span></span><br><span class="line">WriteMapNullValue <span class="comment">// 输出Map的null值</span></span><br><span class="line">WriteEnumUsingToString <span class="comment">// 枚举属性输出toString的结果</span></span><br><span class="line">WriteEnumUsingName <span class="comment">// 枚举数据输出name</span></span><br><span class="line">UseISO8601DateFormat <span class="comment">// 使用日期格式</span></span><br><span class="line">WriteNullListAsEmpty <span class="comment">// List为空则输出[]</span></span><br><span class="line">WriteNullStringAsEmpty <span class="comment">// String为空则输出""</span></span><br><span class="line">WriteNullNumberAsZero <span class="comment">// Number类型为空则输出0</span></span><br><span class="line">WriteNullBooleanAsFalse <span class="comment">// Boolean类型为空则输出false</span></span><br><span class="line">SkipTransientField <span class="comment">// 忽略使用了transient关键字的内容</span></span><br><span class="line">SortField <span class="comment">// 排序字段</span></span><br></pre></td></tr></table></figure><ul><li>支持多个SerializerFeature同时作用</li></ul></li></ol><h2 id="Gson基础"><a href="#Gson基础" class="headerlink" title="Gson基础"></a>Gson基础</h2><ol><li><p>源码地址：<a href="https://github.com/google/gson" target="_blank" rel="noopener">https://github.com/google/gson</a></p></li><li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Gson</code>序列化、反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonStr = gson.toJson(beanObject); <span class="comment">// 序列化</span></span><br><span class="line">BeanType bean = gson.fromJson(jsonData, BeanType<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 反序列化</span></span><br></pre></td></tr></table></figure></li><li><p><code>Gson</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GSONTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;'id':1,'name':'JAVAEE-1703','stus':[&#123;'id':101,'name':'刘一','age':16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"['北京','天津','杭州']"</span>;</span><br><span class="line"></span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        <span class="comment">//解析对象：第一个参数：待解析的字符串 第二个参数结果数据类型的Class对象</span></span><br><span class="line">        Grade grade=gson.fromJson(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        <span class="comment">//解析数组要求使用Type</span></span><br><span class="line">        ArrayList&lt;String&gt; list=gson.fromJson(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeToken&lt;ArrayList&lt;String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="comment">//将对象转换为诶JSON格式字符串</span></span><br><span class="line">        String json=gson.toJson(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Jackson基础"><a href="#Jackson基础" class="headerlink" title="Jackson基础"></a>Jackson基础</h2><ol><li><p>源码地址：<a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-databind</a></p></li><li><p>如果项目中使用maven管理依赖的话，只需在<code>pom</code>中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Jackson</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JackSonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 对象嵌套数组嵌套对象</span></span><br><span class="line">        String json1 = <span class="string">"&#123;\"id\":1,\"name\":\"JAVAEE-1703\",\"stus\":[&#123;\"id\":101,\"name\":\"刘一\",\"age\":16&#125;]&#125;"</span>;</span><br><span class="line">        <span class="comment">// 数组</span></span><br><span class="line">        String json2 = <span class="string">"[\"北京\",\"天津\",\"杭州\"]"</span>;</span><br><span class="line">        <span class="comment">//1、</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Grade grade=mapper.readValue(json1, Grade<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">        <span class="comment">//2、</span></span><br><span class="line">        ArrayList&lt;String&gt; list=mapper.readValue(json2, </span><br><span class="line">                <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException</span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Student(<span class="number">101</span>+i, <span class="string">"码子"</span>, <span class="number">20</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        Grade grade=<span class="keyword">new</span> Grade(<span class="number">100001</span>,<span class="string">"张三"</span>, list);</span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式字符串</span></span><br><span class="line">        String json=mapper.writeValueAsString(grade);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>序列化这部分主要是看官方文档以及一些比较有价值的博客，示例代码都不太想写了，写规范的<code>json</code>是要遵守规则的，否则会出现问题！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;序列化和反序列化是编程语言中的一个概念，在Java里是一个较为基础的知识点，但是什么是序列化和反序列化，有什么作用，底层实现原理是什么，一连
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot ELK Quick Start</title>
    <link href="https://wanderros.github.io/2020/10/02/SpringBoot-ELK-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/10/02/SpringBoot-ELK-Quick-Start/</id>
    <published>2020-10-02T12:36:20.000Z</published>
    <updated>2020-10-02T15:29:20.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>随着互联网的快速发展，系统越来越庞大，依赖肉眼分析日志文件来排查问题的方式渐渐凸显出一些问题：</p><ul><li>分布式集群环境下，服务器数量可能达到成百上千，如何准确定位？</li><li>微服务架构中，如何根据异常信息，定位其他各服务的上下文信息？</li><li>随着日志文件的不断增大，可能面临在服务器上不能直接打开的尴尬。</li><li>文本搜索太慢、无法多维度查询等… …</li></ul><p>面临这些问题，就需要集中化的日志管理，将所有服务器节点上的日志统一收集，管理，访问。ELK（Elasticsearch Logstash Kibana）的强大在之前的文章中有介绍过，这里主要记录如何在SpringBoot中使用ELK记录日志。后续可能还会将ELK引入项目中作为搜索引擎提供搜索功能，这里先记录下日志记录功能。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p><code>Elasticsearch</code>基于 Lucene 开发，目前使用最广的开源搜索引擎之一，是一个分布式的搜索和分析引擎，可以用于全文检索、结构化检索和分析，并能将这三者结合起来。</p></li><li><p><code>Logstash</code>简单来说就是一根具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端，与此同时这根管道还可以根据需求在中间加上滤网，提供了很多功能强大的滤网以满足各种应用场景。</p></li><li><p><code>Kibana</code>是一个开源的分析与可视化平台，可以用<code>Kibana</code>搜索、查看、交互存放在<code>Elasticsearch</code>索引里的数据，使用各种不同的图标、表格、地图等，<code>Kibana</code>能够很轻易的展示高级数据分析与可视化。</p></li><li><p><code>Logstash</code>可以从本地磁盘，网络服务（自己监听端口，接受用户日志），消息队列中收集各种各样的日志，然后进行过滤分析，并将日志输出到<code>Elasticsearch</code>中。</p></li><li><p>轻量级数据采集器Beats官网：<a href="https://www.elastic.co/cn/beats/" target="_blank" rel="noopener">https://www.elastic.co/cn/beats/</a></p></li><li><p>ELKB架构图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4c796fcaa7eea35a4d48bb6a1efee623-206417" alt="ELK架构图"></p></li><li><p>ELKR架构图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/57d725d8092bef5760dac89f00892ced-246693" alt="ELKR架构图"></p></li><li><p>程序写入日志时序图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f852ca8e0dd5fbbcdd2377edddc11d0d-70104" alt="程序写入日志时序图"></p></li><li><p>ELK收集日志及Kibina查询日志时序图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/56d44272ab155a82b18aacf1a22f5a7f-123940" alt="ELK收集日志及Kibina查询日志时序图"></p></li></ol><h2 id="ELK环境构建（Docker单机）"><a href="#ELK环境构建（Docker单机）" class="headerlink" title="ELK环境构建（Docker单机）"></a>ELK环境构建（Docker单机）</h2><ol><li><p><strong>注意版本保持一致，这里都使用7.6.2版本！</strong></p></li><li><p>Docker镜像拉取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull logstash:7.6.2</span><br><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>在要启动的镜像的命令处创建一个<code>elk</code>目录，主要用于放置ELK的数据和配置，在<code>elk</code>目录中添加<code>esdata</code>目录，给予777权限，然后运行下面的docker命令，用于启动<code>elasticsearch</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch \</span><br><span class="line">-v "$PWD/esdata":/usr/share/elasticsearch/data \</span><br><span class="line">-e "discovery.type=single-node" \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>然后访问启动<code>elasticsearch</code>服务的主机的9200端口，看到如下类似内容就表示启动成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"46f533f30381"</span>,</span><br><span class="line"><span class="attr">"cluster_name"</span>: <span class="string">"docker-cluster"</span>,</span><br><span class="line"><span class="attr">"cluster_uuid"</span>: <span class="string">"4HvY1D4PSqWzRNANscHFEw"</span>,</span><br><span class="line"><span class="attr">"version"</span>: &#123;</span><br><span class="line"><span class="attr">"number"</span>: <span class="string">"7.6.2"</span>,</span><br><span class="line"><span class="attr">"build_flavor"</span>: <span class="string">"default"</span>,</span><br><span class="line"><span class="attr">"build_type"</span>: <span class="string">"docker"</span>,</span><br><span class="line"><span class="attr">"build_hash"</span>: <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line"><span class="attr">"build_date"</span>: <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line"><span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"lucene_version"</span>: <span class="string">"8.4.0"</span>,</span><br><span class="line"><span class="attr">"minimum_wire_compatibility_version"</span>: <span class="string">"6.8.0"</span>,</span><br><span class="line"><span class="attr">"minimum_index_compatibility_version"</span>: <span class="string">"6.0.0-beta1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用如下命令启动<code>Kibana</code>服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">--link elasticsearch:elasticsearch \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>等待启动成功之后就可以访问启动<code>Kibana</code>服务的主机的5601端口，可以看到<code>Kibana</code>的主页。</p></li><li><p>在<code>elk</code>目录下创建<code>logstash</code>、<code>logstash/conf</code>、<code>logstash/pipeline</code>、<code>logstash/data</code>目录，在<code>logstash/conf</code>目录下创建<code>jvm.options</code>、<code>log4j2.properties</code>、<code>logstash.yml</code>、<code>pipelines.yml</code>、<code>startup.options</code>文件，文件内容分别如下：</p><ul><li><p><code>jvm.options</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## JVM configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="attr">-Xms1g</span></span><br><span class="line"><span class="attr">-Xmx1g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">## Expert settings</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## All settings below this section are considered</span></span><br><span class="line"><span class="comment">## expert settings. Don't tamper with them unless</span></span><br><span class="line"><span class="comment">## you understand what you are doing</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC configuration</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseConcMarkSweepGC</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Locale</span></span><br><span class="line"><span class="comment"># Set the locale language</span></span><br><span class="line"><span class="comment">#-Duser.language=en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale country</span></span><br><span class="line"><span class="comment">#-Duser.country=US</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the locale variant, if any</span></span><br><span class="line"><span class="comment">#-Duser.variant=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## basic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the I/O temp directory</span></span><br><span class="line"><span class="comment">#-Djava.io.tmpdir=$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set to headless, just in case</span></span><br><span class="line"><span class="meta">-Djava.awt.headless</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ensure UTF-8 encoding by default (e.g. filenames)</span></span><br><span class="line"><span class="meta">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use our provided JNA always versus the system one</span></span><br><span class="line"><span class="comment">#-Djna.nosys=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn on JRuby invokedynamic</span></span><br><span class="line"><span class="meta">-Djruby.compile.invokedynamic</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># Force Compilation</span></span><br><span class="line"><span class="meta">-Djruby.jit.threshold</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Make sure joni regexp interruptability is enabled</span></span><br><span class="line"><span class="meta">-Djruby.regexp.interruptible</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## heap dumps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a heap dump when an allocation from the Java heap fails</span></span><br><span class="line"><span class="comment"># heap dumps are created in the working directory of the JVM</span></span><br><span class="line"><span class="meta">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># specify an alternative path for heap dumps</span></span><br><span class="line"><span class="comment"># ensure the directory exists and has sufficient space</span></span><br><span class="line"><span class="comment">#-XX:HeapDumpPath=$&#123;LOGSTASH_HOME&#125;/heapdump.hprof</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## GC logging</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCTimeStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCDateStamps</span></span><br><span class="line"><span class="comment">#-XX:+PrintClassHistogram</span></span><br><span class="line"><span class="comment">#-XX:+PrintTenuringDistribution</span></span><br><span class="line"><span class="comment">#-XX:+PrintGCApplicationStoppedTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log GC status to a file with time stamps</span></span><br><span class="line"><span class="comment"># ensure the directory exists</span></span><br><span class="line"><span class="comment">#-Xloggc:$&#123;LS_GC_LOG_FILE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Entropy source for randomness</span></span><br><span class="line"><span class="meta">-Djava.security.egd</span>=<span class="string">file:/dev/urandom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the logging context from parent threads to children</span></span><br><span class="line"><span class="meta">-Dlog4j2.isThreadContextMapInheritable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p><code>log4j2.properties</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">status</span> = <span class="string">error</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">LogstashPropertiesConfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.console.name</span> = <span class="string">plain_console</span></span><br><span class="line"><span class="meta">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="meta">appender.console.layout.pattern</span> = <span class="string">[%d&#123;ISO8601&#125;][%-5p][%-25c]%notEmpty&#123;[%X&#123;pipeline.id&#125;]&#125; %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">appender.json_console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="meta">appender.json_console.name</span> = <span class="string">json_console</span></span><br><span class="line"><span class="meta">appender.json_console.layout.type</span> = <span class="string">JSONLayout</span></span><br><span class="line"><span class="meta">appender.json_console.layout.compact</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">appender.json_console.layout.eventEol</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">rootLogger.level</span> = <span class="string">$&#123;sys:ls.log.level&#125;</span></span><br><span class="line"><span class="meta">rootLogger.appenderRef.console.ref</span> = <span class="string">$&#123;sys:ls.log.format&#125;_console</span></span><br></pre></td></tr></table></figure></li><li><p><code>logstash.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">logstash-203</span></span><br><span class="line"><span class="comment"># 日志文件目录配置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/logstash/logs</span></span><br><span class="line"><span class="comment"># # 验证配置文件及存在性</span></span><br><span class="line"><span class="attr">config.test_and_exit:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 配置文件改变时是否自动加载</span></span><br><span class="line"><span class="attr">config.reload.automatic:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># # 重新加载配置文件间隔</span></span><br><span class="line"><span class="attr">config.reload.interval:</span> <span class="string">60s</span></span><br><span class="line"><span class="comment"># # debug模式 开启后会打印解析后的配置文件 包括密码等信息 慎用</span></span><br><span class="line"><span class="comment"># # 需要同时配置日志等级为debug</span></span><br><span class="line"><span class="attr">config.debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">log.level:</span> <span class="string">debug</span></span><br><span class="line"><span class="comment"># # The bind address for the metrics REST endpoint.</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># # 日志格式 json/plain</span></span><br><span class="line"><span class="attr">log.format:</span> <span class="string">json</span></span><br></pre></td></tr></table></figure></li><li><p><code>pipelines.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file is where you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="comment"># For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="comment">#   https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">es</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br></pre></td></tr></table></figure></li><li><p><code>startup.options</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># These settings are ONLY used by $LS_HOME/bin/system-install to create a custom</span></span><br><span class="line"><span class="comment"># startup script for Logstash and is not used by Logstash itself. It should</span></span><br><span class="line"><span class="comment"># automagically use the init system (systemd, upstart, sysv, etc.) that your</span></span><br><span class="line"><span class="comment"># Linux distribution uses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># After changing anything here, you need to re-run $LS_HOME/bin/system-install</span></span><br><span class="line"><span class="comment"># as root to push the changes to the init script.</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override Java location</span></span><br><span class="line"><span class="comment">#JAVACMD=/usr/bin/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a home directory</span></span><br><span class="line"><span class="attr">LS_HOME</span>=<span class="string">/usr/share/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logstash settings directory, the path which contains logstash.yml</span></span><br><span class="line"><span class="attr">LS_SETTINGS_DIR</span>=<span class="string">/etc/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to logstash</span></span><br><span class="line"><span class="attr">LS_OPTS</span>=<span class="string">"--path.settings $&#123;LS_SETTINGS_DIR&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments to pass to java</span></span><br><span class="line"><span class="attr">LS_JAVA_OPTS</span>=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pidfiles aren't used the same way for upstart and systemd; this is for sysv users.</span></span><br><span class="line"><span class="attr">LS_PIDFILE</span>=<span class="string">/var/run/logstash.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user and group id to be invoked as</span></span><br><span class="line"><span class="attr">LS_USER</span>=<span class="string">logstash</span></span><br><span class="line"><span class="attr">LS_GROUP</span>=<span class="string">logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable GC logging by uncommenting the appropriate lines in the GC logging</span></span><br><span class="line"><span class="comment"># section in jvm.options</span></span><br><span class="line"><span class="attr">LS_GC_LOG_FILE</span>=<span class="string">/var/log/logstash/gc.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open file limit</span></span><br><span class="line"><span class="attr">LS_OPEN_FILES</span>=<span class="string">16384</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nice level</span></span><br><span class="line"><span class="attr">LS_NICE</span>=<span class="string">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change these to have the init script named and described differently</span></span><br><span class="line"><span class="comment"># This is useful when running multiple instances of Logstash on the same</span></span><br><span class="line"><span class="comment"># physical box or vm</span></span><br><span class="line"><span class="attr">SERVICE_NAME</span>=<span class="string">"logstash"</span></span><br><span class="line"><span class="attr">SERVICE_DESCRIPTION</span>=<span class="string">"logstash"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you need to run a command or script before launching Logstash, put it</span></span><br><span class="line"><span class="comment"># between the lines beginning with `read` and `EOM`, and uncomment those lines.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## read -r -d '' PRESTART &lt;&lt; EOM</span></span><br><span class="line"><span class="comment">## EOM</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在<code>logstash/pipeline</code>目录下创建<code>logstash.conf</code>文件，文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-test-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>对于多个输出（多端口）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment"> # 我们创建了两个微服务demo 所以建立两个不同的输入，将两个服务的日志分别输入到不同的索引中</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"  # 允许任意主机发送日志</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk1"      # 设定type以区分每个输入源</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4567      </span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines    # 数据格式</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">tcp</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">    <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">    <span class="attr">type</span> =<span class="string">&gt; "elk2"</span></span><br><span class="line">    <span class="attr">port</span> =<span class="string">&gt; 4667</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">filter</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #Only matched data are send to output.</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">output</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # For detail config for elasticsearch as output,</span></span><br><span class="line"><span class="comment">  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk1" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          # 输出时创建映射</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   # ElasticSearch 的地址和端口</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk1"         # 指定索引名</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">if</span> <span class="string">[type] == "elk2" &#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">action</span> =<span class="string">&gt; "index"          #The operation on ES</span></span><br><span class="line">      <span class="attr">hosts</span>  =<span class="string">&gt; "192.168.87.136:9200"   #ElasticSearch host, can be array.</span></span><br><span class="line">      <span class="attr">index</span>  =<span class="string">&gt; "elk2"         #The index to write data to.</span></span><br><span class="line">      <span class="attr">codec</span>  =<span class="string">&gt; "json"</span></span><br><span class="line">     <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>对于同一个端口区分应用日志：</p><ul><li><code>logstash.conf</code>：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">tcp&#123;</span></span><br><span class="line">     <span class="attr">host</span> =<span class="string">&gt; "0.0.0.0"</span></span><br><span class="line">     <span class="attr">port</span> =<span class="string">&gt; 5600</span></span><br><span class="line">     <span class="attr">mode</span> =<span class="string">&gt; "server"</span></span><br><span class="line">     <span class="attr">type</span> =<span class="string">&gt; "tcplog"</span></span><br><span class="line">     <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output&#123;</span></span><br><span class="line"> <span class="attr">stdout&#123;</span></span><br><span class="line">   <span class="attr">codec</span> =<span class="string">&gt; rubydebug</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">hosts</span> =<span class="string">&gt; "192.168.37.128:9200"</span></span><br><span class="line">    <span class="attr">index</span> =<span class="string">&gt; "logstash-file-%&#123;[appname]&#125;-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    <span class="attr">action</span> =<span class="string">&gt; "index"</span></span><br><span class="line">    <span class="attr">codec</span> =<span class="string">&gt; "json"</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>SpringBoot项目日志配置文件<code>logback-spring.xml</code>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customFields</span>&gt;</span>&#123;"appname":"hello"&#125;<span class="tag">&lt;/<span class="name">customFields</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="9"><li><p>在<code>elk</code>目录下运行下面的docker命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name logstash -p 5600:5600 \</span><br><span class="line">-v "$PWD/logstash/conf":/usr/share/logstash/config \</span><br><span class="line">-v "$PWD/logstash/data":/usr/share/logstash/data \</span><br><span class="line">-v "$PWD/logstash/logs":/usr/share/logstash/logs \</span><br><span class="line">-v "$PWD/logstash/pipeline":/usr/share/logstash/pipeline \</span><br><span class="line">--link elasticsearch:elasticsearch -d logstash:7.6.2</span><br></pre></td></tr></table></figure></li><li><p>至此<code>ELK</code>的环境已经搭建完成，只要在项目中访问提供<code>ELK</code>服务主机的5600端口即可，如果没什么问题，应该在<code>ELK</code>主机上使用<code>docker ps</code>命令即可看到三个docker容器已经启动了：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# docker ps </span></span><br><span class="line"><span class="attr">CONTAINER</span> <span class="string">ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span></span><br><span class="line"><span class="attr">0b955f2b892a</span>        <span class="string">logstash:7.6.2        "/usr/local/bin/do..."   52 minutes ago      Up 40 minutes       5044/tcp, 9600/tcp, 0.0.0.0:5600-&gt;5600/tcp       logstash</span></span><br><span class="line"><span class="attr">c13e9a66500a</span>        <span class="string">kibana:7.6.2          "/usr/local/bin/du..."   About an hour ago   Up About an hour    0.0.0.0:5601-&gt;5601/tcp                           kibana</span></span><br><span class="line"><span class="attr">46f533f30381</span>        <span class="string">elasticsearch:7.6.2   "/usr/local/bin/do..."   About an hour ago   Up About an hour    0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span></span><br></pre></td></tr></table></figure></li><li><p><code>docker-composer.yml</code>（待验证）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="comment"># 设置集群名称为elasticsearch</span></span><br><span class="line">        <span class="attr">cluster:</span></span><br><span class="line">            <span class="string">name=elasticsearch</span></span><br><span class="line">        <span class="comment"># # 以单一节点模式启动</span></span><br><span class="line">        <span class="attr">discovery:</span></span><br><span class="line">            <span class="string">type=single-node</span></span><br><span class="line">        <span class="comment"># 设置使用jvm内存大小</span></span><br><span class="line">        <span class="attr">ES_JAVA_OPTS:</span> <span class="string">-Xms512m</span> <span class="string">-Xmx512m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="comment"># 插件文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">        <span class="comment"># 数据文件挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/var/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 挂载logstash的配置文件</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/d/usr/local/etc/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="comment"># logstash在elasticsearch启动之后再启动</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="comment"># 可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9600</span><span class="string">:9600</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5044</span><span class="string">:5044</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.6.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch:es</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"elasticsearch.hosts=http://es:9200"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch.yml</span></span><br><span class="line"><span class="comment"># 使外网可连接</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">"ZSX"</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["ZSX"]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot日志项目"><a href="#SpringBoot日志项目" class="headerlink" title="SpringBoot日志项目"></a>SpringBoot日志项目</h2><ol><li><p>创建一个SpringBoot项目，然后在依赖中添加<code>logstash</code>依赖（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>resources</code>目录下添加<code>logback-spring.xml</code>文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_HOST"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_HOST:-$&#123;DOCKER_HOST:-192.168.37.128&#125;&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOGSTASH_PORT"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOGSTASH_PORT:-5600&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意<code>LOGSTASH_HOST</code>、<code>LOGSTASH_PORT</code>要和提供ELK的IP和端口一致</li></ul></li><li><p>配置文件中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>创建一个控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">        log.info(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，然后在<code>Kibana</code>中就会有相应的<code>index</code>，然后添加<code>index</code>的检索就可以了，至此SpringBoot日志使用ELK检索以完成！<code>Kibana</code>中一条日志的<code>JSON</code>格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"logstash-file-test-2020.10.02"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"JfAF63QBTKzFrbF7CZbO"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">    <span class="attr">"level_value"</span>: <span class="number">20000</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"hello"</span>,</span><br><span class="line">    <span class="attr">"logger_name"</span>: <span class="string">"com.example.demo.controller"</span>,</span><br><span class="line">    <span class="attr">"thread_name"</span>: <span class="string">"http-nio-8080-exec-5"</span>,</span><br><span class="line">    <span class="attr">"@version"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"tcplog"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"192.168.37.1"</span>,</span><br><span class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2020-10-02T12:35:17.081Z"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1618</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"fields"</span>: &#123;</span><br><span class="line">    <span class="attr">"@timestamp"</span>: [</span><br><span class="line">      <span class="string">"2020-10-02T12:35:17.081Z"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    <span class="number">1601642117081</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ELK的功能远不止于此，这里先学习在SpringBoot项目中引用ELK进行日志记录，在生产环境出现问题的话就可以快速定位问题所在，在工作中可以作为快速接入指南进行使用。后续还可以使用ELK进行搜索引擎为项目提供搜索服务！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;随着互联网的快速发展，系统越来越庞大，依赖肉眼分析日志文件来排查问题的方式渐渐凸显出一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式集群环境下，
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot WebSocket Quick Start</title>
    <link href="https://wanderros.github.io/2020/09/30/SpringBoot-WebSocket-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/09/30/SpringBoot-WebSocket-Quick-Start/</id>
    <published>2020-09-30T08:55:45.000Z</published>
    <updated>2020-10-01T08:52:15.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议,使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。有了WebSocket技术之后，后端就可以像客户端推送消息，比如向商家客户端推送订单消息等。这里记录在SpringBoot中使用WebSocket的过程。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></li><li><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p></li><li><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p></li><li><p>WebSocket 使用 ws 或 wss 的统一资源标志符，类似于 HTTPS，其中 wss 表示在 TLS 之上的 Websocket,如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws:<span class="comment">//example.com/wsapi</span></span><br><span class="line">wss:<span class="comment">//secure.example.com/wsapi</span></span><br></pre></td></tr></table></figure></li><li><p>从分层的角度来讲，Socket 是传输控制层协议，WebSocket 是应用层协议。</p></li><li><p>WebSocket的调试可以安装一个谷歌浏览器插件<code>Browser WebSocket Client</code>（印象笔记中文档服务笔记本有保存），或者访问在线调试网址：<a href="http://www.websocket-test.com/。" target="_blank" rel="noopener">http://www.websocket-test.com/。</a></p></li><li><p>SpringFramework官方中文介绍WebSocket网址：<a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket" target="_blank" rel="noopener">https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference/web.html#websocket</a></p></li><li><p>尽管 WebSocket 设计为与 HTTP 兼容并以 HTTP 请求开头，但重要的是要了解这两个协议导致了截然不同的体系结构和应用程序编程模型。</p></li><li><p>应用场景：</p><ul><li>可以使网页具有动态性和交互性</li><li>新闻，邮件和社交订阅源</li><li>协作，游戏和金融应用程序</li></ul></li><li><p>服务器与Web客户端之间的双向通行策略：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/47bfa9136df7ac80c4ef082f95d28ebe-35615" alt="Web服务客户端互通策略"></p></li></ol><h2 id="创建一个WebSocket-Server端"><a href="#创建一个WebSocket-Server端" class="headerlink" title="创建一个WebSocket Server端"></a>创建一个<code>WebSocket Server</code>端</h2><ol><li><p>在创建的项目中引入maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>WebSocket处理器用来处理客户端发送的消息,常用有<code>TextWebSocketHandler</code>和<code>BinaryWebSocketHandler</code>，这里创建一个<code>TextWebSocketHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"建立连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String msg = message.getPayload();</span><br><span class="line">        System.out.println(<span class="string">"收到消息： "</span>+msg);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"Hello"</span>+msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭连接： "</span>+session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>afterConnectionEstablished</code> 成功创建连接后调用</li><li><code>handleTextMessage</code> 收到客户端消息后调用</li><li><code>handleTransportError</code> 连接异常时调用</li><li><code>afterConnectionClosed</code> 连接关闭后调用</li><li><code>sendMessage</code>用于向客户端发送消息</li><li><code>WebSocketSession</code>是客户端与服务端建立的回话，可以通过<code>close()</code>方法主动关闭连接</li><li><code>TextMessage</code>为收到的消息，可以通过<code>getPayload()</code>方法获取消息内容</li></ul></li><li><p>配置WebSocket，将处理器映射到指定的path上，还可以添加一些额外的配置，通过实现<code>WebSocketConfigurer</code>以及添加注解<code>@EnableWebSocket</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(chatWebSocketHandler(), <span class="string">"chat"</span>,<span class="string">"chat1"</span>) <span class="comment">// 添加消息处理器,可以添加多个path</span></span><br><span class="line">                <span class="comment">//.addInterceptors(chatHandshakeInterceptor()) // 添加握手拦截器</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>); <span class="comment">// 设置跨域</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatWebSocketHandler <span class="title">chatWebSocketHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatHandshakeInterceptor <span class="title">chatHandshakeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChatHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line">        container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line">        container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addHandler()</code>用于添加消息处理器，并指定映射<code>path</code>，服务端WebSocket地址为 <code>ws://host:port/path</code></li><li><code>setAllowedOrigins</code>用于设置跨域</li><li><code>addInterceptors</code>用于添加拦截器</li></ul></li><li><p>创建一个握手拦截器（可选），只要实现<code>HandshakeInterceptor</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------握手前拦截"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------完成握手"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>beforeHandshake</code>握手前，该方法返回<code>true</code>表示继续建立连接，返回<code>false</code>则终止</li><li><code>afterHandshake</code>握手后动作</li></ul></li><li><p>Session空闲失效时间配置，可以增加一些配置来约束超时时间；还可以设置消息缓冲区大小等(<code>WebSocketConfigurer</code>实现的配置中注入Bean)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title">createWebSocketContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ServletServerContainerFactoryBean container = <span class="keyword">new</span> ServletServerContainerFactoryBean();</span><br><span class="line"> container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line"> container.setMaxSessionIdleTimeout(<span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line"> <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前还没有在真实业务中使用WebSocket，但是查看调试信息可以看到公司邮箱系统是有用到WebSocket的，在后续需要的时候再继续深入吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议,使得客户端和服务器之间的数据交换变得更加简单，
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot Filter QuickStart</title>
    <link href="https://wanderros.github.io/2020/09/29/SpringBoot-Filter-QuickStart/"/>
    <id>https://wanderros.github.io/2020/09/29/SpringBoot-Filter-QuickStart/</id>
    <published>2020-09-29T15:02:10.000Z</published>
    <updated>2020-10-01T08:52:15.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>过滤器、拦截器、AOP能从不同的程度满足拦截请求的过程，想要了解每种方式的差异性必须要深入了解区别，这部分主要记录过滤器的实操。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>过滤器是对数据进行过滤，预处理过程，SpringBoot的过滤器在实现上基于函数回调，可以对几乎所有请求进行过滤。</li><li>过滤器（<code>javax.servlet.Filter</code>）依赖于<code>Servlet</code>容器，属于<code>Servlet</code>规范的一部分。<code>Filter</code>的执行由<code>Servlet</code>容器回调完成，生命周期由<code>Servlet</code>容器管理。</li><li>Filter过滤器是servlet包下面的东西，因此不需要再额外引包。</li><li>官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-embedded-container-servlets-filters-listeners-scanning" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-embedded-container-servlets-filters-listeners-scanning</a></li><li>过滤器可以实现URL级别的权限控制、压缩响应信息、编码格式等等。</li><li>过滤器里面的三个方法：<ul><li><code>init</code>： filter对象只会创建一次，init方法也只会执行一次</li><li><code>doFilter</code> ： 主要的业务代码编写方法，可以多次重复调用</li><li><code>destroy</code>： 在销毁Filter时自动调用（程序关闭或者主动销毁Filter）</li></ul></li><li>在过滤器中，对于满足条件的请求，使用<code>filterChain.doFilter(request, response);</code>将连接转发到目的地，不满足，则直接通过response写入错误信息。</li><li><strong>过滤器可以包装Request和Response，而拦截器、AOP是不能的，<code>HttpServletRequest</code>并未开放接口提供修改头信息，但是利用过滤器+装饰模式可以修改HttpServletRequest的请求头信息。</strong></li></ol><h2 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h2><h3 id="Component注解"><a href="#Component注解" class="headerlink" title="Component注解"></a><strong>Component</strong>注解</h3><ol><li><p>直接实现<strong>Filter</strong>接口，并使用<strong>@Component</strong>注解标注为组件自动注入Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化成功LogCostFilter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter Execute cost="</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当有多个过滤器的时候，使用<code>@Order(num)</code>进行优先级设定，数字越小，优先级越高：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化成功LogCostFilter2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="FilterRegistrationBean配置"><a href="#FilterRegistrationBean配置" class="headerlink" title="FilterRegistrationBean配置"></a><code>FilterRegistrationBean</code>配置</h3><ol><li><p>首先实现一个过滤器接口的类，比如记录时间的过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"Execute cost="</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>FilterRegistrationBean</code>配置该过滤器的规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addUrlPatterns</code>可以添加多个过滤URI</li></ul></li><li><p>对于多个过滤器：</p><ol><li><p>再实现一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改配置类<code>FiltersConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/body"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> LogCostFilter2());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter2"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个里面可以配置过滤器的优先级，有些时候是需要考虑优先级的</p></li><li><p>优先级数字越小，优先级越高</p></li><li><p>调试过滤器输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mapping filters: LogCostFilter urls=[<span class="comment">/*] order=2, LogCostFilter2 urls=[/*] order=5, characterEncodingFilter urls=[/*] order=-2147483648, formContentFilter urls=[/*] order=-9900, requestContextFilter urls=[/*] order=-105</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p><strong>Component</strong>可以和<code>FilterRegistrationBean</code>配合使用，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiltersConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> cLogCostFilter clog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> bLogCostFilter2 blog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(blog);</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter2"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registFilter2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(clog);</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        registration.setName(<span class="string">"LogCostFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="WebFilter配置"><a href="#WebFilter配置" class="headerlink" title="WebFilter配置"></a><code>WebFilter</code>配置</h3><ol><li><p><code>@WebFilter</code> 用于将一个类声明为过滤器，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 )</p></li><li><p><code>@WebFilter</code>常用属性:</p><table><thead><tr><th align="left"><strong>属性名</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">filterName</td><td align="left">String</td><td align="left">指定过滤器的 name 属性，等价于</td></tr><tr><td align="left">value</td><td align="left">String[]</td><td align="left">该属性等价于 urlPatterns 属性。但是两者不应该同时使用。</td></tr><tr><td align="left">urlPatterns</td><td align="left">String[]</td><td align="left">指定一组过滤器的 URL 匹配模式。等价于 标签。</td></tr><tr><td align="left">servletNames</td><td align="left">String[]</td><td align="left">指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中的 name 属性的取值，或者是 web.xml 中 的取值。</td></tr><tr><td align="left">dispatcherTypes</td><td align="left">DispatcherType</td><td align="left">指定过滤器的转发模式。具体取值包括： ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td></tr><tr><td align="left">initParams</td><td align="left">WebInitParam[]</td><td align="left">指定一组过滤器初始化参数，等价于 标签。</td></tr><tr><td align="left">asyncSupported</td><td align="left">boolean</td><td align="left">声明过滤器是否支持异步操作模式，等价于 标签。</td></tr><tr><td align="left">description</td><td align="left">String</td><td align="left">该过滤器的描述信息，等价于 标签。</td></tr><tr><td align="left">displayName</td><td align="left">String</td><td align="left">该过滤器的显示名，通常配合工具使用，等价于 标签。</td></tr></tbody></table></li><li><p>使用的时候先要在过滤器类上添加<code>@WebFilter</code>注解，然后在启动类上加上<code>@ServletComponentScan</code>注解来扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"LogCostFilter2"</span>,urlPatterns = &#123;<span class="string">"/1"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bLogCostFilter2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 inited!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"LogCostFilter2 Execute cost="</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>扫描多个包时，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span>(basePackages = &#123;<span class="string">"com.example.springboot.servlet"</span>,<span class="string">"com.example.springboot.filter"</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>添加多个过滤地址的方式类下面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/config/*"</span>,<span class="string">"/driver/*"</span>,<span class="string">"/order/*"</span>,<span class="string">"/im/*"</span>,<span class="string">"/privacy/*"</span>,<span class="string">"/config/*"</span>&#125;, filterName = <span class="string">"apiFilter"</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="4"><li><p>对于在同一个包下的filter，采用这种方式的时候，过滤器的执行顺序按照过滤器名来决定，比如aLogCostFilter2&gt;bLogCostFilter2,在不同包下更复杂（有博客去说，但是没有验证）</p></li><li><p>使用了该方式就不要使用<code>@Component</code>注解的方式了，两个选其一，过滤器会被多次初始化以及执行。如果有<code>FilterRegistrationBean</code>则该方式的过滤器不生效。</p></li><li><p>有多个Filter的时候，<code>filterName</code>属性不能相同，否则会出错。可以配置配置文件修改覆盖，但是不推荐：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用覆盖同名bean</span></span><br><span class="line"><span class="meta">spring.main.allow-bean-definition-overriding</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过滤器想对来说还是很容易理解的，记录了几种不同的过滤器设置规则，但是觉得还是<code>FilterRegistrationBean</code>比较好用，非常友好，其他的都有一些缺陷，<code>FilterRegistrationBean</code>能够设置过滤的规则，过滤器的优先顺序，相比<code>WebFilter</code>这种优先级的设置要觉得清楚很多，个人优先考虑<code>FilterRegistrationBean</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;过滤器、拦截器、AOP能从不同的程度满足拦截请求的过程，想要了解每种方式的差异性必须要深入了解区别，这部分主要记录过滤器的实操。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot AOP Quick Start</title>
    <link href="https://wanderros.github.io/2020/09/28/SpringBoot-AOP-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/09/28/SpringBoot-AOP-Quick-Start/</id>
    <published>2020-09-28T11:30:21.000Z</published>
    <updated>2020-10-01T08:52:15.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring AOP在SpringBoot实战学习的时候有接触过，但是对于其并没有深入，在实际开发中才渐渐发现它的强大，这里花点时间深入了解一下AOP，使得后续项目开发中能更好地使用AOP写出优质代码！</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ol><li><p>官方说明文档：<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop</a></p></li><li><p>AOP （Aspect Oriented Programming，面向切面编程）是一种编程思想，是面向对象编程（OOP）的一种补充。（OOP从纵向上区分出一个个的类来，而AOP则从横向上向对象中加入特定的代码。）面向对象编程将程序抽象成各个层次的对象，而面向切面编程是将程序抽象成各个切面！</p></li><li><p>AOP的存在是为了保证开发者不修改源代码的前提下，为系统中的业务组件添加某种通用功能，AOP能够使得代码解耦，并且可以让一组类共享相同的行为。</p></li><li><p>各种AOP实现的比较：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7f6d70a666b70e2cf99d93a04c34eb58-59526" alt="AOP比较"></p></li><li><p>AOP 领域术语：</p><ol><li>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理</li><li>连接点（Join Point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用，通过声明一个<code>org.aspectj.lang.JoinPoint</code>类型参数我们可以在通知(Advice)中获得连接点的信息</li><li>切点（PointCut）: 可以插入增强处理的连接点集，切入点表达式如何跟连接点匹配是AOP的核心，Spring默认使用AspectJ作为切入点语法</li><li>切面（Aspect）: 切面是通知和切点的结合，可能会横切多个对象</li><li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性，AOP允许在运行时动态的向代理对象实现新的接口来完成一些额外的功能并且不影响现有对象的功能</li><li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。Spring和其他纯AOP框架一样，在运行时完成织入</li></ol></li><li><p>Spring 中的 AOP 是通过动态代理实现的，不能拦截对对象字段的修改，也不支持构造器连接点,无法在 Bean 创建时应用通知！</p></li><li><p>Spring AOP 中有 5 中通知类型：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7c1d36d77b3d405328d28bb915250fc7-28909" alt="通知类型"></p><ul><li>环绕通知类型<code>@Around</code>将整个目标方法封装了起来，在使用时，传入<code>ProceedingJoinPoint</code>类型的参数，调用<code>proceed()</code>方法是会进入目标方法中返回，否则原目标方法被阻塞调用</li><li>后置通知是当某个连接点退出的时候执行的通知，而不管是正常返回还是发生异常后的退出，说白了就是会在返回后通知和抛出异常后通知执行</li></ul></li><li><p>Spring AOP是Spring的一个重要组件，但是Spring IOC并不依赖于Spring AOP，这意味着可以自由选择是否使用AOP，AOP提供了强大的中间件解决方案，这使得Spring IOC更加完善。</p></li><li><p><strong>AOP能用来实现日志监听、事务管理、效率检查、权限控制等。</strong>AOP能够减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p></li><li><p>被定义为切面的类需要 <code>@Component</code> 注解标注。</p></li><li><p>Spring提供了3种类型的AOP支持：</p><ol><li>基于代理的经典SpringAOP（需要实现接口，手动创建代理）</li><li>纯POJO切面（使用XML配置，aop命名空间）</li><li><code>@AspectJ</code>注解驱动的切面（使用注解的方式）</li></ol></li><li><p>AOP实现日志监听的比较好的样例效果：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/af330349070ce3c0d890c6089e4053da-184252" alt="日志管理"></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/bb2526c43285284bfd389f5189cff547-84900" alt="日志管理详情"></p></li></ol><h2 id="声明一个PointCut（切点）"><a href="#声明一个PointCut（切点）" class="headerlink" title="声明一个PointCut（切点）"></a>声明一个PointCut（切点）</h2><ol><li><p>Spring AOP仅支持Spring Bean可执行方法连接点，因此在 Spring AOP 中，连接点总是方法的调用。</p></li><li><p>切点可以通过注解<code>@Pointcut</code>来声明，作为Pointcut 标识的方法返回类型必须是<code>void</code>。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* transfer(..))"</span>) <span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// the pointcut signature</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>Spring AOP借助了AspectJ的语法，但底层技术用的还是Spring自己的。因此AspectJ的切点语法可以参考<a href="https://www.eclipse.org/aspectj/doc/released/progguide/index.html" target="_blank" rel="noopener">AspectJ语法指导</a>，Spring AOP支持的AspectJ 切点标识符：</p><ul><li><code>execution</code>：用于匹配方法执行连接点（基础切点标识符）</li><li><code>within</code>：限制性匹配指定类型的连接点（范围型）</li><li><code>this</code>：限制性匹配指定类型的实例及其子类的连接点（精确型）</li><li><code>target</code>：限制性匹配目标Object是给定类型实例（不包含子类）的连接点（精确型）</li><li><code>args</code>：限制性匹配使用指定参数类型（如<code>String</code>）的连接点（范围型）</li><li><code>@target</code>：<strong>类上</strong>带有指定类型注解的连接点（精确型）</li><li><code>@args</code>：<strong>参数类型</strong>带有指定类型的注解（范围型）</li><li><code>@within</code>：目标类型上有指定类型的注解（范围性）</li><li><code>@annotation</code>：限制性匹配有指定的注解可执行方法的连接点（精确型）</li></ul></li><li><p>可以通过<code>&amp;&amp;</code>，<code>||</code>以及<code>!</code>来组合表示切点表达式，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * *(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyPublicOperation</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.myapp.trading..*)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inTrading</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"anyPublicOperation() &amp;&amp; inTrading()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tradingOperation</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>anyPublicOperation()</code>指示任何public类型的可执行方法</li><li><code>inTrading()</code>指示在模块<code>trading</code>中的可执行方法</li><li><code>tradingOperation()</code>指示在模块<code>trading</code>中的public类型的可执行方法</li></ul></li><li><p>Spring AOP的大多数使用者喜欢使用<code>execution</code>来指示连接点，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) <span class="keyword">throws</span>-pattern?)</span><br></pre></td></tr></table></figure><ul><li><code>ret-type-pattern</code>、<code>name-pattern</code>、<code>param-pattern</code>是必须有的，其他的都是可选的</li><li><code>*</code>是使用最多的返回类型，用于匹配任意返回类型</li><li>参数类型使用<code>()</code>表示没有参数，<code>(..)</code>表示可以有任意个参数，<code>(*)</code>表示只有一个任意类型的参数，<code>(*,String)</code>匹配第一个是任意类型的参数，第二个是String类型的可执行方法</li></ul></li><li><p>示例：</p><ul><li>任意public的可执行方法：<code>execution(public * *(..))</code></li><li>任意名称以set开头的可执行方法：<code>execution(* set*(..))</code></li><li>指定到<code>com.xyz.service.AccountService</code>下任意可执行方法：<code>execution(* com.xyz.service.AccountService.*(..))</code></li><li>指定到包<code>com.xyz.service</code>下的任意可执行方法：<code>execution(* com.xyz.service.*.*(..))</code></li><li>指定到包<code>com.xyz.service</code>或者任意一个子包下的任意可执行方法：<code>execution(* com.xyz.service..*.*(..))</code></li><li>在包<code>com.xyz.service</code>下（不包含子包）的任意连接点：<code>within(com.xyz.service.*)</code></li><li>使用了<code>@Transactional</code>注解的可执行方法的任意连接点：<code>@annotation(org.springframework.transaction.annotation.Transactional)</code></li><li>只有一个参数，而且运行时传递了<code>@Classified</code>注解的任意连接点：<code>@args(com.xyz.security.Classified)</code></li><li>… …</li></ul></li><li><p>推荐博客：<a href="https://www.cnblogs.com/zhangxufeng/p/9160869.html，实在不太清楚可以对照官方文档进行试验，以实际效果为准！" target="_blank" rel="noopener">https://www.cnblogs.com/zhangxufeng/p/9160869.html，实在不太清楚可以对照官方文档进行试验，以实际效果为准！</a></p></li></ol><h2 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h2><ol><li><p>5种类型的通知：</p><ul><li><code>@Before</code> ：在切入点开始处切入内容</li><li><code>@AfterReturning</code> ：在切入点 return 内容之后切入内容（可以用来对处理返回值做一些加工处理）</li><li><code>@AfterThrowing</code> ：用来处理当切入内容部分抛出异常之后的处理逻辑</li><li><code>@After</code> ：在切入点结尾处切入内容</li><li><code>@Around</code> ：在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li></ul></li><li><p>在实际情况下，对同一个接口做多个切面时会面临一个优先级的问题，这就需要使用 <code>@Order(i)</code> 注解来标识切面的优先级, <code>i</code> 的值越小，优先级越高。<strong>在切入点前的操作，按order的值由小到大执行，在切入点后的操作，按order的值由大到小执行！</strong></p></li><li><p>在进行通知处理的时候，5中类型通知的处理是有先后顺序的，默认顺序如下，如果有特殊处理除外：</p><ul><li><code>@Around</code> &gt; <code>@Before</code> &gt; <code>@AfterThrowing</code>&gt;<code>@AfterReturning</code> &gt; <code>@After</code> </li><li>如果<code>@Around</code>不执行<code>proceed()</code>方法，则其他通知是无法执行的</li></ul></li><li><p>除了环绕通知可以添加<code>ProceedingJoinPoint</code>类型的参数外，其他的通知都可以添加<code>JoinPoint</code>类型的参数。</p></li><li><p><code>@Before</code>通知可以接受切点的方法参数，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(public * com.example.aop.controller..*(..))&amp;&amp;args(result)"</span>,argNames = <span class="string">"joinPoint,result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">(JoinPoint joinPoint,Result result)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Before注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Before &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该注解只能用在方法上</p></li><li><p><code>value</code>用于传递切点</p></li><li><p><code>argNames</code>可以接受方法的参数名</p></li></ul></li><li><p><code>@AfterReturning</code>通知可以通过参数接受切点方法的返回值也可以获取参数值，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1   </span></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"annotationPointCut()"</span>,returning = <span class="string">"res"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturnAdvice</span><span class="params">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例2</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public * com.example.aop.controller..*(..))&amp;&amp;args(result)"</span>,returning = <span class="string">"res"</span>,argNames = <span class="string">"joinPoint,res,result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturnAdvice2</span><span class="params">(JoinPoint joinPoint,Object res,Result result)</span></span>&#123;</span><br><span class="line">        log.info(joinPoint.toString());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@AfterReturning</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AfterReturning &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pointcut</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">returning</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>value</code>用于传递切点,<code>pointcut</code>也是 </p></li><li><p><code>argNames</code>可以接受方法的参数名</p></li><li><p><code>returning</code>可以接受方法的返回值，然后传递到通知的参数中</p></li></ul></li><li><p><code>@AfterThrowing</code>通知可以通过参数接受切点方法的异常：</p><ul><li><p><code>@AfterThrowing</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AfterThrowing &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pointcut</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">throwing</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>throwing</code>用于接受异常，然后传递到通知的参数中</p></li></ul></li><li><p><code>@After</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> After &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Around</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Around &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">argNames</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过自定义注解来表示切点，格式类似下面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Target 的注解类型    适用场景</span></span><br><span class="line"><span class="comment"> *    TYPE              类(包括Enum)接口</span></span><br><span class="line"><span class="comment"> *    PACKAGE           包</span></span><br><span class="line"><span class="comment"> *    METHOD            方法</span></span><br><span class="line"><span class="comment"> *    FIELD             成员域(包括Enum常量)</span></span><br><span class="line"><span class="comment"> *    CONSTRUCTOR       构造器</span></span><br><span class="line"><span class="comment"> *    PARAMETER         方法或构造器参数</span></span><br><span class="line"><span class="comment"> *    LOCAL_VARIABLE    本地变量</span></span><br><span class="line"><span class="comment"> *    ANNOTATION_TYPE   注解类型声明</span></span><br><span class="line"><span class="comment"> *    java 8 新加</span></span><br><span class="line"><span class="comment"> *    TYPE_PARAMETER    类型参数声明</span></span><br><span class="line"><span class="comment"> *    TYPE_USE          类型的使用</span></span><br><span class="line"><span class="comment"> * Retention的保留策略</span></span><br><span class="line"><span class="comment"> *    保留规则           描述</span></span><br><span class="line"><span class="comment"> *    SOURCE             注释将被编译器丢弃,不包括在类文件中</span></span><br><span class="line"><span class="comment"> *    CLASS              注释由编译器记录在类文件中,但是不需要在运行时被虚拟机(VM)保留。默认策略</span></span><br><span class="line"><span class="comment"> *    RUNTIME            注释由编译器记录在类文件中，并在运行时由VM保存，因此可以反射可读取它们</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//注解放置的目标位置,METHOD是可注解在方法级别上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//注解在哪个阶段执行</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperLog &#123;</span><br><span class="line">    <span class="function">String <span class="title">operModul</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">// 操作模块</span></span><br><span class="line">    <span class="function">String <span class="title">operType</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">// 操作类型</span></span><br><span class="line">    <span class="function">String <span class="title">operDesc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">// 操作说明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解方式的参数传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Pointcut</span>(value = <span class="string">"@annotation(log)"</span>, argNames = <span class="string">"log"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">(Log log)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"pointcut(log)"</span>, argNames = <span class="string">"joinPoint,log"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, Log log)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(log.value());</span><br><span class="line">            System.out.println(<span class="string">"around"</span>);</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"around"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>环绕通知非常强大，可以决定目标方法是否执行，什么时候执行，执行时是否需要替换方法参数，执行完毕是否需要替换返回值。 </p></li><li><p>环绕通知第一个参数必须是org.aspectj.lang.ProceedingJoinPoint类型 。</p></li></ol><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><ol><li><p><code>HttpServletRequest</code>以及<code>HttpServletResponse</code>：</p><ol><li><p>实例获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取RequestAttributes</span></span><br><span class="line">RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">// RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes(); // 这个方法也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从获取的RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) requestAttributes</span><br><span class="line">  .resolveReference(RequestAttributes.REFERENCE_REQUEST);</span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes)requestAttributes).getRequest();</span><br><span class="line">HttpServletResponse response = ((ServletRequestAttributes)requestAttributes).getResponse();</span><br></pre></td></tr></table></figure></li><li><p><code>HttpServletRequest</code>方法说明(常用)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">request.getMethod() <span class="comment">//动词 GET POST等</span></span><br><span class="line">  request.getHeader(<span class="string">"Connection"</span>) <span class="comment">//请求头的获取</span></span><br><span class="line">  request.getServletPath() <span class="comment">// 获取URI 比如：/api/test</span></span><br><span class="line">  request.getCookies() <span class="comment">// 获取所有的Cookie</span></span><br><span class="line">  request.getRequestedSessionId() <span class="comment">// 获取SessionID</span></span><br><span class="line">  request.getRequestURL() <span class="comment">// 获取除参数外的完整URL</span></span><br><span class="line">  request.getProtocol() <span class="comment">// 获取http协议标准 比如：HTTP/1.1</span></span><br><span class="line">  request.getQueryString() <span class="comment">// 该方法返回请求中的参数部分（参数名+值）</span></span><br><span class="line">  request.getRemoteAddr() <span class="comment">// 该方法返回请求的客户机的IP地址</span></span><br><span class="line">  request.getRemoteHost() <span class="comment">// 该方法返回请求的客户机的完整主机名</span></span><br><span class="line">  request.getRemotePort() <span class="comment">// 该方法返回客户机所使用的网络端口号</span></span><br><span class="line">  request.getLocalPort() <span class="comment">// 该方法返回web服务器所使用的网络端口号</span></span><br><span class="line">  request.getLocalAddr() <span class="comment">// 该方法返回WEB服务器的IP地址</span></span><br><span class="line">  request.getLocalName() <span class="comment">// 该方法返回WEB服务器的主机名</span></span><br><span class="line">  request.getAuthType() <span class="comment">// 该返回包含用来保护servlet身份验证方案的名称，如BASIC和SSL，如果是null表示未不受保护</span></span><br><span class="line">  request.getScheme() <span class="comment">// 返回请求的方案名，如http,ftp,https等</span></span><br><span class="line">  request.getInputStream() <span class="comment">// 获取body中的内容</span></span><br><span class="line">  request.getParameter(<span class="string">"result"</span>) <span class="comment">// 获取Params中的参数值</span></span><br><span class="line">  request.getParameterMap() <span class="comment">//获取Params中的所有参数值，Map形式</span></span><br><span class="line">  request.getParameterNames() <span class="comment">// 获取Params中的所有参数名称</span></span><br><span class="line">  request.getHeaderNames() <span class="comment">//获取Headers中所有的Header名称</span></span><br></pre></td></tr></table></figure></li><li><p>获取所有Params：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        Enumeration&lt;?&gt; temp = request.getParameterNames();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.hasMoreElements()) &#123;</span><br><span class="line">                String en = (String) temp.nextElement(); <span class="comment">// key</span></span><br><span class="line">                String value = request.getParameter(en); <span class="comment">// value</span></span><br><span class="line">                System.out.println(en);</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">        Map&lt;String, String[]&gt; map= request.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, String[]&gt; entry : map.entrySet())&#123;</span><br><span class="line">            String mapKey = entry.getKey();</span><br><span class="line">            String[] mapValue = entry.getValue();</span><br><span class="line">            System.out.println(mapKey+<span class="string">":"</span>+mapValue[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取所有的Header：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;?&gt; temp = request.getHeaderNames();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">    <span class="keyword">while</span> (temp.hasMoreElements()) &#123;</span><br><span class="line">        String en = (String) temp.nextElement();</span><br><span class="line">        String value = request.getHeader(en);</span><br><span class="line">        System.out.println(en);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>HttpServletResponse</code>相比而言多了<code>send</code>方法，而少了一些其他的get方法，需要时可以了解</p></li><li><p>IP提取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRealIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 这个一般是Nginx反向代理设置的参数</span></span><br><span class="line">       String ip = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">           ip = request.getRemoteAddr();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 处理多IP的情况（只取第一个IP）</span></span><br><span class="line">       <span class="keyword">if</span> (ip != <span class="keyword">null</span> &amp;&amp; ip.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">           String[] ipArray = ip.split(<span class="string">","</span>);</span><br><span class="line">           ip = ipArray[<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ip;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>JoinPoint</code>以及<code>ProceedingJoinPoint</code>：</p><ol><li><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object[] getArgs(); <span class="comment">// 获取传入目标方法的参数对象</span></span><br><span class="line"><span class="function">Signature <span class="title">getSignature</span><span class="params">()</span></span>; <span class="comment">// 获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</span></span><br><span class="line"><span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>; <span class="comment">// 获取被代理的对象</span></span><br><span class="line"><span class="function">Object <span class="title">getThis</span><span class="params">()</span></span>; <span class="comment">//获取代理对象</span></span><br></pre></td></tr></table></figure></li><li><p><code>Signature getSignature()</code>:<strong>（用的非常多）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;<span class="comment">// 方法名称参数，如 Map com.example.aop.controller.helloPara(Integer,String,String)</span></span><br><span class="line">  <span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>; <span class="comment">//非常简单的方法名称参数，如 controller.helloPara(..)</span></span><br><span class="line">  <span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>; <span class="comment">// 超级详细的方法名称参数，如public java.util.Map com.example.aop.controller.helloPara(java.lang.Integer,java.lang.String,java.lang.String)</span></span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 方法名称 ，如helloPara</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Class <span class="title">getDeclaringType</span><span class="params">()</span></span>; <span class="comment">// 目标方法的类 如 class com.example.aop.controller</span></span><br><span class="line">  <span class="function">String <span class="title">getDeclaringTypeName</span><span class="params">()</span></span>;<span class="comment">// 类名 如com.example.aop.controller</span></span><br><span class="line">      </span><br><span class="line">Signature signature = joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">String[] parameterNames = methodSignature.getParameterNames(); <span class="comment">//获取方法参数名称</span></span><br><span class="line">methodSignature.getParameterTypes() <span class="comment">// 获取方法参数类</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object getTarget()</code>以及<code>Object getThis()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object target=pjp.getTarget();</span><br><span class="line">Object proxy=pjp.getThis();</span><br><span class="line">System.out.println(target.getClass().getName()); <span class="comment">// 方法名称</span></span><br><span class="line">System.out.println(proxy.getClass().getName()); <span class="comment">// 增强后的方法名称</span></span><br></pre></td></tr></table></figure></li><li><p><code>MethodSignature</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class[] getParameterTypes();</span><br><span class="line">String[] getParameterNames();</span><br><span class="line">Class[] getExceptionTypes();</span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Class <span class="title">getDeclaringType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getDeclaringTypeName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Class <span class="title">getReturnType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>目标方法获取后的处理模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理请求参数</span></span><br><span class="line">String[] paramNames = ((MethodSignature) signature).getParameterNames();</span><br><span class="line">Object[] paramValues = joinPoint.getArgs();</span><br><span class="line"><span class="keyword">int</span> paramLength = <span class="keyword">null</span> == paramNames ? <span class="number">0</span> : paramNames.length;</span><br><span class="line"><span class="keyword">if</span> (paramLength == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramLength; i++) &#123;</span><br><span class="line">        paramNames[i] <span class="comment">// 参数名称</span></span><br><span class="line">        JSONObject.toJSONString(paramValues[i])<span class="comment">// 参数内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="引入-目标类增加方法"><a href="#引入-目标类增加方法" class="headerlink" title="引入(目标类增加方法)"></a>引入(目标类增加方法)</h2><ol><li>概念：在不改变一个现有类代码的情况下，为该类添加属性和方法,可以在无需修改现有类的前提下，让它们具有新的行为和状态。</li><li>主要是使用<code>@DeclareParents</code>注解来实现。</li></ol><h2 id="重复获取RestController请求中body内容"><a href="#重复获取RestController请求中body内容" class="headerlink" title="重复获取RestController请求中body内容"></a>重复获取RestController请求中body内容</h2><ol><li><p>AOP可以对RestController中的方法进行切面，而涉及到这些Web请求的增强时通常会使用<code>HttpServletRequest</code>来获取请求的body等的内容，获取body内容时可能会出现问题，这里主要介绍如何解决这些问题。</p></li><li><p><code>HttpServletRequest</code>的获取使用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取RequestAttributes</span></span><br><span class="line">RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">// RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes(); // 这个方法也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从获取的RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) requestAttributes</span><br><span class="line">  .resolveReference(RequestAttributes.REFERENCE_REQUEST);</span><br></pre></td></tr></table></figure></li><li><p>body内容的获取通过上面的方法的request来得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  System.out.println(<span class="keyword">new</span> String(request.getInputStream().readAllBytes()));</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">   System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要注意的是body的获取方法是<code>getInputStream</code>，这个只能读取一次，再次读取会抛出异常，因此，想要获取body中的内容，需要实现一个继承<code>HttpServletRequestWrapper</code>的类<code>RequestMapper</code>，并重写里面的<code>getInputStream</code>方法</li></ul></li><li><p>重写继承自<code>HttpServletRequestWrapper</code>的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; parameterMap; <span class="comment">// 所有参数的Map集合</span></span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeRequestWrapper</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        parameterMap = request.getParameterMap();</span><br><span class="line">        body= <span class="keyword">new</span> String(request.getInputStream().readAllBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写的getInputStream方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayInputStream is=<span class="keyword">new</span> ByteArrayInputStream(body.getBytes());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> is.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写几个HttpServletRequestWrapper中的方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有参数名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回所有参数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;String&gt;(parameterMap.keySet());</span><br><span class="line">        <span class="keyword">return</span> vector.elements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的值，如果有重复的参数名，则返回第一个的值 接收一般变量 ，如text类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 指定参数名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定参数名的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String[] results = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">return</span> results[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的所有值的数组，如：checkbox的所有数据</span></span><br><span class="line"><span class="comment">     * 接收数组变量 ，如checkobx类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameterMap</span><span class="params">(Map&lt;String, String[]&gt; parameterMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parameterMap = parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现一个过滤器类来使用重写的继承类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LangFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用requestWrapper过滤器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ChangeRequestWrapper changeRequestWrapper = <span class="keyword">new</span> ChangeRequestWrapper((HttpServletRequest) servletRequest);</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = <span class="keyword">new</span> HashMap&lt;&gt;(changeRequestWrapper.getParameterMap());</span><br><span class="line">        String[] strings = parameterMap.get(<span class="string">"lang"</span>);           <span class="comment">//逻辑代码给定默认的参数值,如果参数不为中文,则直接返回异常</span></span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="keyword">null</span> || strings.length == <span class="number">0</span>) &#123;</span><br><span class="line">            strings = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">            strings[<span class="number">0</span>] = <span class="string">"zh"</span>;</span><br><span class="line">            parameterMap.put(<span class="string">"lang"</span>, strings);</span><br><span class="line">            changeRequestWrapper.setParameterMap(parameterMap);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String language = strings[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!language.equals(<span class="string">"zh"</span>)) &#123;</span><br><span class="line">                Map&lt;String,String&gt; error = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                error.put(<span class="string">"code"</span>,<span class="string">"500"</span>);</span><br><span class="line"></span><br><span class="line">                ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream = servletResponse.getOutputStream();</span><br><span class="line">                    outputStream.write(<span class="number">112</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outputStream.flush();</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用复写后的wrapper</span></span><br><span class="line">        filterChain.doFilter(changeRequestWrapper, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目中实现了这两个类之后，就可以在AOP中获取RestController的body中的内容！</p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>在使用AOP切入方法的时候，方法的访问控制修饰符不可以是<code>private</code>（由于CGLib采用动态创建子类的方式代理对象，不能对目标类中的final或private方法进行代理），可以是<code>public</code>、<code>protected</code>以及不加任何访问修饰符！</li><li>AOP的默认配置属性中，<code>spring.aop.auto</code>属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了<code>@EnableAspectJAutoProxy</code>，不需要在程序主类中增加<code>@EnableAspectJAutoProxy</code>来启用！</li><li><strong>不宜把重要的业务逻辑放置到AOP中！</strong></li><li>AOP无法拦截<code>static</code>、<code>final</code>修饰的方法，也无法拦截内部方法调用，因为内部方法调用直接被调用，无法进行增强。</li><li>需要合理利用面向切面编程提升代码质量。</li><li>课程学习：<a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">https://www.imooc.com/learn/869</a></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SpringBoot项目中目前能想到的内容都基本上有去查询与记录，后续使用到一些更为麻烦的场景的时候再继续记录下来，不断扩充自己的AOP知识，这部分没有完整看官方的文档，目前的策略还是用到多少看多少，不然进度太慢了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Spring AOP在SpringBoot实战学习的时候有接触过，但是对于其并没有深入，在实际开发中才渐渐发现它的强大，这里花点时间深入了解
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot MybatisPlus 多租户插件学习</title>
    <link href="https://wanderros.github.io/2020/09/28/SpringBoot-MybatisPlus-%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wanderros.github.io/2020/09/28/SpringBoot-MybatisPlus-%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-27T23:21:52.000Z</published>
    <updated>2020-10-01T08:52:15.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>多租户是一种软件架构技术，在多用户的环境下，共有同一套系统，并且要注意数据之间的隔离性。在学习MybatiPlus（以下简称MP）的使用过程中，看到自3.4.0之后添加内置插件，内置插件里有多租户插件，就很好奇，然后就尝试了下使用，虽然有文档啥的，但还是花了很长时间去跑一个Demo。记录下来，如果以后有需要也能快速开发！</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>多租户是指软件架构支持一个实例服务多个用户（Customer），每一个用户被称之为租户（tenant），软件给予租户可以对系统进行部分定制的能力，如用户界面颜色或业务规则，但是他们不能定制修改软件的代码。</li><li>场景：开发系统时，如果该系统提供给多个商家使用时，考虑到各个商家的数据隔离的时候，就需要在传输数据时带上商家的ID（租户ID），从而进行数据的隔离。其实就是不同租户使用同一套系统，需要考虑数据隔离的问题！</li><li>数据隔离有三种方案：<ol><li><strong>独立数据库</strong>：简单来说就是一个租户使用一个数据库，这种数据隔离级别最高，安全性最好，但是成本就相对很高</li><li><strong>共享数据库、隔离数据架构</strong>：多租户使用同一个数据裤，但是每个租户对应一个Schema</li><li><strong>共享数据库、共享数据架构</strong>：使用同一个数据库，同一个Schema，但是在表中增加了租户ID的字段，这种共享数据程度最高，隔离级别最低</li></ol></li><li>MP通过内置的多租户插件（TenantLineInnerInterceptor）提供了一种多租户解决方案。</li></ol><h2 id="MP多租户简单实现"><a href="#MP多租户简单实现" class="headerlink" title="MP多租户简单实现"></a>MP多租户简单实现</h2><ol><li><p>创建一个SpringBoot项目，添加MP的依赖(3.4版本)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库脚本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">deleted <span class="built_in">boolean</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">false</span>,</span><br><span class="line">tenant_id <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>,sex,tenant_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建实体对象User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"tenant_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long tenantId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类上添加Mapper扫描注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Test2Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置MP的内置插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        TenantLineInnerInterceptor tenantLineInnerInterceptor=<span class="keyword">new</span> TenantLineInnerInterceptor(<span class="keyword">new</span> TenantLineHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Expression <span class="title">getTenantId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> LongValue(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getTenantIdColumn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"tenant_id"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ignoreTable</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        interceptor.addInnerInterceptor(tenantLineInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line"><span class="comment">//        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));</span></span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>主要实现TenantLineHandler的<code>getTenantId</code>、<code>getTenantIdColumn</code>、<code>ignoreTable</code>方法，分别表示租户ID、租户ID对应的数据库列、忽略哪些表（因为有些可能是公用的表或者其他用处）</li><li>这里是所有的表都不忽略，然后租户ID以及租户ID对应的数据库列都是固定的，方便测试</li></ol></li><li><p>添加配置文件（application.yml）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># sql输出到控制台  方便查看</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Creating a new SqlSession</span></span><br><span class="line"><span class="comment">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@604c7e9b] was not registered for synchronization because synchronization is not active</span></span><br><span class="line"><span class="comment">JDBC Connection [HikariProxyConnection@1560391896 wrapping com.mysql.cj.jdbc.ConnectionImpl@271e851e] will not be managed by Spring</span></span><br><span class="line"><span class="comment">==&gt;  Preparing: UPDATE tb_user SET deleted = 1 WHERE tenant_id = 1 AND id_real = ? AND deleted = 0</span></span><br><span class="line"><span class="comment">==&gt; Parameters: 5(Integer)</span></span><br><span class="line"><span class="comment">&lt;==    Updates: 1</span></span><br><span class="line"><span class="comment">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@604c7e9b]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>可以看到虽然没有在条件中加入tenant_id，但是输出的sql语句中自动加入了该字段，非常方便</li><li>配置好之后，不管是查询、新增、修改删除方法，MP都会自动加上租户ID的标识</li><li>实现出现问题可以先看SpringBoot MybatisPlus Quick Start中的记录</li></ul></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><code>MateCloud</code>有用MP的多租户插件，可以阅读下源码，代码地址：<a href="https://github.com/matevip/matecloud" target="_blank" rel="noopener">https://github.com/matevip/matecloud</a></li><li><strong>多租户 != 权限过滤,不要乱用,租户之间是完全隔离的!!!</strong></li><li>在开发的过程中我忘记ComponentScan，导致MP的配置没有生效，一直不出现效果，浪费了很多时间，非常要注意这些弱智问题！</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多租户概念上理解起来还是很简单的，但是涉及到的内容很多，这里只是用MP的内置插件写了一个Demo，根据效果大致了解了MP的多租户的实现原理，后续如果业务上有需求，也不失为一种快速方案！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;多租户是一种软件架构技术，在多用户的环境下，共有同一套系统，并且要注意数据之间的隔离性。在学习MybatiPlus（以下简称MP）的使用过程
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot MybatisPlus Quick Start</title>
    <link href="https://wanderros.github.io/2020/09/26/SpringBoot-MybatisPlus-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/09/26/SpringBoot-MybatisPlus-Quick-Start/</id>
    <published>2020-09-26T06:21:18.000Z</published>
    <updated>2020-10-01T08:52:15.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>真的是好久没有写学习日志了，一方面和最近这一个月的状态有关，另一方面也可能上上班太累了吧，每天都有很多杂七杂八的活，然后又重构项目，在这种状态下人真的很颓废，然后收拾一下自己的房间，也收拾一下自己的心情，不能放弃学习记录的习惯，更不能让坏心情影响了自己，之前有去接触了下MybatisPlus（以下简称MP），本以为自己会很快建立新项目引入MP，实际上却出现了不少的问题，记录下这些东西很有意义的内容，快速成长吧！</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="自动化SQL"><a href="#自动化SQL" class="headerlink" title="自动化SQL"></a>自动化SQL</h2><p>在开发过程中建立好了表，如果迁移到测试环境或者其他环境中，可能需要手动执行SQL语句来执行表的建立以及数据的导入，非常不方便，但是Spring中提供了在项目启动时执行sql语句的配置，只要配置好了就可以自动建表以及插入数据。自动建表的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><ul><li><code>spring.datasource.schema</code>用于建立表，<code>classpath:sql/schema.sql</code>代表的是会从resources下的sql文件夹中搜索schema.sql文件然后执行</li><li><code>spring.datasource.data</code>用于导入数据，<code>classpath:sql/data.sql</code>代表的是会从resources下的sql文件夹中搜索data.sql文件然后执行</li><li><code>spring.datasource.initialization-mode</code>用于设置sql文件是否执行，内建数据库的文件执行不需要设置，但是其他的需要设置该配置</li></ul><h2 id="去除IDEA中的自动注入Mapper的警告"><a href="#去除IDEA中的自动注入Mapper的警告" class="headerlink" title="去除IDEA中的自动注入Mapper的警告"></a>去除IDEA中的自动注入Mapper的警告</h2><p>不管是直接使用Mybatis还是使用MP，在IDE工程中自动注入Mapper的时候就会出现警告，虽然没什么问题，但是就让人觉得代码好像是有问题似的，对于开发人员而言，有点强迫症的是很难忍受红色波浪线的警告，这里经过测试记录下可以使用的解决方案。</p><ol><li><p>在Mapper的注入时，为<code>@Autowired</code>注解设置<code>required=false</code>，样例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><ul><li>IDEA认为userMapper是个null，给了警告；加上了required = false后，使用 <code>@Autowired</code> 注解不再去校验userMapper是否存在了，因而也就没有警告了</li></ul></li><li><p>在Mapper的注入时，用<code>@Resource</code>替换<code>@Autowired</code>，样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><ul><li>可以在自动注入Mapper的时候使用<code>@Resource</code>注解</li><li><code>@Autowired</code>与<code>@Resource</code>都可以用来装配Bean</li><li><code>@Autowired</code>默认按类型装配（该注解属于Spring），而@Resource（该注解属于J2EE）有name和type两个重要的属性，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型</li></ul></li><li><p>在需要使用Mapper的类上添加注解<code>@RequiredArgsConstructor(onConstructor = @__(@Autowired))</code>，并且设置mapper为<code>final</code>，样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个方法有点不推荐使用，感觉不太爽，而且在类的依赖关系比较复杂的时候可能启动不起来</li></ul></li><li><p>关闭IDEA的警告（不推荐）</p><ul><li>进入 Settings，找到 Inspection，并选择其中的 Spring Core -&gt; Code -&gt; Autowiring for Bean Class,将 Error 改为 Warning</li><li>关闭了IDEA的警告，没有提示反而不能帮助我们写出高质量代码，当然代码的质量还在于开发人员</li><li>关于IDEA的Mapper警告还可以安装插件，但是具体哪个插件没有去尝试</li></ul></li></ol><h2 id="MP的使用"><a href="#MP的使用" class="headerlink" title="MP的使用"></a>MP的使用</h2><h3 id="基础介绍及使用"><a href="#基础介绍及使用" class="headerlink" title="基础介绍及使用"></a>基础介绍及使用</h3><ol><li><p>官方指导文档：<a href="https://mybatis.plus/guide/" target="_blank" rel="noopener">https://mybatis.plus/guide/</a></p></li><li><p>代码托管地址：<a href="https://github.com/baomidou" target="_blank" rel="noopener">https://github.com/baomidou</a></p></li><li><p>MP官方示例：<a href="https://github.com/baomidou/mybatis-plus-samples" target="_blank" rel="noopener">https://github.com/baomidou/mybatis-plus-samples</a></p></li><li><p>MP只是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变，为简化开发、提高效率而生！原理上就是已经封装好了一些crud方法，从官方的介绍也知道MP的使用是依赖于Mybatis的，在项目中没有添加Mybatis的依赖的话会出现错误。</p></li><li><p>首先需要启动好自己的MySQL数据库，然后确保能够连接数据库，不然SpringBoot项目是没法启动的，可以使用Docker启动一个MySQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure><ul><li>还需要建立数据库，比如我创建的是mybatis</li></ul></li><li><p>添加Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;2.1.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>引入MP就不需要再引入Mybatis依赖了，以免冲突</strong></li></ul></li><li><p>在项目中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></li><li><p>按照自动化SQL的说明来建立schema.sql以及data.sql，添加SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建表<code>tb_user</code>对应的Persistent Object（PO）User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@TableName</code>用于映射表名</li><li><code>@TableId</code>用于声明主键，属性type可以用于在PO中的主键没设置时自动生成（依据策略），<code>IdType.ASSIGN_UUID</code>和<code>IdType.ASSIGN_ID</code>推荐使用</li><li><code>@TableField</code>用在非主键对应的属性上，可以指定属性对应的数据库字段名，同时也可以设置字段是否为空等属性</li><li><code>@TableLogic</code> : 用在标记逻辑删除的字段属性上，使用该注解后，Myabtis Plus 所有针对该表的删除都将执行逻辑删除(即更新操作)，而不使用该注解，Mybatis Plus 执行的删除操作为物理删除</li></ul></li><li><p>创建Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承自<code>BaseMapper</code>则可以少写很多SQL语句</li></ul></li><li><p>在启动类上添加扫描Mapper注解，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.mapper"</span>)</span><br></pre></td></tr></table></figure></li><li><p>可以测试是否引入成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span>  UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">"123"</span>);</span><br><span class="line">        user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="引入分页插件（第三方）"><a href="#引入分页插件（第三方）" class="headerlink" title="引入分页插件（第三方）"></a>引入分页插件（第三方）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加分页测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="string">"123"</span>);</span><br><span class="line">    user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    PageHelper.startPage(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach((d)-&gt; System.out.println(d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用MP的分页-版本3-4"><a href="#使用MP的分页-版本3-4" class="headerlink" title="使用MP的分页(版本3.4)"></a>使用MP的分页(版本3.4)</h3><ol><li><p><strong>3.4版本之后</strong>和之前的版本分页插件是不同的，记录时就是喜欢用新的，新版本的成了内置插件，主体插件<code>MybatisPlusInterceptor</code>，包含了多个内部插件：</p><ul><li>分页插件: <code>PaginationInnerInterceptor</code></li><li>多租户插件: <code>TenantLineInnerInterceptor</code></li><li>动态表名插件: <code>DynamicTableNameInnerInterceptor</code></li><li>乐观锁插件: <code>OptimisticLockerInnerInterceptor</code></li><li>sql性能规范插件: <code>IllegalSQLInnerInterceptor</code></li><li>防止全表更新与删除插件: <code>BlockAttackInnerInterceptor</code></li></ul></li><li><p><strong>新提供的插件不得和同功能的旧插件一同使用，之前的插件在新版本里是属于废弃状态的！</strong></p></li><li><p>分页查询分为物理分页和逻辑分页：</p><ul><li>物理分页：相当于执行了limit分页语句，返回部分数据，占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景</li><li>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据，数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合</li></ul></li><li><p>如果内部插件都是使用,需要注意顺序关系,建议使用如下顺序：</p><ol><li>多租户插件,动态表名插件</li><li>分页插件,乐观锁插件</li><li>sql性能规范插件,防止全表更新与删除插件</li></ol><ul><li><strong>对sql进行单次改造的优先放入,不对sql进行改造的最后放入</strong></li></ul></li><li><p>添加配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testselectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">"总条数 ------&gt; "</span> + userIPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"总页数 ------&gt; "</span> +  userIPage.getPages());</span><br><span class="line">    System.out.println(<span class="string">"当前页数 ------&gt; "</span> + userIPage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">"当前每页显示数 ------&gt; "</span> + userIPage.getSize());</span><br><span class="line">    System.out.println(userIPage.getCurrent()); <span class="comment">// 获取当前页</span></span><br><span class="line">    System.out.println(userIPage.getTotal()); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(userIPage.getSize()); <span class="comment">// 获取每页的条数</span></span><br><span class="line">    System.out.println(userIPage.getRecords()); <span class="comment">// 获取每页数据的集合</span></span><br><span class="line">    System.out.println(userIPage.getPages()); <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(userIPage.hasNext()); <span class="comment">// 是否存在下一页</span></span><br><span class="line">    System.out.println(userIPage.hasPrevious()); <span class="comment">// 是否存在上一页</span></span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    <span class="keyword">for</span> (User user : records) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义查询分页（上面的基础下）：</p><ol><li><p>添加Mapper语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">userDefinedPageSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage =userMapper.selectPageUserDefined(page,<span class="string">"%baomidou%"</span>);</span><br><span class="line">    System.out.println(<span class="string">"总条数 ------&gt; "</span> + userIPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"总页数 ------&gt; "</span> +  userIPage.getPages());</span><br><span class="line">    System.out.println(<span class="string">"当前页数 ------&gt; "</span> + userIPage.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">"当前每页显示数 ------&gt; "</span> + userIPage.getSize());</span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    <span class="keyword">for</span> (User user : records) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射关系：</p><ul><li><p>Java中的字段和MySQL字段不一致时，在Mapper中可以使用as字段，但是每个都这样就很繁琐</p></li><li><p>使用注解的方式就可以简化：<code>@Results</code>、<code>@Result</code>以及<code>@ResultMap</code>可以简化SQL语句，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Select("SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"resultMap"</span> , value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>,column = <span class="string">"name_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"age"</span>,column = <span class="string">"age_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"email"</span>,column = <span class="string">"email_real"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"resultMap"</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE name_real like #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined2</span><span class="params">(IPage&lt;?&gt; page, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Results</code>建立多个映射关系，<code>@Result</code>建立单个映射关系，其中<code>property</code>属性对应java代码中定义的名称，<code>column</code>属性对应MySQL字段</li><li><code>@ResultMap</code>可以使用带有id属性的<code>@Results</code></li></ul></li></ul></li></ol></li></ol><h3 id="多表一对一查询以及一对多查询"><a href="#多表一对一查询以及一对多查询" class="headerlink" title="多表一对一查询以及一对多查询"></a>多表一对一查询以及一对多查询</h3><ol><li><p>场景描述：一个员工可以在一家公司任职（员工和公司在该情况下属于一对一），一家公司里有很多的员工（公司和员工在该情况下属于一对多）</p></li><li><p>创建数据库表以及数据（工程的schema.sql以及data.sql中添加即可）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> company;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> employee;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> company</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">    companyName <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">    userName <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">    companyId <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> company;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (<span class="keyword">id</span>, userName, companyId, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">1</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">2</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">1</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">1</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">2</span>, <span class="string">'test5@baomidou.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> company (<span class="keyword">id</span>, companyName) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Apple'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Midea'</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建PO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String userName;</span><br><span class="line">    String email;</span><br><span class="line">    Company company;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String companyName;</span><br><span class="line">    List&lt;Employee&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">com.example.mapper.EmployeeMapper是项目中保存Mapper的路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from employee"</span>)</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"company"</span>,column = <span class="string">"companyId"</span>,one=<span class="meta">@One</span>(select = <span class="string">"com.example.mapper.CompanyMapper.selectById"</span>))</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from employee where companyId=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectByCompanyId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompanyMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from company where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Company <span class="title">selectById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"Select * from company where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"list"</span>,column = <span class="string">"id"</span>,many = <span class="meta">@Many</span>(select = <span class="string">"com.example.mapper.EmployeeMapper.selectByCompanyId"</span>))</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id"</span>)</span><br><span class="line">    <span class="function">Company <span class="title">showCompanyEmployee</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@One联查（一对一）</li><li>@Many联查（一对多）</li><li><strong>不管是一对多还是多对一，还是多对多，只需要知道数据是需要一对一关联还是多个结果映射到1个list，就可以很好的在实体的POJO，Mapper文件中写出来</strong></li><li>要实现多对多，在程序中则是拆分成2个一对多</li></ul></li><li><p>测试一对一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list=employeeMapper.selectAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">[Employee(id=1, userName=Jone, email=test1@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=2, userName=Jack, email=test2@baomidou.com, company=Company(id=2, companyName=Midea, list=null)), Employee(id=3, userName=Tom, email=test3@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=Company(id=1, companyName=Apple, list=null)), Employee(id=5, userName=Billie, email=test5@baomidou.com, company=Company(id=2, companyName=Midea, list=null))]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>测试一对多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CompanyMapper companyMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">one2Many</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Company company= companyMapper.showCompanyEmployee(<span class="number">1</span>);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">        List&lt;Employee&gt; list=company.getList();</span><br><span class="line">        <span class="keyword">for</span>(Employee e:list)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Company(id=1, companyName=Apple, list=[Employee(id=1, userName=Jone, email=test1@baomidou.com, company=null), Employee(id=3, userName=Tom, email=test3@baomidou.com, company=null), Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=null)])</span></span><br><span class="line"><span class="comment">Employee(id=1, userName=Jone, email=test1@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">Employee(id=3, userName=Tom, email=test3@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">Employee(id=4, userName=Sandy, email=test4@baomidou.com, company=null)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Wrapper条件构造器"><a href="#Wrapper条件构造器" class="headerlink" title="Wrapper条件构造器"></a>Wrapper条件构造器</h3><ol><li><p>首先看样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字包含雨并且年龄小于40</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '%雨%' AND age &lt; 40</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.like(<span class="string">"name"</span>, <span class="string">"雨"</span>).lt(<span class="string">"age"</span>, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字包含雨</span></span><br><span class="line"><span class="comment">     * 年龄大于20小于40</span></span><br><span class="line"><span class="comment">     * 邮箱不能为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '%雨%' AND age BETWEEN 20 AND 40 AND email IS NOT NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.like(<span class="string">"name"</span>, <span class="string">"雨"</span>).between(<span class="string">"age"</span>, <span class="number">20</span>, <span class="number">40</span>).isNotNull(<span class="string">"email"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名字为王性</span></span><br><span class="line"><span class="comment">     * 或者年龄大于等于25</span></span><br><span class="line"><span class="comment">     * 按照年龄降序排序，年龄相同按照id升序排序</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '王%' OR age &gt;= 25 ORDER BY age DESC , id ASC</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).or()</span><br><span class="line">                .ge(<span class="string">"age"</span>, <span class="number">25</span>).orderByDesc(<span class="string">"age"</span>).orderByAsc(<span class="string">"id"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询创建时间为2019年2月14</span></span><br><span class="line"><span class="comment">     * 并且上级领导姓王</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE date_format(create_time,'%Y-%m-%d') = '2019-02-14' AND manager_id IN (select id from user where name like '王%')</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperFour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.apply(<span class="string">"date_format(create_time,'%Y-%m-%d') = &#123;0&#125;"</span>, <span class="string">"2019-02-14"</span>)</span><br><span class="line">                .inSql(<span class="string">"manager_id"</span>, <span class="string">"select id from user where name like '王%'"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询王姓</span></span><br><span class="line"><span class="comment">     * 并且年龄小于40或者邮箱不为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE '王%' AND ( age &lt; 40 OR email IS NOT NULL )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperFive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).and(qw -&gt; qw.lt(<span class="string">"age"</span>, <span class="number">40</span>).or().isNotNull(<span class="string">"email"</span>));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询王姓</span></span><br><span class="line"><span class="comment">     * 并且年龄大于20 、年龄小于40、邮箱不能为空</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * WHERE name LIKE ? OR ( age BETWEEN ? AND ? AND email IS NOT NULL )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperSix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>).or(</span><br><span class="line">                qw -&gt; qw.between(<span class="string">"age"</span>, <span class="number">20</span>, <span class="number">40</span>).isNotNull(<span class="string">"email"</span>)</span><br><span class="line">        );</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (年龄小于40或者邮箱不为空) 并且名字姓王</span></span><br><span class="line"><span class="comment">     * WHERE ( age &lt; 40 OR email IS NOT NULL ) AND name LIKE '王%'</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperSeven</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.nested(qw -&gt; qw.lt(<span class="string">"age"</span>, <span class="number">40</span>).or().isNotNull(<span class="string">"email"</span>))</span><br><span class="line">                .likeRight(<span class="string">"name"</span>, <span class="string">"王"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询年龄为30、31、32</span></span><br><span class="line"><span class="comment">     * WHERE age IN (?,?,?)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperEight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.in(<span class="string">"age"</span>, Arrays.asList(<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>));</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一条数据</span></span><br><span class="line"><span class="comment">     * limit 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByWrapperNine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = Wrappers.query();</span><br><span class="line">        wrapper.in(<span class="string">"age"</span>, Arrays.asList(<span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>)).last(<span class="string">"limit 1"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>常用条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">【通用条件：】</span><br><span class="line">【比较大小： ( =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;= )】</span><br><span class="line">    eq(R column, Object val); <span class="comment">// 等价于 =，例: eq("name", "老王") ---&gt; name = '老王'</span></span><br><span class="line">    ne(R column, Object val); <span class="comment">// 等价于 &lt;&gt;，例: ne("name", "老王") ---&gt; name &lt;&gt; '老王'</span></span><br><span class="line">    gt(R column, Object val); <span class="comment">// 等价于 &gt;，例: gt("name", "老王") ---&gt; name &gt; '老王'</span></span><br><span class="line">    ge(R column, Object val); <span class="comment">// 等价于 &gt;=，例: ge("name", "老王") ---&gt; name &gt;= '老王'</span></span><br><span class="line">    lt(R column, Object val); <span class="comment">// 等价于 &lt;，例: lt("name", "老王") ---&gt; name &lt; '老王'</span></span><br><span class="line">    le(R column, Object val); <span class="comment">// 等价于 &lt;=，例: le("name", "老王") ---&gt; name &lt;= '老王'</span></span><br><span class="line">    </span><br><span class="line">【范围：（between、not between、in、not in）】</span><br><span class="line">   between(R column, Object val1, Object val2); <span class="comment">// 等价于 between a and b, 例： between("age", 18, 30) ---&gt; age between 18 and 30</span></span><br><span class="line">   notBetween(R column, Object val1, Object val2); <span class="comment">// 等价于 not between a and b, 例： notBetween("age", 18, 30) ---&gt; age not between 18 and 30</span></span><br><span class="line">   in(R column, Object... values); <span class="comment">// 等价于 字段 IN (v0, v1, ...),例: in("age",&#123;1,2,3&#125;) ---&gt; age in (1,2,3)</span></span><br><span class="line">   notIn(R column, Object... values); <span class="comment">// 等价于 字段 NOT IN (v0, v1, ...), 例: notIn("age",&#123;1,2,3&#125;) ---&gt; age not in (1,2,3)</span></span><br><span class="line">   inSql(R column, Object... values); <span class="comment">// 等价于 字段 IN (sql 语句), 例: inSql("id", "select id from table where id &lt; 3") ---&gt; id in (select id from table where id &lt; 3)</span></span><br><span class="line">   notInSql(R column, Object... values); <span class="comment">// 等价于 字段 NOT IN (sql 语句)</span></span><br><span class="line">   </span><br><span class="line">【模糊匹配：（like）】</span><br><span class="line">    like(R column, Object val); <span class="comment">// 等价于 LIKE '%值%'，例: like("name", "王") ---&gt; name like '%王%'</span></span><br><span class="line">    notLike(R column, Object val); <span class="comment">// 等价于 NOT LIKE '%值%'，例: notLike("name", "王") ---&gt; name not like '%王%'</span></span><br><span class="line">    likeLeft(R column, Object val); <span class="comment">// 等价于 LIKE '%值'，例: likeLeft("name", "王") ---&gt; name like '%王'</span></span><br><span class="line">    likeRight(R column, Object val); <span class="comment">// 等价于 LIKE '值%'，例: likeRight("name", "王") ---&gt; name like '王%'</span></span><br><span class="line">    </span><br><span class="line">【空值比较：（isNull、isNotNull）】</span><br><span class="line">    isNull(R column); <span class="comment">// 等价于 IS NULL，例: isNull("name") ---&gt; name is null</span></span><br><span class="line">    isNotNull(R column); <span class="comment">// 等价于 IS NOT NULL，例: isNotNull("name") ---&gt; name is not null</span></span><br><span class="line"></span><br><span class="line">【分组、排序：（group、having、order）】</span><br><span class="line">    groupBy(R... columns); <span class="comment">// 等价于 GROUP BY 字段, ...， 例: groupBy("id", "name") ---&gt; group by id,name</span></span><br><span class="line">    orderByAsc(R... columns); <span class="comment">// 等价于 ORDER BY 字段, ... ASC， 例: orderByAsc("id", "name") ---&gt; order by id ASC,name ASC</span></span><br><span class="line">    orderByDesc(R... columns); <span class="comment">// 等价于 ORDER BY 字段, ... DESC， 例: orderByDesc("id", "name") ---&gt; order by id DESC,name DESC</span></span><br><span class="line">    having(String sqlHaving, Object... params); <span class="comment">// 等价于 HAVING ( sql语句 )， 例: having("sum(age) &gt; &#123;0&#125;", 11) ---&gt; having sum(age) &gt; 11</span></span><br><span class="line"></span><br><span class="line">【拼接、嵌套 sql：（or、and、nested、apply）】</span><br><span class="line">   or(); <span class="comment">// 等价于 a or b， 例：eq("id",1).or().eq("name","老王") ---&gt; id = 1 or name = '老王'</span></span><br><span class="line">   or(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 or(a or/and b)，or 嵌套。例: or(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; or (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   and(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 and(a or/and b)，and 嵌套。例: and(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; and (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   nested(Consumer&lt;Param&gt; consumer); <span class="comment">// 等价于 (a or/and b)，普通嵌套。例: nested(i -&gt; i.eq("name", "李白").ne("status", "活着")) ---&gt; (name = '李白' and status &lt;&gt; '活着')</span></span><br><span class="line">   apply(String applySql, Object... params); <span class="comment">// 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply("date_format(dateColumn,'%Y-%m-%d') = &#123;0&#125;", "2008-08-08") ---&gt; date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'")</span></span><br><span class="line">   last(String lastSql); <span class="comment">// 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span></span><br><span class="line">   exists(String existsSql); <span class="comment">// 拼接 exists 语句。例: exists("select id from table where age = 1") ---&gt; exists (select id from table where age = 1)</span></span><br><span class="line">   </span><br><span class="line">【QueryWrapper 条件：】</span><br><span class="line">    select(String... sqlSelect); <span class="comment">// 用于定义需要返回的字段。例： select("id", "name", "age") ---&gt; select id, name, age</span></span><br><span class="line">    select(Predicate&lt;TableFieldInfo&gt; predicate); <span class="comment">// Lambda 表达式，过滤需要的字段。</span></span><br><span class="line">    lambda(); <span class="comment">// 返回一个 LambdaQueryWrapper</span></span><br><span class="line">    </span><br><span class="line">【UpdateWrapper 条件：】</span><br><span class="line">    set(String column, Object val); <span class="comment">// 用于设置 set 字段值。例: set("name", null) ---&gt; set name = null</span></span><br><span class="line">    etSql(String sql); <span class="comment">// 用于设置 set 字段值。例: setSql("name = '老李头'") ---&gt; set name = '老李头'</span></span><br><span class="line">    lambda(); <span class="comment">// 返回一个 LambdaUpdateWrapper</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>wapper介绍 ：</p><ol><li>Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示</li><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</li><li>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</li><li>LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li><li>QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</li><li>UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</li></ol></li></ol><h3 id="Service-CRUD"><a href="#Service-CRUD" class="headerlink" title="Service CRUD"></a>Service CRUD</h3><ol><li><p>通用 Service CRUD 封装IService接口，更进一步封装 CRUD 采用 <code>get 查询单行</code>、 <code>remove 删除</code>、 <code>list 查询集合</code>、 <code>page 分页</code> 前缀命名方式来避免混淆 <code>Mapper</code> 层</p></li><li><p>Service的好处是可以省略大量的代码编写，避免重复劳动</p></li><li><p>首先建立一个借口继承<code>IService</code>接口，注意该接口不能放在Mapper的扫描包内，否则会出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个实现类，实现自定义的接口<code>UserService</code>之前要继承<code>IService</code>的实现类<code>ServiceImpl</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *IService:mp提供的接口。ServiceImpl:mp提供的接口实现类。</span></span><br><span class="line"><span class="comment"> *ServiceImpl&lt;BaseMapper&lt;T&gt;, T&gt;是IService 的实现类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后就是在需要的地方注入自定义UserService接口即可，比如测试类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceCRUDTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入（批量）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> batchSize  插入批次数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;User&gt; entityList=<span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">entityList.add(<span class="keyword">new</span> User().setName(<span class="string">"zsf"</span>).setAge(<span class="number">1</span>).setEmail(<span class="string">"zsf@hot.com"</span>));</span><br><span class="line">entityList.add(<span class="keyword">new</span> User().setName(<span class="string">"whh"</span>).setAge(<span class="number">21</span>).setEmail(<span class="string">"whh@tt.com"</span>));</span><br><span class="line">userService.saveBatch(entityList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>各种操作方法可以看官方文档</p></li></ol><h3 id="自定义主键ID生成"><a href="#自定义主键ID生成" class="headerlink" title="自定义主键ID生成"></a>自定义主键ID生成</h3><ol><li><p>自3.3.0开始,默认使用雪花算法+UUID(不含中划线)</p></li><li><p>自定义主键生成主要是重写对应的<code>nextId</code>（对应ASSIGN_ID策略）、<code>nextUUID</code>（对应ASSIGN_UUID策略）方法</p></li><li><p>SpringBOOT注入代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">nextId</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span></span><br><span class="line">      String bizKey = entity.getClass().getName();</span><br><span class="line">        <span class="comment">//根据bizKey调用分布式ID生成</span></span><br><span class="line">        <span class="keyword">long</span> id = ....;</span><br><span class="line">      <span class="comment">//返回生成的id值即可.</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="乐观锁插件OptimisticLockerInnerInterceptor"><a href="#乐观锁插件OptimisticLockerInnerInterceptor" class="headerlink" title="乐观锁插件OptimisticLockerInnerInterceptor"></a>乐观锁插件OptimisticLockerInnerInterceptor</h3><ol><li><p>当要更新一条记录的时候，希望这条记录没有被别人更新，如果记录被更新了，则不会更新记录</p></li><li><p>实现方式：</p><ol><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ol></li><li><p>注解@Version：</p><ol><li><strong>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</strong></li><li>整数类型下 <code>newVersion = oldVersion + 1</code></li><li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法，在 <code>update(entity, wrapper)</code> 方法下,<code>wrapper</code> 不能复用!!!</li><li><strong>对于自定义的方法或者其他的方法，乐观锁会失效</strong></li></ol></li><li><p>乐观锁插件的使用：</p><ol><li><p>修改数据表，数据库增加字段version 设为为int类型，给它一个默认值1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- schema.sql</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>User实体增加相应属性并用@Version注解标识,UserMapper可以同之前的一致:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加乐观锁插件配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后就可以测试了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptimisticLockerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimistic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user1.setName(<span class="string">"test01"</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user2.setName(<span class="string">"test02"</span>);</span><br><span class="line">      </span><br><span class="line">        userMapper.updateById(user2);</span><br><span class="line">        userMapper.updateById(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.先进行了两次查询 假设获取到的version都为1</span></span><br><span class="line"><span class="comment">2.但是先执行的更新user2对象 此时更新后version变为2</span></span><br><span class="line"><span class="comment">3.当执行更新user1时 where条件where version = oldVersion 没有匹配到  因为这时数据库中的version已经为2 那么就更新失败了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h3><ol><li><p>解决了繁琐的配置，让 mybatis 优雅的使用枚举属性</p></li><li><p>使用方式：</p><ol><li><p>使用 @EnumValue 注解枚举属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> GradeEnum &#123;</span><br><span class="line">    PRIMARY(<span class="number">1</span>, <span class="string">"小学"</span>),  SECONDORY(<span class="number">2</span>, <span class="string">"中学"</span>),  HIGH(<span class="number">3</span>, <span class="string">"高中"</span>);</span><br><span class="line">    GradeEnum(<span class="keyword">int</span> code, String descp) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.descp = descp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@EnumValue</span><span class="comment">//标记数据库存的值是code</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举属性，实现 IEnum 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AgeEnum implements IEnum&lt;Integer&gt; &#123;</span><br><span class="line">    ONE(<span class="number">1</span>, <span class="string">"一岁"</span>),</span><br><span class="line">    TWO(<span class="number">2</span>, <span class="string">"二岁"</span>),</span><br><span class="line">    THREE(<span class="number">3</span>, <span class="string">"三岁"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>需要在配置文件中添加配置<code>mybatis-plus.type-enums-package</code>来扫描枚举类</p></li><li><p>示例：</p><ol><li><p>在原来的表基础上添加sex字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- data.sql</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id_real, name_real, age_real, email_real,<span class="keyword">version</span>,sex) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>添加枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SexEnum &#123;</span><br><span class="line"></span><br><span class="line">    MAN(<span class="number">1</span>,<span class="string">"男"</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>,<span class="string">"女"</span>);</span><br><span class="line"><span class="comment">// 注解方式</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer code, String value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"><span class="comment">// 增加的枚举类</span></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加配置（application.yml）:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:sql/schema.sql</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:sql/data.sql</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># sql输出到控制台  方便查看</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.midea.mpoptimistic</span></span><br></pre></td></tr></table></figure></li><li><p>测试枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptimisticLockerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimistic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user1.setName(<span class="string">"test01"</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        user2.setName(<span class="string">"test02"</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//   userMapper.updateById(user2);</span></span><br><span class="line">        user1.setSex(SexEnum.WOMAN);</span><br><span class="line">        userMapper.updateById(user1);</span><br><span class="line">        user1 = userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><ol><li><p>像创建时间、更新时间、创建人、更新人这些都可以自动填充，而无需自己设置</p></li><li><p>原理：</p><ol><li><p>实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.MetaObjectHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"createTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"createTime"</span>, () -&gt; LocalDateTime.now(), LocalDateTime<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"createTime"</span>, LocalDateTime.now()); <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"updateTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"updateTime"</span>, () -&gt; LocalDateTime.now(), LocalDateTime<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"updateTime"</span>, LocalDateTime.now()); <span class="comment">// 也可以使用(3.3.0 该方法有bug)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解填充字段 <code>@TableField(.. fill = FieldFill.INSERT)</code> 生成器策略部分也可以配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意！这里需要标记为填充字段</span></span><br><span class="line">    <span class="meta">@TableField</span>(.. fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> String fillField;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>FieldFill有四种策略：</p><ol><li><code>DEFAULT</code>：默认不处理</li><li><code>INSERT</code>：插入时填充</li><li><code>UPDATE</code>：更新时填充</li><li><code>INSERT_UPDATE</code>：插入或者更新时填充</li></ol></li><li><p>示例：</p><ol><li><p>在原来的表基础上添加update_time、insert_time、author字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加填充配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"insertTime"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"updateTime"</span>, LocalDateTime<span class="class">.<span class="keyword">class</span>, <span class="title">LocalDateTime</span>.<span class="title">now</span>())</span>; <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"author"</span>,<span class="string">"admin"</span>,metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.fillStrategy(metaObject, <span class="string">"updateTime"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"author"</span>,<span class="string">"admin"</span>,metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后测试即可</p></li></ol></li></ol><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><ol><li><p>并非真的删除了，而是在数据库的表中有一个字段来区分是否不可见</p></li><li><p>添加方式：</p><ol><li>通过配置：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span>  <span class="comment"># 全局逻辑删除的实体字段名</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可单独配置某个实体类的软删除字段，在字段上加上<code>@TableLogic</code>注解即可</li></ol></li></ol><p>3.测试：</p><ol><li><p>在sql原来的基础上添加删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user</span><br><span class="line">(</span><br><span class="line">id_real <span class="built_in">varchar</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">name_real <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">age_real <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">email_real <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">int</span>(<span class="number">2</span>) <span class="literal">null</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">update_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">insert_time DATETIME <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">author <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">null</span>,</span><br><span class="line">deleted <span class="built_in">boolean</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span>  <span class="literal">false</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (id_real)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(value=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(value=<span class="string">"id_real"</span>,type= IdType.ASSIGN_UUID)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"name_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"age_real"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"email_real"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    <span class="meta">@TableField</span>(<span class="string">"version"</span>)</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date insertTime;</span><br><span class="line">    <span class="meta">@TableField</span>(fill=FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后就可以测试了</p></li></ol><h3 id="配置文件安全"><a href="#配置文件安全" class="headerlink" title="配置文件安全"></a>配置文件安全</h3><ol><li><p>为了保护数据库配置及数据安全，在一定的程度上控制开发人员流动导致敏感信息泄露</p></li><li><p>配置文件（YML）中加密配置使用<code>mpw:加密内容</code>，不是只有数据库配置才能加密，其他内容也是可以加密的</p></li><li><p>配置了加密内容之后，没法进行测试，可以在正式环境使用该方式</p></li><li><p>配置文件示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">加密配置</span> <span class="attr">mpw:</span> <span class="string">开头紧接加密内容（</span> <span class="string">非数据库配置专用</span> <span class="string">YML</span> <span class="string">中其它配置也是可以使用的</span> <span class="string">）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">mpw:qRhvCwF4GOqjessEB3G+a5okP+uXXr96wcucn2Pev6Bf1oEMZ1gVpPPhdDmjQqoM</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mpw:Hzy5iliJbwDHhjLs1L0j6w==</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">mpw:Xb+EgsyuYRXw7U7sBJjBpA==</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目时可以在项目的idea 设置 Program arguments，服务器可以设置为启动环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--mpw.key=d1104d7c3b616f0b</span><br><span class="line">//比如 java -jar test.jar --mpw.key=d1104d7c3b616f0b</span><br></pre></td></tr></table></figure></li><li><p>AES加密类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AES</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String key = <span class="string">"littleswan123456"</span>; <span class="comment">//长度为16</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String charset = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String transformation = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String algorithm = <span class="string">"AES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encrypt(content, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decrypt(content, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 需要加密的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     加密密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec skey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(), algorithm);</span><br><span class="line">            IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key.getBytes());</span><br><span class="line">            Cipher cipher = Cipher.getInstance(transformation);</span><br><span class="line">            <span class="keyword">byte</span>[] byteContent = content.getBytes(charset);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, skey, iv);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base64().encodeToString(result); <span class="comment">// 加密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// LogUtil.exception(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES（256）解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 待解密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     解密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密之后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            SecretKeySpec skey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(), algorithm);</span><br><span class="line">            IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(key.getBytes());</span><br><span class="line">            Cipher cipher = Cipher.getInstance(transformation);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, skey, iv);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(<span class="keyword">new</span> Base64().decode(content));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result); <span class="comment">// 解密</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//LogUtil.exception(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String s = <span class="string">"hello world"</span>;</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        System.out.println(<span class="string">"加密前："</span> + s);</span><br><span class="line">        String encryptResultStr = encrypt(s);</span><br><span class="line">        System.out.println(<span class="string">"加密后："</span> + encryptResultStr);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        System.out.println(<span class="string">"解密后："</span> + decrypt(encryptResultStr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：加密的key字符串长度一定要是16否则会出问题！</strong></p></li></ol><h3 id="动态表名"><a href="#动态表名" class="headerlink" title="动态表名"></a>动态表名</h3><ol><li><p>在之前的项目开发中使用Mybatis的<code>${}</code>来实现动态表名，非常的不友好：</p><ol><li>在动态sql解析过程，<code>#{}</code>与<code>${}</code>的效果是不一样的， <code>#{ }</code>解析为一个 JDBC 预编译语句（prepared statement）的参数标记符, <code>${ }</code> 仅仅为一个纯碎的 String 替换，在动态 SQL 解析阶段将会进行变量替换</li><li><code>${ }</code>的变量的替换阶段是在动态 SQL 解析阶段，而 <code>#{ }</code>的变量的替换是在 DBMS 中</li><li><code>#{}</code>能够很大程度上防止sql注入，<code>${}</code>无法防止sql注入</li><li><code>${}</code>一般用于传输数据库的表名、字段名等</li></ol></li><li><p>在UserMapper上编写一个创建新表的接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.example.po.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Select("SELECT id_real as id,name_real as name,age_real as age,email_real as email FROM tb_user WHERE email_real LIKE #&#123;state&#125;")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"resultMap"</span> , value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,column = <span class="string">"id_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>,column = <span class="string">"name_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"age"</span>,column = <span class="string">"age_real"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"email"</span>,column = <span class="string">"email_real"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE email_real LIKE #&#123;state&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined</span><span class="params">(IPage&lt;?&gt; page, String state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"resultMap"</span>)</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_user WHERE name_real like #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageUserDefined2</span><span class="params">(IPage&lt;?&gt; page, String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据名称创建一个新的表</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"CREATE TABLE $&#123;tableName&#125;\n"</span> +</span><br><span class="line">            <span class="string">"(\n"</span> +</span><br><span class="line">            <span class="string">"\tid_real varchar (50) NOT NULL COMMENT '主键ID',\n"</span> +</span><br><span class="line">            <span class="string">"\tname_real VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n"</span> +</span><br><span class="line">            <span class="string">"\tage_real INT(11) NULL DEFAULT NULL COMMENT '年龄',\n"</span> +</span><br><span class="line">            <span class="string">"\temail_real VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',\n"</span> +</span><br><span class="line">            <span class="string">"\tPRIMARY KEY (id_real)\n"</span> +</span><br><span class="line">            <span class="string">");"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createTable</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改MP的配置类，引入动态表名插件以及规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; TABLE_NAME = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();<span class="comment">// 线程内部存储类</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        PaginationInnerInterceptor paginationInnerInterceptor=<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL);</span><br><span class="line"></span><br><span class="line">        paginationInnerInterceptor.setOverflow(<span class="keyword">true</span>);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line"></span><br><span class="line">        DynamicTableNameInnerInterceptor dynamicTableNameInnerInterceptor=<span class="keyword">new</span> DynamicTableNameInnerInterceptor();</span><br><span class="line">        Map&lt;String, TableNameHandler&gt; tableNameHandlerMap = <span class="keyword">new</span> HashMap&lt;String, TableNameHandler&gt;();</span><br><span class="line">        tableNameHandlerMap.put(<span class="string">"tb_user"</span>, <span class="keyword">new</span> TableNameHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">dynamicTableName</span><span class="params">(String sql, String tableName)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> TABLE_NAME.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);<span class="comment">// tb_user和User类上的@TableName(value="tb_user")保持一致</span></span><br><span class="line">        dynamicTableNameInnerInterceptor.setTableNameHandlerMap(tableNameHandlerMap);</span><br><span class="line">        interceptor.addInnerInterceptor(dynamicTableNameInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span>  UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateTableAndInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// userMapper.createTable("user_01"); // 创建表user_01</span></span><br><span class="line">        MybatisPlusConfig.TABLE_NAME.set(<span class="string">"user_01"</span>); <span class="comment">// 配置输出到user_01</span></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="string">"46"</span>);</span><br><span class="line">        user.setName(<span class="string">"lll1"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"hello@qq.com"</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">        MybatisPlusConfig.TABLE_NAME.set(<span class="string">"tb_user"</span>);<span class="comment">// 配置输出到tb_user</span></span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><strong>在PO中最好不要使用基础类型，要使用的话也是其对应的封装类型！</strong></li><li><code>MateCloud</code>代码地址：<a href="https://github.com/matevip/matecloud" target="_blank" rel="noopener">https://github.com/matevip/matecloud</a></li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MP的引入使Mybatis的开发变得简单，而且简化了代码的编写，避免了重复劳动问题。当然这部分只涉及了MP的功能的一部分，在后续需要新功能的时候可以考虑再继续深入学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;真的是好久没有写学习日志了，一方面和最近这一个月的状态有关，另一方面也可能上上班太累了吧，每天都有很多杂七杂八的活，然后又重构项目，在这种状
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Consul Quick Start</title>
    <link href="https://wanderros.github.io/2020/08/28/SpringCloud-Consul-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/08/28/SpringCloud-Consul-Quick-Start/</id>
    <published>2020-08-28T01:31:22.000Z</published>
    <updated>2020-10-01T08:52:15.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在微服务架构体系中，服务发现是非常重要的组件。Euerka、Consul、zookeeper、etcd、Nacos等都是注册中心，本主要记录Consul作为注册中心，如何进行服务注册以及进行配置中心配置。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>服务网格（Service Mesh）是用于控制和监控微服务应用程序中的内部服务到服务流量的软件基础结构层。在此模型中，服务网格对于开发人员 (服务所有者) 是透明的， 而运维人员 (平台工程师) 则被授予一套新的工具，以确保可靠性、安全性和可见性；</p></li><li><p>服务网格的由来：对许多公司来说，Docker 和 Kubernetes 这样的工具已经 “解决了部署问题”（Docker 和 Kubernetes 所提供了强大的抽象，并且将服务打包和部署模式过程标准化了），但是还没有解决运行时问题，服务网格为了解决该问题而产生；</p></li><li><p>服务网格的核心：提供统一的全局方法来控制和测量应用或服务之间的所有请求流量（东西流量，East-West Traffic）。在微服务架构中，东西流量在系统运行中发挥着至关重要的作用，该流量是决定应用程序在运行时行为的关键因素。因此标准化此流量的管理将成为标准化应用程序运行时操作的切入口；</p><ul><li>客户端和服务器之间的流量被称为南北流量（South-North Traffic）</li><li>不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量（East-West Traffic）</li><li>东西流量和南北流量的命名源于典型Network Diagrams的习惯，在图表中，通常核心网络组件绘制在顶部（North），客户端绘制在底部（South），而数据中心内的不同服务器水平（East-West）绘制</li></ul></li><li><p>Consul是一个服务网格解决方案，提供了一个功能齐全的控制平面，主要特点是：服务发现、健康检查、键值存储、安全服务通信、多数据中心；</p></li><li><p>Consul工作原理如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b37089065f72f6cfc8cddf0bdf8aa006-45510" alt="Consul工作原理"></p></li><li><p>Consul的使用场景包括服务发现、服务隔离、服务配置：</p><ul><li>服务发现场景中consul作为注册中心，服务地址被注册到consul中以后，可以使用consul提供的dns、http接口查询，consul支持health check</li><li>服务隔离场景中consul支持以服务为单位设置访问策略，能同时支持经典的平台和新兴的平台，支持tls证书分发，service-to-service加密</li><li>服务配置场景中consul提供key-value数据存储功能，并且能将变动迅速地通知出去，借助consul可以实现配置共享，需要读取配置的服务可以从consul中读取到准确的配置信息</li><li>consul可以帮助系统管理者更清晰的了解复杂系统内部的系统架构，运维人员可以将consul看成一种监控软件，也可以看成一种资产（资源）管理系统</li></ul></li><li><p>Consul 和其他注册中心的对比：</p><table><thead><tr><th align="left">Feature</th><th align="left">euerka</th><th align="left">Consul</th><th align="left">zookeeper</th><th align="left">etcd</th></tr></thead><tbody><tr><td align="left">服务健康检查</td><td align="left">可配支持</td><td align="left">服务状态，内存，硬盘等</td><td align="left">(弱)长连接，keepalive</td><td align="left">连接心跳</td></tr><tr><td align="left">多数据中心</td><td align="left">—</td><td align="left">支持</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">kv 存储服务</td><td align="left">—</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">一致性</td><td align="left">—</td><td align="left">raft</td><td align="left">paxos</td><td align="left">raft</td></tr><tr><td align="left">cap</td><td align="left">ap</td><td align="left">ca</td><td align="left">cp</td><td align="left">cp</td></tr><tr><td align="left">使用接口(多语言能力)</td><td align="left">http（sidecar）</td><td align="left">支持 http 和 dns</td><td align="left">客户端</td><td align="left">http/grpc</td></tr><tr><td align="left">watch 支持</td><td align="left">支持 long polling/大部分增量</td><td align="left">全量/支持long polling</td><td align="left">支持</td><td align="left">支持 long polling</td></tr><tr><td align="left">自身监控</td><td align="left">metrics</td><td align="left">metrics</td><td align="left">—</td><td align="left">metrics</td></tr><tr><td align="left">安全</td><td align="left">—</td><td align="left">acl /https</td><td align="left">acl</td><td align="left">https 支持（弱）</td></tr><tr><td align="left">spring cloud 集成</td><td align="left">已支持</td><td align="left">已支持</td><td align="left">已支持</td><td align="left">已支持</td></tr></tbody></table></li><li><p>Consul的优势：</p><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听</li><li>支持健康检查</li><li>支持 http 和 dns 协议接口</li><li>官方提供 web 管理界面</li></ul></li><li><p>SpringCloud官网说明文档：<a href="https://cloud.spring.io/spring-cloud-consul/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-consul/reference/html/</a></p></li><li><p>Eureka闭源了：<a href="https://github.com/Netflix/eureka/wiki" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki</a></p></li></ol><h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><ol><li><p>下载consul的Docker镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull consul</span><br></pre></td></tr></table></figure></li><li><p>创建consul镜像实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name consul -d -p 8500:8500 consul</span><br></pre></td></tr></table></figure></li><li><p>创建一个consul服务端应用程序，包含consul注册依赖（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置（application.yml）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8501</span></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解@EnableDiscoveryClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helle consul"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helle consul2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动服务即可在<a href="http://localhost:8500/ui观察注册情况了，可以修改配置再启动一个服务，效果如下：" target="_blank" rel="noopener">http://localhost:8500/ui观察注册情况了，可以修改配置再启动一个服务，效果如下：</a></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/467b4ded29d20ea4a7bfd30cbac9c5a3-68256" alt="consul中注册服务"></p><ul><li></li></ul></li></ol><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><ol><li><p>创建一个Consul服务消费者，依赖和服务一致；</p></li><li><p>配置文件如下（application.properties）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=customer</span></span><br><span class="line"><span class="string">server.port=8504</span></span><br><span class="line"><span class="string">spring.cloud.consul.host=127.0.0.1</span></span><br><span class="line"><span class="string">spring.cloud.consul.port=8500</span></span><br><span class="line"><span class="comment">#设置不需要注册到 consul 中</span></span><br><span class="line"><span class="string">spring.cloud.consul.discovery.register=true</span></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解@EnableDiscoveryClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulCustomerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulCustomerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建ServiceController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/services"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">services</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discoveryClient.getInstances(<span class="string">"service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从所有服务中选择一个服务（轮询）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/discover"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadBalancer.choose(<span class="string">"service"</span>).getUri().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建服务消费CallHelloController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallHelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/call"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancer.choose(<span class="string">"service"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务地址："</span> + serviceInstance.getUri());</span><br><span class="line">        System.out.println(<span class="string">"服务名称："</span> + serviceInstance.getServiceId());</span><br><span class="line"></span><br><span class="line">        String callServiceResult = <span class="keyword">new</span> RestTemplate().getForObject(serviceInstance.getUri().toString() + <span class="string">"/hello2"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(callServiceResult);</span><br><span class="line">        <span class="keyword">return</span> callServiceResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动服务即可！然后就可以访问<a href="http://localhost:8504/call" target="_blank" rel="noopener">http://localhost:8504/call</a></p></li></ol><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><ol><li><p>创建一个使用consul的配置项目，添加相关依赖（pom.xml）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件如下（application.yml）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>    <span class="comment"># 启用配置中心</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">yaml</span>     <span class="comment"># 指定配置格式为 yaml</span></span><br><span class="line">        <span class="attr">data-key:</span> <span class="string">config_get</span> <span class="comment"># 也就是 consul 中 key/value 中的 key</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">config</span>         <span class="comment"># 可以理解为配置文件所在的最外层目录</span></span><br><span class="line">        <span class="attr">defaultContext:</span> <span class="string">consul-config</span>  <span class="comment"># 可以理解为 mysql_config 的上级目录</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">register:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-get</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li><li><p>启动类添加注解@EnableDiscoveryClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Consul配置中心添加配置，配置如图所示：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/430a649526c7053038b83598cfd17e71-121736" alt="Consul配置"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目即可，然后实时修改Consul配置的Key/Vaule中的配置，会实时配置应用程序，这个和Eureka还不是太一样。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在微服务架构体系中，服务发现是非常重要的组件。Euerka、Consul、zookeeper、etcd、Nacos等都是注册中心，本主要记录
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://wanderros.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot Mybatis Quick Start</title>
    <link href="https://wanderros.github.io/2020/08/27/SpringBoot-Mybatis-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/08/27/SpringBoot-Mybatis-Quick-Start/</id>
    <published>2020-08-27T07:05:11.000Z</published>
    <updated>2020-10-01T08:52:15.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录!Mybatis属于半自动化配置，在项目开发中直接使用了Mybatis，真的是有很长时间去写Mapper中的SQL语句了，真心体会了MybatisPlus的妙处！</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li>MyBatis 主要提供了以下CRUD注解：（增删改查占据了绝大部分的业务操作）<ul><li>@Select</li><li>@Insert</li><li>@Update</li><li>@Delete</li></ul></li><li>Mybatis主要提供这些映射注解：<ul><li>@Results 用于填写结果集的多个字段的映射关系，property表示实体对象的属性名，column表示对应的数据库字段名</li><li>@Result 用于填写结果集的单个字段的映射关系</li><li>@ResultMap 根据ID关联XML里面&lt;resultMap&gt;</li></ul></li><li>MyBatis-3 主要提供了以下CRUD的高级注解：（主要用于动态SQL）<ul><li>@SelectProvider</li><li>@InsertProvider</li><li>@UpdateProvider</li><li>@DeleteProvider</li></ul></li><li>官方中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>mybatis-spring-boot-autoconfigure：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></li><li>mybatis-PageHelper参考代码：<a href="https://github.com/abel533/MyBatis-Spring-Boot" target="_blank" rel="noopener">https://github.com/abel533/MyBatis-Spring-Boot</a></li><li>Mybatis中文网：<a href="http://www.mybatis.cn/" target="_blank" rel="noopener">http://www.mybatis.cn/</a></li></ol><h2 id="分页插件参数说明"><a href="#分页插件参数说明" class="headerlink" title="分页插件参数说明"></a>分页插件参数说明</h2><ol><li><strong>helperDialect</strong>：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。可以指定分页插件使用哪种方言，比如oracle，mysql，mariadb，sqlite，hsqldb，postgresql，db2，sqlserver，informix，h2，sqlserver2012，derby；</li><li><strong>offsetAsPageNum</strong>：该参数对使用 RowBounds 作为分页参数时有效，默认false，当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页；</li><li><strong>rowBoundsWithCount</strong>：该参数对使用 RowBounds 作为分页参数时有效，默认false，当该参数设置为 true 时，使用 RowBounds 分页会进行 count 查询；</li><li><strong>pageSizeZero</strong>：该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果，默认false；</li><li><strong>reasonable</strong>：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页；</li><li><strong>params</strong>：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero；</li><li>其他参数可以看官方文档：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></li></ol><h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><ol><li><p>创建一个SpringBoot项目，添加Mybatis相关依赖，包含分页插件（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件（application.yml）:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置pagehelper参数</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure></li><li><p>在启动类上添加扫描Mapper的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wander.mybatis"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个数据类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  String email;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建数据类的Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**  <span class="doctag">@Results</span>(&#123; //2</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "id", column = "id"), //2</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "name", column = "name"),</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Result</span>(property = "email", column = "email")</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT name FROM user"</span>)</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getAllName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id =#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM user WHERE name = #&#123;name&#125;"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getFromName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO user(id,name, email) VALUES (#&#123;id&#125;, #&#123;name&#125;,#&#123;email&#125;)"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO user(id,name, email) VALUES (#&#123;id&#125;, #&#123;name&#125;,#&#123;email&#125;)"</span>) <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,email)"</span></span><br><span class="line">          + <span class="string">"values                   "</span></span><br><span class="line">          + <span class="string">"(#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;) "</span>)</span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">insertUserByParam</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id,</span></span><br><span class="line"><span class="function">                        @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                        @<span class="title">Param</span><span class="params">(<span class="string">"email"</span>)</span> String email)</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Update</span>(<span class="string">"update user set  "</span></span><br><span class="line">          + <span class="string">"name = #&#123;name&#125;,  "</span></span><br><span class="line">          + <span class="string">"email  = #&#123;email&#125;    "</span></span><br><span class="line">          + <span class="string">"where id = #&#123;id&#125; "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User bean)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"delete from user  "</span></span><br><span class="line">          + <span class="string">"where id = #&#123;id&#125;  "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"delete from user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">deleteUserAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * truncate 返回值为0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Delete</span>(<span class="string">"truncate table user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">truncateUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"select count(*) from user "</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">selectCountUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建测试的控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users= userDao.getAll();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pages/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getpage</span><span class="params">(@PathVariable <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(page,<span class="number">5</span>);</span><br><span class="line">        List&lt;User&gt; users= userDao.getAll();</span><br><span class="line">        PageInfo&lt;User&gt; pageInfo=<span class="keyword">new</span> PageInfo(users,<span class="number">3</span>);</span><br><span class="line">        System.out.println(pageInfo);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pages2/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">getpage2</span><span class="params">(@PathVariable <span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; pager =PageHelper.startPage(page,<span class="number">5</span>);</span><br><span class="line">        List&lt;User&gt; users= userDao.getFromName(<span class="string">"lisi"</span>);</span><br><span class="line">        System.out.println(pager.getTotal());</span><br><span class="line">        System.out.println(pager.size());</span><br><span class="line">        System.out.println(pager.get(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 第一个User对象，参考list，序号0是第一个元素，依此类推</span></span><br><span class="line">        <span class="comment">//pager.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        User user=userDao.findById(id);</span><br><span class="line">        log.info(<span class="string">"username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/insert/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id,String name,String email)</span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        userDao.insertUser(user);</span><br><span class="line">        log.info(<span class="string">"username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/trans"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transactionalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">15</span>);</span><br><span class="line">        user.setName(<span class="string">"lisi15"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"lisi14@email.com"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userDao.insertUser(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"!!!!!"</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"!!!!---成功----username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    user.setName(<span class="string">"lisi"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"lisi@email.com"</span>);</span><br><span class="line">    userDao.insertUser(user);</span><br><span class="line">&#125;<span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"!!!!!"</span>+e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"!!!!---失败----username:&#123;&#125;,useremail:&#123;&#125;"</span>,user.getName(),user.getEmail());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMapUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"lier"</span>);</span><br><span class="line">        map.put(<span class="string">"email"</span>,<span class="string">"email@email.com"</span>);</span><br><span class="line">        userDao.insertUserByMap(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertParamUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.insertUserByParam(<span class="number">6</span>,<span class="string">"you"</span>,<span class="string">"you@email.com"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/name/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">        List&lt;User&gt; users=userDao.getFromName(id);</span><br><span class="line">        users.forEach(user-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">"userid: &#123;&#125; ,useremail: &#123;&#125;"</span>,user.getId(),user.getEmail());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=userDao.selectCountUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"一共有 "</span>+Integer.toString(count)+<span class="string">" 名成员！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletebyId</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i= userDao.deleteUserById(id);</span><br><span class="line">        log.error(<span class="string">"delete user id :&#123;&#125;,return &#123;&#125;"</span>,id,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4</span>);</span><br><span class="line">        user.setName(<span class="string">"Fuck"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"fuck@email.com"</span>);</span><br><span class="line">        <span class="keyword">int</span> i= userDao.updateUser(user);</span><br><span class="line">        log.error(<span class="string">"update user return &#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletebyId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i= userDao.deleteUserAll();</span><br><span class="line">        log.error(<span class="string">"delete user return &#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：分页的函数与要执行的查询SQL语句的函数不能隔离，最好上下行，否则有可能出错</li><li><strong>只有紧跟在PageHelper.startPage方法后的第一个Mybatis的查询（Select）方法会被分页</strong></li><li>对于带有for update的sql，会抛出运行时异常，对于这样的sql建议手动分页，毕竟这样的sql需要重视</li><li><strong>分页插件不支持嵌套结果映射</strong></li></ul></li><li><p>启动项目，然后就可以测试了。</p></li><li><p>建议开发过程中还是引入MP！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Stream Quick Start</title>
    <link href="https://wanderros.github.io/2020/08/27/SpringCloud-Stream-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/08/27/SpringCloud-Stream-Quick-Start/</id>
    <published>2020-08-27T01:29:34.000Z</published>
    <updated>2020-10-01T08:52:15.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SpringCloud Stream是⼀款用于构建消息驱动的微服务应用程序的轻量级框架。目前常见的消息中间件的配置都不太相同，使用也各异，而SpringCloud Stream类似于VFS（虚拟文件系统）一样屏蔽底层差异，提供统一的使用方式来发布订阅消息。本文主要介绍以及使用SpringCloud Stream进行消息的发布与订阅。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>消息中间件主要解决应用解耦、异步消息、流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。不同的中间件其实现方式，内部结构是不一样的，这就导致了SpringCloud Stream的出现。可以使用SpringCloud Stream来整合消息中间件，来降低系统和中间件的耦合性；</p></li><li><p>SpringCloud Stream 为一些开发商的消息中间件产品提供了个性化的自动化配置实现，并引入了发布-订阅、消费组、分区这三个核心概念。通过使用 SpringCloud Stream可以有效简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理！</p></li><li><p>SpringCloud Stream应用模型如下所示：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7589631dca02dc399a94401b1ba974d3-16266" alt="SpringCloud Stream应用模型"></p><ul><li>可以看到SpringCloud Stream在应用和中间件之间通过Binder进行通信，从而避免了不同中间件的差异化</li></ul></li><li><p>SpringCloud Stream提供很多的消息中间件的集成，截止2020年8月支持的消息中间件有：</p><ul><li>RabbitMQ</li><li>Apache Kafka</li><li>Kafka Streams</li><li>Amazon Kinesis</li><li>Google PubSub（合作伙伴维护）</li><li>Solace PubSub+（合作伙伴维护）</li><li>Azure Event Hubs（合作伙伴维护）</li><li>Apache RocketMQ（合作伙伴维护）</li></ul></li><li><p>SpringCloud Stream特性：</p><ul><li>声明式编程模型</li><li>引入多种概念抽象</li><li>支持多种消息中间件</li></ul></li><li><p>在 SpringCloud Stream中，不同的消息中间件统一封装成binder的类型。有了这些binder之后，应用程序只需要跟binder打交道，并不需要去关注底层的细节。如果需要使用到消息中间件独有的特性，SpringCloud Stream 提供了一些配置，可以去做一个定制；</p></li><li><p>注解 @EnableBinding：应用中生产者、消费者与消息系统之间的桥梁，通过注解的方式去定义一个接口；</p></li><li><p>注解 @Input：注解要订阅的消息的方法，返回值类型是SubscribableChannel；</p></li><li><p>注解 @Output：注解要发送消息的方法，返回值类型是MessageChannel。使用MessageChannel 中的 send() 可以发送消息；</p></li><li><p>注解 @SendTo：注解在方法上，会将这个方法的返回值发送到特定的消息队列中去；</p></li><li><p>注解 @StreamListener：注解在方法上，会去消费指定的消息队列；</p></li><li><p>在现实的业务场景中，每一个微服务应用为了实现高可用和负载均衡，都会集群部署，消息可能会被重复消费。为了解决这个问题，SpringCloud Stream提供了消费组，通过配置即可指定组名；</p></li><li><p>SpringCloud Stream官方网址：<a href="https://spring.io/projects/spring-cloud-stream" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-stream</a></p></li></ol><h2 id="重点概念"><a href="#重点概念" class="headerlink" title="重点概念"></a>重点概念</h2><ol><li><strong>group</strong>：组内只有1个实例会消费消息，组内的每个实例都会有机会消费消息（轮询负载均衡）。如果不设置group，则stream会自动为每个实例创建匿名且独立的group，则每个实例都会消费消息；</li><li><strong>destination binder</strong>：与外部消息系统通信的组件，为构造 Binding提供了 2 个方法，分别是 bindConsumer 和 bindProducer ，用于构造生产者和消费者。Binder使SpringCloud Stream应用程序可以灵活地连接到中间件；</li><li><strong>destination binding</strong>：Binding 是连接应用程序跟消息中间件的桥梁，用于消息的消费和生产，由binder创建；</li><li><strong>partition</strong>：一个或多个生产者将数据发送到多个消费者，并确保有共同特征标识的数据由同一个消费者处理。默认是对消息进行hashCode，然后根据分区个数取余，所以对于相同的消息，总会落到同一个消费者上；</li></ol><h1 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h1><h2 id="SCS整合RabbitMQ"><a href="#SCS整合RabbitMQ" class="headerlink" title="SCS整合RabbitMQ"></a>SCS整合RabbitMQ</h2><ol><li><p>启动RabbitMQ的Docker镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbit rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li>账户名：admin</li><li>密码：admin</li><li>Web管理页面端口15672</li></ul></li><li><p>创建一个SCS项目，添加主要依赖如下（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置（application.yml）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>  <span class="comment"># 注意，这里是5672，不是访问界面用的15672，这个是默认值</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 增加该配置，对队列进行分组。保证一个服务只有一台实例接受到消息。</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 监听的消息队列的名称。</span></span><br><span class="line">        <span class="attr">testMessage:</span></span><br><span class="line">          <span class="comment"># 服务的名称</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">order</span></span><br><span class="line">          <span class="comment"># 将发送的对象消息转化为json，方便调试</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure></li><li><p>创建消息接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StreamClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"testMessage"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;  <span class="comment">//用于接受消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(<span class="string">"testMessage"</span>)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;  <span class="comment">//用于发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(<span class="string">"responseMessage"</span>)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">responseinput</span><span class="params">()</span></span>;  <span class="comment">//用于接受消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建消息监听类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(StreamClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">StreamReceiver</span> </span>&#123;  <span class="comment">//消息接受类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(<span class="string">"testMessage"</span>)  <span class="comment">//监听testMessage这个消息队列, StreamClient类中必须定义相应的Input。</span></span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"responseMessage"</span>)  <span class="comment">//该注解会在消息处理完成后，向responseMessage这个队列发送消息。消息内容就是该方法的返回值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiver</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"完成消息处理"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@StreamListener</span>(<span class="string">"responseMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverResponse</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到转发消息："</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建测试控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamClient streamClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//org.springframework.messaging.support.MessageBuilder;</span></span><br><span class="line">        streamClient.output().send(MessageBuilder.withPayload(<span class="string">"it is test message."</span>).build()); <span class="comment">//构建消息并且发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，访问<a href="http://localhost:8080/sendMessage可以看到控制台输出消息，效果如下：" target="_blank" rel="noopener">http://localhost:8080/sendMessage可以看到控制台输出消息，效果如下：</a></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1d8e27d9264c0209c663258e51935f26-171738" alt="消息输出"></p></li><li><p>因为设置了组，因此，该项目的多个实例每次只会有一个消费消息！</p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SCS的使用远不止如此，还有许多高级的特性没有使用，后续有用到再详细学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;SpringCloud Stream是⼀款用于构建消息驱动的微服务应用程序的轻量级框架。目前常见的消息中间件的配置都不太相同，使用也各异，而
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://wanderros.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot管理Docker快速入门</title>
    <link href="https://wanderros.github.io/2020/08/26/SpringBoot%E7%AE%A1%E7%90%86Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://wanderros.github.io/2020/08/26/SpringBoot%E7%AE%A1%E7%90%86Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-26T09:19:22.000Z</published>
    <updated>2020-10-01T08:52:15.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker提供了Remote API，可以通过REST接口进行Docker服务的控制，包括pull/push等所有操作，结果与本机的操作完全一样。使用Docker Remote API可以通过脚本进行Docker集群的自动化控制。在SpringBoot项目中可以通过引入Docker-Java相关的依赖然后就可以进行Docker的管理，本文主要记录如何在Mac上开启Docker Remote API以及使用Docker-Java进行Docker的管理。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ol><li><p>连接服务器、获取信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接docker服务器</span></span><br><span class="line">DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">  .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务器信息</span></span><br><span class="line">Info info = dockerClient.infoCmd().exec();</span><br></pre></td></tr></table></figure></li><li><p>获取服务器上所有的镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务器上的镜像</span></span><br><span class="line">List&lt;Image&gt; images = dockerClient.listImagesCmd().exec();</span><br><span class="line"><span class="keyword">for</span>(Image image : images) &#123;</span><br><span class="line">    System.out.println(image.getRepoTags()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断服务器上是否存在某个镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选服务器上的镜像</span></span><br><span class="line">List&lt;Image&gt; images = dockerClient.listImagesCmd().withImageNameFilter(<span class="string">"busybox"</span>).exec();</span><br><span class="line"><span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"不存在 busybox 镜像。"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"存在 busybox 镜像。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索镜像</span></span><br><span class="line">List&lt;SearchItem&gt; dockerSearch = dockerClient.searchImagesCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line"><span class="keyword">for</span>(SearchItem item : dockerSearch) &#123;</span><br><span class="line">    System.out.println(item.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下载镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dockerClient.pullImageCmd(<span class="string">"busybox:latest"</span>).exec(<span class="keyword">new</span> ResultCallback&lt;PullResponseItem&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Closeable closeable)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始下载!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(PullResponseItem object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实时显示出下载信息</span></span><br><span class="line">        System.out.println(object.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"下载完毕!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除镜像</span></span><br><span class="line">dockerClient.removeImageCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">System.out.println(<span class="string">"删除完毕"</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建、运行容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"httpd:latest"</span>)</span><br><span class="line">        .withName(<span class="string">"hangge_http_server"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">        .withPortBindings(PortBinding.parse(<span class="string">"8080:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">        .withBinds(Bind.parse(<span class="string">"/home/user/htdocs:/usr/local/apache2/htdocs"</span>)) <span class="comment">//目录挂载</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">dockerClient.startContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure></li><li><p>进入容器执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建命令</span></span><br><span class="line">ExecCreateCmdResponse execCreateCmdResponse = dockerClient.execCreateCmd(container1.getId())</span><br><span class="line">        .withAttachStdout(<span class="keyword">true</span>)</span><br><span class="line">        .withAttachStderr(<span class="keyword">true</span>)</span><br><span class="line">        .withCmd(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>) <span class="comment">//当前目录下列出所有文件</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(</span><br><span class="line">        <span class="keyword">new</span> ExecStartResultCallback(System.out, System.err));</span><br></pre></td></tr></table></figure></li><li><p>获取服务器上所有运行的容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有运行的容器</span></span><br><span class="line">List&lt;Container&gt; containers = dockerClient.listContainersCmd().exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取服务器上所有运行结束的容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有运行的容器</span></span><br><span class="line">List&lt;Container&gt; containers = dockerClient.listContainersCmd().withStatusFilter(<span class="string">"exited"</span>).exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取指定名字的容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定名字的容器</span></span><br><span class="line">ListContainersCmd listContainersCmd = dockerClient.listContainersCmd();</span><br><span class="line">listContainersCmd.getFilters().put(<span class="string">"name"</span>, Arrays.asList(<span class="string">"jenkins"</span>));</span><br><span class="line">List&lt;Container&gt; containers = listContainersCmd.exec();</span><br><span class="line"><span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">    System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>停止、重启、暂停/恢复、删除容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止容器</span></span><br><span class="line">dockerClient.stopContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 重启容器</span></span><br><span class="line">dockerClient.restartContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 暂停容器</span></span><br><span class="line">dockerClient.pauseContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 恢复容器</span></span><br><span class="line">dockerClient.unpauseContainerCmd(container1.getId()).exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 删除容器</span></span><br><span class="line">dockerClient.removeContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为 java-docker-mssql 的自定义网络：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CreateNetworkResponse networkResponse = dockerClient.createNetworkCmd()</span><br><span class="line">        .withName(<span class="string">"java-docker-mssql"</span>)</span><br><span class="line">        .withDriver(<span class="string">"bridge"</span>).exec();</span><br></pre></td></tr></table></figure></li><li><p>运行容器的时候使用 java-docker-mssql 这个自定义网络：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"busybox"</span>)</span><br><span class="line">        .withNetworkMode(<span class="string">"java-docker-mssql"</span>) <span class="comment">//设置网络</span></span><br><span class="line">        .exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">dockerClient.startContainerCmd(container1.getId()).exec();</span><br></pre></td></tr></table></figure></li></ol><h2 id="Mac开启Docker-Remote-API"><a href="#Mac开启Docker-Remote-API" class="headerlink" title="Mac开启Docker Remote API"></a>Mac开启Docker Remote API</h2><h3 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h3><ol><li><p>安装socat：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install socat</span><br></pre></td></tr></table></figure></li><li><p>启动socat：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -d TCP-LISTEN:2375,range=127.0.0.1/32,reuseaddr,fork UNIX:/var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>开放全部端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -d TCP-LISTEN:2375,reuseaddr,fork UNIX:/var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:2375/version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">&#123;"Platform":&#123;"Name":"Docker Engine - Community"&#125;,"Components":[&#123;"Name":"Engine","Version":"19.03.12","Details":&#123;"ApiVersion":"1.40","Arch":"amd64","BuildTime":"2020-06-22T15:49:27.000000000+00:00","Experimental":"false","GitCommit":"48a66213fe","GoVersion":"go1.13.10","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"&#125;&#125;,&#123;"Name":"containerd","Version":"v1.2.13","Details":&#123;"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"&#125;&#125;,&#123;"Name":"runc","Version":"1.0.0-rc10","Details":&#123;"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"&#125;&#125;,&#123;"Name":"docker-init","Version":"0.18.0","Details":&#123;"GitCommit":"fec3683"&#125;&#125;],"Version":"19.03.12","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"48a66213fe","GoVersion":"go1.13.10","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","BuildTime":"2020-06-22T15:49:27.000000000+00:00"&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ol><li><p>下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull bobrik/socat</span><br><span class="line">docker pull shipyard/docker-proxy</span><br></pre></td></tr></table></figure></li><li><p>创建镜像bobrik/socat实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 2375:2375 \</span><br><span class="line"> bobrik/socat TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>创建镜像shipyard/docker-proxy实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 2375:2375 -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"> -d -e PORT=2375 shipyard/docker-proxy</span><br></pre></td></tr></table></figure></li><li><p>注意：上述两个镜像只要启动其中的一个即可，功能都是一样的！</p></li><li><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:2375/version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出</span></span><br><span class="line">&#123;"Platform":&#123;"Name":"Docker Engine - Community"&#125;,"Components":[&#123;"Name":"Engine","Version":"19.03.12","Details":&#123;"ApiVersion":"1.40","Arch":"amd64","BuildTime":"2020-06-22T15:49:27.000000000+00:00","Experimental":"false","GitCommit":"48a66213fe","GoVersion":"go1.13.10","KernelVersion":"4.19.76-linuxkit","MinAPIVersion":"1.12","Os":"linux"&#125;&#125;,&#123;"Name":"containerd","Version":"v1.2.13","Details":&#123;"GitCommit":"7ad184331fa3e55e52b890ea95e65ba581ae3429"&#125;&#125;,&#123;"Name":"runc","Version":"1.0.0-rc10","Details":&#123;"GitCommit":"dc9208a3303feef5b3839f4323d9beb36df0a9dd"&#125;&#125;,&#123;"Name":"docker-init","Version":"0.18.0","Details":&#123;"GitCommit":"fec3683"&#125;&#125;],"Version":"19.03.12","ApiVersion":"1.40","MinAPIVersion":"1.12","GitCommit":"48a66213fe","GoVersion":"go1.13.10","Os":"linux","Arch":"amd64","KernelVersion":"4.19.76-linuxkit","BuildTime":"2020-06-22T15:49:27.000000000+00:00"&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><ol><li><p>docker-java 是 Docker的 Java 版本 API；</p></li><li><p>创建一个SpringBoot项目，添加Docker开发相关的依赖（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--docker client begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.docker-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.ws.rs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.ws.rs-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-hk2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--docker client end--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接docker服务器</span></span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取服务器信息</span></span><br><span class="line">        Info info = dockerClient.infoCmd().exec();</span><br><span class="line"></span><br><span class="line">        System.out.println(info.toString());</span><br><span class="line">        <span class="keyword">return</span> info.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/images"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">images</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;Image&gt; images = dockerClient.listImagesCmd().exec();</span><br><span class="line">        <span class="keyword">for</span>(Image image : images) &#123;</span><br><span class="line">            System.out.println(image.getRepoTags()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/exist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagesexist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;Image&gt; images = dockerClient.listImagesCmd().withImageNameFilter(<span class="string">"jenkins"</span>).exec();</span><br><span class="line">        <span class="keyword">if</span> (images.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不存在 jenkins 镜像。"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"存在 jenkins 镜像。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/search"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagesearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        List&lt;SearchItem&gt; dockerSearch = dockerClient.searchImagesCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">        <span class="keyword">for</span>(SearchItem item : dockerSearch) &#123;</span><br><span class="line">            System.out.println(item.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageload</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        dockerClient.pullImageCmd(<span class="string">"busybox:latest"</span>).exec(<span class="keyword">new</span> ResultCallback&lt;PullResponseItem&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Closeable closeable)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(PullResponseItem object)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 实时显示出下载信息</span></span><br><span class="line">                System.out.println(object.getStatus());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"下载完毕!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagedelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line">        <span class="comment">// 删除镜像</span></span><br><span class="line">        dockerClient.removeImageCmd(<span class="string">"busybox"</span>).exec();</span><br><span class="line">        System.out.println(<span class="string">"删除完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/run"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imagerun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">        CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"nginx:latest"</span>)</span><br><span class="line">                .withName(<span class="string">"nginx"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">                .withPortBindings(PortBinding.parse(<span class="string">"8081:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">              <span class="comment">//  .withBinds(Bind.parse("/home/user/htdocs:/usr/local/apache")) //目录挂载</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">        dockerClient.startContainerCmd(container1.getId()).exec();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/exec"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageexec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        CreateContainerResponse container1 = dockerClient.createContainerCmd(<span class="string">"nginx:latest"</span>)</span><br><span class="line">                .withName(<span class="string">"nginx"</span>) <span class="comment">//给容器命名</span></span><br><span class="line">                .withPortBindings(PortBinding.parse(<span class="string">"8081:80"</span>)) <span class="comment">//Apache端口是80，映射到主机的8080端口</span></span><br><span class="line">                <span class="comment">//  .withBinds(Bind.parse("/home/user/htdocs:/usr/local/apache")) //目录挂载</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行容器</span></span><br><span class="line">        dockerClient.startContainerCmd(container1.getId()).exec();</span><br><span class="line"><span class="comment">// 创建命令</span></span><br><span class="line">        ExecCreateCmdResponse execCreateCmdResponse = dockerClient.execCreateCmd(container1.getId())</span><br><span class="line">                .withAttachStdout(<span class="keyword">true</span>)</span><br><span class="line">                .withAttachStderr(<span class="keyword">true</span>)</span><br><span class="line">                .withCmd(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls"</span>) <span class="comment">//当前目录下列出所有文件</span></span><br><span class="line">                .exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">        dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(</span><br><span class="line">                <span class="keyword">new</span> ExecStartResultCallback(System.out, System.err));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有运行的容器</span></span><br><span class="line">        List&lt;Container&gt; containers = dockerClient.listContainersCmd().withStatusFilter(<span class="string">"exited"</span>).exec();</span><br><span class="line">        <span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">            System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/some"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerlistsome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DockerClient dockerClient = DockerClientBuilder</span><br><span class="line">                .getInstance(<span class="string">"tcp://localhost:2375"</span>).build();</span><br><span class="line"></span><br><span class="line">        ListContainersCmd listContainersCmd = dockerClient.listContainersCmd();</span><br><span class="line">        listContainersCmd.getFilters().put(<span class="string">"name"</span>, Arrays.asList(<span class="string">"nginx"</span>));</span><br><span class="line">        List&lt;Container&gt; containers = listContainersCmd.exec();</span><br><span class="line">        <span class="keyword">for</span> (Container container: containers)&#123;</span><br><span class="line">            System.out.println(container.getId() + <span class="string">": "</span> + container.getNames()[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 停止容器</span></span><br><span class="line">            dockerClient.stopContainerCmd(container.getId()).exec();</span><br><span class="line">            dockerClient.removeContainerCmd(container.getId()).exec();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目即可测试！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Docker提供了Remote API，可以通过REST接口进行Docker服务的控制，包括pull/push等所有操作，结果与本机的操作完
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot kafka Quick Start</title>
    <link href="https://wanderros.github.io/2020/08/25/SpringBoot-Kafka-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/08/25/SpringBoot-Kafka-Quick-Start/</id>
    <published>2020-08-25T02:50:45.000Z</published>
    <updated>2020-10-01T08:52:15.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Apache Kafka是一个开源消息系统，由Scala写成。Kafka是一个分布式消息队列：生产者、消费者的功能，提供了类似于JMS的特性，但是在设计实现上完全不同。Kafka对消息保存时根据Topic进行归档，发送消息者统称为Producer，消息接收者统称为Consumer，而且Kafka支持分布式，可以由多个实例组成Kafka集群，每个实例称为broker。本文主要记录如何搭建Kafka环境以及通过SpringBoot构建Kafka消息Producer以及Consumer。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><ol><li>JMS是Java提供的一套技术规范。JMS用来异构系统，缓解系统瓶颈，提高系统的伸缩性并且增强系统用户体验，使得系统模块化和组件化变得可行、灵活；</li><li>消息系统的核心：解耦、异步以及并行；</li><li>JMS消息传输模型：<ul><li>点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）</li><li>发布/订阅模式（一对多，数据生产后，推送给所有订阅者）</li></ul></li><li>消息队列（点对点模式）是当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。生产者发送一条消息到队列中，只有一个消费者能收到；</li><li>发布-订阅消息系统中，消息被持久化到一个Topic中。消费者可以订阅一个或多个Topic，消费者可以消费该Topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除；</li><li>消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这样可以独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束！</li><li>使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷请求而完全崩溃！</li></ol><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ol><li><p>Kafka最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式消息平台；</p></li><li><p>主要应用场景：日志收集以及消息分发。在架构设计中起到解耦、削峰、异步处理的作用：</p><ul><li>构建在系统或应用程序之间可靠获取数据的实时数据流管道</li><li>构建转换或响应数据流的实时流应用程序</li></ul></li><li><p>Kafka核心组件：</p><ul><li>Topic ：消息根据Topic进行归类</li><li>Producer：发送消息者</li><li>Consumer：消息接受者</li><li>broker：每个kafka实例(server)</li><li>Zookeeper：依赖集群保存meta信息</li></ul></li><li><p>Kafka特性：</p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输</li><li>支持Kafka Server间的消息分区，及分布式消费，同时<strong>保证每个partition内的消息顺序传输</strong></li><li>同时支持离线数据处理和实时数据处理</li><li>支持在线水平扩展</li></ul></li><li><p>分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息；</p></li><li><p>Kafka的优点：解耦、冗余（副本）、扩展性、灵活性&amp;峰值处理能力、可恢复性、顺序保证、缓冲、异步通信等！</p></li><li><p>Kafka的用法大致就是Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉取指定Topic的消息，然后进行业务处理。如下图所示，有两个topic，topic 0有两个partition，topic 1有一个partition，三副本备份：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4523a3e43cc57fc934535cc3db429a12-155422" alt="Kafka数据流"></p></li><li><p>当存在多副本的情况下，会尽量把多个副本，分配到不同的broker上。kafka会为partition选出一个leader，之后所有该partition的请求，实际操作的都是leader，然后再同步到其他的follower。当一个broker歇菜后，所有leader在该broker上的partition都会重新选举，选出一个leader；</p></li><li><p>kafka的成功不是技术有多厉害，而是它的业务厉害，能抽象很多的名词术语，已经说明了这款产品设计多么精妙；</p></li><li><p>Kafka官方中文网址：<a href="https://kafka.apachecn.org/" target="_blank" rel="noopener">https://kafka.apachecn.org/</a></p></li></ol><h3 id="常用消息队列工具对比"><a href="#常用消息队列工具对比" class="headerlink" title="常用消息队列工具对比"></a>常用消息队列工具对比</h3><ol><li><strong>RabbitMQ</strong>支持了很多的协议：AMQP，XMPP, SMTP, STOMP。实现了Broker架构，并且对路由、负载均衡以及数据持久化都有很好的支持；</li><li><strong>Redis</strong>是一个基于Key-Value对的NoSQL数据库，支持MQ功能，可以当成一个轻量级的队列服务来使用；</li><li><strong>ZeroMQ</strong>能够实现RabbitMQ不擅长的高级/复杂的队列，开发人员需要自己组合多种技术框架，技术上的复杂度是能够应用成功的挑战；</li><li><strong>ActiveMQ</strong>能够以代理人和点对点的技术实现队列，可以少量代码实现高级应用场景；</li><li><strong>Jafka</strong>在Kafka之上孵化而来的，能够快速持久化、高吞吐、完全分布式系统、自动实现负载均衡；</li><li><strong>MetaQ/RocketMQ</strong> 纯Java实现，发布/订阅消息系统，支持本地事务和XA分布式事务；</li></ol><h2 id="Docker构建Kafka环境"><a href="#Docker构建Kafka环境" class="headerlink" title="Docker构建Kafka环境"></a>Docker构建Kafka环境</h2><ol><li><p>在涉及到Apache Kafka的快速demo时，使用Docker Hub上提供的镜像免去了很多安装配置上的麻烦；</p></li><li><p>下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> zookeeper镜像</span></span><br><span class="line">docker pull zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> kafka镜像</span></span><br><span class="line">docker pull wurstmeister/kafka</span><br><span class="line"><span class="meta">#</span><span class="bash"> kafka管理者镜像</span></span><br><span class="line">docker pull kafkamanager/kafka-manager</span><br></pre></td></tr></table></figure></li><li><p>编写docker-compose启动文件docker-compose.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">kafka2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9093</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafkamanagement:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kafkamanager/kafka-manager</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZK_HOSTS=zookeeper:2181</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br></pre></td></tr></table></figure><ul><li>KAFKA_ADVERTISED_HOST_NAME以及KAFKA_ADVERTISED_PORT是Kafka对外暴露的地址以及端口</li><li>多zookeeper配置文件如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2181:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line">            </span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2182:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2183:2181"</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888;2181</span> <span class="string">server.2=zoo2:2888:3888;2181</span> <span class="string">server.3=zoo3:2888:3888;2181</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">kafka:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9092</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line">    <span class="attr">kafka2:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.3.108</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9093</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">kafkamanagement:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">kafkamanager/kafka-manager</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ZK_HOSTS=zoo1:2181,zoo2:2181,zoo3:2181</span></span><br><span class="line">      <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br></pre></td></tr></table></figure></li><li><p>使用的时候只要在docker-compose.yml目录下键入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compse up -d</span><br></pre></td></tr></table></figure></li><li><p>Kafka管理器界面：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9dc0086c6be668e992dc205683065b33-19922" alt="Kafka管理界面"></p></li><li><p>添加Kafka集群管理，按照下图配置即可，其他的保持默认即可：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/85458fa87843fbf70c87b603d3a78fa8-99994" alt="添加Kafka集群"></p></li><li><p>Brokers展示：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f4b02377c8e40f08a10acb5d283d51ea-86405" alt="Brokers展示"></p></li></ol><h2 id="SpringBoot快速接入Kafka"><a href="#SpringBoot快速接入Kafka" class="headerlink" title="SpringBoot快速接入Kafka"></a>SpringBoot快速接入Kafka</h2><ol><li><p>在项目中添加Kafka依赖(pom.xml)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kafka默认消费者配置 </span></span><br><span class="line"><span class="meta">spring.kafka.consumer.bootstrap-servers</span>=<span class="string">127.0.0.1:9092,127.0.0.1:9093</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.enable-auto-commit</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.auto-offset-reset</span>=<span class="string">earliest</span></span><br><span class="line"><span class="comment">#kafka默认生产者配置</span></span><br><span class="line"><span class="meta">spring.kafka.producer.bootstrap-servers</span>=<span class="string">127.0.0.1:9092,127.0.0.1:9093</span></span><br><span class="line"><span class="meta">spring.kafka.producer.acks</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">spring.kafka.client-id</span>=<span class="string">kafka-producer</span></span><br><span class="line"><span class="meta">spring.kafka.producer.batch-size</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.kafka.producer.key-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="meta">spring.kafka.producer.value-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br></pre></td></tr></table></figure></li><li><p>添加Kafka配置代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.producer.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------producer configuration-----------------**/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">producerConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);</span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, <span class="number">0</span>);</span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, Object&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------kafka template configuration-----------------**/</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"kafkaTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, Object&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KafkaTemplate&lt;String, Object&gt; kafkaTemplate = <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">        <span class="keyword">return</span> kafkaTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建TopicName为topic.wander.initial的Topic并设置分区数为10以及副本数为1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NewTopic <span class="title">initialTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NewTopic(<span class="string">"topic.wander.initial"</span>,<span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String kafkaServers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AdminClient <span class="title">adminClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//配置Kafka实例的连接地址</span></span><br><span class="line">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServers);</span><br><span class="line">        <span class="keyword">return</span> AdminClient.create(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加kafka监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMessageReceiver2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line">    <span class="meta">@KafkaListener</span>(id = <span class="string">"myListener1"</span>,topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"da"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume da "</span>+integerStringConsumerRecords.value());</span><br><span class="line">      <span class="comment">//  kafkaTemplate.send("TEST",integerStringConsumerRecords.value());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(id = <span class="string">"myListener2"</span>,topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"db"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">  <span class="comment">//  @SendTo("DC2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver2</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume db "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"dc"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver3</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume dc "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定监听的topic，当前消费者组id</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topicPartitions =&#123;<span class="meta">@TopicPartition</span>(topic = <span class="string">"d9"</span>, partitions = &#123; <span class="string">"0"</span>&#125;)&#125;,groupId = <span class="string">"group1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryReceiver4</span><span class="params">(ConsumerRecord&lt;Integer, String&gt; integerStringConsumerRecords)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consume d9 "</span>+integerStringConsumerRecords.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在启动类上添加注解@EnableKafka：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafakaproviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(KafakaproviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个控制器添加消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"监听器发送消息!"</span>);</span><br><span class="line">        kafkaTemplate.send(<span class="string">"da"</span>, <span class="string">"1条测试消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目即可。访问<a href="http://localhost:8080/test，然后监听器就能收到消息！" target="_blank" rel="noopener">http://localhost:8080/test，然后监听器就能收到消息！</a></p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Kafka上手是有点难度的，这里只是简单的快速入门，还需要深入学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Apache Kafka是一个开源消息系统，由Scala写成。Kafka是一个分布式消息队列：生产者、消费者的功能，提供了类似于JMS的特性
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://wanderros.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins Quick Start</title>
    <link href="https://wanderros.github.io/2020/08/22/Jenkins-Quick-Start/"/>
    <id>https://wanderros.github.io/2020/08/22/Jenkins-Quick-Start/</id>
    <published>2020-08-22T04:15:48.000Z</published>
    <updated>2020-10-01T08:52:15.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。开发工作流程一般划分为：编码 → 构建 → 集成 → 测试 → 交付 → 部署。整个流程中快速进行编码 → 构建 → 集成这个过程的时候如果使用了像Jenkins这种工具的话，开发的效率以及代码的质量相对来说会提高很多。这部分主要记录如何快速搭建Jenkins环境以及如何使用Jenkins构建SpringBoot项目！</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>持续集成（Continuous Integration，CI）指的是将软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现其中的错误；</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8b4508b66d3c33e06a1632072019daa5-54359" alt="CI"></p></li><li><p>CI的好处：</p><ul><li>快速发现错误，定位错误也比较容易</li><li>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成</li></ul></li><li><p>CI的目的：CI并不能消除Bug，而是让Bug非常容易发现和改正。让产品可以快速迭代，同时还能保持高质量；</p></li><li><p>CI的核心措施：代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成；</p></li><li><p>持续交付（Continuous Delivery，CD）指的是频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的类生产环境中，持续交付优先于整个产品生命周期的软件部署，建立在高水平自动化持续集成之上；</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cc7372ca51780017d8a758454cd19389-97226" alt="CI/CD"></p></li><li><p>CD的目的：不管软件代码怎么更新，软件是随时随地可以交付的、可以进入生产阶段的；</p></li><li><p>CD的前提：能自动化完成测试、构建、部署等步骤；</p></li><li><p>常用的构建工具有：</p><ul><li>Jenkins</li><li>Travis</li><li>Codeship</li><li>Strider</li></ul></li><li><p>Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件/代码的编译、打包、部署）的基于web界面的平台；</p></li><li><p>Jenkins特性：</p><ul><li>基于java语言开发的开源持续集成工具，支持CI，CD</li><li>易于安装部署配置</li><li>消息通知及测试报告</li><li>分布式构建</li><li>文件识别，能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等</li><li>丰富的插件支持</li></ul></li><li><p>Jenkins的中文官网：<a href="https://www.jenkins.io/zh/" target="_blank" rel="noopener">https://www.jenkins.io/zh/</a></p></li></ol><h2 id="Jenkins项目配置基础"><a href="#Jenkins项目配置基础" class="headerlink" title="Jenkins项目配置基础"></a>Jenkins项目配置基础</h2><h3 id="general"><a href="#general" class="headerlink" title="general"></a>general</h3><ol><li>项目名称：创建任务时设置的，用于区分任务；</li><li>描述: 对构建任务的描述；</li><li>丢弃旧的构建：服务器资源是有限的，有时候保存了太多的历史构建，会导致Jenkins速度变慢，并且服务器硬盘资源也会被占满。”保持构建天数” 和”保持构建的最大个数”是可以自定义的，需要根据实际情况确定一个合理的值；</li></ol><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><ol><li>配置代码的存放位置；</li><li>Git: 支持主流的github 和gitlab代码仓库；</li><li>Repository URL：仓库地址；</li><li>Credentials：凭证，可以使用HTTP方式的用户名密码，也可以是RSA文件；</li><li>Branches to build：构建的分支。*/master表示master分支，也可以设置为其他分支；</li><li>源码浏览器：所使用的代码仓库管理工具，如github, gitlab；</li><li>URL：填入上方的仓库地址即可；</li><li>Version: gitlab服务器的版本；</li></ol><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><ol><li>触发远程构建：该选项会提供一个接口，可以用来在代码层面触发构建；</li><li>Build after other projects are built：在其他projects构建后构建；</li><li>Build periodically： 周期性的构建。日程表类似linux crontab书写格式；</li><li>Build when a change is pushed to GitLab：当有更改push到gitlab代码仓库，即触发构建。GitLab的Web Hooks来触发构建；</li><li>Poll SCM：周期性的去检查代码仓库是否发生改动；</li></ol><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><ol><li>Eexcute shell：执行shell命令，该工具是针对linux环境的，windows环境也有对应的工具”Execute Windows batch command”；</li><li>Invoke Ant：Ant是一款java项目构建工具；</li><li>Send files or execute commands over SSH：发送文件到远程主机或执行命令(脚本)！</li></ol><h3 id="构建状态"><a href="#构建状态" class="headerlink" title="构建状态"></a>构建状态</h3><ul><li>Successful蓝色：构建完成，并且被认为是稳定的</li><li>Unstable黄色：构建完成，但被认为是不稳定的</li><li>Failed红色：构建失败</li><li>Disable灰色：构建已禁用</li></ul><h3 id="构建稳定性"><a href="#构建稳定性" class="headerlink" title="构建稳定性"></a>构建稳定性</h3><ul><li>构建稳定性用天气表示</li><li>晴、晴转多云、多云、小雨、雷阵雨</li><li>天气越好表示构建越稳定，反之亦然</li></ul><h2 id="Docker搭建Jenkins环境（版本2-253）"><a href="#Docker搭建Jenkins环境（版本2-253）" class="headerlink" title="Docker搭建Jenkins环境（版本2.253）"></a>Docker搭建Jenkins环境（版本2.253）</h2><ol><li><p>查看DockerHub上有哪些版本的jenkins：<a href="https://hub.docker.com/r/jenkins/jenkins/tags" target="_blank" rel="noopener">https://hub.docker.com/r/jenkins/jenkins/tags</a></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/41fe5ab3e8f42706fc1aae2d46ed6338-224724" alt="Docker Jenkins Tags"></p><ul><li><p>官方支持很多Tag的Jenkins，默认的latest版本支持jdk-8</p></li><li><p>选择jdk11标签的版本以匹配自己的开发环境</p></li><li><p>下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:jdk11</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个工作目录，用于存放docker-compose.yml文件以及jenkins数据，这里创建的目录是/Users/wander/docker/jenkins，并且创建了docker-compose.yml以及jenkins_data目录；</p></li><li><p>编辑docker-compose.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:jdk11</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/Users/wander/docker/jenkins/jenkins_data:/var/jenkins_home"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/Volumes/Data/Java_Env/apache-maven-3.6.3:/usr/apache-maven-3"</span></span><br></pre></td></tr></table></figure><ul><li>挂载了数据目录以及apache-maven-3.6.3目录，其中apache-maven-3.6.3目录是本地的管理工具Maven目录</li><li>jdk11的目录不需要挂载本地的，因为docker环境是jdk11的，可以直接使用</li></ul></li><li><p>启动docker-compose.yml，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compse up -d</span><br></pre></td></tr></table></figure></li><li><p>等待容器启动完成，然后访问<a href="http://localhost:8080：">http://localhost:8080：</a></p><ul><li><p>正在初始化</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d10d9814c067808d1ab4c71f446ba161-104509" alt="jenkins正在初始化"></p></li><li><p>解锁jenkins：在jenkins_data目录下的secrets目录下的initialAdminPassword文件中有管理员原始密码</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0c6dd00343a8c0e0c0e065a7e0a86e40-228990" alt="解锁jenkins"></p></li><li><p>插件安装：（暂时不要点击，修改配置文件，不然下载速度太慢）</p></li></ul></li><li><p>停止容器，然后修改jenkins_data目录下的updates目录下default.json文件：</p><ul><li><p>使用vim编辑文件，替换所有插件的下载url：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/https:\/\/updates.jenkins.io\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br></pre></td></tr></table></figure></li><li><p>使用vim编辑文件，替换所有插件的测试url：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br></pre></td></tr></table></figure></li><li><p>保存，然后重启容器，按照推荐的下载插件</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/744ef30a52f825964a282dc5f686fa8e-129604" alt="下载插件"></p></li></ul></li><li><p>下载完成推荐的插件之后就可以创建账户了：</p><ul><li><p>创建账户：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/1b8647a710930b2c9f6a3946c1258cf2-37993" alt="创建账户"></p></li><li><p>实例配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/906de5691549ee34b2282c54f8a8a6f5-56961" alt="实例配置"></p></li></ul></li><li><p>默认配置好的jenkins还不支持SpringBoot项目的构建，需要一些配置工作：</p><ul><li><p>在插件管理里搜索maven并安装：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/2be284e04d07dd346dc915f68166b8b9-116310" alt="搜索maven"></p></li><li><p>配置工具中的JDK配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f26f84ecd210a2d8df41eb0691c26871-50648" alt="配置JDK"></p></li><li><p>配置工具中的Maven配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6f091f656547425819b9f6ebd189a811-64430" alt="配置Maven"></p></li><li><p>应用并保存配置即可</p></li><li><p>注意：这些地址根据之前的配置进行填，不知道的话可以使用which java等命令确定位置</p></li></ul></li><li><p>Jenkins时区和时间设置，在【系统管理】-【脚本命令行】里运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/119b110cc4382e00fc69b2057e7abaa7-97316" alt="时区设置"></p></li><li><p>安装插件Publish Over SSH：</p><ul><li>在插件安装中搜索Publish Over SSH，然后安装</li><li>该插件是可以通过SSH命令部署服务</li></ul></li></ol><h2 id="Jenkins配置GitHub"><a href="#Jenkins配置GitHub" class="headerlink" title="Jenkins配置GitHub"></a>Jenkins配置GitHub</h2><ol><li><p>在Jenkins的配置中心添加GitHub服务，直接连接测试效果如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e5efc6df291facef4d1bf0cc718d5186-62962" alt="Jenkins连接github测试"></p></li><li><p>创建GitHub凭证，使用Secret text，需要填写Secret，这个要在GitHub中申请：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/34889c4e3f43c57205855568e719b107-50289" alt="jenkins凭证"></p></li><li><p>在GitHub中的【设置】-【开发者设置】-【个人权限令牌】中生成令牌：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/b10bfb98a189a17cc99f0c7acaf6770d-287790" alt="GitHub令牌"></p></li><li><p>配置凭证之后验证：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6b76ac1235eafa984e77973fd4e1be05-53053" alt="验证github"></p></li><li><p>新建一个使用github仓库的maven项目：</p><ul><li><p>创建任务：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/507b34fb9942ad6dc91c8aeeae432748-184147" alt="创建任务"></p></li><li><p>通用配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/99eea970581cf25582e61ac7886a04c7-61426" alt="通用配置"></p></li><li><p>源码管理：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/8f378a9e476ba41087a4d9df31b9656f-63192" alt="源码管理"></p><ul><li>注意添加自己的账户和密码凭证</li></ul></li><li><p>其他配置后续再解释</p></li></ul></li><li><p>配置完成之后保存，然后点击立即构建，然后查看控制台的输出：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/6e1c9292c6b11797a062d1a2956d5ec2-238590" alt="控制台输出"></p></li><li><p>配置GitHub的Webhook自动触发Jenkins项目构建：</p><ul><li><p>全局配置Jenkins的HookURL：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/061c0600516e385088c95124c5adcc58-69411" alt="全局配置Jenkins的HookURL"></p></li><li><p>配置项目的Hook：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/654ba7746fece889a08f0e637fa7a141-74112" alt="配置项目的Hook"></p></li><li><p>在GitHub项目中的设置中配置Webhooks，添加对应的地址即可</p></li><li><p>修改源码之后进行push到master分支之后就会触发构建操作</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c706b18f1f5962bad739aa09567fb566-57781" alt="WebHook构建成功"></p></li></ul></li></ol><h2 id="Publish-Over-SSH配置"><a href="#Publish-Over-SSH配置" class="headerlink" title="Publish Over SSH配置"></a>Publish Over SSH配置</h2><ol><li><p>在搭建环境的时候直接配置下载Publish Over SSH插件了，这里不再进行搜索啥的截图了；</p></li><li><p>进入Jenkins容器中生成ssh秘钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [容器ID] bash</span><br><span class="line"></span><br><span class="line">ssh-keygen  -t rsa  -C &quot;wangsp14@midea.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>在Jenkins的【管理Jenkins】-【Configure System】-【Publish Over SSH】进行配置：</p><ul><li><p>添加私钥：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/506970b21d5e5e2887a2de720a3c58de-166694" alt="将生成的私钥添加到配置中"></p></li><li><p>添加SSH服务器：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/d44be829a2d05e68c41f395ab30e5ccd-80809" alt="添加SSH服务器"></p></li><li><p>注意要将jenkins的公钥拷贝到SSH服务器的authorized_keys文件中</p></li><li><p>可以测试连接状况</p></li></ul></li><li><p>在项目中添加远程部署：</p><ul><li><p>远程部署配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c37c1916d9970e274db68cd9e9dddb48-180606" alt="ssh远程部署配置"></p></li><li><p>Exec Command如下（非通用）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 `ps -ef | grep java | grep web | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">sh /Users/wander/jenkins/start.sh</span><br></pre></td></tr></table></figure></li><li><p>start.sh脚本如下（非通用）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/nohup /usr/<span class="built_in">local</span>/Cellar/openjdk@11/11.0.8/bin/java -jar /Users/wander/jenkins/web-0.0.1-SNAPSHOT.jar 2&gt;file1 1&gt;file1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>为了防止创建新目录，勾选Flatten files选项</p></li></ul></li><li><p>点击构建项目或者使用WebHooks修改源码之后自动构建之后就会将jar包拷贝到SSH服务器中，并且自动运行项目：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/e3d4a70cd820f8d2f0e82d289fb6e55a-15533" alt="SSH服务器文件"></p></li></ol><h2 id="Jenkins配置GitLab"><a href="#Jenkins配置GitLab" class="headerlink" title="Jenkins配置GitLab"></a>Jenkins配置GitLab</h2><ol><li><p>GitLab和Jenkins使用过程：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/219147e7ecd12aa47e99bf923b264f49-48796" alt="GitLab和Jenkins使用过程"></p></li><li><p>搜索并安装GitLab插件：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eeb91ac5e412a1b3b65f52265ab41aac-255425" alt="GitLab插件"></p></li><li><p>在Jenkins的【管理Jenkins】-【Configure System】-【Gitlab】进行配置：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/7a144a4e5cbcb85b19645e2842097add-162382" alt="Gitlab配置"></p></li><li><p>GitLab生成令牌（API Token）：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/49d019c771a4b5df0edeeb235fcc4d6a-411279" alt="GitLab生成令牌"></p></li><li><p>Jenkin添加GitLab凭证：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/4774481ba42a00a11ac5281d83759937-139812" alt="添加GitLab凭证"></p></li><li><p>测试GitLab通信：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/422e2da24994892d28a7bb43d7555879-125410" alt="测试GitLab通信"></p></li><li><p>创建项目和GitHub的过程类似，然后就是源码管理需要添加账户认证：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9aed4656f2c3194c8a7f26b416704900-123421" alt="GitLab账户认证"></p><ul><li>可以添加源码浏览器</li></ul></li><li><p>Webhooks的配置有一个选项，如下所示，过程和GitHub的配置类似，后续过程不再添加说明</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3e8e72189da5cc3df689f6b56f6c10e5-202968" alt="GitLab WebHooks"></p></li><li><p>GitLab完整过程：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c3436be72129e7e64281c9d29db5d963-575892" alt="GitLab完整过程"></p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>默认的邮件通知只支持异常构建，可以添加插件Email Extension Plugin来通知，搜索插件：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/0d7d9848774acef0cecedee8bbd826a5-105431" alt="Email Extension Plugin"></p></li><li><p>破解管理员密码：如果忘记了管理员密码可以修改users目录下的用户子目录下的config.xml，修改其中的passwordHash字段，然后重启：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">passwordHash</span>&gt;</span>#jbcrypt:$2a$10$eJAMBW3qb/ijrFsSxkJnDOB747e0mFWSR03UmLCn96E4N7vL5BYzC<span class="tag">&lt;/<span class="name">passwordHash</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>重启之后的密码为123456，然后重新设置密码即可</li></ul></li><li><p>jenkins思维导图：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3a7c3b3321b3aaed8f1b2397692f06b5-224591" alt="jenkins思维导图"></p></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><strong>Jenkins中文社区：</strong><a href="http://jenkins-zh.cn/" target="_blank" rel="noopener">http://jenkins-zh.cn/</a></li><li><strong>Jenkins中文网：</strong><a href="http://www.jenkins.org.cn/" target="_blank" rel="noopener">http://www.jenkins.org.cn/</a></li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要！CI倡导团队开发成员必须经常集成代码，甚至每天都可能发生多次集成，搭建Jenkins环境就显得尤为重要，这部分只能算是一个起步，还需要不断地阅读与探索！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkin
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://wanderros.github.io/categories/Jenkins/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud服务链路追踪</title>
    <link href="https://wanderros.github.io/2020/08/18/SpringCloud%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://wanderros.github.io/2020/08/18/SpringCloud%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2020-08-18T07:25:04.000Z</published>
    <updated>2020-10-01T08:52:15.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>微服务架构是通过业务来划分服务的，应用之间通过REST调用，对外则暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能。如果链路上任何一个服务出现问题或者网络超时，都会导致接口调用失败，随着业务的不断扩张，服务之间互相调用会越来越复杂，定位出现问题的服务就越来越复杂，因此在微服务架构中非常需要进行链路追踪。在SpringCloud中使用SpringCloud Sleuth来提供分布式系统的链路追踪，本文将进行这部分的内容的记录。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol><li>SpringBoot版本：2.3.3</li><li>SpringCloud版本：Hoxton.SR7</li><li>IDEA版本：2019.02</li><li>Maven版本：3.6.3</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>微服务现状：</p><ul><li>随着业务的发展，单体架构变为微服务架构，并且系统规模也变得越来越大，各微服务间的调用关系也变得越来越复杂</li><li>在微服务的应用中，一个由客户端发起的请求在后端系统中会经过多个不同的微服务调用来协同产生最后的请求结果</li><li>在复杂的微服务架构系统中，几乎每一个前端请求都会形成一个复杂的分布式服务调用链路，在每条链路中任何一个依赖服务出现延迟超时或者错误都有可能引起整个请求最后的失败</li></ul></li><li><p>微服务跟踪(sleuth)在整个分布式系统中能跟踪一个用户请求的过程(包括数据采集，数据传输，数据存储，数据分析，数据可视化)，捕获这些跟踪数据，就能构建微服务的整个调用链的视图！</p></li><li><p>SpringCloud Sleuth特点：</p><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>提供链路追踪</td><td>通过sleuth可以很清楚的看出一个请求经过了哪些服务， 可以方便的理清服务间的调用关系</td></tr><tr><td>性能分析</td><td>通过sleuth可以很方便的看出每个请求的耗时， 分析出哪些服务调用比较耗时，当服务调用的耗时随着请求量的增大而增大时，也可以对服务的扩容提供一定的提醒作用</td></tr><tr><td>数据分析优化链路</td><td>对于频繁地调用一个服务或者并行地调用等， 可以针对业务做一些优化措施</td></tr><tr><td>可视化</td><td>对于程序未捕获的异常，可以在zipkpin界面上看到</td></tr></tbody></table></li><li><p>SpringCloud Sleuth官网文档地址：<a href="https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/#overview" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/#overview</a></p></li><li><p>调用链路：一个请求过来，调用服务，一条链路通过Trace Id唯一标识，Span标识发起的请求，各Span通过parent id关联起来</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/aca290210457f33d8488424c5bcfc16d-84961" alt="调用链路"></p></li><li><p>zipkin的作用：</p><ul><li>zipkin为分布式链路调用监控系统，聚合各业务系统调用延迟数据，达到链路调用监控跟踪</li><li>zipkin通过采集跟踪数据可以帮助开发者深入了解在分布式系统中某一个特定的请求时如何执行的。假如现在有一个用户请求超时，就可以将这个超时的请求调用链展示在界面当中，可以很快度的定位到导致响应很慢的服务究竟是什么，如果对这个服务细节也很很清晰，那么还可以定位是服务中的哪个问题导致超时</li><li>zipkin系统让开发者可通过一个Web前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈</li></ul></li><li><p>zipkin核心数据结构：</p><ul><li>Span——一次链路调用 (可以是RPC，DB等没有特定的限制) 创建一个span，通过一个64位ID标识</li><li>Trace——类似于树结构的Span集合，表示一条调用链路，存在唯一标识traceId</li><li>Annotation——用于定位一个request的开始和结束，cs/sr/ss/cr含有额外的信息<ul><li>cs（Client Start）表示客户端发起请求一个span的开始</li><li>sr（Server Receive）表示服务端收到请求</li><li>ss（Server Send）表示服务端完成处理，并将结果发送给客户端</li><li>cr（Client Received）表示客户端获取到服务端返回信息一个span的结束</li></ul></li><li>BinaryAnnotation——用于提供一些额外信息</li></ul></li></ol><h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><h3 id="ZipkinServer"><a href="#ZipkinServer" class="headerlink" title="ZipkinServer"></a>ZipkinServer</h3><ol><li><p>官方不推荐自己搭建ZipkinServer，推荐下载jar包或者Docker进行ZipkinServer的部署；</p></li><li><p>Jar包下载地址：<code>https://dl.bintray.com/openzipkin/maven/io/zipkin/zipkin-server/</code>，下载带有exec字段的jar包在本地运行。比如下载的zipkin-server-2.21.6-exec.jar；</p></li><li><p>直接运行jar包，默认端口9411：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar</span><br></pre></td></tr></table></figure><ul><li><p>输出信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                  oo</span><br><span class="line">                 oooo</span><br><span class="line">                oooooo</span><br><span class="line">               oooooooo</span><br><span class="line">              oooooooooo</span><br><span class="line">             oooooooooooo</span><br><span class="line">           ooooooo  ooooooo</span><br><span class="line">          oooooo     ooooooo</span><br><span class="line">         oooooo       ooooooo</span><br><span class="line">        oooooo   o  o   oooooo</span><br><span class="line">       oooooo   oo  oo   oooooo</span><br><span class="line">     ooooooo  oooo  oooo  ooooooo</span><br><span class="line">    oooooo   ooooo  ooooo  ooooooo</span><br><span class="line">   oooooo   oooooo  oooooo  ooooooo</span><br><span class="line">  oooooooo      oo  oo      oooooooo</span><br><span class="line">  ooooooooooooo oo  oo ooooooooooooo</span><br><span class="line">      oooooooooooo  oooooooooooo</span><br><span class="line">          oooooooo  oooooooo</span><br><span class="line">              oooo  oooo</span><br><span class="line"></span><br><span class="line">     ________ ____  _  _____ _   _</span><br><span class="line">    |__  /_ _|  _ \| |/ /_ _| \ | |</span><br><span class="line">      / / | || |_) | ' / | ||  \| |</span><br><span class="line">     / /_ | ||  __/| . \ | || |\  |</span><br><span class="line">    |____|___|_|   |_|\_\___|_| \_|</span><br><span class="line"></span><br><span class="line">:: version 2.21.6 :: commit 263c266 ::</span><br><span class="line"></span><br><span class="line">2020-08-18 15:40:54.690  INFO 15507 --- [oss-http-*:9411] c.l.a.s.Server                           : Serving HTTP at /0:0:0:0:0:0:0:0:9411 - http://127.0.0.1:9411/</span><br></pre></td></tr></table></figure></li><li><p>界面如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/72da12603ce4232ac0671714a8f113b5-189879" alt="zipkin界面"></p></li></ul></li><li><p>Jar包运行参数设置：</p><ul><li><p>端口设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar --server.port=8080</span><br></pre></td></tr></table></figure></li><li><p>RabbitMQ配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.21.6-exec.jar --zipkin.collector.rabbitmq.addresses=192.168.3.108:5672 --zipkin.collector.rabbitmq.username=admin --zipkin.collector.rabbitmq.password=admin</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Docker镜像下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openzipkin/zipkin</span><br></pre></td></tr></table></figure></li><li><p>Docker运行zipkin Server镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name zipkin -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure><ul><li><p>带有RabbitMQ参数的运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name zipkin -d -p 9411:9411 -e RABBIT_ADDRESSES=192.168.3.108:5672 -e RABBIT_USER=admin -e RABBIT_PASSWORD=admin openzipkin/zipkin</span><br></pre></td></tr></table></figure></li><li><p>RabbitMQ服务器运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbit rabbitmq:management</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="添加Sleuth以及zipkin支持"><a href="#添加Sleuth以及zipkin支持" class="headerlink" title="添加Sleuth以及zipkin支持"></a>添加Sleuth以及zipkin支持</h3><ol><li><p>在SpringCloud Eureka的基础上添加SpringCloud Sleuth支持，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span> <span class="comment"># 默认0.1</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure></li><li><p>配置完成重启项目之后日志输出类似下面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-18 16:38:56.940 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] c.n.e.r.r.AlwaysMatchInstanceStatusRule  : Returning the default instance status UP for instance 10.157.14.39:configserver</span><br><span class="line">2020-08-18 16:38:56.940 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] c.n.eureka.resources.InstanceResource    : Found (Renew): CONFIGSERVER - 10.157.14.39:configserver; reply status=200</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] o.s.s.w.header.writers.HstsHeaderWriter  : Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@4b54c259</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] o.s.s.w.a.ExceptionTranslationFilter     : Chain processed normally</span><br><span class="line">2020-08-18 16:38:56.941 DEBUG [eureka,0907db10d1a6f2ae,0907db10d1a6f2ae,true] 24816 --- [io-8761-exec-10] s.s.w.c.SecurityContextPersistenceFilter : SecurityContextHolder now cleared, as request processing completed</span><br></pre></td></tr></table></figure></li><li><p>使用consumer接口调用服务，然后刷新zipkin Server接口获得效果如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/cd051ef43402ca06888e53d467fb16b5-132327" alt="Zipkin追踪"></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/18b8261fb3f04e5ac7557732a19c203e-249606" alt="链路详情"></p></li><li><p>配置RabbitMQ的话，需要做如下改动：</p><ul><li><p>添加RabbitMQ依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">sender:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">queue:</span> <span class="string">zipkin</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">direct:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然实现了链路追踪，但是具体的使用还是以实际工程展现优势！仅仅在测试过程中使用并没有感觉到太大的用处，但是这部分的功能应该是非常重要的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;微服务架构是通过业务来划分服务的，应用之间通过REST调用，对外则暴露的一个接口，可能需要很多个服务协同才能完成这个接口功能。如果链路上任何
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://wanderros.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud Hystrix仪表盘</title>
    <link href="https://wanderros.github.io/2020/08/18/SpringCloud-Hystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
    <id>https://wanderros.github.io/2020/08/18/SpringCloud-Hystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/</id>
    <published>2020-08-18T01:28:45.000Z</published>
    <updated>2020-10-01T08:52:15.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在微服务架构中，为了保证微服务的高可用性，防止服务出现故障导致线程阻塞，而出现了熔断器模型，熔断器的状况反应了某个程序的可用性和健壮性。在SpringCloud中经常用到的熔断器组件是Hystrix，Hystrix的基础使用在SpringCloud Eureka Quick Start中已有涉及。Hystrix仪表盘（Hystrix Dashboard）是监控Hystrix的熔断器状况的一个组件，提供了数据监控和友好的图形化展示界面，这部分主要记录如何使用Hystrix Dashboard。</p><hr><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ol><li>SpringBoot版本：2.3.3</li><li>SpringCloud版本：Hoxton.SR7</li><li>IDEA版本：2019.02</li><li>Maven版本：3.6.3</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>Hystrix提供了对于微服务调用状态的监控信息，Hystrix Dashboard提供了断路器的监控面板，可以更好的监控服务和集群的状态。</li><li>功能：Hystrix Dashboard主要用来实时监控Hystrix的各项指标信息。通过Hystrix Dashboard反馈的实时信息，可以快速发现系统中存在的问题！</li><li>访问被@HystrixCommand注解的接口时，都会记录是否成功以及最近10s错误百分比、超时数、熔断数、线程拒绝数、错误请求数、失败/异常数、服务请求频率等相关信息；</li><li>Hystrix DashBoard作为监控软件一般单独开启一个服务，这里注解了环境信息是因为版本会导致一些异常情况的出现，在使用过程中出现的问题都会一一记录下来；</li><li>Hystrix Dashboard共支持三种不同的监控方式：<ul><li>默认的集群监控：<code>http://turbine-hostname:port/turbine.stream</code></li><li>指定的集群监控：<code>http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</code></li><li>单体应用的监控： <code>http://hystrix-app:port/actuator/hystrix.stream</code></li></ul></li></ol><h2 id="动手实操"><a href="#动手实操" class="headerlink" title="动手实操"></a>动手实操</h2><h3 id="DashBoard项目"><a href="#DashBoard项目" class="headerlink" title="DashBoard项目"></a>DashBoard项目</h3><ol><li><p>在SpringCloud Eureka Quick Start项目的基础上创建一个单独的DashBoard项目，添加主要依赖（pom.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hystrix以及hystrix-dashboard依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件application.yml中添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号，默认的已经被占用了</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 微服务名称配置以及eureka 客户端配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dashboard</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># actuator暴露所有端口</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># dashboard允许访问的接口组，必须要添加</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxyStreamAllowList:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.108</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><ul><li>hystrix.dashboard.proxyStreamAllowList必须要添加，否则无法监控到对应服务的状态</li></ul></li><li><p>配置启动类，添加Hystrix DashBoard注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DashboardApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目之后访问<a href="http://localhost:9600/hystrix/，效果如下：" target="_blank" rel="noopener">http://localhost:9600/hystrix/，效果如下：</a></p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/9cb80a912abc3d61266d834c65be8260-135211" alt="Hystrix DashBoard界面"></p></li></ol><h3 id="Consumer项目改造"><a href="#Consumer项目改造" class="headerlink" title="Consumer项目改造"></a>Consumer项目改造</h3><ol><li><p>这个项目是之前的SpringCloud项目中的子项目Consumer，之前已经加了熔断组件Hystrix，因此依赖不需要怎么修改(pom.xml)，主要依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改启动类，添加重要的Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>registrationBean.addUrlMappings(“/actuator/hystrix.stream”);是为了接口地址和DashBoard上的保持一致，可以修改为其他的，比如registrationBean.addUrlMappings(“/hystrix.stream”);</li><li>feign的配置中已经使能了hystrix，因此没有添加注解@EnableHystrix</li></ul></li><li><p>配置文件（application.yml）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span>   <span class="comment">#指定了配置文件的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8080/</span>  <span class="comment">#Config server的uri</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>     <span class="comment">#指定的环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>                      <span class="comment">#指定分支</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="comment"># feign熔断器开关</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span>  <span class="comment">#1秒</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#配置规则 随机</span></span><br><span class="line">    <span class="comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询</span></span><br><span class="line">    <span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment">#请求连接超时时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment">#请求处理的超时时间</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#对所有请求都进行重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment">#切换实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#对当前实例的重试次数</span></span><br></pre></td></tr></table></figure></li><li><p>java文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyFeignClient.java</span></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"myFeignClient"</span>)</span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service"</span>,fallback=ServiceFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceFallback.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFallback</span> <span class="keyword">implements</span> <span class="title">MyFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"err"</span>,<span class="string">"服务崩溃"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyFeignClient myFeignClient;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  @HystrixCommand(fallbackMethod = "getHello")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; ret=myFeignClient.hello();</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>,ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; res=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"msg"</span>,<span class="string">"启动熔断"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监控效果如下：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/f24031e83ae023a0029aac5f927079b7-81636" alt="Hystrix DashBoard监控consumer"></p></li></ol><h3 id="restconsumer项目改造"><a href="#restconsumer项目改造" class="headerlink" title="restconsumer项目改造"></a>restconsumer项目改造</h3><ol><li><p>这个项目是之前的SpringCloud项目中的子项目restconsumer，之前已经加了熔断组件Hystrix，因此依赖不需要怎么修改(pom.xml)，主要依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改启动类，添加重要的Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestconsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestconsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">restconsumer</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">percentage:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></li><li><p>控制器（修改）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"consumerServiceRibbonFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest2"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"consumerServiceRibbonFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering2"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">hello3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"user is registering2"</span>);</span><br><span class="line">        String ret = restTemplate.getForObject(<span class="string">"http://service/"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, ret);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">consumerServiceRibbonFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"res"</span>, <span class="string">"error"</span>);</span><br><span class="line">        res.put(<span class="string">"msg"</span>, <span class="string">"err"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动x项目，然后访问接口<code>http://localhost:9500/rest</code>，<code>http://localhost:9500/rest2</code>，<code>http://localhost:9500/rest3</code>，多次刷新，然后在dashboard项目的界面添加监控<code>http://localhost:9500/actuator/hystrix.stream</code>，效果如下：</p><ul><li><p>注意要启动service等多个服务</p></li><li><p>启动service服务情况：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/259b1e96b606dd83481137bce2ddee83-83349" alt="Hystrix DashBoard监控restconsumer"></p></li><li><p>关闭service服务情况：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/3b77d5450d7e534bab78d4f3f9b6ca14-52511" alt="Hystrix DashBoard监控restconsumer关闭Service"></p></li></ul></li><li><p>页面各部分代表的含义：</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/c779814896174c8c085b41e8fe4e7ffd-108497" alt="各部分含义"></p></li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Hystrix DashBoard能够更方便地观看断路器状态，也能看应用的负载以及健康程度等各种有用信息，几乎实时，虽然只是记录了单体应用的监控，后续如果有需要再学习集群的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在微服务架构中，为了保证微服务的高可用性，防止服务出现故障导致线程阻塞，而出现了熔断器模型，熔断器的状况反应了某个程序的可用性和健壮性。在S
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://wanderros.github.io/categories/SpringCloud/"/>
    
    
  </entry>
  
</feed>
